Module: D:\LEETSRC\490\vpu\console\vpu_main.c
GROUP: 'DGROUP' CONST,CONST2,_DATA,_BSS

Segment: vpu_main_TEXT BYTE USE16 0000C513 bytes
0000                          output_debug_info_:
0000    53                        push        bx 
0001    51                        push        cx 
0002    36 8B 1E 02 00            mov         bx,word ptr ss:_debugfp+0x2 
0007    36 8B 0E 00 00            mov         cx,word ptr ss:_debugfp 
000C    85 DB                     test        bx,bx 
000E    75 04                     jne         L$1 
0010    85 C9                     test        cx,cx 
0012    74 13                     je          L$2 
0014                          L$1:
0014    52                        push        dx 
0015    50                        push        ax 
0016    16                        push        ss 
0017    68 4E 01                  push        offset DGROUP:L$1469 
001A    53                        push        bx 
001B    51                        push        cx 
001C    9A 00 00 00 00            call        fprintf_ 
0021    83 C4 0C                  add         sp,0x000c 
0024    59                        pop         cx 
0025    5B                        pop         bx 
0026    C3                        ret         
0027                          L$2:
0027    9A 00 00 00 00            call        putstr_ 
002C    59                        pop         cx 
002D    5B                        pop         bx 
002E    C3                        ret         
002F                          mvprintw_:
002F    56                        push        si 
0030    57                        push        di 
0031    C8 02 00 00               enter       0x0002,0x00 
0035    89 DE                     mov         si,bx 
0037    36 C5 1E 00 00            lds         bx,dword ptr ss:_cursor_col 
003C    8B 1F                     mov         bx,word ptr [bx] 
003E    89 5E FE                  mov         word ptr -0x2[bp],bx 
0041    36 C5 1E 00 00            lds         bx,dword ptr ss:_cursor_row 
0046    8B 3F                     mov         di,word ptr [bx] 
0048    89 F3                     mov         bx,si 
004A    9A 00 00 00 00            call        print_text_ 
004F    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
0052    89 F8                     mov         ax,di 
0054    9A 00 00 00 00            call        move_ 
0059    E9 74 12                  jmp         L$160 
005C                          init_vpu_:
005C    56                        push        si 
005D    57                        push        di 
005E    C8 04 00 00               enter       0x0004,0x00 
0062    89 C6                     mov         si,ax 
0064    89 56 FE                  mov         word ptr -0x2[bp],dx 
0067    8E DA                     mov         ds,dx 
0069    8D 47 FF                  lea         ax,-0x1[bx] 
006C    C7 44 22 E8 03            mov         word ptr 0x22[si],0x03e8 
0071    89 44 1A                  mov         word ptr 0x1a[si],ax 
0074    89 44 18                  mov         word ptr 0x18[si],ax 
0077    89 44 16                  mov         word ptr 0x16[si],ax 
007A    89 54 2C                  mov         word ptr 0x2c[si],dx 
007D    BA 02 00                  mov         dx,0x0002 
0080    89 D8                     mov         ax,bx 
0082    89 74 2A                  mov         word ptr 0x2a[si],si 
0085    9A 00 00 00 00            call        calloc_ 
008A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
008D    89 44 32                  mov         word ptr 0x32[si],ax 
0090    89 54 34                  mov         word ptr 0x34[si],dx 
0093    BA 02 00                  mov         dx,0x0002 
0096    89 D8                     mov         ax,bx 
0098    9A 00 00 00 00            call        calloc_ 
009D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
00A0    89 44 36                  mov         word ptr 0x36[si],ax 
00A3    89 54 38                  mov         word ptr 0x38[si],dx 
00A6    8B 44 34                  mov         ax,word ptr 0x34[si] 
00A9    8B 54 32                  mov         dx,word ptr 0x32[si] 
00AC    85 C0                     test        ax,ax 
00AE    75 04                     jne         L$3 
00B0    85 D2                     test        dx,dx 
00B2    74 0E                     je          L$4 
00B4                          L$3:
00B4    8B 44 38                  mov         ax,word ptr 0x38[si] 
00B7    8B 54 36                  mov         dx,word ptr 0x36[si] 
00BA    85 C0                     test        ax,ax 
00BC    75 09                     jne         L$5 
00BE    85 D2                     test        dx,dx 
00C0    75 05                     jne         L$5 
00C2                          L$4:
00C2    31 C0                     xor         ax,ax 
00C4    E9 2F 02                  jmp         L$21 
00C7                          L$5:
00C7    8B 44 32                  mov         ax,word ptr 0x32[si] 
00CA    8B 54 34                  mov         dx,word ptr 0x34[si] 
00CD    89 44 2E                  mov         word ptr 0x2e[si],ax 
00D0    8B 46 08                  mov         ax,word ptr 0x8[bp] 
00D3    89 5C 3A                  mov         word ptr 0x3a[si],bx 
00D6    C1 E0 02                  shl         ax,0x02 
00D9    89 54 30                  mov         word ptr 0x30[si],dx 
00DC    9A 00 00 00 00            call        malloc_ 
00E1    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
00E4    89 44 40                  mov         word ptr 0x40[si],ax 
00E7    89 54 42                  mov         word ptr 0x42[si],dx 
00EA    8B 44 42                  mov         ax,word ptr 0x42[si] 
00ED    8B 54 40                  mov         dx,word ptr 0x40[si] 
00F0    85 C0                     test        ax,ax 
00F2    75 04                     jne         L$6 
00F4    85 D2                     test        dx,dx 
00F6    74 CA                     je          L$4 
00F8                          L$6:
00F8    89 D0                     mov         ax,dx 
00FA    89 CF                     mov         di,cx 
00FC    8B 54 42                  mov         dx,word ptr 0x42[si] 
00FF    89 44 3C                  mov         word ptr 0x3c[si],ax 
0102    83 C7 0A                  add         di,0x000a 
0105    89 54 3E                  mov         word ptr 0x3e[si],dx 
0108                          L$7:
0108    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
010B    8B 44 46                  mov         ax,word ptr 0x46[si] 
010E    3B 46 08                  cmp         ax,word ptr 0x8[bp] 
0111    73 4C                     jae         L$9 
0113    BA 01 00                  mov         dx,0x0001 
0116    89 F8                     mov         ax,di 
0118    9A 00 00 00 00            call        calloc_ 
011D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0120    8B 5C 46                  mov         bx,word ptr 0x46[si] 
0123    C1 E3 02                  shl         bx,0x02 
0126    89 5E FC                  mov         word ptr -0x4[bp],bx 
0129    8B 5C 40                  mov         bx,word ptr 0x40[si] 
012C    8E 5C 42                  mov         ds,word ptr 0x42[si] 
012F    03 5E FC                  add         bx,word ptr -0x4[bp] 
0132    89 07                     mov         word ptr [bx],ax 
0134    89 57 02                  mov         word ptr 0x2[bx],dx 
0137    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
013A    8B 44 46                  mov         ax,word ptr 0x46[si] 
013D    8B 5C 40                  mov         bx,word ptr 0x40[si] 
0140    C1 E0 02                  shl         ax,0x02 
0143    8E 5C 42                  mov         ds,word ptr 0x42[si] 
0146    01 C3                     add         bx,ax 
0148    8B 47 02                  mov         ax,word ptr 0x2[bx] 
014B    8B 17                     mov         dx,word ptr [bx] 
014D    85 C0                     test        ax,ax 
014F    75 06                     jne         L$8 
0151    85 D2                     test        dx,dx 
0153    0F 84 6B FF               je          L$4 
0157                          L$8:
0157    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
015A    FF 44 46                  inc         word ptr 0x46[si] 
015D    EB A9                     jmp         L$7 
015F                          L$9:
015F    8B 46 0C                  mov         ax,word ptr 0xc[bp] 
0162    C1 E0 02                  shl         ax,0x02 
0165    89 4C 44                  mov         word ptr 0x44[si],cx 
0168    9A 00 00 00 00            call        malloc_ 
016D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0170    89 44 48                  mov         word ptr 0x48[si],ax 
0173    89 54 4A                  mov         word ptr 0x4a[si],dx 
0176    8B 44 4A                  mov         ax,word ptr 0x4a[si] 
0179    8B 54 48                  mov         dx,word ptr 0x48[si] 
017C    85 C0                     test        ax,ax 
017E    75 06                     jne         L$10 
0180    85 D2                     test        dx,dx 
0182    0F 84 3C FF               je          L$4 
0186                          L$10:
0186    8B 46 0C                  mov         ax,word ptr 0xc[bp] 
0189    89 44 50                  mov         word ptr 0x50[si],ax 
018C                          L$11:
018C    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
018F    8B 44 4E                  mov         ax,word ptr 0x4e[si] 
0192    3B 46 0C                  cmp         ax,word ptr 0xc[bp] 
0195    73 49                     jae         L$13 
0197    BA 01 00                  mov         dx,0x0001 
019A    8B 46 0A                  mov         ax,word ptr 0xa[bp] 
019D    9A 00 00 00 00            call        calloc_ 
01A2    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
01A5    8B 4C 4E                  mov         cx,word ptr 0x4e[si] 
01A8    8B 5C 48                  mov         bx,word ptr 0x48[si] 
01AB    C1 E1 02                  shl         cx,0x02 
01AE    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
01B1    01 CB                     add         bx,cx 
01B3    89 07                     mov         word ptr [bx],ax 
01B5    89 57 02                  mov         word ptr 0x2[bx],dx 
01B8    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
01BB    8B 5C 4E                  mov         bx,word ptr 0x4e[si] 
01BE    8B 44 48                  mov         ax,word ptr 0x48[si] 
01C1    C1 E3 02                  shl         bx,0x02 
01C4    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
01C7    01 C3                     add         bx,ax 
01C9    8B 57 02                  mov         dx,word ptr 0x2[bx] 
01CC    8B 07                     mov         ax,word ptr [bx] 
01CE    85 D2                     test        dx,dx 
01D0    75 06                     jne         L$12 
01D2    85 C0                     test        ax,ax 
01D4    0F 84 EA FE               je          L$4 
01D8                          L$12:
01D8    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
01DB    FF 44 4E                  inc         word ptr 0x4e[si] 
01DE    EB AC                     jmp         L$11 
01E0                          L$13:
01E0    8B 46 0A                  mov         ax,word ptr 0xa[bp] 
01E3    BA 04 00                  mov         dx,0x0004 
01E6    89 44 4C                  mov         word ptr 0x4c[si],ax 
01E9    8B 46 0E                  mov         ax,word ptr 0xe[bp] 
01EC    9A 00 00 00 00            call        calloc_ 
01F1    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
01F4    89 44 5E                  mov         word ptr 0x5e[si],ax 
01F7    89 54 60                  mov         word ptr 0x60[si],dx 
01FA    8B 44 5E                  mov         ax,word ptr 0x5e[si] 
01FD    85 D2                     test        dx,dx 
01FF    75 06                     jne         L$14 
0201    85 C0                     test        ax,ax 
0203    0F 84 BB FE               je          L$4 
0207                          L$14:
0207    8B 46 0E                  mov         ax,word ptr 0xe[bp] 
020A    BA 02 00                  mov         dx,0x0002 
020D    89 44 62                  mov         word ptr 0x62[si],ax 
0210    B8 FF 00                  mov         ax,0x00ff 
0213    9A 00 00 00 00            call        calloc_ 
0218    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
021B    89 44 58                  mov         word ptr 0x58[si],ax 
021E    89 54 5A                  mov         word ptr 0x5a[si],dx 
0221    8B 44 5A                  mov         ax,word ptr 0x5a[si] 
0224    8B 54 58                  mov         dx,word ptr 0x58[si] 
0227    85 C0                     test        ax,ax 
0229    75 06                     jne         L$15 
022B    85 D2                     test        dx,dx 
022D    0F 84 91 FE               je          L$4 
0231                          L$15:
0231    C6 44 5C FF               mov         byte ptr 0x5c[si],0xff 
0235    8B 54 66                  mov         dx,word ptr 0x66[si] 
0238    8B 44 64                  mov         ax,word ptr 0x64[si] 
023B    85 D2                     test        dx,dx 
023D    0F 85 90 00               jne         L$19 
0241    85 C0                     test        ax,ax 
0243    0F 85 8A 00               jne         L$19 
0247    BA 04 00                  mov         dx,0x0004 
024A    B8 3C 00                  mov         ax,0x003c 
024D    9A 00 00 00 00            call        calloc_ 
0252    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0255    89 44 64                  mov         word ptr 0x64[si],ax 
0258    89 54 66                  mov         word ptr 0x66[si],dx 
025B    8B 44 66                  mov         ax,word ptr 0x66[si] 
025E    8B 54 64                  mov         dx,word ptr 0x64[si] 
0261    85 C0                     test        ax,ax 
0263    75 06                     jne         L$16 
0265    85 D2                     test        dx,dx 
0267    0F 84 57 FE               je          L$4 
026B                          L$16:
026B    BF 3C 00                  mov         di,0x003c 
026E    B9 F0 00                  mov         cx,0x00f0 
0271                          L$17:
0271    4F                        dec         di 
0272    83 E9 04                  sub         cx,0x0004 
0275    83 FF FF                  cmp         di,0xffff 
0278    74 33                     je          L$18 
027A    BA 2C 00                  mov         dx,0x002c 
027D    B8 01 00                  mov         ax,0x0001 
0280    9A 00 00 00 00            call        calloc_ 
0285    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0288    8B 5C 64                  mov         bx,word ptr 0x64[si] 
028B    8E 5C 66                  mov         ds,word ptr 0x66[si] 
028E    01 CB                     add         bx,cx 
0290    89 07                     mov         word ptr [bx],ax 
0292    89 57 02                  mov         word ptr 0x2[bx],dx 
0295    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0298    C5 5C 64                  lds         bx,dword ptr 0x64[si] 
029B    01 CB                     add         bx,cx 
029D    8B 47 02                  mov         ax,word ptr 0x2[bx] 
02A0    8B 17                     mov         dx,word ptr [bx] 
02A2    85 C0                     test        ax,ax 
02A4    75 CB                     jne         L$17 
02A6    85 D2                     test        dx,dx 
02A8    75 C7                     jne         L$17 
02AA    E9 15 FE                  jmp         L$4 
02AD                          L$18:
02AD    BA 04 00                  mov         dx,0x0004 
02B0    B8 0A 00                  mov         ax,0x000a 
02B3    9A 00 00 00 00            call        calloc_ 
02B8    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
02BB    89 44 68                  mov         word ptr 0x68[si],ax 
02BE    89 54 6A                  mov         word ptr 0x6a[si],dx 
02C1    8B 44 6A                  mov         ax,word ptr 0x6a[si] 
02C4    8B 54 68                  mov         dx,word ptr 0x68[si] 
02C7    85 C0                     test        ax,ax 
02C9    75 06                     jne         L$19 
02CB    85 D2                     test        dx,dx 
02CD    0F 84 F1 FD               je          L$4 
02D1                          L$19:
02D1    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
02D4    80 BC 1D 01 00            cmp         byte ptr 0x11d[si],0x00 
02D9    75 0E                     jne         L$20 
02DB    BB 50 00                  mov         bx,0x0050 
02DE    8D 84 1D 01               lea         ax,0x11d[si] 
02E2    8C DA                     mov         dx,ds 
02E4    9A 00 00 00 00            call        getcwd_ 
02E9                          L$20:
02E9    36 A0 00 00               mov         al,byte ptr ss:_DEFAULT_PRIVS 
02ED    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
02F0    88 44 24                  mov         byte ptr 0x24[si],al 
02F3    B8 01 00                  mov         ax,0x0001 
02F6                          L$21:
02F6    C9                        leave       
02F7    5F                        pop         di 
02F8    5E                        pop         si 
02F9    C2 08 00                  ret         0x0008 
02FC                          spawn_new_vpu_:
02FC    53                        push        bx 
02FD    56                        push        si 
02FE    55                        push        bp 
02FF    31 ED                     xor         bp,bp 
0301    FF 86 00 00               inc         word ptr _vpu_count[bp] 
0305    36 A1 00 00               mov         ax,word ptr ss:_vpu_count 
0309    C1 E0 02                  shl         ax,0x02 
030C    83 BE 00 00 01            cmp         word ptr _vpu_count[bp],0x0001 
0311    75 20                     jne         L$24 
0313    9A 00 00 00 00            call        malloc_ 
0318    36 A3 00 00               mov         word ptr ss:_vpus,ax 
031C    89 96 02 00               mov         word ptr _vpus+0x2[bp],dx 
0320    85 D2                     test        dx,dx 
0322    75 30                     jne         L$26 
0324    85 C0                     test        ax,ax 
0326    75 2C                     jne         L$26 
0328                          L$22:
0328    FF 8E 00 00               dec         word ptr _vpu_count[bp] 
032C                          L$23:
032C    31 C0                     xor         ax,ax 
032E    31 D2                     xor         dx,dx 
0330    E9 CC 00                  jmp         L$29 
0333                          L$24:
0333    8B B6 00 00               mov         si,word ptr _vpus[bp] 
0337    8B 96 02 00               mov         dx,word ptr _vpus+0x2[bp] 
033B    89 C3                     mov         bx,ax 
033D    89 F0                     mov         ax,si 
033F    9A 00 00 00 00            call        realloc_ 
0344    85 D2                     test        dx,dx 
0346    75 04                     jne         L$25 
0348    85 C0                     test        ax,ax 
034A    74 DC                     je          L$22 
034C                          L$25:
034C    36 A3 00 00               mov         word ptr ss:_vpus,ax 
0350    89 96 02 00               mov         word ptr _vpus+0x2[bp],dx 
0354                          L$26:
0354    BA 90 01                  mov         dx,0x0190 
0357    B8 01 00                  mov         ax,0x0001 
035A    9A 00 00 00 00            call        calloc_ 
035F    8B B6 00 00               mov         si,word ptr _vpu_count[bp] 
0363    8B 9E 00 00               mov         bx,word ptr _vpus[bp] 
0367    C1 E6 02                  shl         si,0x02 
036A    8E 9E 02 00               mov         ds,word ptr _vpus+0x2[bp] 
036E    01 F3                     add         bx,si 
0370    89 47 FC                  mov         word ptr -0x4[bx],ax 
0373    89 57 FE                  mov         word ptr -0x2[bx],dx 
0376    8B 47 FC                  mov         ax,word ptr -0x4[bx] 
0379    85 D2                     test        dx,dx 
037B    75 3C                     jne         L$28 
037D    85 C0                     test        ax,ax 
037F    75 38                     jne         L$28 
0381    FF 8E 00 00               dec         word ptr _vpu_count[bp] 
0385    36 A1 00 00               mov         ax,word ptr ss:_vpu_count 
0389    85 C0                     test        ax,ax 
038B    74 1C                     je          L$27 
038D    8B 96 02 00               mov         dx,word ptr _vpus+0x2[bp] 
0391    89 C3                     mov         bx,ax 
0393    36 A1 00 00               mov         ax,word ptr ss:_vpus 
0397    C1 E3 02                  shl         bx,0x02 
039A    9A 00 00 00 00            call        realloc_ 
039F    36 A3 00 00               mov         word ptr ss:_vpus,ax 
03A3    89 96 02 00               mov         word ptr _vpus+0x2[bp],dx 
03A7    EB 83                     jmp         L$23 
03A9                          L$27:
03A9    36 A1 00 00               mov         ax,word ptr ss:_vpus 
03AD    8B 96 02 00               mov         dx,word ptr _vpus+0x2[bp] 
03B1    9A 00 00 00 00            call        free_ 
03B6    E9 73 FF                  jmp         L$23 
03B9                          L$28:
03B9    FF 86 00 00               inc         word ptr _pid_counter[bp] 
03BD    36 A1 00 00               mov         ax,word ptr ss:_pid_counter 
03C1    E8 00 00                  call        pid_to_vpu_ 
03C4    85 D2                     test        dx,dx 
03C6    75 F1                     jne         L$28 
03C8    85 C0                     test        ax,ax 
03CA    75 ED                     jne         L$28 
03CC    36 A1 00 00               mov         ax,word ptr ss:_vpu_count 
03D0    8B 9E 00 00               mov         bx,word ptr _vpus[bp] 
03D4    C1 E0 02                  shl         ax,0x02 
03D7    8E 9E 02 00               mov         ds,word ptr _vpus+0x2[bp] 
03DB    01 C3                     add         bx,ax 
03DD    C5 77 FC                  lds         si,dword ptr -0x4[bx] 
03E0    36 A1 00 00               mov         ax,word ptr ss:_pid_counter 
03E4    89 84 88 01               mov         word ptr 0x188[si],ax 
03E8    8B 9E 00 00               mov         bx,word ptr _vpu_count[bp] 
03EC    36 A1 00 00               mov         ax,word ptr ss:_vpus 
03F0    C1 E3 02                  shl         bx,0x02 
03F3    8E 9E 02 00               mov         ds,word ptr _vpus+0x2[bp] 
03F7    01 C3                     add         bx,ax 
03F9    8B 47 FC                  mov         ax,word ptr -0x4[bx] 
03FC    8B 57 FE                  mov         dx,word ptr -0x2[bx] 
03FF                          L$29:
03FF    5D                        pop         bp 
0400    5E                        pop         si 
0401    5B                        pop         bx 
0402    C3                        ret         
0403                          delete_child_:
0403    53                        push        bx 
0404    51                        push        cx 
0405    56                        push        si 
0406    57                        push        di 
0407    C8 04 00 00               enter       0x0004,0x00 
040B    89 C3                     mov         bx,ax 
040D    89 56 FC                  mov         word ptr -0x4[bp],dx 
0410    8E DA                     mov         ds,dx 
0412    8B 87 76 01               mov         ax,word ptr 0x176[bx] 
0416    8B B7 74 01               mov         si,word ptr 0x174[bx] 
041A    8E D8                     mov         ds,ax 
041C    8B 94 7E 01               mov         dx,word ptr 0x17e[si] 
0420    89 46 FE                  mov         word ptr -0x2[bp],ax 
0423    89 D7                     mov         di,dx 
0425    89 D0                     mov         ax,dx 
0427    4F                        dec         di 
0428    89 BC 7E 01               mov         word ptr 0x17e[si],di 
042C    75 1B                     jne         L$30 
042E    8B 84 7A 01               mov         ax,word ptr 0x17a[si] 
0432    8B 94 7C 01               mov         dx,word ptr 0x17c[si] 
0436    9A 00 00 00 00            call        free_ 
043B    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
043E    89 BC 7A 01               mov         word ptr 0x17a[si],di 
0442    89 BC 7C 01               mov         word ptr 0x17c[si],di 
	     0447		; The label referred to here is an undefined location
0446    E9 EA A2                  jmp         0xffffa733 
0449                          L$30:
0449    C1 E2 02                  shl         dx,0x02 
044C                          L$31:
044C    48                        dec         ax 
044D    83 EA 04                  sub         dx,0x0004 
0450    3D FF FF                  cmp         ax,0xffff 
0453    74 17                     je          L$32 
0455    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0458    C5 BC 7A 01               lds         di,dword ptr 0x17a[si] 
045C    01 D7                     add         di,dx 
045E    8B 0D                     mov         cx,word ptr [di] 
0460    8B 7D 02                  mov         di,word ptr 0x2[di] 
0463    3B 7E FC                  cmp         di,word ptr -0x4[bp] 
0466    75 E4                     jne         L$31 
0468    39 CB                     cmp         bx,cx 
046A    75 E0                     jne         L$31 
046C                          L$32:
046C    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
046F    8B 94 7E 01               mov         dx,word ptr 0x17e[si] 
0473    8B 9C 7A 01               mov         bx,word ptr 0x17a[si] 
0477    29 C2                     sub         dx,ax 
0479    C1 E0 02                  shl         ax,0x02 
047C    C1 E2 02                  shl         dx,0x02 
047F    89 C7                     mov         di,ax 
0481    52                        push        dx 
0482    83 C7 04                  add         di,0x0004 
0485    8B 94 7C 01               mov         dx,word ptr 0x17c[si] 
0489    01 D8                     add         ax,bx 
048B    01 DF                     add         di,bx 
048D    89 D1                     mov         cx,dx 
048F    89 FB                     mov         bx,di 
0491    9A 00 00 00 00            call        memmove_ 
0496    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0499    8B 9C 7E 01               mov         bx,word ptr 0x17e[si] 
049D    8B 84 7A 01               mov         ax,word ptr 0x17a[si] 
04A1    8B 94 7C 01               mov         dx,word ptr 0x17c[si] 
04A5    C1 E3 02                  shl         bx,0x02 
04A8    9A 00 00 00 00            call        realloc_ 
04AD    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
04B0    89 84 7A 01               mov         word ptr 0x17a[si],ax 
04B4    89 94 7C 01               mov         word ptr 0x17c[si],dx 
	     04B9		; The label referred to here is an undefined location
04B8    E9 78 A2                  jmp         0xffffa733 
04BB                          vpu_shares_args_:
04BB    53                        push        bx 
04BC    51                        push        cx 
04BD    56                        push        si 
04BE    57                        push        di 
04BF    C8 04 00 00               enter       0x0004,0x00 
04C3    89 C6                     mov         si,ax 
04C5    89 56 FE                  mov         word ptr -0x2[bp],dx 
04C8    36 A1 00 00               mov         ax,word ptr ss:_vpu_count 
04CC    89 C2                     mov         dx,ax 
04CE    8E 46 FE                  mov         es,word ptr -0x2[bp] 
04D1    C1 E2 02                  shl         dx,0x02 
04D4                          L$33:
04D4    48                        dec         ax 
04D5    83 EA 04                  sub         dx,0x0004 
04D8    3D FF FF                  cmp         ax,0xffff 
04DB    74 3B                     je          L$36 
04DD    36 C5 1E 00 00            lds         bx,dword ptr ss:_vpus 
04E2    01 D3                     add         bx,dx 
04E4    8B 4F 02                  mov         cx,word ptr 0x2[bx] 
04E7    8B 3F                     mov         di,word ptr [bx] 
04E9    3B 4E FE                  cmp         cx,word ptr -0x2[bp] 
04EC    75 04                     jne         L$34 
04EE    39 F7                     cmp         di,si 
04F0    74 E2                     je          L$33 
04F2                          L$34:
04F2    8E D9                     mov         ds,cx 
04F4    26 8B 9C 84 01            mov         bx,word ptr es:0x184[si] 
04F9    8B 8D 84 01               mov         cx,word ptr 0x184[di] 
04FD    89 5E FC                  mov         word ptr -0x4[bp],bx 
0500    8B BD 86 01               mov         di,word ptr 0x186[di] 
0504    26 8B 9C 86 01            mov         bx,word ptr es:0x186[si] 
0509    39 FB                     cmp         bx,di 
050B    75 C7                     jne         L$33 
050D    3B 4E FC                  cmp         cx,word ptr -0x4[bp] 
0510    75 C2                     jne         L$33 
0512                          L$35:
0512    B8 01 00                  mov         ax,0x0001 
	     0516		; The label referred to here is an undefined location
0515    E9 1B A2                  jmp         0xffffa733 
0518                          L$36:
0518    31 C0                     xor         ax,ax 
	     051B		; The label referred to here is an undefined location
051A    E9 16 A2                  jmp         0xffffa733 
051D                          free_vpu_args_:
051D    53                        push        bx 
051E    51                        push        cx 
051F    56                        push        si 
0520    89 C3                     mov         bx,ax 
0522    89 D1                     mov         cx,dx 
0524    8E DA                     mov         ds,dx 
0526    8B 97 86 01               mov         dx,word ptr 0x186[bx] 
052A    8B 87 84 01               mov         ax,word ptr 0x184[bx] 
052E    85 D2                     test        dx,dx 
0530    75 06                     jne         L$37 
0532    85 C0                     test        ax,ax 
0534    0F 84 16 01               je          L$50 
0538                          L$37:
0538    89 D8                     mov         ax,bx 
053A    89 CA                     mov         dx,cx 
053C    E8 00 00                  call        vpu_shares_args_ 
053F    85 C0                     test        ax,ax 
0541    74 0A                     je          L$38 
0543    8E D9                     mov         ds,cx 
0545    C7 87 82 01 00 00         mov         word ptr 0x182[bx],0x0000 
054B    EB 37                     jmp         L$40 
054D                          L$38:
054D    8E D9                     mov         ds,cx 
054F    83 BF 82 01 00            cmp         word ptr 0x182[bx],0x0000 
0554    74 21                     je          L$39 
0556    FF 8F 82 01               dec         word ptr 0x182[bx] 
055A    8B 87 82 01               mov         ax,word ptr 0x182[bx] 
055E    8B B7 84 01               mov         si,word ptr 0x184[bx] 
0562    C1 E0 02                  shl         ax,0x02 
0565    8E 9F 86 01               mov         ds,word ptr 0x186[bx] 
0569    01 C6                     add         si,ax 
056B    8B 04                     mov         ax,word ptr [si] 
056D    8B 54 02                  mov         dx,word ptr 0x2[si] 
0570    9A 00 00 00 00            call        free_ 
0575    EB D6                     jmp         L$38 
0577                          L$39:
0577    8B 87 84 01               mov         ax,word ptr 0x184[bx] 
057B    8B 97 86 01               mov         dx,word ptr 0x186[bx] 
057F    9A 00 00 00 00            call        free_ 
0584                          L$40:
0584    8E D9                     mov         ds,cx 
0586    66 C7 87 84 01 00 00 00 00
                                  mov         dword ptr 0x184[bx],0x00000000 
058F    E9 BC 00                  jmp         L$50 
0592                          free_vpu_envs_:
0592    53                        push        bx 
0593    51                        push        cx 
0594    56                        push        si 
0595    89 C3                     mov         bx,ax 
0597    89 D1                     mov         cx,dx 
0599    8E DA                     mov         ds,dx 
059B    8B 47 6E                  mov         ax,word ptr 0x6e[bx] 
059E    8B 57 6C                  mov         dx,word ptr 0x6c[bx] 
05A1    85 C0                     test        ax,ax 
05A3    75 06                     jne         L$41 
05A5    85 D2                     test        dx,dx 
05A7    0F 84 A3 00               je          L$50 
05AB                          L$41:
05AB    89 D8                     mov         ax,bx 
05AD    89 CA                     mov         dx,cx 
05AF    E8 00 00                  call        vpu_shares_envs_ 
05B2    85 D2                     test        dx,dx 
05B4    75 04                     jne         L$42 
05B6    85 C0                     test        ax,ax 
05B8    74 09                     je          L$43 
05BA                          L$42:
05BA    8E D9                     mov         ds,cx 
05BC    C7 47 70 00 00            mov         word ptr 0x70[bx],0x0000 
05C1    EB 30                     jmp         L$45 
05C3                          L$43:
05C3    8E D9                     mov         ds,cx 
05C5    83 7F 70 00               cmp         word ptr 0x70[bx],0x0000 
05C9    74 1D                     je          L$44 
05CB    FF 4F 70                  dec         word ptr 0x70[bx] 
05CE    8B 77 70                  mov         si,word ptr 0x70[bx] 
05D1    8B 47 6C                  mov         ax,word ptr 0x6c[bx] 
05D4    C1 E6 02                  shl         si,0x02 
05D7    8E 5F 6E                  mov         ds,word ptr 0x6e[bx] 
05DA    01 C6                     add         si,ax 
05DC    8B 04                     mov         ax,word ptr [si] 
05DE    8B 54 02                  mov         dx,word ptr 0x2[si] 
05E1    9A 00 00 00 00            call        free_ 
05E6    EB DB                     jmp         L$43 
05E8                          L$44:
05E8    8B 47 6C                  mov         ax,word ptr 0x6c[bx] 
05EB    8B 57 6E                  mov         dx,word ptr 0x6e[bx] 
05EE    9A 00 00 00 00            call        free_ 
05F3                          L$45:
05F3    8E D9                     mov         ds,cx 
05F5    66 C7 47 6C 00 00 00 00
                                  mov         dword ptr 0x6c[bx],0x00000000 
05FD    EB 4F                     jmp         L$50 
05FF                          send_termination_signal_:
05FF    53                        push        bx 
0600    51                        push        cx 
0601    56                        push        si 
0602    57                        push        di 
0603    89 C6                     mov         si,ax 
0605    89 D1                     mov         cx,dx 
0607    8E DA                     mov         ds,dx 
0609    83 BC 78 01 00            cmp         word ptr 0x178[si],0x0000 
060E    74 3B                     je          L$48 
0610    8B 84 76 01               mov         ax,word ptr 0x176[si] 
0614    8B 9C 74 01               mov         bx,word ptr 0x174[si] 
0618    85 C0                     test        ax,ax 
061A    75 04                     jne         L$46 
061C    85 DB                     test        bx,bx 
061E    74 2B                     je          L$48 
0620                          L$46:
0620    89 DF                     mov         di,bx 
0622    8E D8                     mov         ds,ax 
0624    F6 85 8B 01 01            test        byte ptr 0x18b[di],0x01 
0629    75 20                     jne         L$48 
062B    8E C2                     mov         es,dx 
062D    89 F8                     mov         ax,di 
062F    8C DA                     mov         dx,ds 
0631    26 8B 9C 78 01            mov         bx,word ptr es:0x178[si] 
0636    0E                        push        cs 
0637    E8 00 00                  call        send_vpu_signal_ 
063A    85 C0                     test        ax,ax 
063C    75 08                     jne         L$47 
063E    8E D9                     mov         ds,cx 
0640    89 84 78 01               mov         word ptr 0x178[si],ax 
0644    EB 07                     jmp         L$49 
0646                          L$47:
0646    B8 01 00                  mov         ax,0x0001 
0649    EB 02                     jmp         L$49 
064B                          L$48:
064B    31 C0                     xor         ax,ax 
064D                          L$49:
064D    5F                        pop         di 
064E                          L$50:
064E    5E                        pop         si 
064F    59                        pop         cx 
0650    5B                        pop         bx 
0651    C3                        ret         
0652                          free_vpu_resources_:
0652    53                        push        bx 
0653    51                        push        cx 
0654    56                        push        si 
0655    57                        push        di 
0656    C8 02 00 00               enter       0x0002,0x00 
065A    89 C6                     mov         si,ax 
065C    89 56 FE                  mov         word ptr -0x2[bp],dx 
065F    36 8B 0E 00 00            mov         cx,word ptr ss:_vpu_hwint_count 
0664    89 CF                     mov         di,cx 
0666    C1 E7 04                  shl         di,0x04 
0669                          L$51:
0669    49                        dec         cx 
066A    83 EF 10                  sub         di,0x0010 
066D    83 F9 FF                  cmp         cx,0xffff 
0670    74 23                     je          L$52 
0672    36 C5 1E 00 00            lds         bx,dword ptr ss:_vpu_hardware_int_table 
0677    01 FB                     add         bx,di 
0679    8B 47 06                  mov         ax,word ptr 0x6[bx] 
067C    8B 57 04                  mov         dx,word ptr 0x4[bx] 
067F    3B 46 FE                  cmp         ax,word ptr -0x2[bp] 
0682    75 E5                     jne         L$51 
0684    39 F2                     cmp         dx,si 
0686    75 E1                     jne         L$51 
0688    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
068B    89 F0                     mov         ax,si 
068D    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
0690    E8 00 00                  call        remove_vpu_hw_int_ 
0693    EB D4                     jmp         L$51 
0695                          L$52:
0695    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
0698    89 F0                     mov         ax,si 
069A    E8 00 00                  call        vpu_kill_clones_ 
069D    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
06A0    89 F0                     mov         ax,si 
06A2    E8 00 00                  call        free_vpu_args_ 
06A5    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
06A8    89 F0                     mov         ax,si 
06AA    E8 00 00                  call        free_vpu_envs_ 
06AD    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
06B0    F6 84 8A 01 02            test        byte ptr 0x18a[si],0x02 
06B5    0F 85 73 01               jne         L$69 
06B9    8B 44 6A                  mov         ax,word ptr 0x6a[si] 
06BC    8B 54 68                  mov         dx,word ptr 0x68[si] 
06BF    85 C0                     test        ax,ax 
06C1    75 04                     jne         L$53 
06C3    85 D2                     test        dx,dx 
06C5    74 30                     je          L$56 
06C7                          L$53:
06C7    B9 0A 00                  mov         cx,0x000a 
06CA    BF 28 00                  mov         di,0x0028 
06CD                          L$54:
06CD    49                        dec         cx 
06CE    83 EF 04                  sub         di,0x0004 
06D1    83 F9 FF                  cmp         cx,0xffff 
06D4    74 21                     je          L$56 
06D6    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
06D9    C5 5C 68                  lds         bx,dword ptr 0x68[si] 
06DC    01 FB                     add         bx,di 
06DE    8B 47 02                  mov         ax,word ptr 0x2[bx] 
06E1    8B 17                     mov         dx,word ptr [bx] 
06E3    85 C0                     test        ax,ax 
06E5    75 04                     jne         L$55 
06E7    85 D2                     test        dx,dx 
06E9    74 E2                     je          L$54 
06EB                          L$55:
06EB    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
06EE    89 CB                     mov         bx,cx 
06F0    89 F0                     mov         ax,si 
06F2    E8 00 00                  call        vpu_dd_close_ 
06F5    EB D6                     jmp         L$54 
06F7                          L$56:
06F7    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
06FA    8B 44 68                  mov         ax,word ptr 0x68[si] 
06FD    8B 54 6A                  mov         dx,word ptr 0x6a[si] 
0700    9A 00 00 00 00            call        free_ 
0705    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0708    8B 44 66                  mov         ax,word ptr 0x66[si] 
070B    8B 54 64                  mov         dx,word ptr 0x64[si] 
070E    85 C0                     test        ax,ax 
0710    75 04                     jne         L$57 
0712    85 D2                     test        dx,dx 
0714    74 3F                     je          L$60 
0716                          L$57:
0716    B9 3C 00                  mov         cx,0x003c 
0719    BF F0 00                  mov         di,0x00f0 
071C                          L$58:
071C    49                        dec         cx 
071D    83 EF 04                  sub         di,0x0004 
0720    83 F9 FF                  cmp         cx,0xffff 
0723    74 30                     je          L$60 
0725    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0728    C5 5C 64                  lds         bx,dword ptr 0x64[si] 
072B    01 FB                     add         bx,di 
072D    C5 07                     lds         ax,dword ptr [bx] 
072F    89 C3                     mov         bx,ax 
0731    F6 47 2A 01               test        byte ptr 0x2a[bx],0x01 
0735    74 0A                     je          L$59 
0737    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
073A    89 CB                     mov         bx,cx 
073C    89 F0                     mov         ax,si 
073E    E8 00 00                  call        vpu_fd_close_ 
0741                          L$59:
0741    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0744    C5 5C 64                  lds         bx,dword ptr 0x64[si] 
0747    01 FB                     add         bx,di 
0749    8B 07                     mov         ax,word ptr [bx] 
074B    8B 57 02                  mov         dx,word ptr 0x2[bx] 
074E    9A 00 00 00 00            call        free_ 
0753    EB C7                     jmp         L$58 
0755                          L$60:
0755    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0758    8B 44 64                  mov         ax,word ptr 0x64[si] 
075B    8B 54 66                  mov         dx,word ptr 0x66[si] 
075E    9A 00 00 00 00            call        free_ 
0763                          L$61:
0763    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0766    83 7C 52 00               cmp         word ptr 0x52[si],0x0000 
076A    74 0B                     je          L$62 
076C    89 F0                     mov         ax,si 
076E    8C DA                     mov         dx,ds 
0770    31 DB                     xor         bx,bx 
0772    E8 00 00                  call        vpu_free_dynamic_segment_ 
0775    EB EC                     jmp         L$61 
0777                          L$62:
0777    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
077A    8B 44 4E                  mov         ax,word ptr 0x4e[si] 
077D    89 C2                     mov         dx,ax 
077F    4A                        dec         dx 
0780    89 54 4E                  mov         word ptr 0x4e[si],dx 
0783    85 C0                     test        ax,ax 
0785    74 19                     je          L$63 
0787    89 D3                     mov         bx,dx 
0789    8B 44 48                  mov         ax,word ptr 0x48[si] 
078C    C1 E3 02                  shl         bx,0x02 
078F    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
0792    01 C3                     add         bx,ax 
0794    8B 07                     mov         ax,word ptr [bx] 
0796    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0799    9A 00 00 00 00            call        free_ 
079E    EB D7                     jmp         L$62 
07A0                          L$63:
07A0    8B 44 48                  mov         ax,word ptr 0x48[si] 
07A3    8B 54 4A                  mov         dx,word ptr 0x4a[si] 
07A6                          L$64:
07A6    9A 00 00 00 00            call        free_ 
07AB    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
07AE    8B 44 46                  mov         ax,word ptr 0x46[si] 
07B1    89 C2                     mov         dx,ax 
07B3    4A                        dec         dx 
07B4    89 54 46                  mov         word ptr 0x46[si],dx 
07B7    85 C0                     test        ax,ax 
07B9    74 14                     je          L$65 
07BB    89 D3                     mov         bx,dx 
07BD    8B 44 40                  mov         ax,word ptr 0x40[si] 
07C0    C1 E3 02                  shl         bx,0x02 
07C3    8E 5C 42                  mov         ds,word ptr 0x42[si] 
07C6    01 C3                     add         bx,ax 
07C8    8B 07                     mov         ax,word ptr [bx] 
07CA    8B 57 02                  mov         dx,word ptr 0x2[bx] 
07CD    EB D7                     jmp         L$64 
07CF                          L$65:
07CF    8B 44 40                  mov         ax,word ptr 0x40[si] 
07D2    8B 54 42                  mov         dx,word ptr 0x42[si] 
07D5    9A 00 00 00 00            call        free_ 
07DA    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
07DD    8B 44 5E                  mov         ax,word ptr 0x5e[si] 
07E0    8B 54 60                  mov         dx,word ptr 0x60[si] 
07E3    B9 05 00                  mov         cx,0x0005 
07E6    9A 00 00 00 00            call        free_ 
07EB    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
07EE    8B 7E FE                  mov         di,word ptr -0x2[bp] 
07F1    8B 44 58                  mov         ax,word ptr 0x58[si] 
07F4    8B 54 5A                  mov         dx,word ptr 0x5a[si] 
07F7    8D 5C 5A                  lea         bx,0x5a[si] 
07FA                          L$66:
07FA    9A 00 00 00 00            call        free_ 
07FF                          L$67:
07FF    49                        dec         cx 
0800    83 C3 EE                  add         bx,0xffee 
0803    83 F9 FF                  cmp         cx,0xffff 
0806    74 24                     je          L$69 
0808    8E DF                     mov         ds,di 
080A    8B 47 78                  mov         ax,word ptr 0x78[bx] 
080D    8B 57 76                  mov         dx,word ptr 0x76[bx] 
0810    85 C0                     test        ax,ax 
0812    75 04                     jne         L$68 
0814    85 D2                     test        dx,dx 
0816    74 E7                     je          L$67 
0818                          L$68:
0818    89 D0                     mov         ax,dx 
081A    8B 57 78                  mov         dx,word ptr 0x78[bx] 
081D    9A 00 00 00 00            call        del_window_ 
0822    8E DF                     mov         ds,di 
0824    8B 47 72                  mov         ax,word ptr 0x72[bx] 
0827    8B 57 74                  mov         dx,word ptr 0x74[bx] 
082A    EB CE                     jmp         L$66 
082C                          L$69:
082C    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
082F    8B 44 32                  mov         ax,word ptr 0x32[si] 
0832    8B 54 34                  mov         dx,word ptr 0x34[si] 
0835    9A 00 00 00 00            call        free_ 
083A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
083D    8B 44 36                  mov         ax,word ptr 0x36[si] 
0840    8B 54 38                  mov         dx,word ptr 0x38[si] 
0843    9A 00 00 00 00            call        free_ 
0848    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
084B    80 8C 8B 01 01            or          byte ptr 0x18b[si],0x01 
	     0851		; The label referred to here is an undefined location
0850    E9 E0 9E                  jmp         0xffffa733 
0853                          delete_vpu_:
0853    53                        push        bx 
0854    51                        push        cx 
0855    56                        push        si 
0856    57                        push        di 
0857    C8 06 00 00               enter       0x0006,0x00 
085B    89 C6                     mov         si,ax 
085D    89 56 FE                  mov         word ptr -0x2[bp],dx 
0860    85 D2                     test        dx,dx 
0862    75 06                     jne         L$70 
0864    85 C0                     test        ax,ax 
	     0868		; The label referred to here is an undefined location
0866    0F 84 C9 9E               je          0xffffa733 
086A                          L$70:
086A    8E DA                     mov         ds,dx 
086C    F6 84 8B 01 01            test        byte ptr 0x18b[si],0x01 
0871    75 03                     jne         L$71 
0873    E8 00 00                  call        free_vpu_resources_ 
0876                          L$71:
0876    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0879    83 BC 7E 01 00            cmp         word ptr 0x17e[si],0x0000 
087E    74 0E                     je          L$72 
0880    C5 BC 7A 01               lds         di,dword ptr 0x17a[si] 
0884    8B 05                     mov         ax,word ptr [di] 
0886    8B 55 02                  mov         dx,word ptr 0x2[di] 
0889    E8 00 00                  call        delete_vpu_ 
088C    EB E8                     jmp         L$71 
088E                          L$72:
088E    8B 94 76 01               mov         dx,word ptr 0x176[si] 
0892    8B 84 74 01               mov         ax,word ptr 0x174[si] 
0896    85 D2                     test        dx,dx 
0898    75 04                     jne         L$73 
089A    85 C0                     test        ax,ax 
089C    74 07                     je          L$74 
089E                          L$73:
089E    89 F0                     mov         ax,si 
08A0    8C DA                     mov         dx,ds 
08A2    E8 00 00                  call        delete_child_ 
08A5                          L$74:
08A5    31 DB                     xor         bx,bx 
08A7    31 C0                     xor         ax,ax 
08A9                          L$75:
08A9    36 8B 16 00 00            mov         dx,word ptr ss:_vpus 
08AE    89 56 FC                  mov         word ptr -0x4[bp],dx 
08B1    36 8B 16 02 00            mov         dx,word ptr ss:_vpus+0x2 
08B6    8B 7E FC                  mov         di,word ptr -0x4[bp] 
08B9    8E DA                     mov         ds,dx 
08BB    01 C7                     add         di,ax 
08BD    8B 0D                     mov         cx,word ptr [di] 
08BF    89 4E FA                  mov         word ptr -0x6[bp],cx 
08C2    8B 4D 02                  mov         cx,word ptr 0x2[di] 
08C5    05 04 00                  add         ax,0x0004 
08C8    3B 4E FE                  cmp         cx,word ptr -0x2[bp] 
08CB    75 05                     jne         L$76 
08CD    3B 76 FA                  cmp         si,word ptr -0x6[bp] 
08D0    74 03                     je          L$77 
08D2                          L$76:
08D2    43                        inc         bx 
08D3    EB D4                     jmp         L$75 
08D5                          L$77:
08D5    36 FF 0E 00 00            dec         word ptr ss:_vpu_count 
08DA    36 8B 0E 00 00            mov         cx,word ptr ss:_vpu_count 
08DF    29 D9                     sub         cx,bx 
08E1    89 CB                     mov         bx,cx 
08E3    C1 E3 02                  shl         bx,0x02 
08E6    53                        push        bx 
08E7    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
08EA    89 D1                     mov         cx,dx 
08EC    01 C3                     add         bx,ax 
08EE    89 F8                     mov         ax,di 
08F0    9A 00 00 00 00            call        memmove_ 
08F5    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
08F8    89 F0                     mov         ax,si 
08FA    9A 00 00 00 00            call        free_ 
08FF    36 A1 00 00               mov         ax,word ptr ss:_vpu_count 
0903    85 C0                     test        ax,ax 
0905    74 1F                     je          L$78 
0907    36 8B 16 02 00            mov         dx,word ptr ss:_vpus+0x2 
090C    89 C3                     mov         bx,ax 
090E    36 A1 00 00               mov         ax,word ptr ss:_vpus 
0912    C1 E3 02                  shl         bx,0x02 
0915    9A 00 00 00 00            call        realloc_ 
091A    36 A3 00 00               mov         word ptr ss:_vpus,ax 
091E    36 89 16 02 00            mov         word ptr ss:_vpus+0x2,dx 
	     0924		; The label referred to here is an undefined location
0923    E9 0D 9E                  jmp         0xffffa733 
0926                          L$78:
0926    36 A1 00 00               mov         ax,word ptr ss:_vpus 
092A    36 8B 16 02 00            mov         dx,word ptr ss:_vpus+0x2 
092F    9A 00 00 00 00            call        free_ 
0934    31 C0                     xor         ax,ax 
0936    36 A3 00 00               mov         word ptr ss:_vpus,ax 
093A    36 A3 02 00               mov         word ptr ss:_vpus+0x2,ax 
	     093F		; The label referred to here is an undefined location
093E    E9 F2 9D                  jmp         0xffffa733 
0941                          instr_in_array_:
0941    8E D9                     mov         ds,cx 
0943                          L$79:
0943    3A 07                     cmp         al,byte ptr [bx] 
0945    75 03                     jne         L$80 
0947    B0 01                     mov         al,0x01 
0949    C3                        ret         
094A                          L$80:
094A    43                        inc         bx 
094B    80 3F 00                  cmp         byte ptr [bx],0x00 
094E    75 F3                     jne         L$79 
0950    30 C0                     xor         al,al 
0952    C3                        ret         
0953                          init_data_segs_:
0953    53                        push        bx 
0954    51                        push        cx 
0955    55                        push        bp 
0956    31 ED                     xor         bp,bp 
0958    89 C3                     mov         bx,ax 
095A    89 D1                     mov         cx,dx 
095C    85 D2                     test        dx,dx 
095E    75 4E                     jne         L$83 
0960    85 C0                     test        ax,ax 
0962    75 4A                     jne         L$83 
0964    BA 04 00                  mov         dx,0x0004 
0967    B8 01 00                  mov         ax,0x0001 
096A    9A 00 00 00 00            call        calloc_ 
096F    36 A3 00 00               mov         word ptr ss:_data,ax 
0973    89 96 02 00               mov         word ptr _data+0x2[bp],dx 
0977    85 D2                     test        dx,dx 
0979    75 08                     jne         L$82 
097B    85 C0                     test        ax,ax 
097D    75 04                     jne         L$82 
097F                          L$81:
097F    31 C0                     xor         ax,ax 
0981    EB 45                     jmp         L$85 
0983                          L$82:
0983    B8 00 04                  mov         ax,0x0400 
0986    BA 01 00                  mov         dx,0x0001 
0989    36 A3 00 00               mov         word ptr ss:_data_allocated,ax 
098D    9A 00 00 00 00            call        calloc_ 
0992    C5 9E 00 00               lds         bx,dword ptr _data[bp] 
0996    89 07                     mov         word ptr [bx],ax 
0998    89 57 02                  mov         word ptr 0x2[bx],dx 
099B    C5 9E 00 00               lds         bx,dword ptr _data[bp] 
099F    8B 47 02                  mov         ax,word ptr 0x2[bx] 
09A2    8B 17                     mov         dx,word ptr [bx] 
09A4    85 C0                     test        ax,ax 
09A6    75 1D                     jne         L$84 
09A8    85 D2                     test        dx,dx 
09AA    74 D3                     je          L$81 
09AC    EB 17                     jmp         L$84 
09AE                          L$83:
09AE    8E DA                     mov         ds,dx 
09B0    8B 47 48                  mov         ax,word ptr 0x48[bx] 
09B3    8B 57 4A                  mov         dx,word ptr 0x4a[bx] 
09B6    36 A3 00 00               mov         word ptr ss:_data,ax 
09BA    89 96 02 00               mov         word ptr _data+0x2[bp],dx 
09BE    8B 47 4C                  mov         ax,word ptr 0x4c[bx] 
09C1    36 A3 00 00               mov         word ptr ss:_data_allocated,ax 
09C5                          L$84:
09C5    B8 01 00                  mov         ax,0x0001 
09C8                          L$85:
09C8    5D                        pop         bp 
09C9    59                        pop         cx 
09CA    5B                        pop         bx 
09CB    C3                        ret         
09CC                          allocate_more_data_:
09CC    53                        push        bx 
09CD    51                        push        cx 
09CE    55                        push        bp 
09CF    31 ED                     xor         bp,bp 
09D1    83 BE 00 00 00            cmp         word ptr _console[bp],0x0000 
09D6    74 17                     je          L$86 
09D8    31 C0                     xor         ax,ax 
09DA    8C D2                     mov         dx,ss 
09DC    36 A3 00 00               mov         word ptr ss:_datap_offset,ax 
09E0    B8 52 01                  mov         ax,offset DGROUP:L$1470 
09E3    9A 00 00 00 00            call        putstr_ 
09E8    B8 01 00                  mov         ax,0x0001 
09EB    31 D2                     xor         dx,dx 
09ED    EB D9                     jmp         L$85 
09EF                          L$86:
09EF    80 86 01 00 04            add         byte ptr _data_allocated+0x1[bp],0x04 
09F4    8B 96 00 00               mov         dx,word ptr _datap_segment[bp] 
09F8    8B 9E 00 00               mov         bx,word ptr _data[bp] 
09FC    36 A1 00 00               mov         ax,word ptr ss:_data_allocated 
0A00    C1 E2 02                  shl         dx,0x02 
0A03    8E 9E 02 00               mov         ds,word ptr _data+0x2[bp] 
0A07    01 D3                     add         bx,dx 
0A09    8B 17                     mov         dx,word ptr [bx] 
0A0B    8B 4F 02                  mov         cx,word ptr 0x2[bx] 
0A0E    89 C3                     mov         bx,ax 
0A10    89 D0                     mov         ax,dx 
0A12    89 CA                     mov         dx,cx 
0A14    9A 00 00 00 00            call        realloc_ 
0A19    8B 9E 00 00               mov         bx,word ptr _datap_segment[bp] 
0A1D    8B 8E 00 00               mov         cx,word ptr _data[bp] 
0A21    C1 E3 02                  shl         bx,0x02 
0A24    8E 9E 02 00               mov         ds,word ptr _data+0x2[bp] 
0A28    01 CB                     add         bx,cx 
0A2A    89 07                     mov         word ptr [bx],ax 
0A2C    89 57 02                  mov         word ptr 0x2[bx],dx 
0A2F    8B 9E 00 00               mov         bx,word ptr _datap_segment[bp] 
0A33    36 A1 00 00               mov         ax,word ptr ss:_data 
0A37    C1 E3 02                  shl         bx,0x02 
0A3A    8E 9E 02 00               mov         ds,word ptr _data+0x2[bp] 
0A3E    01 C3                     add         bx,ax 
0A40    8B 07                     mov         ax,word ptr [bx] 
0A42    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0A45    EB 81                     jmp         L$85 
0A47                          check_data_size_:
0A47    52                        push        dx 
0A48    36 A1 00 00               mov         ax,word ptr ss:_datap_offset 
0A4C    40                        inc         ax 
0A4D    36 3B 06 00 00            cmp         ax,word ptr ss:_data_allocated 
0A52    72 16                     jb          L$87 
0A54    E8 00 00                  call        allocate_more_data_ 
0A57    85 D2                     test        dx,dx 
0A59    75 0F                     jne         L$87 
0A5B    85 C0                     test        ax,ax 
0A5D    75 0B                     jne         L$87 
0A5F    B8 00 00                  mov         ax,offset _outofmemory 
0A62    BA 00 00                  mov         dx,seg _outofmemory 
0A65    9A 00 00 00 00            call        putstr_ 
0A6A                          L$87:
0A6A    5A                        pop         dx 
0A6B    C3                        ret         
0A6C                          getwordvalue_:
0A6C    53                        push        bx 
0A6D    51                        push        cx 
0A6E    56                        push        si 
0A6F    57                        push        di 
0A70    89 C3                     mov         bx,ax 
0A72    89 D7                     mov         di,dx 
0A74    8E DA                     mov         ds,dx 
0A76    8B 07                     mov         ax,word ptr [bx] 
0A78    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0A7B    31 C9                     xor         cx,cx 
0A7D    E8 00 00                  call        detect_number_ 
0A80    85 C0                     test        ax,ax 
0A82    74 0C                     je          L$88 
0A84    8E DF                     mov         ds,di 
0A86    8B 07                     mov         ax,word ptr [bx] 
0A88    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0A8B    E8 00 00                  call        parse_number_ 
0A8E    EB 1B                     jmp         L$89 
0A90                          L$88:
0A90    8E DF                     mov         ds,di 
0A92    C5 37                     lds         si,dword ptr [bx] 
0A94    80 3C 27                  cmp         byte ptr [si],0x27 
0A97    75 14                     jne         L$90 
0A99    8E C7                     mov         es,di 
0A9B    46                        inc         si 
0A9C    89 D8                     mov         ax,bx 
0A9E    26 8C 5F 02               mov         word ptr es:0x2[bx],ds 
0AA2    8E DF                     mov         ds,di 
0AA4    89 FA                     mov         dx,di 
0AA6    89 37                     mov         word ptr [bx],si 
0AA8    E8 00 00                  call        parse_char_ 
0AAB                          L$89:
0AAB    89 C1                     mov         cx,ax 
0AAD                          L$90:
0AAD    8E DF                     mov         ds,di 
0AAF    8B 07                     mov         ax,word ptr [bx] 
0AB1    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0AB4    E8 00 00                  call        skip_word_ 
0AB7    8E DF                     mov         ds,di 
0AB9    89 07                     mov         word ptr [bx],ax 
0ABB    89 57 02                  mov         word ptr 0x2[bx],dx 
0ABE                          L$91:
0ABE    89 C8                     mov         ax,cx 
0AC0    E9 8A FB                  jmp         L$49 
0AC3                          add_byte_:
0AC3    53                        push        bx 
0AC4    51                        push        cx 
0AC5    56                        push        si 
0AC6    57                        push        di 
0AC7    55                        push        bp 
0AC8    31 ED                     xor         bp,bp 
0ACA    89 C1                     mov         cx,ax 
0ACC    8B 9E 00 00               mov         bx,word ptr _datap_segment[bp] 
0AD0    36 A1 00 00               mov         ax,word ptr ss:_data 
0AD4    C1 E3 02                  shl         bx,0x02 
0AD7    8E 9E 02 00               mov         ds,word ptr _data+0x2[bp] 
0ADB    01 C3                     add         bx,ax 
0ADD    8B 37                     mov         si,word ptr [bx] 
0ADF    8B 7F 02                  mov         di,word ptr 0x2[bx] 
0AE2    8B 9E 00 00               mov         bx,word ptr _datap_offset[bp] 
0AE6    E8 00 00                  call        check_data_size_ 
0AE9    01 F3                     add         bx,si 
0AEB    F6 C2 01                  test        dl,0x01 
0AEE    74 04                     je          L$92 
0AF0    8E DF                     mov         ds,di 
0AF2    EB 19                     jmp         L$93 
0AF4                          L$92:
0AF4    8B 9E 00 00               mov         bx,word ptr _datap_segment[bp] 
0AF8    36 A1 00 00               mov         ax,word ptr ss:_data 
0AFC    C1 E3 02                  shl         bx,0x02 
0AFF    8E 9E 02 00               mov         ds,word ptr _data+0x2[bp] 
0B03    01 C3                     add         bx,ax 
0B05    C5 07                     lds         ax,dword ptr [bx] 
0B07    8B 9E 00 00               mov         bx,word ptr _datap_offset[bp] 
0B0B    01 C3                     add         bx,ax 
0B0D                          L$93:
0B0D    88 0F                     mov         byte ptr [bx],cl 
0B0F    FF 86 00 00               inc         word ptr _datap_offset[bp] 
0B13                          L$94:
0B13    5D                        pop         bp 
0B14    E9 36 FB                  jmp         L$49 
0B17                          define_byte_:
0B17    51                        push        cx 
0B18    C8 26 00 00               enter       0x0026,0x00 
0B1C    89 46 FA                  mov         word ptr -0x6[bp],ax 
0B1F    89 56 FC                  mov         word ptr -0x4[bp],dx 
0B22    88 5E FE                  mov         byte ptr -0x2[bp],bl 
0B25    89 C3                     mov         bx,ax 
0B27    89 D1                     mov         cx,dx 
0B29    8D 46 DA                  lea         ax,-0x26[bp] 
0B2C    8C D2                     mov         dx,ss 
0B2E    E8 00 00                  call        copy_str_ 
0B31    0F B6 4E FE               movzx       cx,byte ptr -0x2[bp] 
0B35    8D 46 DA                  lea         ax,-0x26[bp] 
0B38    8C D2                     mov         dx,ss 
0B3A    89 CB                     mov         bx,cx 
0B3C    E8 00 00                  call        define_symbol_ 
0B3F    85 C0                     test        ax,ax 
0B41    75 05                     jne         L$95 
0B43    30 C0                     xor         al,al 
0B45    C9                        leave       
0B46    59                        pop         cx 
0B47    C3                        ret         
0B48                          L$95:
0B48    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
0B4B    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
0B4E    E8 00 00                  call        skip_word_ 
0B51    89 46 FA                  mov         word ptr -0x6[bp],ax 
0B54    89 56 FC                  mov         word ptr -0x4[bp],dx 
0B57    E8 00 00                  call        skip_whitespaces_ 
0B5A    89 C3                     mov         bx,ax 
0B5C    8E DA                     mov         ds,dx 
0B5E    89 46 FA                  mov         word ptr -0x6[bp],ax 
0B61    89 56 FC                  mov         word ptr -0x4[bp],dx 
0B64    80 3F 7B                  cmp         byte ptr [bx],0x7b 
0B67    75 49                     jne         L$98 
0B69    E8 00 00                  call        skip_word_ 
0B6C    89 46 FA                  mov         word ptr -0x6[bp],ax 
0B6F    89 56 FC                  mov         word ptr -0x4[bp],dx 
0B72                          L$96:
0B72    E8 00 00                  call        skip_whitespaces_ 
0B75    89 46 FA                  mov         word ptr -0x6[bp],ax 
0B78    89 56 FC                  mov         word ptr -0x4[bp],dx 
0B7B    C5 5E FA                  lds         bx,dword ptr -0x6[bp] 
0B7E    80 3F 7D                  cmp         byte ptr [bx],0x7d 
0B81    74 17                     je          L$97 
0B83    8D 46 FA                  lea         ax,-0x6[bp] 
0B86    8C D2                     mov         dx,ss 
0B88    E8 00 00                  call        getwordvalue_ 
0B8B    0F B6 56 FE               movzx       dx,byte ptr -0x2[bp] 
0B8F    E8 00 00                  call        add_byte_ 
0B92    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
0B95    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
0B98    EB D8                     jmp         L$96 
0B9A                          L$97:
0B9A    89 D8                     mov         ax,bx 
0B9C    8C DA                     mov         dx,ds 
0B9E    E8 00 00                  call        skip_word_ 
0BA1    89 46 FA                  mov         word ptr -0x6[bp],ax 
0BA4    89 56 FC                  mov         word ptr -0x4[bp],dx 
0BA7    E8 00 00                  call        skip_whitespaces_ 
0BAA    89 46 FA                  mov         word ptr -0x6[bp],ax 
0BAD    89 56 FC                  mov         word ptr -0x4[bp],dx 
0BB0    EB 0D                     jmp         L$99 
0BB2                          L$98:
0BB2    8D 46 FA                  lea         ax,-0x6[bp] 
0BB5    8C D2                     mov         dx,ss 
0BB7    E8 00 00                  call        getwordvalue_ 
0BBA    89 CA                     mov         dx,cx 
0BBC    E8 00 00                  call        add_byte_ 
0BBF                          L$99:
0BBF    B0 01                     mov         al,0x01 
0BC1    C9                        leave       
0BC2    59                        pop         cx 
0BC3    C3                        ret         
0BC4                          add_word_:
0BC4    53                        push        bx 
0BC5    51                        push        cx 
0BC6    56                        push        si 
0BC7    55                        push        bp 
0BC8    31 ED                     xor         bp,bp 
0BCA    89 C1                     mov         cx,ax 
0BCC    8B 9E 00 00               mov         bx,word ptr _datap_segment[bp] 
0BD0    36 A1 00 00               mov         ax,word ptr ss:_data 
0BD4    C1 E3 02                  shl         bx,0x02 
0BD7    8E 9E 02 00               mov         ds,word ptr _data+0x2[bp] 
0BDB    01 C3                     add         bx,ax 
0BDD    8B 07                     mov         ax,word ptr [bx] 
0BDF    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
0BE2    89 DE                     mov         si,bx 
0BE4    8B 9E 00 00               mov         bx,word ptr _datap_offset[bp] 
0BE8    01 C3                     add         bx,ax 
0BEA    E8 00 00                  call        check_data_size_ 
0BED    F6 C2 01                  test        dl,0x01 
0BF0    8E DE                     mov         ds,si 
0BF2    89 0F                     mov         word ptr [bx],cx 
0BF4    83 86 00 00 02            add         word ptr _datap_offset[bp],0x0002 
0BF9    5D                        pop         bp 
0BFA    E9 51 FA                  jmp         L$50 
0BFD                          define_word_:
0BFD    51                        push        cx 
0BFE    C8 26 00 00               enter       0x0026,0x00 
0C02    89 46 FA                  mov         word ptr -0x6[bp],ax 
0C05    89 56 FC                  mov         word ptr -0x4[bp],dx 
0C08    88 5E FE                  mov         byte ptr -0x2[bp],bl 
0C0B    89 C3                     mov         bx,ax 
0C0D    89 D1                     mov         cx,dx 
0C0F    8D 46 DA                  lea         ax,-0x26[bp] 
0C12    8C D2                     mov         dx,ss 
0C14    E8 00 00                  call        copy_str_ 
0C17    0F B6 4E FE               movzx       cx,byte ptr -0x2[bp] 
0C1B    8D 46 DA                  lea         ax,-0x26[bp] 
0C1E    8C D2                     mov         dx,ss 
0C20    89 CB                     mov         bx,cx 
0C22    E8 00 00                  call        define_symbol_ 
0C25    85 C0                     test        ax,ax 
0C27    75 05                     jne         L$100 
0C29    30 C0                     xor         al,al 
0C2B    C9                        leave       
0C2C    59                        pop         cx 
0C2D    C3                        ret         
0C2E                          L$100:
0C2E    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
0C31    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
0C34    E8 00 00                  call        skip_word_ 
0C37    89 46 FA                  mov         word ptr -0x6[bp],ax 
0C3A    89 56 FC                  mov         word ptr -0x4[bp],dx 
0C3D    E8 00 00                  call        skip_whitespaces_ 
0C40    89 C3                     mov         bx,ax 
0C42    8E DA                     mov         ds,dx 
0C44    89 46 FA                  mov         word ptr -0x6[bp],ax 
0C47    89 56 FC                  mov         word ptr -0x4[bp],dx 
0C4A    80 3F 7B                  cmp         byte ptr [bx],0x7b 
0C4D    75 31                     jne         L$102 
0C4F    E8 00 00                  call        skip_word_ 
0C52    89 46 FA                  mov         word ptr -0x6[bp],ax 
0C55    89 56 FC                  mov         word ptr -0x4[bp],dx 
0C58                          L$101:
0C58    E8 00 00                  call        skip_whitespaces_ 
0C5B    89 46 FA                  mov         word ptr -0x6[bp],ax 
0C5E    89 56 FC                  mov         word ptr -0x4[bp],dx 
0C61    C5 5E FA                  lds         bx,dword ptr -0x6[bp] 
0C64    80 3F 7D                  cmp         byte ptr [bx],0x7d 
0C67    74 24                     je          L$103 
0C69    8D 46 FA                  lea         ax,-0x6[bp] 
0C6C    8C D2                     mov         dx,ss 
0C6E    E8 00 00                  call        getwordvalue_ 
0C71    0F B6 56 FE               movzx       dx,byte ptr -0x2[bp] 
0C75    E8 00 00                  call        add_word_ 
0C78    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
0C7B    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
0C7E    EB D8                     jmp         L$101 
0C80                          L$102:
0C80    8D 46 FA                  lea         ax,-0x6[bp] 
0C83    8C D2                     mov         dx,ss 
0C85    E8 00 00                  call        getwordvalue_ 
0C88    89 CA                     mov         dx,cx 
0C8A    E8 00 00                  call        add_word_ 
0C8D                          L$103:
0C8D    B0 01                     mov         al,0x01 
0C8F    C9                        leave       
0C90    59                        pop         cx 
0C91    C3                        ret         
0C92                          parse_string_:
0C92    56                        push        si 
0C93    57                        push        di 
0C94    C8 0A 00 00               enter       0x000a,0x00 
0C98    89 46 F6                  mov         word ptr -0xa[bp],ax 
0C9B    89 56 F8                  mov         word ptr -0x8[bp],dx 
0C9E    89 5E FA                  mov         word ptr -0x6[bp],bx 
0CA1    89 4E FC                  mov         word ptr -0x4[bp],cx 
0CA4    B8 00 04                  mov         ax,0x0400 
0CA7    BA 01 00                  mov         dx,0x0001 
0CAA    31 C9                     xor         cx,cx 
0CAC    89 46 FE                  mov         word ptr -0x2[bp],ax 
0CAF    9A 00 00 00 00            call        calloc_ 
0CB4    C5 5E F6                  lds         bx,dword ptr -0xa[bp] 
0CB7    89 C7                     mov         di,ax 
0CB9    FF 46 F6                  inc         word ptr -0xa[bp] 
0CBC    89 D6                     mov         si,dx 
0CBE    80 3F 22                  cmp         byte ptr [bx],0x22 
0CC1    74 33                     je          L$105 
0CC3    36 FF 36 00 00            push        word ptr ss:_line_num 
0CC8    16                        push        ss 
0CC9    68 00 00                  push        offset _syntaxerror 
0CCC    16                        push        ss 
0CCD    68 65 01                  push        offset DGROUP:L$1471 
0CD0    16                        push        ss 
0CD1    68 00 00                  push        offset _message 
0CD4    8C D2                     mov         dx,ss 
0CD6    9A 00 00 00 00            call        sprintf_ 
0CDB    83 C4 0E                  add         sp,0x000e 
0CDE    B8 00 00                  mov         ax,offset _message 
0CE1    9A 00 00 00 00            call        putstr_ 
0CE6                          L$104:
0CE6    89 F8                     mov         ax,di 
0CE8    89 F2                     mov         dx,si 
0CEA    9A 00 00 00 00            call        free_ 
0CEF    31 C0                     xor         ax,ax 
0CF1    31 D2                     xor         dx,dx 
0CF3    E9 DA 05                  jmp         L$160 
0CF6                          L$105:
0CF6    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0CF9    80 3F 22                  cmp         byte ptr [bx],0x22 
0CFC    74 3A                     je          L$109 
0CFE                          L$106:
0CFE    8D 46 F6                  lea         ax,-0xa[bp] 
0D01    8C D2                     mov         dx,ss 
0D03    E8 00 00                  call        parse_char_ 
0D06    89 CB                     mov         bx,cx 
0D08    8E DE                     mov         ds,si 
0D0A    01 FB                     add         bx,di 
0D0C    41                        inc         cx 
0D0D    88 07                     mov         byte ptr [bx],al 
0D0F    3B 4E FE                  cmp         cx,word ptr -0x2[bp] 
0D12    75 1C                     jne         L$108 
0D14    80 46 FF 04               add         byte ptr -0x1[bp],0x04 
0D18    89 F8                     mov         ax,di 
0D1A    89 F2                     mov         dx,si 
0D1C    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
0D1F    9A 00 00 00 00            call        realloc_ 
0D24    85 D2                     test        dx,dx 
0D26    75 04                     jne         L$107 
0D28    85 C0                     test        ax,ax 
0D2A    74 BA                     je          L$104 
0D2C                          L$107:
0D2C    89 C7                     mov         di,ax 
0D2E    89 D6                     mov         si,dx 
0D30                          L$108:
0D30    C5 5E F6                  lds         bx,dword ptr -0xa[bp] 
0D33    80 3F 22                  cmp         byte ptr [bx],0x22 
0D36    75 C6                     jne         L$106 
0D38                          L$109:
0D38    89 CB                     mov         bx,cx 
0D3A    8E DE                     mov         ds,si 
0D3C    89 F8                     mov         ax,di 
0D3E    01 FB                     add         bx,di 
0D40    41                        inc         cx 
0D41    C6 07 00                  mov         byte ptr [bx],0x00 
0D44    C5 5E FA                  lds         bx,dword ptr -0x6[bp] 
0D47    89 F2                     mov         dx,si 
0D49    89 0F                     mov         word ptr [bx],cx 
0D4B    E9 82 05                  jmp         L$160 
0D4E                          add_string_to_data_:
0D4E    51                        push        cx 
0D4F    56                        push        si 
0D50    57                        push        di 
0D51    C8 02 00 00               enter       0x0002,0x00 
0D55    89 C6                     mov         si,ax 
0D57    89 D7                     mov         di,dx 
0D59    89 5E FE                  mov         word ptr -0x2[bp],bx 
0D5C    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
0D62    74 1C                     je          L$110 
0D64    52                        push        dx 
0D65    50                        push        ax 
0D66    16                        push        ss 
0D67    68 6A 01                  push        offset DGROUP:L$1472 
0D6A    16                        push        ss 
0D6B    68 00 00                  push        offset _message 
0D6E    8C D2                     mov         dx,ss 
0D70    9A 00 00 00 00            call        sprintf_ 
0D75    83 C4 0C                  add         sp,0x000c 
0D78    B8 00 00                  mov         ax,offset _message 
0D7B    9A 00 00 00 00            call        putstr_ 
0D80                          L$110:
0D80    36 A1 00 00               mov         ax,word ptr ss:_datap_offset 
0D84    03 46 FE                  add         ax,word ptr -0x2[bp] 
0D87    36 3B 06 00 00            cmp         ax,word ptr ss:_data_allocated 
0D8C    72 1D                     jb          L$111 
0D8E    E8 00 00                  call        allocate_more_data_ 
0D91    85 D2                     test        dx,dx 
0D93    75 EB                     jne         L$110 
0D95    85 C0                     test        ax,ax 
0D97    75 E7                     jne         L$110 
0D99    B8 00 00                  mov         ax,offset _outofmemory 
0D9C    BA 00 00                  mov         dx,seg _outofmemory 
0D9F    9A 00 00 00 00            call        putstr_ 
0DA4    9A 00 00 00 00            call        abort_ 
0DA9    EB D5                     jmp         L$110 
0DAB                          L$111:
0DAB    36 8B 1E 00 00            mov         bx,word ptr ss:_datap_segment 
0DB0    36 A1 00 00               mov         ax,word ptr ss:_data 
0DB4    C1 E3 02                  shl         bx,0x02 
0DB7    36 8E 1E 02 00            mov         ds,word ptr ss:_data+0x2 
0DBC    01 C3                     add         bx,ax 
0DBE    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
0DC1    8B 07                     mov         ax,word ptr [bx] 
0DC3    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
0DC6    36 03 06 00 00            add         ax,word ptr ss:_datap_offset 
0DCB    8E DF                     mov         ds,di 
0DCD    8E C3                     mov         es,bx 
0DCF    89 C7                     mov         di,ax 
0DD1    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0DD4    57                        push        di 
0DD5    F3 A4                     rep movsb   
0DD7    5F                        pop         di 
0DD8    36 01 06 00 00            add         word ptr ss:_datap_offset,ax 
0DDD    E9 12 0E                  jmp         L$272 
0DE0                          add_pointer_:
0DE0    C8 2E 00 00               enter       0x002e,0x00 
0DE4    53                        push        bx 
0DE5    52                        push        dx 
0DE6    50                        push        ax 
0DE7    16                        push        ss 
0DE8    68 86 01                  push        offset DGROUP:L$1473 
0DEB    16                        push        ss 
0DEC    8D 56 D2                  lea         dx,-0x2e[bp] 
0DEF    52                        push        dx 
0DF0    BB 05 00                  mov         bx,0x0005 
0DF3    9A 00 00 00 00            call        sprintf_ 
0DF8    8D 46 D2                  lea         ax,-0x2e[bp] 
0DFB    83 C4 0E                  add         sp,0x000e 
0DFE    8C D2                     mov         dx,ss 
0E00    E8 00 00                  call        define_word_ 
0E03    84 C0                     test        al,al 
0E05    75 0B                     jne         L$112 
0E07    B8 00 00                  mov         ax,offset _outofmemory 
0E0A    BA 00 00                  mov         dx,seg _outofmemory 
0E0D    9A 00 00 00 00            call        putstr_ 
0E12                          L$112:
0E12    C9                        leave       
0E13    C3                        ret         
0E14                          add_str_:
0E14    53                        push        bx 
0E15    51                        push        cx 
0E16    56                        push        si 
0E17    57                        push        di 
0E18    C8 04 00 00               enter       0x0004,0x00 
0E1C    89 C6                     mov         si,ax 
0E1E    89 D7                     mov         di,dx 
0E20    E8 00 00                  call        detect_number_ 
0E23    85 C0                     test        ax,ax 
0E25    74 4D                     je          L$115 
0E27    89 F0                     mov         ax,si 
0E29    89 FA                     mov         dx,di 
0E2B    E8 00 00                  call        parse_number_ 
0E2E    89 46 FC                  mov         word ptr -0x4[bp],ax 
0E31                          L$113:
0E31    FF 4E FC                  dec         word ptr -0x4[bp] 
0E34    83 7E FC FF               cmp         word ptr -0x4[bp],0xffff 
0E38    74 2D                     je          L$114 
0E3A    36 A1 00 00               mov         ax,word ptr ss:_datap_segment 
0E3E    36 8B 1E 00 00            mov         bx,word ptr ss:_data 
0E43    C1 E0 02                  shl         ax,0x02 
0E46    36 8E 1E 02 00            mov         ds,word ptr ss:_data+0x2 
0E4B    01 C3                     add         bx,ax 
0E4D    36 A1 00 00               mov         ax,word ptr ss:_datap_offset 
0E51    89 C2                     mov         dx,ax 
0E53    42                        inc         dx 
0E54    36 89 16 00 00            mov         word ptr ss:_datap_offset,dx 
0E59    C5 0F                     lds         cx,dword ptr [bx] 
0E5B    89 CB                     mov         bx,cx 
0E5D    01 C3                     add         bx,ax 
0E5F    C6 07 00                  mov         byte ptr [bx],0x00 
0E62    E8 00 00                  call        check_data_size_ 
0E65    EB CA                     jmp         L$113 
0E67                          L$114:
0E67    89 F0                     mov         ax,si 
0E69    89 FA                     mov         dx,di 
0E6B    E8 00 00                  call        skip_word_ 
0E6E    89 C6                     mov         si,ax 
0E70    89 D7                     mov         di,dx 
0E72    EB 30                     jmp         L$118 
0E74                          L$115:
0E74    8D 5E FC                  lea         bx,-0x4[bp] 
0E77    8C D1                     mov         cx,ss 
0E79    89 F0                     mov         ax,si 
0E7B    89 FA                     mov         dx,di 
0E7D    E8 00 00                  call        parse_string_ 
0E80    89 46 FE                  mov         word ptr -0x2[bp],ax 
0E83    89 D1                     mov         cx,dx 
0E85    85 D2                     test        dx,dx 
0E87    75 04                     jne         L$116 
0E89    85 C0                     test        ax,ax 
0E8B    74 0D                     je          L$117 
0E8D                          L$116:
0E8D    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
0E90    E8 00 00                  call        add_string_to_data_ 
0E93    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
0E96    40                        inc         ax 
0E97    40                        inc         ax 
0E98    01 C6                     add         si,ax 
0E9A                          L$117:
0E9A    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0E9D    89 CA                     mov         dx,cx 
0E9F    9A 00 00 00 00            call        free_ 
0EA4                          L$118:
0EA4    89 F0                     mov         ax,si 
0EA6    89 FA                     mov         dx,di 
	     0EA9		; The label referred to here is an undefined location
0EA8    E9 88 98                  jmp         0xffffa733 
0EAB                          define_str_:
0EAB    51                        push        cx 
0EAC    56                        push        si 
0EAD    57                        push        di 
0EAE    C8 2C 00 00               enter       0x002c,0x00 
0EB2    89 C6                     mov         si,ax 
0EB4    89 56 FC                  mov         word ptr -0x4[bp],dx 
0EB7    88 5E FE                  mov         byte ptr -0x2[bp],bl 
0EBA    36 8B 3E 00 00            mov         di,word ptr ss:_datap_offset 
0EBF    84 DB                     test        bl,bl 
0EC1    74 1C                     je          L$119 
0EC3    89 C3                     mov         bx,ax 
0EC5    89 D1                     mov         cx,dx 
0EC7    8D 46 D4                  lea         ax,-0x2c[bp] 
0ECA    8C D2                     mov         dx,ss 
0ECC    E8 00 00                  call        copy_str_ 
0ECF    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
0ED2    89 F0                     mov         ax,si 
0ED4    E8 00 00                  call        skip_word_ 
0ED7    E8 00 00                  call        skip_whitespaces_ 
0EDA    89 C6                     mov         si,ax 
0EDC    89 56 FC                  mov         word ptr -0x4[bp],dx 
0EDF                          L$119:
0EDF    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
0EE2    80 3C 7B                  cmp         byte ptr [si],0x7b 
0EE5    0F 85 D7 00               jne         L$127 
0EE9    BA 02 00                  mov         dx,0x0002 
0EEC    89 D0                     mov         ax,dx 
0EEE    C7 46 F8 00 00            mov         word ptr -0x8[bp],0x0000 
0EF3    9A 00 00 00 00            call        calloc_ 
0EF8    89 C7                     mov         di,ax 
0EFA    89 56 FA                  mov         word ptr -0x6[bp],dx 
0EFD    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
0F00    8D 44 01                  lea         ax,0x1[si] 
0F03    31 C9                     xor         cx,cx 
0F05                          L$120:
0F05    E8 00 00                  call        skip_whitespaces_ 
0F08    89 C6                     mov         si,ax 
0F0A    89 56 FC                  mov         word ptr -0x4[bp],dx 
0F0D    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
0F10    80 3C 7D                  cmp         byte ptr [si],0x7d 
0F13    74 44                     je          L$122 
0F15    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
0F18    41                        inc         cx 
0F19    41                        inc         cx 
0F1A    89 F8                     mov         ax,di 
0F1C    89 CB                     mov         bx,cx 
0F1E    FF 46 F8                  inc         word ptr -0x8[bp] 
0F21    9A 00 00 00 00            call        realloc_ 
0F26    85 D2                     test        dx,dx 
0F28    75 13                     jne         L$121 
0F2A    85 C0                     test        ax,ax 
0F2C    75 0F                     jne         L$121 
0F2E    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
0F31    89 F8                     mov         ax,di 
0F33    9A 00 00 00 00            call        free_ 
0F38    31 C0                     xor         ax,ax 
0F3A    E9 B5 0C                  jmp         L$272 
0F3D                          L$121:
0F3D    89 C7                     mov         di,ax 
0F3F    89 56 FA                  mov         word ptr -0x6[bp],dx 
0F42    8E DA                     mov         ds,dx 
0F44    89 C3                     mov         bx,ax 
0F46    36 A1 00 00               mov         ax,word ptr ss:_datap_offset 
0F4A    01 CB                     add         bx,cx 
0F4C    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
0F4F    89 47 FE                  mov         word ptr -0x2[bx],ax 
0F52    89 F0                     mov         ax,si 
0F54    E8 00 00                  call        add_str_ 
0F57    EB AC                     jmp         L$120 
0F59                          L$122:
0F59    80 7E FE 00               cmp         byte ptr -0x2[bp],0x00 
0F5D    74 55                     je          L$126 
0F5F    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
0F62    89 7E F4                  mov         word ptr -0xc[bp],di 
0F65    31 C9                     xor         cx,cx 
0F67    89 46 F6                  mov         word ptr -0xa[bp],ax 
0F6A                          L$123:
0F6A    3B 4E F8                  cmp         cx,word ptr -0x8[bp] 
0F6D    73 45                     jae         L$126 
0F6F    85 C9                     test        cx,cx 
0F71    75 0F                     jne         L$124 
0F73    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
0F76    8D 46 D4                  lea         ax,-0x2c[bp] 
0F79    8C D2                     mov         dx,ss 
0F7B    8B 1D                     mov         bx,word ptr [di] 
0F7D    E8 00 00                  call        add_pointer_ 
0F80    EB 2B                     jmp         L$125 
0F82                          L$124:
0F82    36 8B 36 00 00            mov         si,word ptr ss:_datap_segment 
0F87    36 A1 00 00               mov         ax,word ptr ss:_data 
0F8B    C1 E6 02                  shl         si,0x02 
0F8E    36 8E 1E 02 00            mov         ds,word ptr ss:_data+0x2 
0F93    01 C6                     add         si,ax 
0F95    C5 1C                     lds         bx,dword ptr [si] 
0F97    8B 76 F4                  mov         si,word ptr -0xc[bp] 
0F9A    36 03 1E 00 00            add         bx,word ptr ss:_datap_offset 
0F9F    8E 46 F6                  mov         es,word ptr -0xa[bp] 
0FA2    26 8B 04                  mov         ax,word ptr es:[si] 
0FA5    89 07                     mov         word ptr [bx],ax 
0FA7    36 83 06 00 00 02         add         word ptr ss:_datap_offset,0x0002 
0FAD                          L$125:
0FAD    83 46 F4 02               add         word ptr -0xc[bp],0x0002 
0FB1    41                        inc         cx 
0FB2    EB B6                     jmp         L$123 
0FB4                          L$126:
0FB4    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
0FB7    89 F8                     mov         ax,di 
0FB9    9A 00 00 00 00            call        free_ 
0FBE    EB 3B                     jmp         L$128 
0FC0                          L$127:
0FC0    8D 46 D4                  lea         ax,-0x2c[bp] 
0FC3    8C D2                     mov         dx,ss 
0FC5    31 DB                     xor         bx,bx 
0FC7    E8 00 00                  call        define_symbol_ 
0FCA    85 C0                     test        ax,ax 
0FCC    0F 84 22 0C               je          L$272 
0FD0    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
0FD3    89 F0                     mov         ax,si 
0FD5    E8 00 00                  call        add_str_ 
0FD8    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
0FDE    74 1B                     je          L$128 
0FE0    57                        push        di 
0FE1    16                        push        ss 
0FE2    68 90 01                  push        offset DGROUP:L$1474 
0FE5    16                        push        ss 
0FE6    68 00 00                  push        offset _message 
0FE9    8C D2                     mov         dx,ss 
0FEB    9A 00 00 00 00            call        sprintf_ 
0FF0    83 C4 0A                  add         sp,0x000a 
0FF3    B8 00 00                  mov         ax,offset _message 
0FF6    9A 00 00 00 00            call        putstr_ 
0FFB                          L$128:
0FFB    B8 01 00                  mov         ax,0x0001 
0FFE    E9 F1 0B                  jmp         L$272 
1001                          nongpreg_:
1001    53                        push        bx 
1002    51                        push        cx 
1003    56                        push        si 
1004    57                        push        di 
1005    C8 02 00 00               enter       0x0002,0x00 
1009    89 C7                     mov         di,ax 
100B    89 D6                     mov         si,dx 
100D    C6 46 FE 04               mov         byte ptr -0x2[bp],0x04 
1011                          L$129:
1011    FE 4E FE                  dec         byte ptr -0x2[bp] 
1014    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
1017    3C FF                     cmp         al,0xff 
1019    74 29                     je          L$130 
101B    0F B6 D8                  movzx       bx,al 
101E    6A 02                     push        0x0002 
1020    C1 E3 02                  shl         bx,0x02 
1023    89 F2                     mov         dx,si 
1025    36 8B 87 00 00            mov         ax,word ptr ss:_siregs[bx] 
102A    36 8B 8F 02 00            mov         cx,word ptr ss:_siregs+0x2[bx] 
102F    89 C3                     mov         bx,ax 
1031    89 F8                     mov         ax,di 
1033    9A 00 00 00 00            call        strncmp_ 
1038    85 C0                     test        ax,ax 
103A    75 D5                     jne         L$129 
103C    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
103F    0C 08                     or          al,0x08 
	     1042		; The label referred to here is an undefined location
1041    E9 EF 96                  jmp         0xffffa733 
1044                          L$130:
1044    30 C0                     xor         al,al 
	     1047		; The label referred to here is an undefined location
1046    E9 EA 96                  jmp         0xffffa733 
1049                          parsemov_:
1049    56                        push        si 
104A    57                        push        di 
104B    C8 12 00 00               enter       0x0012,0x00 
104F    89 46 EE                  mov         word ptr -0x12[bp],ax 
1052    89 56 F0                  mov         word ptr -0x10[bp],dx 
1055    89 5E F2                  mov         word ptr -0xe[bp],bx 
1058    89 4E FA                  mov         word ptr -0x6[bp],cx 
105B    89 C8                     mov         ax,cx 
105D    89 4E F6                  mov         word ptr -0xa[bp],cx 
1060    30 C8                     xor         al,cl 
1062    8D 77 01                  lea         si,0x1[bx] 
1065    88 46 FC                  mov         byte ptr -0x4[bp],al 
1068    89 C8                     mov         ax,cx 
106A    89 4E F8                  mov         word ptr -0x8[bp],cx 
106D    30 C8                     xor         al,cl 
106F    8D 7F 02                  lea         di,0x2[bx] 
1072    88 46 FE                  mov         byte ptr -0x2[bp],al 
1075    E9 44 01                  jmp         L$148 
1078                          L$131:
1078    C5 5E EE                  lds         bx,dword ptr -0x12[bp] 
107B    8A 07                     mov         al,byte ptr [bx] 
107D    2C 61                     sub         al,0x61 
107F    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
1082    00 C0                     add         al,al 
1084    88 05                     mov         byte ptr [di],al 
1086    C5 5E EE                  lds         bx,dword ptr -0x12[bp] 
1089    80 7F 01 68               cmp         byte ptr 0x1[bx],0x68 
108D    75 05                     jne         L$132 
108F    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
1092    FE 05                     inc         byte ptr [di] 
1094                          L$132:
1094    47                        inc         di 
1095    E9 FF 00                  jmp         L$147 
1098                          L$133:
1098    C5 5E EE                  lds         bx,dword ptr -0x12[bp] 
109B    8A 07                     mov         al,byte ptr [bx] 
109D    3C 2A                     cmp         al,0x2a 
109F    72 32                     jb          L$137 
10A1    3C 2C                     cmp         al,0x2c 
10A3    77 2E                     ja          L$137 
10A5    3C 2A                     cmp         al,0x2a 
10A7    75 07                     jne         L$134 
10A9    8A 4E FE                  mov         cl,byte ptr -0x2[bp] 
10AC    B0 09                     mov         al,0x09 
10AE    EB 10                     jmp         L$136 
10B0                          L$134:
10B0    3C 2B                     cmp         al,0x2b 
10B2    75 07                     jne         L$135 
10B4    8A 4E FE                  mov         cl,byte ptr -0x2[bp] 
10B7    B0 0A                     mov         al,0x0a 
10B9    EB 05                     jmp         L$136 
10BB                          L$135:
10BB    8A 4E FE                  mov         cl,byte ptr -0x2[bp] 
10BE    B0 0B                     mov         al,0x0b 
10C0                          L$136:
10C0    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
10C3    D2 E0                     shl         al,cl 
10C5    08 04                     or          byte ptr [si],al 
10C7    FF 46 EE                  inc         word ptr -0x12[bp] 
10CA    8B 56 F0                  mov         dx,word ptr -0x10[bp] 
10CD    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
10D0    E9 21 01                  jmp         L$149 
10D3                          L$137:
10D3    8A 4E FE                  mov         cl,byte ptr -0x2[bp] 
10D6    B0 0D                     mov         al,0x0d 
10D8    8E 5E F0                  mov         ds,word ptr -0x10[bp] 
10DB    8D 55 02                  lea         dx,0x2[di] 
10DE    8B 5E EE                  mov         bx,word ptr -0x12[bp] 
10E1    89 56 F4                  mov         word ptr -0xc[bp],dx 
10E4    D2 E0                     shl         al,cl 
10E6    80 3F 26                  cmp         byte ptr [bx],0x26 
10E9    75 1A                     jne         L$139 
10EB    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
10EE    08 04                     or          byte ptr [si],al 
10F0    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
10F3    8B 56 F0                  mov         dx,word ptr -0x10[bp] 
10F6    40                        inc         ax 
10F7    E8 00 00                  call        get_symbol_addr_ 
10FA                          L$138:
10FA    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
10FD    89 05                     mov         word ptr [di],ax 
10FF    8B 7E F4                  mov         di,word ptr -0xc[bp] 
1102    E9 92 00                  jmp         L$147 
1105                          L$139:
1105    80 3F 24                  cmp         byte ptr [bx],0x24 
1108    75 32                     jne         L$142 
110A    0F B6 46 FC               movzx       ax,byte ptr -0x4[bp] 
110E    43                        inc         bx 
110F    8C D9                     mov         cx,ds 
1111    E8 00 00                  call        define_symbol_type_ 
1114    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
1117    24 77                     and         al,0x77 
1119    08 04                     or          byte ptr [si],al 
111B    80 7E FC 00               cmp         byte ptr -0x4[bp],0x00 
111F    74 08                     je          L$140 
1121    F6 04 70                  test        byte ptr [si],0x70 
1124    75 03                     jne         L$140 
1126    80 0C D0                  or          byte ptr [si],0xd0 
1129                          L$140:
1129    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
112C    8B 56 F0                  mov         dx,word ptr -0x10[bp] 
112F    40                        inc         ax 
1130    E8 00 00                  call        get_symbol_addr_ 
1133    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
1136    89 05                     mov         word ptr [di],ax 
1138                          L$141:
1138    47                        inc         di 
1139    47                        inc         di 
113A    EB 5B                     jmp         L$147 
113C                          L$142:
113C    80 3F 2E                  cmp         byte ptr [bx],0x2e 
113F    75 11                     jne         L$143 
1141    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
1144    08 04                     or          byte ptr [si],al 
1146    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
1149    8B 56 F0                  mov         dx,word ptr -0x10[bp] 
114C    40                        inc         ax 
114D    E8 00 00                  call        get_symbol_seg_ 
1150    EB A8                     jmp         L$138 
1152                          L$143:
1152    B0 0C                     mov         al,0x0c 
1154    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
1157    D2 E0                     shl         al,cl 
1159    8C D2                     mov         dx,ss 
115B    08 04                     or          byte ptr [si],al 
115D    8D 46 EE                  lea         ax,-0x12[bp] 
1160    8D 4D 01                  lea         cx,0x1[di] 
1163    E8 00 00                  call        getwordvalue_ 
1166    89 C2                     mov         dx,ax 
1168    85 C0                     test        ax,ax 
116A    0F 8D A8 00               jge         L$151 
116E    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
1171    F6 04 04                  test        byte ptr [si],0x04 
1174    75 07                     jne         L$144 
1176    0F BE D8                  movsx       bx,al 
1179    39 D8                     cmp         ax,bx 
117B    74 13                     je          L$145 
117D                          L$144:
117D    8A 4E FE                  mov         cl,byte ptr -0x2[bp] 
1180    B0 01                     mov         al,0x01 
1182    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
1185    D2 E0                     shl         al,cl 
1187    08 04                     or          byte ptr [si],al 
1189    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
118C    89 15                     mov         word ptr [di],dx 
118E    EB A8                     jmp         L$141 
1190                          L$145:
1190    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
1193    88 1D                     mov         byte ptr [di],bl 
1195                          L$146:
1195    89 CF                     mov         di,cx 
1197                          L$147:
1197    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
119A    8B 56 F0                  mov         dx,word ptr -0x10[bp] 
119D    80 46 FE 04               add         byte ptr -0x2[bp],0x04 
11A1    FE 46 FC                  inc         byte ptr -0x4[bp] 
11A4    E8 00 00                  call        skip_word_ 
11A7    89 46 EE                  mov         word ptr -0x12[bp],ax 
11AA    89 56 F0                  mov         word ptr -0x10[bp],dx 
11AD    E8 00 00                  call        skip_whitespaces_ 
11B0    89 46 EE                  mov         word ptr -0x12[bp],ax 
11B3    89 56 F0                  mov         word ptr -0x10[bp],dx 
11B6    80 7E FC 02               cmp         byte ptr -0x4[bp],0x02 
11BA    73 76                     jae         L$153 
11BC                          L$148:
11BC    C5 5E EE                  lds         bx,dword ptr -0x12[bp] 
11BF    8A 07                     mov         al,byte ptr [bx] 
11C1    3C 61                     cmp         al,0x61 
11C3    0F 82 D1 FE               jb          L$133 
11C7    3C 7A                     cmp         al,0x7a 
11C9    0F 87 CB FE               ja          L$133 
11CD    0F B6 56 FC               movzx       dx,byte ptr -0x4[bp] 
11D1    8C D9                     mov         cx,ds 
11D3    89 D0                     mov         ax,dx 
11D5    E8 00 00                  call        define_register_type_ 
11D8    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
11DB    08 04                     or          byte ptr [si],al 
11DD    8B 5E EE                  mov         bx,word ptr -0x12[bp] 
11E0    8B 4E F0                  mov         cx,word ptr -0x10[bp] 
11E3    89 D0                     mov         ax,dx 
11E5    E8 00 00                  call        define_register_type_ 
11E8    84 C0                     test        al,al 
11EA    0F 84 8A FE               je          L$131 
11EE    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
11F1    8B 56 F0                  mov         dx,word ptr -0x10[bp] 
11F4                          L$149:
11F4    E8 00 00                  call        nongpreg_ 
11F7    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
11FA    88 C2                     mov         dl,al 
11FC    88 05                     mov         byte ptr [di],al 
11FE    8D 45 01                  lea         ax,0x1[di] 
1201    84 D2                     test        dl,dl 
1203    75 0D                     jne         L$150 
1205    C5 5E EE                  lds         bx,dword ptr -0x12[bp] 
1208    8A 17                     mov         dl,byte ptr [bx] 
120A    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
120D    80 EA 61                  sub         dl,0x61 
1210    88 15                     mov         byte ptr [di],dl 
1212                          L$150:
1212    89 C7                     mov         di,ax 
1214    EB 81                     jmp         L$147 
1216                          L$151:
1216    3D FF 00                  cmp         ax,0x00ff 
1219    7E 0F                     jle         L$152 
121B    8A 4E FE                  mov         cl,byte ptr -0x2[bp] 
121E    B2 01                     mov         dl,0x01 
1220    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
1223    D2 E2                     shl         dl,cl 
1225    08 14                     or          byte ptr [si],dl 
1227    E9 D0 FE                  jmp         L$138 
122A                          L$152:
122A    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
122D    88 05                     mov         byte ptr [di],al 
122F    E9 63 FF                  jmp         L$146 
1232                          L$153:
1232    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
1235    8B 5E F2                  mov         bx,word ptr -0xe[bp] 
1238    89 F8                     mov         ax,di 
123A    C6 05 00                  mov         byte ptr [di],0x00 
123D    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
1240    2B 46 F2                  sub         ax,word ptr -0xe[bp] 
1243    88 47 10                  mov         byte ptr 0x10[bx],al 
1246    E9 87 00                  jmp         L$160 
1249                          skip_whitespaces_:
1249    53                        push        bx 
124A    89 C3                     mov         bx,ax 
124C    8E DA                     mov         ds,dx 
124E                          L$154:
124E    80 3F 20                  cmp         byte ptr [bx],0x20 
1251    75 03                     jne         L$155 
1253    43                        inc         bx 
1254    EB F8                     jmp         L$154 
1256                          L$155:
1256    89 D8                     mov         ax,bx 
1258    8C DA                     mov         dx,ds 
125A    5B                        pop         bx 
125B    C3                        ret         
125C                          skip_word_:
125C    53                        push        bx 
125D    89 C3                     mov         bx,ax 
125F    8E DA                     mov         ds,dx 
1261                          L$156:
1261    8A 07                     mov         al,byte ptr [bx] 
1263    84 C0                     test        al,al 
1265    74 EF                     je          L$155 
1267    3C 20                     cmp         al,0x20 
1269    74 EB                     je          L$155 
126B    3C 0A                     cmp         al,0x0a 
126D    74 E7                     je          L$155 
126F    43                        inc         bx 
1270    EB EF                     jmp         L$156 
1272                          comp_str_:
1272    56                        push        si 
1273    57                        push        di 
1274    C8 04 00 00               enter       0x0004,0x00 
1278    50                        push        ax 
1279    89 DF                     mov         di,bx 
127B    8E D9                     mov         ds,cx 
127D    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
1280    89 56 FE                  mov         word ptr -0x2[bp],dx 
1283    89 FE                     mov         si,di 
1285    89 4E FC                  mov         word ptr -0x4[bp],cx 
1288    31 C0                     xor         ax,ax 
128A                          L$157:
128A    8E 46 FE                  mov         es,word ptr -0x2[bp] 
128D    26 80 3F 00               cmp         byte ptr es:[bx],0x00 
1291    74 1C                     je          L$158 
1293    8E 46 FC                  mov         es,word ptr -0x4[bp] 
1296    26 80 3C 00               cmp         byte ptr es:[si],0x00 
129A    74 13                     je          L$158 
129C    8E 46 FE                  mov         es,word ptr -0x2[bp] 
129F    26 8A 0F                  mov         cl,byte ptr es:[bx] 
12A2    8E 46 FC                  mov         es,word ptr -0x4[bp] 
12A5    26 3A 0C                  cmp         cl,byte ptr es:[si] 
12A8    75 05                     jne         L$158 
12AA    43                        inc         bx 
12AB    46                        inc         si 
12AC    40                        inc         ax 
12AD    EB DB                     jmp         L$157 
12AF                          L$158:
12AF    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
12B2    8E C2                     mov         es,dx 
12B4    01 C3                     add         bx,ax 
12B6    26 80 3F 00               cmp         byte ptr es:[bx],0x00 
12BA    75 18                     jne         L$161 
12BC    89 FB                     mov         bx,di 
12BE    01 C3                     add         bx,ax 
12C0    8A 07                     mov         al,byte ptr [bx] 
12C2    3C 20                     cmp         al,0x20 
12C4    74 08                     je          L$159 
12C6    3C 0A                     cmp         al,0x0a 
12C8    74 04                     je          L$159 
12CA    84 C0                     test        al,al 
12CC    75 06                     jne         L$161 
12CE                          L$159:
12CE    31 C0                     xor         ax,ax 
12D0                          L$160:
12D0    C9                        leave       
12D1    5F                        pop         di 
12D2    5E                        pop         si 
12D3    C3                        ret         
12D4                          L$161:
12D4    B8 01 00                  mov         ax,0x0001 
12D7    EB F7                     jmp         L$160 
12D9                          copy_str_:
12D9    56                        push        si 
12DA    57                        push        di 
12DB    8E D9                     mov         ds,cx 
12DD    89 C6                     mov         si,ax 
12DF    8E C2                     mov         es,dx 
12E1    31 FF                     xor         di,di 
12E3                          L$162:
12E3    80 3F 00                  cmp         byte ptr [bx],0x00 
12E6    74 14                     je          L$163 
12E8    80 3F 20                  cmp         byte ptr [bx],0x20 
12EB    74 0F                     je          L$163 
12ED    80 3F 0A                  cmp         byte ptr [bx],0x0a 
12F0    74 0A                     je          L$163 
12F2    47                        inc         di 
12F3    8A 0F                     mov         cl,byte ptr [bx] 
12F5    43                        inc         bx 
12F6    26 88 0C                  mov         byte ptr es:[si],cl 
12F9    46                        inc         si 
12FA    EB E7                     jmp         L$162 
12FC                          L$163:
12FC    8E DA                     mov         ds,dx 
12FE    01 C7                     add         di,ax 
1300    C6 05 00                  mov         byte ptr [di],0x00 
1303    5F                        pop         di 
1304    5E                        pop         si 
1305    C3                        ret         
1306                          parse_number_:
1306    53                        push        bx 
1307    51                        push        cx 
1308    56                        push        si 
1309    89 C6                     mov         si,ax 
130B    8E DA                     mov         ds,dx 
130D    80 3C 30                  cmp         byte ptr [si],0x30 
1310    75 2E                     jne         L$169 
1312    8A 54 01                  mov         dl,byte ptr 0x1[si] 
1315    40                        inc         ax 
1316    40                        inc         ax 
1317    80 FA 78                  cmp         dl,0x78 
131A    74 0C                     je          L$164 
131C    80 FA 62                  cmp         dl,0x62 
131F    74 0D                     je          L$166 
1321    80 FA 20                  cmp         dl,0x20 
1324    74 0C                     je          L$167 
1326    EB 11                     jmp         L$168 
1328                          L$164:
1328    6A 10                     push        0x0010 
132A                          L$165:
132A    8C DA                     mov         dx,ds 
132C    EB 14                     jmp         L$170 
132E                          L$166:
132E    6A 02                     push        0x0002 
1330    EB F8                     jmp         L$165 
1332                          L$167:
1332    31 C0                     xor         ax,ax 
1334    31 D2                     xor         dx,dx 
1336    E9 15 F3                  jmp         L$50 
1339                          L$168:
1339    6A 08                     push        0x0008 
133B    8D 44 01                  lea         ax,0x1[si] 
133E    EB EA                     jmp         L$165 
1340                          L$169:
1340    6A 0A                     push        0x000a 
1342                          L$170:
1342    31 DB                     xor         bx,bx 
1344    31 C9                     xor         cx,cx 
1346    9A 00 00 00 00            call        strtol_ 
134B    E9 00 F3                  jmp         L$50 
134E                          detect_number_:
134E    53                        push        bx 
134F    89 C3                     mov         bx,ax 
1351    8E DA                     mov         ds,dx 
1353    8A 07                     mov         al,byte ptr [bx] 
1355    3C 30                     cmp         al,0x30 
1357    72 04                     jb          L$171 
1359    3C 39                     cmp         al,0x39 
135B    76 05                     jbe         L$172 
135D                          L$171:
135D    80 3F 2D                  cmp         byte ptr [bx],0x2d 
1360    75 05                     jne         L$173 
1362                          L$172:
1362    B8 01 00                  mov         ax,0x0001 
1365    5B                        pop         bx 
1366    C3                        ret         
1367                          L$173:
1367    31 C0                     xor         ax,ax 
1369    5B                        pop         bx 
136A    C3                        ret         
136B                          parse_char_:
136B    53                        push        bx 
136C    51                        push        cx 
136D    56                        push        si 
136E    57                        push        di 
136F    89 C3                     mov         bx,ax 
1371    89 D7                     mov         di,dx 
1373    8E DA                     mov         ds,dx 
1375    C5 37                     lds         si,dword ptr [bx] 
1377    80 3C 5C                  cmp         byte ptr [si],0x5c 
137A    0F 85 AF 00               jne         L$191 
137E    8E C2                     mov         es,dx 
1380    46                        inc         si 
1381    26 8C 5F 02               mov         word ptr es:0x2[bx],ds 
1385    8E DA                     mov         ds,dx 
1387    89 F0                     mov         ax,si 
1389    8B 57 02                  mov         dx,word ptr 0x2[bx] 
138C    89 37                     mov         word ptr [bx],si 
138E    E8 00 00                  call        detect_number_ 
1391    85 C0                     test        ax,ax 
1393    74 15                     je          L$175 
1395    6A 08                     push        0x0008 
1397    8E DF                     mov         ds,di 
1399    89 F9                     mov         cx,di 
139B    8B 07                     mov         ax,word ptr [bx] 
139D    8B 57 02                  mov         dx,word ptr 0x2[bx] 
13A0                          L$174:
13A0    9A 00 00 00 00            call        strtoul_ 
13A5    89 C1                     mov         cx,ax 
13A7    E9 14 F7                  jmp         L$91 
13AA                          L$175:
13AA    8E DF                     mov         ds,di 
13AC    C5 37                     lds         si,dword ptr [bx] 
13AE    8A 04                     mov         al,byte ptr [si] 
13B0    3C 78                     cmp         al,0x78 
13B2    75 0B                     jne         L$176 
13B4    6A 10                     push        0x0010 
13B6    8D 44 01                  lea         ax,0x1[si] 
13B9    89 F9                     mov         cx,di 
13BB    8C DA                     mov         dx,ds 
13BD    EB E1                     jmp         L$174 
13BF                          L$176:
13BF    3C 62                     cmp         al,0x62 
13C1    72 1C                     jb          L$178 
13C3    76 37                     jbe         L$182 
13C5    3C 72                     cmp         al,0x72 
13C7    72 0C                     jb          L$177 
13C9    76 40                     jbe         L$185 
13CB    3C 76                     cmp         al,0x76 
13CD    74 46                     je          L$187 
13CF    3C 74                     cmp         al,0x74 
13D1    74 3D                     je          L$186 
13D3    EB 51                     jmp         L$190 
13D5                          L$177:
13D5    3C 6E                     cmp         al,0x6e 
13D7    74 2D                     je          L$184 
13D9    3C 66                     cmp         al,0x66 
13DB    74 24                     je          L$183 
13DD    EB 47                     jmp         L$190 
13DF                          L$178:
13DF    3C 3F                     cmp         al,0x3f 
13E1    72 0C                     jb          L$180 
13E3    76 3E                     jbe         L$189 
13E5    3C 61                     cmp         al,0x61 
13E7    74 0E                     je          L$181 
13E9    3C 5C                     cmp         al,0x5c 
13EB                          L$179:
13EB    74 2D                     je          L$188 
13ED    EB 37                     jmp         L$190 
13EF                          L$180:
13EF    3C 27                     cmp         al,0x27 
13F1    74 27                     je          L$188 
13F3    3C 22                     cmp         al,0x22 
13F5    EB F4                     jmp         L$179 
13F7                          L$181:
13F7    B9 07 00                  mov         cx,0x0007 
13FA    EB 2A                     jmp         L$190 
13FC                          L$182:
13FC    B9 08 00                  mov         cx,0x0008 
13FF    EB 25                     jmp         L$190 
1401                          L$183:
1401    B9 0C 00                  mov         cx,0x000c 
1404    EB 20                     jmp         L$190 
1406                          L$184:
1406    B9 0A 00                  mov         cx,0x000a 
1409    EB 1B                     jmp         L$190 
140B                          L$185:
140B    B9 0D 00                  mov         cx,0x000d 
140E    EB 16                     jmp         L$190 
1410                          L$186:
1410    B9 09 00                  mov         cx,0x0009 
1413    EB 11                     jmp         L$190 
1415                          L$187:
1415    B9 0B 00                  mov         cx,0x000b 
1418    EB 0C                     jmp         L$190 
141A                          L$188:
141A    8E DF                     mov         ds,di 
141C    C5 37                     lds         si,dword ptr [bx] 
141E    0F B6 0C                  movzx       cx,byte ptr [si] 
1421    EB 03                     jmp         L$190 
1423                          L$189:
1423    B9 3F 00                  mov         cx,0x003f 
1426                          L$190:
1426    8E DF                     mov         ds,di 
1428    FF 07                     inc         word ptr [bx] 
142A    E9 91 F6                  jmp         L$91 
142D                          L$191:
142D    8E C2                     mov         es,dx 
142F    8D 44 01                  lea         ax,0x1[si] 
1432    26 8C 5F 02               mov         word ptr es:0x2[bx],ds 
1436    26 89 07                  mov         word ptr es:[bx],ax 
1439    0F B6 0C                  movzx       cx,byte ptr [si] 
143C    E9 7F F6                  jmp         L$91 
143F                          parsejump_:
143F    56                        push        si 
1440    57                        push        di 
1441    C8 04 00 00               enter       0x0004,0x00 
1445    50                        push        ax 
1446    89 D7                     mov         di,dx 
1448    89 5E FC                  mov         word ptr -0x4[bp],bx 
144B    89 4E FE                  mov         word ptr -0x2[bp],cx 
144E    8D 77 01                  lea         si,0x1[bx] 
1451    83 7E 08 00               cmp         word ptr 0x8[bp],0x0000 
1455    75 1D                     jne         L$193 
1457    BB 01 00                  mov         bx,0x0001 
145A    E8 00 00                  call        get_symbol_struct_ 
145D    85 D2                     test        dx,dx 
145F    75 04                     jne         L$192 
1461    85 C0                     test        ax,ax 
1463    74 24                     je          L$194 
1465                          L$192:
1465    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
1468    89 FA                     mov         dx,di 
146A    E8 00 00                  call        get_symbol_seg_ 
146D    36 3B 06 00 00            cmp         ax,word ptr ss:_codep_segment 
1472    74 15                     je          L$194 
1474                          L$193:
1474    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
1477    8E D9                     mov         ds,cx 
1479    89 FA                     mov         dx,di 
147B    80 0C 80                  or          byte ptr [si],0x80 
147E    E8 00 00                  call        get_symbol_seg_ 
1481    8E D9                     mov         ds,cx 
1483    09 04                     or          word ptr [si],ax 
1485    46                        inc         si 
1486    46                        inc         si 
1487    EB 06                     jmp         L$195 
1489                          L$194:
1489    8E D9                     mov         ds,cx 
148B    C6 04 00                  mov         byte ptr [si],0x00 
148E    46                        inc         si 
148F                          L$195:
148F    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
1492    89 FA                     mov         dx,di 
1494    E8 00 00                  call        get_symbol_addr_ 
1497    8E D9                     mov         ds,cx 
1499    89 04                     mov         word ptr [si],ax 
149B    46                        inc         si 
149C    46                        inc         si 
149D    89 F0                     mov         ax,si 
149F    C6 04 00                  mov         byte ptr [si],0x00 
14A2    C5 76 FC                  lds         si,dword ptr -0x4[bp] 
14A5    2B 46 FC                  sub         ax,word ptr -0x4[bp] 
14A8    88 44 10                  mov         byte ptr 0x10[si],al 
14AB                          L$196:
14AB    C9                        leave       
14AC    5F                        pop         di 
14AD    5E                        pop         si 
14AE    C2 02 00                  ret         0x0002 
14B1                          build_instr_:
14B1    53                        push        bx 
14B2    51                        push        cx 
14B3    56                        push        si 
14B4    57                        push        di 
14B5    C8 14 00 00               enter       0x0014,0x00 
14B9    89 46 EC                  mov         word ptr -0x14[bp],ax 
14BC    89 56 EE                  mov         word ptr -0x12[bp],dx 
14BF    30 C0                     xor         al,al 
14C1    88 46 F6                  mov         byte ptr -0xa[bp],al 
14C4    88 46 FE                  mov         byte ptr -0x2[bp],al 
14C7    88 46 FC                  mov         byte ptr -0x4[bp],al 
14CA    88 46 F8                  mov         byte ptr -0x8[bp],al 
14CD    88 46 FA                  mov         byte ptr -0x6[bp],al 
14D0                          L$197:
14D0    0F B6 76 F6               movzx       si,byte ptr -0xa[bp] 
14D4    8B 5E EC                  mov         bx,word ptr -0x14[bp] 
14D7    C1 E6 02                  shl         si,0x02 
14DA    8B 4E EE                  mov         cx,word ptr -0x12[bp] 
14DD    36 8B 84 00 00            mov         ax,word ptr ss:_INSTR[si] 
14E2    36 8B 94 02 00            mov         dx,word ptr ss:_INSTR+0x2[si] 
14E7    E8 00 00                  call        comp_str_ 
14EA    85 C0                     test        ax,ax 
14EC    74 1C                     je          L$198 
14EE    FE 46 F6                  inc         byte ptr -0xa[bp] 
14F1    0F B6 76 F6               movzx       si,byte ptr -0xa[bp] 
14F5    C1 E6 02                  shl         si,0x02 
14F8    36 8B 84 02 00            mov         ax,word ptr ss:_INSTR+0x2[si] 
14FD    36 8B 94 00 00            mov         dx,word ptr ss:_INSTR[si] 
1502    85 C0                     test        ax,ax 
1504    75 CA                     jne         L$197 
1506    85 D2                     test        dx,dx 
1508    75 C6                     jne         L$197 
150A                          L$198:
150A    0F B6 76 F6               movzx       si,byte ptr -0xa[bp] 
150E    C1 E6 02                  shl         si,0x02 
1511    36 8B 94 02 00            mov         dx,word ptr ss:_INSTR+0x2[si] 
1516    36 8B 84 00 00            mov         ax,word ptr ss:_INSTR[si] 
151B    85 D2                     test        dx,dx 
151D    75 2E                     jne         L$200 
151F    85 C0                     test        ax,ax 
1521    75 2A                     jne         L$200 
1523    66 FF 76 EC               push        dword ptr -0x14[bp] 
1527    36 FF 36 00 00            push        word ptr ss:_line_num 
152C    16                        push        ss 
152D    68 AA 01                  push        offset DGROUP:L$1475 
1530    16                        push        ss 
1531    68 00 00                  push        offset _message 
1534    8C D2                     mov         dx,ss 
1536    9A 00 00 00 00            call        sprintf_ 
153B    83 C4 0E                  add         sp,0x000e 
153E    B8 00 00                  mov         ax,offset _message 
1541    9A 00 00 00 00            call        putstr_ 
1546                          L$199:
1546    31 C0                     xor         ax,ax 
1548    31 D2                     xor         dx,dx 
	     154B		; The label referred to here is an undefined location
154A    E9 E6 91                  jmp         0xffffa733 
154D                          L$200:
154D    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
1553    74 21                     je          L$201 
1555    36 FF 36 00 00            push        word ptr ss:_line_num 
155A    52                        push        dx 
155B    50                        push        ax 
155C    16                        push        ss 
155D    68 CE 01                  push        offset DGROUP:L$1476 
1560    16                        push        ss 
1561    68 00 00                  push        offset _message 
1564    8C D2                     mov         dx,ss 
1566    9A 00 00 00 00            call        sprintf_ 
156B    83 C4 0E                  add         sp,0x000e 
156E    B8 00 00                  mov         ax,offset _message 
1571    9A 00 00 00 00            call        putstr_ 
1576                          L$201:
1576    BA 11 00                  mov         dx,0x0011 
1579    B8 01 00                  mov         ax,0x0001 
157C    9A 00 00 00 00            call        calloc_ 
1581    89 C7                     mov         di,ax 
1583    89 56 F4                  mov         word ptr -0xc[bp],dx 
1586    89 C6                     mov         si,ax 
1588    89 56 F2                  mov         word ptr -0xe[bp],dx 
158B    85 D2                     test        dx,dx 
158D    75 04                     jne         L$202 
158F    85 C0                     test        ax,ax 
1591    74 B3                     je          L$199 
1593                          L$202:
1593    8E DA                     mov         ds,dx 
1595    8A 46 F6                  mov         al,byte ptr -0xa[bp] 
1598    C6 45 10 01               mov         byte ptr 0x10[di],0x01 
159C    88 05                     mov         byte ptr [di],al 
159E    BB 00 00                  mov         bx,offset _VINSTR 
15A1    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
15A4    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
15A7    8C D1                     mov         cx,ss 
15A9    E8 00 00                  call        skip_word_ 
15AC    89 46 EC                  mov         word ptr -0x14[bp],ax 
15AF    89 56 EE                  mov         word ptr -0x12[bp],dx 
15B2    E8 00 00                  call        skip_whitespaces_ 
15B5    89 56 EE                  mov         word ptr -0x12[bp],dx 
15B8    0F B6 56 F6               movzx       dx,byte ptr -0xa[bp] 
15BC    89 46 EC                  mov         word ptr -0x14[bp],ax 
15BF    89 D0                     mov         ax,dx 
15C1    E8 00 00                  call        instr_in_array_ 
15C4    84 C0                     test        al,al 
15C6    0F 85 B1 00               jne         L$211 
15CA    BB 00 00                  mov         bx,offset _SBYTE_INSTR 
15CD    8C D1                     mov         cx,ss 
15CF    89 D0                     mov         ax,dx 
15D1    E8 00 00                  call        instr_in_array_ 
15D4    84 C0                     test        al,al 
15D6    74 07                     je          L$203 
15D8    C6 46 FE 01               mov         byte ptr -0x2[bp],0x01 
15DC    E9 A2 00                  jmp         L$212 
15DF                          L$203:
15DF    BB 00 00                  mov         bx,offset _DBYTE_INSTR 
15E2    8C D1                     mov         cx,ss 
15E4    89 D0                     mov         ax,dx 
15E6    E8 00 00                  call        instr_in_array_ 
15E9    84 C0                     test        al,al 
15EB    74 1B                     je          L$204 
15ED    BB 00 00                  mov         bx,offset _OPERIMM_INSTR 
15F0    8C D1                     mov         cx,ss 
15F2    89 D0                     mov         ax,dx 
15F4    C6 46 FE 02               mov         byte ptr -0x2[bp],0x02 
15F8    E8 00 00                  call        instr_in_array_ 
15FB    84 C0                     test        al,al 
15FD    0F 84 7A 00               je          L$211 
1601    C6 46 FA 01               mov         byte ptr -0x6[bp],0x01 
1605    E9 73 00                  jmp         L$211 
1608                          L$204:
1608    BB 00 00                  mov         bx,offset _SWORD_INSTR 
160B    8C D1                     mov         cx,ss 
160D    89 D0                     mov         ax,dx 
160F    E8 00 00                  call        instr_in_array_ 
1612    84 C0                     test        al,al 
1614    74 06                     je          L$205 
1616    C6 46 FC 01               mov         byte ptr -0x4[bp],0x01 
161A    EB 5F                     jmp         L$211 
161C                          L$205:
161C    BB 00 00                  mov         bx,offset _DWORD_INSTR 
161F    8C D1                     mov         cx,ss 
1621    89 D0                     mov         ax,dx 
1623    E8 00 00                  call        instr_in_array_ 
1626    84 C0                     test        al,al 
1628    74 06                     je          L$206 
162A    C6 46 FC 02               mov         byte ptr -0x4[bp],0x02 
162E    EB 4B                     jmp         L$211 
1630                          L$206:
1630    BB 00 00                  mov         bx,offset _TWORD_INSTR 
1633    8C D1                     mov         cx,ss 
1635    89 D0                     mov         ax,dx 
1637    E8 00 00                  call        instr_in_array_ 
163A    84 C0                     test        al,al 
163C    74 06                     je          L$207 
163E    C6 46 FC 03               mov         byte ptr -0x4[bp],0x03 
1642    EB 37                     jmp         L$211 
1644                          L$207:
1644    8A 46 F6                  mov         al,byte ptr -0xa[bp] 
1647    3C 01                     cmp         al,0x01 
1649    75 11                     jne         L$208 
164B    8B 4E F4                  mov         cx,word ptr -0xc[bp] 
164E    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
1651    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
1654    89 FB                     mov         bx,di 
1656    E8 00 00                  call        parsemov_ 
1659    E9 5A 01                  jmp         L$229 
165C                          L$208:
165C    3C 02                     cmp         al,0x02 
165E    75 13                     jne         L$210 
1660    6A 00                     push        0x0000 
1662                          L$209:
1662    8B 4E F4                  mov         cx,word ptr -0xc[bp] 
1665    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
1668    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
166B    89 FB                     mov         bx,di 
166D    E8 00 00                  call        parsejump_ 
1670    E9 43 01                  jmp         L$229 
1673                          L$210:
1673    3C 15                     cmp         al,0x15 
1675    75 04                     jne         L$211 
1677    6A 01                     push        0x0001 
1679    EB E7                     jmp         L$209 
167B                          L$211:
167B    80 7E FE 00               cmp         byte ptr -0x2[bp],0x00 
167F    74 14                     je          L$213 
1681                          L$212:
1681    0F B6 46 F6               movzx       ax,byte ptr -0xa[bp] 
1685    BB 00 00                  mov         bx,offset _WREG_INSTR 
1688    8C D1                     mov         cx,ss 
168A    E8 00 00                  call        instr_in_array_ 
168D    84 C0                     test        al,al 
168F    74 04                     je          L$213 
1691    C6 46 F8 01               mov         byte ptr -0x8[bp],0x01 
1695                          L$213:
1695    B3 01                     mov         bl,0x01 
1697    EB 24                     jmp         L$217 
1699                          L$214:
1699    0F B6 FB                  movzx       di,bl 
169C    8E 5E F2                  mov         ds,word ptr -0xe[bp] 
169F    01 F7                     add         di,si 
16A1    FE C3                     inc         bl 
16A3    88 15                     mov         byte ptr [di],dl 
16A5                          L$215:
16A5    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
16A8    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
16AB                          L$216:
16AB    E8 00 00                  call        skip_word_ 
16AE    89 46 EC                  mov         word ptr -0x14[bp],ax 
16B1    89 56 EE                  mov         word ptr -0x12[bp],dx 
16B4    E8 00 00                  call        skip_whitespaces_ 
16B7    89 46 EC                  mov         word ptr -0x14[bp],ax 
16BA    89 56 EE                  mov         word ptr -0x12[bp],dx 
16BD                          L$217:
16BD    FE 4E FE                  dec         byte ptr -0x2[bp] 
16C0    80 7E FE FF               cmp         byte ptr -0x2[bp],0xff 
16C4    74 63                     je          L$221 
16C6    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
16C9    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
16CC    E8 00 00                  call        detect_number_ 
16CF    85 C0                     test        ax,ax 
16D1    75 08                     jne         L$218 
16D3    C5 7E EC                  lds         di,dword ptr -0x14[bp] 
16D6    80 3D 27                  cmp         byte ptr [di],0x27 
16D9    75 2A                     jne         L$219 
16DB                          L$218:
16DB    8D 46 EC                  lea         ax,-0x14[bp] 
16DE    8C D2                     mov         dx,ss 
16E0    E8 00 00                  call        getwordvalue_ 
16E3    89 C2                     mov         dx,ax 
16E5    80 7E FA 00               cmp         byte ptr -0x6[bp],0x00 
16E9    74 AE                     je          L$214 
16EB    8E 5E F2                  mov         ds,word ptr -0xe[bp] 
16EE    80 0C 80                  or          byte ptr [si],0x80 
16F1    F6 C4 FF                  test        ah,0xff 
16F4    74 A3                     je          L$214 
16F6    0F B6 FB                  movzx       di,bl 
16F9    80 0C 40                  or          byte ptr [si],0x40 
16FC    01 F7                     add         di,si 
16FE    80 C3 02                  add         bl,0x02 
1701    89 05                     mov         word ptr [di],ax 
1703    EB A0                     jmp         L$215 
1705                          L$219:
1705    89 F8                     mov         ax,di 
1707    8C DA                     mov         dx,ds 
1709    E8 00 00                  call        parse_wide_register_ 
170C    0F B6 FB                  movzx       di,bl 
170F    8E 5E F2                  mov         ds,word ptr -0xe[bp] 
1712    01 F7                     add         di,si 
1714    88 05                     mov         byte ptr [di],al 
1716    80 7E F8 00               cmp         byte ptr -0x8[bp],0x00 
171A    74 03                     je          L$220 
171C    80 25 7F                  and         byte ptr [di],0x7f 
171F                          L$220:
171F    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
1722    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
1725    FE C3                     inc         bl 
1727    EB 82                     jmp         L$216 
1729                          L$221:
1729    FE 4E FC                  dec         byte ptr -0x4[bp] 
172C    80 7E FC FF               cmp         byte ptr -0x4[bp],0xff 
1730    0F 84 74 00               je          L$228 
1734    8B 56 F2                  mov         dx,word ptr -0xe[bp] 
1737    0F B6 C3                  movzx       ax,bl 
173A    89 F1                     mov         cx,si 
173C    89 56 F0                  mov         word ptr -0x10[bp],dx 
173F    01 C1                     add         cx,ax 
1741    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
1744    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
1747    80 C3 02                  add         bl,0x02 
174A    E8 00 00                  call        detect_number_ 
174D    85 C0                     test        ax,ax 
174F    75 09                     jne         L$222 
1751    C5 7E EC                  lds         di,dword ptr -0x14[bp] 
1754    8A 05                     mov         al,byte ptr [di] 
1756    3C 27                     cmp         al,0x27 
1758    75 29                     jne         L$225 
175A                          L$222:
175A    8D 46 EC                  lea         ax,-0x14[bp] 
175D    8C D2                     mov         dx,ss 
175F    E8 00 00                  call        getwordvalue_ 
1762                          L$223:
1762    89 CF                     mov         di,cx 
1764                          L$224:
1764    8E 5E F0                  mov         ds,word ptr -0x10[bp] 
1767    89 05                     mov         word ptr [di],ax 
1769    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
176C    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
176F    E8 00 00                  call        skip_word_ 
1772    89 46 EC                  mov         word ptr -0x14[bp],ax 
1775    89 56 EE                  mov         word ptr -0x12[bp],dx 
1778    E8 00 00                  call        skip_whitespaces_ 
177B    89 46 EC                  mov         word ptr -0x14[bp],ax 
177E    89 56 EE                  mov         word ptr -0x12[bp],dx 
1781    EB A6                     jmp         L$221 
1783                          L$225:
1783    3C 2E                     cmp         al,0x2e 
1785    75 0F                     jne         L$226 
1787    FF 46 EC                  inc         word ptr -0x14[bp] 
178A    8C DA                     mov         dx,ds 
178C    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
178F    89 CF                     mov         di,cx 
1791    E8 00 00                  call        get_symbol_seg_ 
1794    EB CE                     jmp         L$224 
1796                          L$226:
1796    3C 24                     cmp         al,0x24 
1798    75 03                     jne         L$227 
179A    FF 46 EC                  inc         word ptr -0x14[bp] 
179D                          L$227:
179D    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
17A0    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
17A3    E8 00 00                  call        get_symbol_addr_ 
17A6    EB BA                     jmp         L$223 
17A8                          L$228:
17A8    0F B6 FB                  movzx       di,bl 
17AB    8E 5E F2                  mov         ds,word ptr -0xe[bp] 
17AE    01 F7                     add         di,si 
17B0    C6 05 00                  mov         byte ptr [di],0x00 
17B3    88 5C 10                  mov         byte ptr 0x10[si],bl 
17B6                          L$229:
17B6    8B 56 F2                  mov         dx,word ptr -0xe[bp] 
17B9    89 F0                     mov         ax,si 
	     17BC		; The label referred to here is an undefined location
17BB    E9 75 8F                  jmp         0xffffa733 
17BE                          detect_data_type_:
17BE    53                        push        bx 
17BF    51                        push        cx 
17C0    56                        push        si 
17C1    57                        push        di 
17C2    C8 0A 00 00               enter       0x000a,0x00 
17C6    89 C6                     mov         si,ax 
17C8    89 56 F6                  mov         word ptr -0xa[bp],dx 
17CB    C7 46 FC 03 00            mov         word ptr -0x4[bp],0x0003 
17D0    8E DA                     mov         ds,dx 
17D2    8C D2                     mov         dx,ss 
17D4    8B 44 02                  mov         ax,word ptr 0x2[si] 
17D7    8B 3C                     mov         di,word ptr [si] 
17D9    89 46 FA                  mov         word ptr -0x6[bp],ax 
17DC    89 FB                     mov         bx,di 
17DE    89 C1                     mov         cx,ax 
17E0    B8 E9 01                  mov         ax,offset DGROUP:L$1477 
17E3    C6 46 FE 01               mov         byte ptr -0x2[bp],0x01 
17E7    E8 00 00                  call        comp_str_ 
17EA    85 C0                     test        ax,ax 
17EC    75 14                     jne         L$230 
17EE    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
17F1    89 F8                     mov         ax,di 
17F3    C6 46 FE 09               mov         byte ptr -0x2[bp],0x09 
17F7    E8 00 00                  call        skip_word_ 
17FA    E8 00 00                  call        skip_whitespaces_ 
17FD    89 C7                     mov         di,ax 
17FF    89 56 FA                  mov         word ptr -0x6[bp],dx 
1802                          L$230:
1802    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
1805    C1 E3 02                  shl         bx,0x02 
1808    89 5E F8                  mov         word ptr -0x8[bp],bx 
180B                          L$231:
180B    FF 4E FC                  dec         word ptr -0x4[bp] 
180E    83 6E F8 04               sub         word ptr -0x8[bp],0x0004 
1812    83 7E FC FF               cmp         word ptr -0x4[bp],0xffff 
1816    74 39                     je          L$233 
1818    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
181B    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
181E    36 8B 87 00 00            mov         ax,word ptr ss:_data_types[bx] 
1823    36 8B 97 02 00            mov         dx,word ptr ss:_data_types+0x2[bx] 
1828    89 FB                     mov         bx,di 
182A    E8 00 00                  call        comp_str_ 
182D    85 C0                     test        ax,ax 
182F    75 15                     jne         L$232 
1831    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
1834    89 F8                     mov         ax,di 
1836    E8 00 00                  call        skip_word_ 
1839    E8 00 00                  call        skip_whitespaces_ 
183C    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
183F    89 04                     mov         word ptr [si],ax 
1841    89 54 02                  mov         word ptr 0x2[si],dx 
1844    EB 0B                     jmp         L$233 
1846                          L$232:
1846    83 7E F8 00               cmp         word ptr -0x8[bp],0x0000 
184A    75 BF                     jne         L$231 
184C    B0 FF                     mov         al,0xff 
	     184F		; The label referred to here is an undefined location
184E    E9 E2 8E                  jmp         0xffffa733 
1851                          L$233:
1851    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
1854    3D 02 00                  cmp         ax,0x0002 
1857    0F 84 E9 F7               je          L$130 
185B    3D 01 00                  cmp         ax,0x0001 
185E    75 08                     jne         L$234 
1860    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
1863    0C 04                     or          al,0x04 
	     1866		; The label referred to here is an undefined location
1865    E9 CB 8E                  jmp         0xffffa733 
1868                          L$234:
1868    85 C0                     test        ax,ax 
186A    0F 85 D6 F7               jne         L$130 
186E    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
	     1872		; The label referred to here is an undefined location
1871    E9 BF 8E                  jmp         0xffffa733 
1874                          start_instr_:
1874    56                        push        si 
1875    C8 04 00 00               enter       0x0004,0x00 
1879    89 46 FC                  mov         word ptr -0x4[bp],ax 
187C    89 56 FE                  mov         word ptr -0x2[bp],dx 
187F    E8 00 00                  call        skip_whitespaces_ 
1882    89 46 FC                  mov         word ptr -0x4[bp],ax 
1885    89 56 FE                  mov         word ptr -0x2[bp],dx 
1888    8D 46 FC                  lea         ax,-0x4[bp] 
188B    8C D2                     mov         dx,ss 
188D    E8 00 00                  call        detect_data_type_ 
1890    3C FF                     cmp         al,0xff 
1892    74 1A                     je          L$236 
1894    36 80 3E 00 00 00         cmp         byte ptr ss:_pass,0x00 
189A    75 0C                     jne         L$235 
189C    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
189F    0F B6 D8                  movzx       bx,al 
18A2    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
18A5    E8 00 00                  call        define_data_ 
18A8                          L$235:
18A8    B8 01 00                  mov         ax,0x0001 
18AB    C9                        leave       
18AC    5E                        pop         si 
18AD    C3                        ret         
18AE                          L$236:
18AE    C5 76 FC                  lds         si,dword ptr -0x4[bp] 
18B1    8A 04                     mov         al,byte ptr [si] 
18B3    3C 3B                     cmp         al,0x3b 
18B5    74 F1                     je          L$235 
18B7    3C 3A                     cmp         al,0x3a 
18B9    74 06                     je          L$237 
18BB    3C 0A                     cmp         al,0x0a 
18BD    74 E9                     je          L$235 
18BF    EB 16                     jmp         L$238 
18C1                          L$237:
18C1    36 80 3E 00 00 00         cmp         byte ptr ss:_pass,0x00 
18C7    75 DF                     jne         L$235 
18C9    8D 44 01                  lea         ax,0x1[si] 
18CC    8C DA                     mov         dx,ds 
18CE    E8 00 00                  call        define_label_ 
18D1    85 C0                     test        ax,ax 
18D3    74 23                     je          L$239 
18D5    EB D1                     jmp         L$235 
18D7                          L$238:
18D7    89 F0                     mov         ax,si 
18D9    8C DA                     mov         dx,ds 
18DB    E8 00 00                  call        build_instr_ 
18DE    8E D9                     mov         ds,cx 
18E0    89 07                     mov         word ptr [bx],ax 
18E2    89 57 02                  mov         word ptr 0x2[bx],dx 
18E5    8B 47 02                  mov         ax,word ptr 0x2[bx] 
18E8    8B 17                     mov         dx,word ptr [bx] 
18EA    85 C0                     test        ax,ax 
18EC    75 0A                     jne         L$239 
18EE    85 D2                     test        dx,dx 
18F0    75 06                     jne         L$239 
18F2    B8 FF FF                  mov         ax,0xffff 
18F5    C9                        leave       
18F6    5E                        pop         si 
18F7    C3                        ret         
18F8                          L$239:
18F8    31 C0                     xor         ax,ax 
18FA    C9                        leave       
18FB    5E                        pop         si 
18FC    C3                        ret         
18FD                          define_data_:
18FD    51                        push        cx 
18FE    56                        push        si 
18FF    89 C6                     mov         si,ax 
1901    89 D1                     mov         cx,dx 
1903    84 DB                     test        bl,bl 
1905    75 2C                     jne         L$243 
1907    E8 00 00                  call        detect_number_ 
190A    85 C0                     test        ax,ax 
190C    75 10                     jne         L$242 
190E    BB 01 00                  mov         bx,0x0001 
1911    89 F0                     mov         ax,si 
1913    89 CA                     mov         dx,cx 
1915                          L$240:
1915    E8 00 00                  call        define_str_ 
1918    85 C0                     test        ax,ax 
191A                          L$241:
191A    75 39                     jne         L$246 
191C    EB 2C                     jmp         L$245 
191E                          L$242:
191E    8E D9                     mov         ds,cx 
1920    80 3C 2D                  cmp         byte ptr [si],0x2d 
1923    75 30                     jne         L$246 
1925    89 F0                     mov         ax,si 
1927    89 CA                     mov         dx,cx 
1929    E8 00 00                  call        skip_word_ 
192C    30 FF                     xor         bh,bh 
192E    E8 00 00                  call        skip_whitespaces_ 
1931    EB E2                     jmp         L$240 
1933                          L$243:
1933    F6 C3 04                  test        bl,0x04 
1936    74 09                     je          L$244 
1938    30 FF                     xor         bh,bh 
193A    E8 00 00                  call        define_word_ 
193D    84 C0                     test        al,al 
193F    EB D9                     jmp         L$241 
1941                          L$244:
1941    30 FF                     xor         bh,bh 
1943    E8 00 00                  call        define_byte_ 
1946    84 C0                     test        al,al 
1948    75 0B                     jne         L$246 
194A                          L$245:
194A    B8 00 00                  mov         ax,offset _outofmemory 
194D    BA 00 00                  mov         dx,seg _outofmemory 
1950    9A 00 00 00 00            call        putstr_ 
1955                          L$246:
1955    5E                        pop         si 
1956    59                        pop         cx 
1957    C3                        ret         
1958                          get_symbol_struct_:
1958    51                        push        cx 
1959    56                        push        si 
195A    57                        push        di 
195B    C8 04 00 00               enter       0x0004,0x00 
195F    50                        push        ax 
1960    89 D7                     mov         di,dx 
1962    88 5E FE                  mov         byte ptr -0x2[bp],bl 
1965    36 A1 00 00               mov         ax,word ptr ss:_symbol_count 
1969    89 46 FC                  mov         word ptr -0x4[bp],ax 
196C    6B F0 26                  imul        si,ax,0x0026 
196F                          L$247:
196F    FF 4E FC                  dec         word ptr -0x4[bp] 
1972    83 EE 26                  sub         si,0x0026 
1975    83 7E FC FF               cmp         word ptr -0x4[bp],0xffff 
1979    74 5F                     je          L$249 
197B    80 7E FE 00               cmp         byte ptr -0x2[bp],0x00 
197F    74 34                     je          L$248 
1981    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
1987    74 2C                     je          L$248 
1989    36 A1 02 00               mov         ax,word ptr ss:_symbols+0x2 
198D    36 8B 1E 00 00            mov         bx,word ptr ss:_symbols 
1992    8E D8                     mov         ds,ax 
1994    01 F3                     add         bx,si 
1996    FF 77 20                  push        word ptr 0x20[bx] 
1999    50                        push        ax 
199A    53                        push        bx 
199B    16                        push        ss 
199C    68 F0 01                  push        offset DGROUP:L$1478 
199F    16                        push        ss 
19A0    68 00 00                  push        offset _message 
19A3    8C D2                     mov         dx,ss 
19A5    9A 00 00 00 00            call        sprintf_ 
19AA    83 C4 0E                  add         sp,0x000e 
19AD    B8 00 00                  mov         ax,offset _message 
19B0    9A 00 00 00 00            call        putstr_ 
19B5                          L$248:
19B5    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
19B8    36 A1 00 00               mov         ax,word ptr ss:_symbols 
19BC    36 8B 16 02 00            mov         dx,word ptr ss:_symbols+0x2 
19C1    89 F9                     mov         cx,di 
19C3    01 F0                     add         ax,si 
19C5    E8 00 00                  call        comp_str_ 
19C8    85 C0                     test        ax,ax 
19CA    75 A3                     jne         L$247 
19CC    36 A1 00 00               mov         ax,word ptr ss:_symbols 
19D0    36 8B 16 02 00            mov         dx,word ptr ss:_symbols+0x2 
19D5    01 F0                     add         ax,si 
19D7    E9 18 02                  jmp         L$272 
19DA                          L$249:
19DA    36 80 3E 00 00 00         cmp         byte ptr ss:_pass,0x00 
19E0    74 23                     je          L$250 
19E2    36 FF 36 00 00            push        word ptr ss:_line_num 
19E7    57                        push        di 
19E8    FF 76 FA                  push        word ptr -0x6[bp] 
19EB    16                        push        ss 
19EC    68 10 02                  push        offset DGROUP:L$1479 
19EF    16                        push        ss 
19F0    68 00 00                  push        offset _message 
19F3    8C D2                     mov         dx,ss 
19F5    9A 00 00 00 00            call        sprintf_ 
19FA    83 C4 0E                  add         sp,0x000e 
19FD    B8 00 00                  mov         ax,offset _message 
1A00    9A 00 00 00 00            call        putstr_ 
1A05                          L$250:
1A05    31 C0                     xor         ax,ax 
1A07                          L$251:
1A07    31 D2                     xor         dx,dx 
1A09    E9 E6 01                  jmp         L$272 
1A0C                          get_symbol_addr_:
1A0C    53                        push        bx 
1A0D    31 DB                     xor         bx,bx 
1A0F    E8 00 00                  call        get_symbol_struct_ 
1A12    89 C3                     mov         bx,ax 
1A14    85 D2                     test        dx,dx 
1A16    75 04                     jne         L$252 
1A18    85 C0                     test        ax,ax 
1A1A    74 07                     je          L$253 
1A1C                          L$252:
1A1C    8E DA                     mov         ds,dx 
1A1E    8B 47 20                  mov         ax,word ptr 0x20[bx] 
1A21    5B                        pop         bx 
1A22    C3                        ret         
1A23                          L$253:
1A23    31 C0                     xor         ax,ax 
1A25    5B                        pop         bx 
1A26    C3                        ret         
1A27                          get_addr_symbol_:
1A27    51                        push        cx 
1A28    56                        push        si 
1A29    57                        push        di 
1A2A    C8 04 00 00               enter       0x0004,0x00 
1A2E    50                        push        ax 
1A2F    52                        push        dx 
1A30    88 D9                     mov         cl,bl 
1A32    36 A1 00 00               mov         ax,word ptr ss:_symbol_count 
1A36    31 F6                     xor         si,si 
1A38    36 8E 1E 02 00            mov         ds,word ptr ss:_symbols+0x2 
1A3D    6B D0 26                  imul        dx,ax,0x0026 
1A40                          L$254:
1A40    48                        dec         ax 
1A41    83 EA 26                  sub         dx,0x0026 
1A44    3D FF FF                  cmp         ax,0xffff 
1A47    74 BC                     je          L$250 
1A49    36 8B 1E 00 00            mov         bx,word ptr ss:_symbols 
1A4E    01 D3                     add         bx,dx 
1A50    8B 7F 22                  mov         di,word ptr 0x22[bx] 
1A53    3B 7E FA                  cmp         di,word ptr -0x6[bp] 
1A56    75 E8                     jne         L$254 
1A58    8B 7F 20                  mov         di,word ptr 0x20[bx] 
1A5B    3B 7E F8                  cmp         di,word ptr -0x8[bp] 
1A5E    75 E0                     jne         L$254 
1A60    0F B6 7F 24               movzx       di,byte ptr 0x24[bx] 
1A64    89 7E FC                  mov         word ptr -0x4[bp],di 
1A67    0F B6 F9                  movzx       di,cl 
1A6A    89 7E FE                  mov         word ptr -0x2[bp],di 
1A6D    8B 7E FC                  mov         di,word ptr -0x4[bp] 
1A70    85 7E FE                  test        word ptr -0x2[bp],di 
1A73    75 0B                     jne         L$255 
1A75    80 F9 01                  cmp         cl,0x01 
1A78    75 C6                     jne         L$254 
1A7A    80 7F 24 00               cmp         byte ptr 0x24[bx],0x00 
1A7E    75 C0                     jne         L$254 
1A80                          L$255:
1A80    36 8E 1E 02 00            mov         ds,word ptr ss:_symbols+0x2 
1A85    6B C8 26                  imul        cx,ax,0x0026 
1A88                          L$256:
1A88    36 8B 16 00 00            mov         dx,word ptr ss:_symbols 
1A8D    01 CA                     add         dx,cx 
1A8F    89 D3                     mov         bx,dx 
1A91    01 F3                     add         bx,si 
1A93    8A 1F                     mov         bl,byte ptr [bx] 
1A95    36 88 9C 89 00            mov         byte ptr ss:L$1601[si],bl 
1A9A    89 F3                     mov         bx,si 
1A9C    01 D3                     add         bx,dx 
1A9E    46                        inc         si 
1A9F    80 3F 00                  cmp         byte ptr [bx],0x00 
1AA2    75 E4                     jne         L$256 
1AA4    B8 89 00                  mov         ax,offset DGROUP:L$1601 
1AA7    8C D2                     mov         dx,ss 
1AA9    E9 46 01                  jmp         L$272 
1AAC                          get_symbol_seg_:
1AAC    53                        push        bx 
1AAD    31 DB                     xor         bx,bx 
1AAF    E8 00 00                  call        get_symbol_struct_ 
1AB2    89 C3                     mov         bx,ax 
1AB4    85 D2                     test        dx,dx 
1AB6    75 04                     jne         L$257 
1AB8    85 C0                     test        ax,ax 
1ABA    74 07                     je          L$258 
1ABC                          L$257:
1ABC    8E DA                     mov         ds,dx 
1ABE    8B 47 22                  mov         ax,word ptr 0x22[bx] 
1AC1    5B                        pop         bx 
1AC2    C3                        ret         
1AC3                          L$258:
1AC3    31 C0                     xor         ax,ax 
1AC5    5B                        pop         bx 
1AC6    C3                        ret         
1AC7                          define_symbol_type_:
1AC7    52                        push        dx 
1AC8    C8 02 00 00               enter       0x0002,0x00 
1ACC    88 46 FE                  mov         byte ptr -0x2[bp],al 
1ACF    89 CA                     mov         dx,cx 
1AD1    89 D8                     mov         ax,bx 
1AD3    31 DB                     xor         bx,bx 
1AD5    E8 00 00                  call        get_symbol_struct_ 
1AD8    89 C3                     mov         bx,ax 
1ADA    85 D2                     test        dx,dx 
1ADC    75 04                     jne         L$259 
1ADE    85 C0                     test        ax,ax 
1AE0    74 10                     je          L$260 
1AE2                          L$259:
1AE2    8A 4E FE                  mov         cl,byte ptr -0x2[bp] 
1AE5    8E DA                     mov         ds,dx 
1AE7    C0 E1 02                  shl         cl,0x02 
1AEA    8A 47 24                  mov         al,byte ptr 0x24[bx] 
1AED    D2 E0                     shl         al,cl 
1AEF    C9                        leave       
1AF0    5A                        pop         dx 
1AF1    C3                        ret         
1AF2                          L$260:
1AF2    30 C0                     xor         al,al 
1AF4    C9                        leave       
1AF5    5A                        pop         dx 
1AF6    C3                        ret         
1AF7                          define_register_type_:
1AF7    52                        push        dx 
1AF8    56                        push        si 
1AF9    57                        push        di 
1AFA    C8 06 00 00               enter       0x0006,0x00 
1AFE    88 46 FE                  mov         byte ptr -0x2[bp],al 
1B01    89 DF                     mov         di,bx 
1B03    89 4E FA                  mov         word ptr -0x6[bp],cx 
1B06    C7 46 FC 04 00            mov         word ptr -0x4[bp],0x0004 
1B0B    BE 10 00                  mov         si,0x0010 
1B0E                          L$261:
1B0E    FF 4E FC                  dec         word ptr -0x4[bp] 
1B11    83 EE 04                  sub         si,0x0004 
1B14    83 7E FC FF               cmp         word ptr -0x4[bp],0xffff 
1B18    74 1C                     je          L$262 
1B1A    6A 02                     push        0x0002 
1B1C    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
1B1F    89 F8                     mov         ax,di 
1B21    36 8B 9C 00 00            mov         bx,word ptr ss:_siregs[si] 
1B26    36 8B 8C 02 00            mov         cx,word ptr ss:_siregs+0x2[si] 
1B2B    9A 00 00 00 00            call        strncmp_ 
1B30    85 C0                     test        ax,ax 
1B32    74 0B                     je          L$263 
1B34    EB D8                     jmp         L$261 
1B36                          L$262:
1B36    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
1B39    80 7D 01 78               cmp         byte ptr 0x1[di],0x78 
1B3D    75 0E                     jne         L$265 
1B3F                          L$263:
1B3F    80 7E FE 00               cmp         byte ptr -0x2[bp],0x00 
1B43    75 04                     jne         L$264 
1B45    B0 04                     mov         al,0x04 
1B47    EB 06                     jmp         L$266 
1B49                          L$264:
1B49    B0 40                     mov         al,0x40 
1B4B    EB 02                     jmp         L$266 
1B4D                          L$265:
1B4D    30 C0                     xor         al,al 
1B4F                          L$266:
1B4F    C9                        leave       
1B50    5F                        pop         di 
1B51    5E                        pop         si 
1B52    5A                        pop         dx 
1B53    C3                        ret         
1B54                          parse_wide_register_:
1B54    53                        push        bx 
1B55    51                        push        cx 
1B56    56                        push        si 
1B57    57                        push        di 
1B58    C8 04 00 00               enter       0x0004,0x00 
1B5C    89 C6                     mov         si,ax 
1B5E    89 56 FC                  mov         word ptr -0x4[bp],dx 
1B61    C7 46 FE 04 00            mov         word ptr -0x2[bp],0x0004 
1B66    BF 10 00                  mov         di,0x0010 
1B69                          L$267:
1B69    FF 4E FE                  dec         word ptr -0x2[bp] 
1B6C    83 EF 04                  sub         di,0x0004 
1B6F    83 7E FE FF               cmp         word ptr -0x2[bp],0xffff 
1B73    74 22                     je          L$268 
1B75    6A 02                     push        0x0002 
1B77    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
1B7A    89 F0                     mov         ax,si 
1B7C    36 8B 9D 00 00            mov         bx,word ptr ss:_siregs[di] 
1B81    36 8B 8D 02 00            mov         cx,word ptr ss:_siregs+0x2[di] 
1B86    9A 00 00 00 00            call        strncmp_ 
1B8B    85 C0                     test        ax,ax 
1B8D    75 DA                     jne         L$267 
1B8F    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
1B92    0C 88                     or          al,0x88 
	     1B95		; The label referred to here is an undefined location
1B94    E9 9C 8B                  jmp         0xffffa733 
1B97                          L$268:
1B97    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
1B9A    8A 44 01                  mov         al,byte ptr 0x1[si] 
1B9D    3C 78                     cmp         al,0x78 
1B9F    75 09                     jne         L$269 
1BA1    8A 04                     mov         al,byte ptr [si] 
1BA3    2C 61                     sub         al,0x61 
1BA5    0C 80                     or          al,0x80 
	     1BA8		; The label referred to here is an undefined location
1BA7    E9 89 8B                  jmp         0xffffa733 
1BAA                          L$269:
1BAA    3C 6C                     cmp         al,0x6c 
1BAC    75 09                     jne         L$270 
1BAE    8A 04                     mov         al,byte ptr [si] 
1BB0    2C 61                     sub         al,0x61 
1BB2    00 C0                     add         al,al 
	     1BB5		; The label referred to here is an undefined location
1BB4    E9 7C 8B                  jmp         0xffffa733 
1BB7                          L$270:
1BB7    8A 04                     mov         al,byte ptr [si] 
1BB9    2C 61                     sub         al,0x61 
1BBB    00 C0                     add         al,al 
1BBD    FE C0                     inc         al 
	     1BC0		; The label referred to here is an undefined location
1BBF    E9 71 8B                  jmp         0xffffa733 
1BC2                          define_symbol_:
1BC2    51                        push        cx 
1BC3    56                        push        si 
1BC4    57                        push        di 
1BC5    C8 04 00 00               enter       0x0004,0x00 
1BC9    89 C1                     mov         cx,ax 
1BCB    89 56 FC                  mov         word ptr -0x4[bp],dx 
1BCE    88 5E FE                  mov         byte ptr -0x2[bp],bl 
1BD1    36 8B 1E 00 00            mov         bx,word ptr ss:_symbol_count 
1BD6    43                        inc         bx 
1BD7    6B DB 26                  imul        bx,0x0026 
1BDA    36 A1 00 00               mov         ax,word ptr ss:_symbols 
1BDE    36 8B 16 02 00            mov         dx,word ptr ss:_symbols+0x2 
1BE3    9A 00 00 00 00            call        realloc_ 
1BE8    85 D2                     test        dx,dx 
1BEA    75 0B                     jne         L$274 
1BEC    85 C0                     test        ax,ax 
1BEE    75 07                     jne         L$274 
1BF0                          L$271:
1BF0    31 C0                     xor         ax,ax 
1BF2                          L$272:
1BF2    C9                        leave       
1BF3                          L$273:
1BF3    5F                        pop         di 
1BF4    5E                        pop         si 
1BF5    59                        pop         cx 
1BF6    C3                        ret         
1BF7                          L$274:
1BF7    36 6B 1E 00 00 26         imul        bx,word ptr ss:_symbol_count,0x0026 
1BFD    36 A3 00 00               mov         word ptr ss:_symbols,ax 
1C01    36 89 16 02 00            mov         word ptr ss:_symbols+0x2,dx 
1C06    8E DA                     mov         ds,dx 
1C08    01 C3                     add         bx,ax 
1C0A    36 A1 00 00               mov         ax,word ptr ss:_datap_segment 
1C0E    89 47 22                  mov         word ptr 0x22[bx],ax 
1C11    36 6B 1E 00 00 26         imul        bx,word ptr ss:_symbol_count,0x0026 
1C17    36 C5 16 00 00            lds         dx,dword ptr ss:_symbols 
1C1C    01 D3                     add         bx,dx 
1C1E    36 A1 00 00               mov         ax,word ptr ss:_datap_offset 
1C22    89 47 20                  mov         word ptr 0x20[bx],ax 
1C25    36 6B 1E 00 00 26         imul        bx,word ptr ss:_symbol_count,0x0026 
1C2B    36 C5 16 00 00            lds         dx,dword ptr ss:_symbols 
1C30    01 D3                     add         bx,dx 
1C32    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
1C35    88 47 24                  mov         byte ptr 0x24[bx],al 
1C38    36 6B 3E 00 00 26         imul        di,word ptr ss:_symbol_count,0x0026 
1C3E    89 CE                     mov         si,cx 
1C40    36 C4 16 00 00            les         dx,dword ptr ss:_symbols 
1C45    01 D7                     add         di,dx 
1C47    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
1C4A    57                        push        di 
1C4B                          L$275:
1C4B    AC                        lodsb       
1C4C    AA                        stosb       
1C4D    3C 00                     cmp         al,0x00 
1C4F    75 FA                     jne         L$275 
1C51    5F                        pop         di 
1C52    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
1C58    74 26                     je          L$276 
1C5A    36 FF 36 00 00            push        word ptr ss:_line_num 
1C5F    0F B6 46 FE               movzx       ax,byte ptr -0x2[bp] 
1C63    50                        push        ax 
1C64    1E                        push        ds 
1C65    51                        push        cx 
1C66    16                        push        ss 
1C67    68 2F 02                  push        offset DGROUP:L$1480 
1C6A    16                        push        ss 
1C6B    68 00 00                  push        offset _message 
1C6E    8C D2                     mov         dx,ss 
1C70    9A 00 00 00 00            call        sprintf_ 
1C75    83 C4 10                  add         sp,0x0010 
1C78    B8 00 00                  mov         ax,offset _message 
1C7B    9A 00 00 00 00            call        putstr_ 
1C80                          L$276:
1C80    B8 01 00                  mov         ax,0x0001 
1C83    36 01 06 00 00            add         word ptr ss:_symbol_count,ax 
1C88    E9 67 FF                  jmp         L$272 
1C8B                          define_label_:
1C8B    53                        push        bx 
1C8C    51                        push        cx 
1C8D    56                        push        si 
1C8E    57                        push        di 
1C8F    55                        push        bp 
1C90    31 ED                     xor         bp,bp 
1C92    89 C7                     mov         di,ax 
1C94    89 D6                     mov         si,dx 
1C96    31 DB                     xor         bx,bx 
1C98    E8 00 00                  call        get_symbol_struct_ 
1C9B    85 D2                     test        dx,dx 
1C9D    75 04                     jne         L$277 
1C9F    85 C0                     test        ax,ax 
1CA1    74 2D                     je          L$279 
1CA3                          L$277:
1CA3    80 BE 00 00 00            cmp         byte ptr _debug[bp],0x00 
1CA8    74 20                     je          L$278 
1CAA    FF B6 00 00               push        word ptr _line_num[bp] 
1CAE    56                        push        si 
1CAF    57                        push        di 
1CB0    16                        push        ss 
1CB1    68 5A 02                  push        offset DGROUP:L$1481 
1CB4    16                        push        ss 
1CB5    68 00 00                  push        offset _message 
1CB8    8C D2                     mov         dx,ss 
1CBA    9A 00 00 00 00            call        sprintf_ 
1CBF    83 C4 0E                  add         sp,0x000e 
1CC2    B8 00 00                  mov         ax,offset _message 
1CC5    9A 00 00 00 00            call        putstr_ 
1CCA                          L$278:
1CCA    B8 01 00                  mov         ax,0x0001 
1CCD    E9 43 EE                  jmp         L$94 
1CD0                          L$279:
1CD0    8B 9E 00 00               mov         bx,word ptr _symbol_count[bp] 
1CD4    43                        inc         bx 
1CD5    6B DB 26                  imul        bx,0x0026 
1CD8    36 A1 00 00               mov         ax,word ptr ss:_symbols 
1CDC    8B 96 02 00               mov         dx,word ptr _symbols+0x2[bp] 
1CE0    9A 00 00 00 00            call        realloc_ 
1CE5    85 D2                     test        dx,dx 
1CE7    75 09                     jne         L$280 
1CE9    85 C0                     test        ax,ax 
1CEB    75 05                     jne         L$280 
1CED    31 C0                     xor         ax,ax 
1CEF    E9 21 EE                  jmp         L$94 
1CF2                          L$280:
1CF2    6B 9E 00 00 26            imul        bx,word ptr _symbol_count[bp],0x0026 
1CF7    36 A3 00 00               mov         word ptr ss:_symbols,ax 
1CFB    89 96 02 00               mov         word ptr _symbols+0x2[bp],dx 
1CFF    8E DA                     mov         ds,dx 
1D01    01 C3                     add         bx,ax 
1D03    36 A1 00 00               mov         ax,word ptr ss:_codep_offset 
1D07    89 47 20                  mov         word ptr 0x20[bx],ax 
1D0A    6B 9E 00 00 26            imul        bx,word ptr _symbol_count[bp],0x0026 
1D0F    C5 96 00 00               lds         dx,dword ptr _symbols[bp] 
1D13    01 D3                     add         bx,dx 
1D15    36 A1 00 00               mov         ax,word ptr ss:_codep_segment 
1D19    89 47 22                  mov         word ptr 0x22[bx],ax 
1D1C    6B 9E 00 00 26            imul        bx,word ptr _symbol_count[bp],0x0026 
1D21    C5 96 00 00               lds         dx,dword ptr _symbols[bp] 
1D25    01 D3                     add         bx,dx 
1D27    C6 47 24 02               mov         byte ptr 0x24[bx],0x02 
1D2B    6B 86 00 00 26            imul        ax,word ptr _symbol_count[bp],0x0026 
1D30    89 F1                     mov         cx,si 
1D32    8B 9E 00 00               mov         bx,word ptr _symbols[bp] 
1D36    8B 96 02 00               mov         dx,word ptr _symbols+0x2[bp] 
1D3A    01 D8                     add         ax,bx 
1D3C    89 FB                     mov         bx,di 
1D3E    E8 00 00                  call        copy_str_ 
1D41    80 BE 00 00 00            cmp         byte ptr _debug[bp],0x00 
1D46    74 20                     je          L$281 
1D48    FF B6 00 00               push        word ptr _line_num[bp] 
1D4C    56                        push        si 
1D4D    57                        push        di 
1D4E    16                        push        ss 
1D4F    68 8B 02                  push        offset DGROUP:L$1482 
1D52    16                        push        ss 
1D53    68 00 00                  push        offset _message 
1D56    8C D2                     mov         dx,ss 
1D58    9A 00 00 00 00            call        sprintf_ 
1D5D    83 C4 0E                  add         sp,0x000e 
1D60    B8 00 00                  mov         ax,offset _message 
1D63    9A 00 00 00 00            call        putstr_ 
1D68                          L$281:
1D68    B8 01 00                  mov         ax,0x0001 
1D6B    01 86 00 00               add         word ptr _symbol_count[bp],ax 
1D6F    E9 A1 ED                  jmp         L$94 
1D72                          copy2ring_:
1D72    56                        push        si 
1D73    57                        push        di 
1D74    C8 02 00 00               enter       0x0002,0x00 
1D78    50                        push        ax 
1D79    52                        push        dx 
1D7A    53                        push        bx 
1D7B    51                        push        cx 
1D7C    8B 46 0A                  mov         ax,word ptr 0xa[bp] 
1D7F    8E 46 FA                  mov         es,word ptr -0x6[bp] 
1D82    48                        dec         ax 
1D83    31 DB                     xor         bx,bx 
1D85    89 46 FE                  mov         word ptr -0x2[bp],ax 
1D88                          L$282:
1D88    83 7E 0C 00               cmp         word ptr 0xc[bp],0x0000 
1D8C    74 42                     je          L$284 
1D8E    8B 46 08                  mov         ax,word ptr 0x8[bp] 
1D91    8B 56 0A                  mov         dx,word ptr 0xa[bp] 
1D94    23 46 FE                  and         ax,word ptr -0x2[bp] 
1D97    29 C2                     sub         dx,ax 
1D99    3B 56 0C                  cmp         dx,word ptr 0xc[bp] 
1D9C    72 03                     jb          L$283 
1D9E    8B 56 0C                  mov         dx,word ptr 0xc[bp] 
1DA1                          L$283:
1DA1    8B 76 F8                  mov         si,word ptr -0x8[bp] 
1DA4    8B 7E FC                  mov         di,word ptr -0x4[bp] 
1DA7    8B 4E F6                  mov         cx,word ptr -0xa[bp] 
1DAA    01 DE                     add         si,bx 
1DAC    01 C7                     add         di,ax 
1DAE    89 D0                     mov         ax,dx 
1DB0    01 56 08                  add         word ptr 0x8[bp],dx 
1DB3    1E                        push        ds 
1DB4    57                        push        di 
1DB5    91                        xchg        ax,cx 
1DB6    8E D8                     mov         ds,ax 
1DB8    D1 E9                     shr         cx,0x01 
1DBA    F3 A5                     rep movsw   
1DBC    13 C9                     adc         cx,cx 
1DBE    F3 A4                     rep movsb   
1DC0    5F                        pop         di 
1DC1    1F                        pop         ds 
1DC2    01 D3                     add         bx,dx 
1DC4    29 56 0C                  sub         word ptr 0xc[bp],dx 
1DC7    74 BF                     je          L$282 
1DC9    C7 46 08 00 00            mov         word ptr 0x8[bp],0x0000 
1DCE    EB B8                     jmp         L$282 
1DD0                          L$284:
1DD0    C9                        leave       
1DD1    5F                        pop         di 
1DD2    5E                        pop         si 
1DD3    C2 06 00                  ret         0x0006 
1DD6                          ringcopy_:
1DD6    56                        push        si 
1DD7    57                        push        di 
1DD8    C8 02 00 00               enter       0x0002,0x00 
1DDC    50                        push        ax 
1DDD    52                        push        dx 
1DDE    53                        push        bx 
1DDF    51                        push        cx 
1DE0    8B 56 0A                  mov         dx,word ptr 0xa[bp] 
1DE3    8E 46 FA                  mov         es,word ptr -0x6[bp] 
1DE6    4A                        dec         dx 
1DE7    31 DB                     xor         bx,bx 
1DE9    89 56 FE                  mov         word ptr -0x2[bp],dx 
1DEC                          L$285:
1DEC    8B 46 0C                  mov         ax,word ptr 0xc[bp] 
1DEF    85 C0                     test        ax,ax 
1DF1    74 DD                     je          L$284 
1DF3    8B 76 08                  mov         si,word ptr 0x8[bp] 
1DF6    8B 56 0A                  mov         dx,word ptr 0xa[bp] 
1DF9    23 76 FE                  and         si,word ptr -0x2[bp] 
1DFC    29 F2                     sub         dx,si 
1DFE    39 C2                     cmp         dx,ax 
1E00    72 02                     jb          L$286 
1E02    89 C2                     mov         dx,ax 
1E04                          L$286:
1E04    8B 7E FC                  mov         di,word ptr -0x4[bp] 
1E07    8B 4E F6                  mov         cx,word ptr -0xa[bp] 
1E0A    03 76 F8                  add         si,word ptr -0x8[bp] 
1E0D    89 D0                     mov         ax,dx 
1E0F    01 DF                     add         di,bx 
1E11    01 56 08                  add         word ptr 0x8[bp],dx 
1E14    1E                        push        ds 
1E15    57                        push        di 
1E16    91                        xchg        ax,cx 
1E17    8E D8                     mov         ds,ax 
1E19    D1 E9                     shr         cx,0x01 
1E1B    F3 A5                     rep movsw   
1E1D    13 C9                     adc         cx,cx 
1E1F    F3 A4                     rep movsb   
1E21    5F                        pop         di 
1E22    1F                        pop         ds 
1E23    01 D3                     add         bx,dx 
1E25    29 56 0C                  sub         word ptr 0xc[bp],dx 
1E28    74 C2                     je          L$285 
1E2A    C7 46 08 00 00            mov         word ptr 0x8[bp],0x0000 
1E2F    EB BB                     jmp         L$285 
1E31                          L$287:
1E31    A8 01                     test        al,0x01 
1E33    74 0E                     je          L$288 
1E35    30 E4                     xor         ah,ah 
1E37    D1 F8                     sar         ax,0x01 
1E39    05 61 00                  add         ax,0x0061 
1E3C    50                        push        ax 
1E3D    16                        push        ss 
1E3E    68 AA 02                  push        offset DGROUP:L$1484 
1E41    EB 0C                     jmp         L$289 
1E43                          L$288:
1E43    30 E4                     xor         ah,ah 
1E45    D1 F8                     sar         ax,0x01 
1E47    05 61 00                  add         ax,0x0061 
1E4A    50                        push        ax 
1E4B    16                        push        ss 
1E4C    68 AE 02                  push        offset DGROUP:L$1485 
1E4F                          L$289:
1E4F    16                        push        ss 
1E50    8D 56 FC                  lea         dx,-0x4[bp] 
1E53    52                        push        dx 
1E54    9A 00 00 00 00            call        sprintf_ 
1E59    83 C4 0A                  add         sp,0x000a 
1E5C    16                        push        ss 
1E5D    8D 56 FC                  lea         dx,-0x4[bp] 
1E60    52                        push        dx 
1E61    16                        push        ss 
1E62    68 00 00                  push        offset _message 
1E65    16                        push        ss 
1E66    68 B2 02                  push        offset DGROUP:L$1486 
1E69    16                        push        ss 
1E6A    68 00 00                  push        offset _message 
1E6D    9A 00 00 00 00            call        sprintf_ 
1E72    83 C4 10                  add         sp,0x0010 
1E75    C9                        leave       
1E76    5A                        pop         dx 
1E77    C3                        ret         
1E78                          message_a_oreg_:
1E78    50                        push        ax 
1E79    16                        push        ss 
1E7A    68 00 00                  push        offset _message 
1E7D    16                        push        ss 
1E7E    68 B8 02                  push        offset DGROUP:L$1487 
1E81    16                        push        ss 
1E82    68 00 00                  push        offset _message 
1E85    9A 00 00 00 00            call        sprintf_ 
1E8A    83 C4 0E                  add         sp,0x000e 
1E8D    0F B6 C2                  movzx       ax,dl 
1E90                          message_a_reg_:
1E90    52                        push        dx 
1E91    C8 04 00 00               enter       0x0004,0x00 
1E95    A8 80                     test        al,0x80 
1E97    74 98                     je          L$287 
1E99    24 7F                     and         al,0x7f 
1E9B    30 E4                     xor         ah,ah 
1E9D    05 61 00                  add         ax,0x0061 
1EA0    50                        push        ax 
1EA1    16                        push        ss 
1EA2    68 A6 02                  push        offset DGROUP:L$1483 
1EA5    EB A8                     jmp         L$289 
1EA7                          a_movdebuginfo_otype_:
1EA7    53                        push        bx 
1EA8    52                        push        dx 
1EA9    56                        push        si 
1EAA    57                        push        di 
1EAB    C8 18 00 00               enter       0x0018,0x00 
1EAF    88 C2                     mov         dl,al 
1EB1    8D 7E E8                  lea         di,-0x18[bp] 
1EB4    16                        push        ss 
1EB5    07                        pop         es 
1EB6    16                        push        ss 
1EB7    1F                        pop         ds 
1EB8    BE EA 01                  mov         si,offset DGROUP:L$1585 
1EBB    A5                        movsw       
1EBC    A5                        movsw       
1EBD    A5                        movsw       
1EBE    A5                        movsw       
1EBF    8D 7E F8                  lea         di,-0x8[bp] 
1EC2    BE F2 01                  mov         si,offset DGROUP:L$1586 
1EC5    A5                        movsw       
1EC6    A5                        movsw       
1EC7    A5                        movsw       
1EC8    A4                        movsb       
1EC9    8D 7E F0                  lea         di,-0x10[bp] 
1ECC    BE F9 01                  mov         si,offset DGROUP:L$1587 
1ECF    A5                        movsw       
1ED0    A5                        movsw       
1ED1    A5                        movsw       
1ED2    A5                        movsw       
1ED3    A8 08                     test        al,0x08 
1ED5    0F 85 94 00               jne         L$297 
1ED9    A8 04                     test        al,0x04 
1EDB    74 06                     je          L$290 
1EDD    16                        push        ss 
1EDE    8D 5E E8                  lea         bx,-0x18[bp] 
1EE1    EB 04                     jmp         L$291 
1EE3                          L$290:
1EE3    16                        push        ss 
1EE4    8D 5E F8                  lea         bx,-0x8[bp] 
1EE7                          L$291:
1EE7    53                        push        bx 
1EE8    16                        push        ss 
1EE9    68 00 00                  push        offset _message 
1EEC    16                        push        ss 
1EED    68 D0 02                  push        offset DGROUP:L$1488 
1EF0    16                        push        ss 
1EF1    68 00 00                  push        offset _message 
1EF4    9A 00 00 00 00            call        sprintf_ 
1EF9    83 C4 10                  add         sp,0x0010 
1EFC    88 D0                     mov         al,dl 
1EFE    24 03                     and         al,0x03 
1F00    3C 01                     cmp         al,0x01 
1F02    72 0D                     jb          L$292 
1F04    76 2F                     jbe         L$293 
1F06    3C 03                     cmp         al,0x03 
1F08    74 58                     je          L$296 
1F0A    3C 02                     cmp         al,0x02 
1F0C    74 49                     je          L$295 
1F0E    E9 B5 00                  jmp         L$302 
1F11                          L$292:
1F11    84 C0                     test        al,al 
1F13    0F 85 AF 00               jne         L$302 
1F17    16                        push        ss 
1F18    68 D5 02                  push        offset DGROUP:L$1489 
1F1B    16                        push        ss 
1F1C    68 00 00                  push        offset _message 
1F1F    16                        push        ss 
1F20    68 D0 02                  push        offset DGROUP:L$1488 
1F23    16                        push        ss 
1F24    68 00 00                  push        offset _message 
1F27    9A 00 00 00 00            call        sprintf_ 
1F2C    B8 11 00                  mov         ax,0x0011 
1F2F    83 C4 10                  add         sp,0x0010 
1F32    E9 93 00                  jmp         L$303 
1F35                          L$293:
1F35    16                        push        ss 
1F36    8D 56 F0                  lea         dx,-0x10[bp] 
1F39    52                        push        dx 
1F3A    16                        push        ss 
1F3B    68 3E 01                  push        offset DGROUP:L$1467 
1F3E                          L$294:
1F3E    16                        push        ss 
1F3F    68 00 00                  push        offset _message 
1F42    16                        push        ss 
1F43    68 DE 02                  push        offset DGROUP:L$1490 
1F46    16                        push        ss 
1F47    68 00 00                  push        offset _message 
1F4A    9A 00 00 00 00            call        sprintf_ 
1F4F    B8 02 00                  mov         ax,0x0002 
1F52    83 C4 14                  add         sp,0x0014 
1F55    EB 71                     jmp         L$303 
1F57                          L$295:
1F57    16                        push        ss 
1F58    8D 56 F0                  lea         dx,-0x10[bp] 
1F5B    52                        push        dx 
1F5C    16                        push        ss 
1F5D    68 39 01                  push        offset DGROUP:L$1466 
1F60    EB DC                     jmp         L$294 
1F62                          L$296:
1F62    16                        push        ss 
1F63    8D 56 F0                  lea         dx,-0x10[bp] 
1F66    52                        push        dx 
1F67    16                        push        ss 
1F68    68 33 01                  push        offset DGROUP:L$1465 
1F6B    EB D1                     jmp         L$294 
1F6D                          L$297:
1F6D    A8 04                     test        al,0x04 
1F6F    75 0B                     jne         L$298 
1F71    16                        push        ss 
1F72    68 E5 02                  push        offset DGROUP:L$1491 
1F75    16                        push        ss 
1F76    8D 56 F0                  lea         dx,-0x10[bp] 
1F79    52                        push        dx 
1F7A    EB C2                     jmp         L$294 
1F7C                          L$298:
1F7C    A8 01                     test        al,0x01 
1F7E    74 06                     je          L$299 
1F80    16                        push        ss 
1F81    8D 5E E8                  lea         bx,-0x18[bp] 
1F84    EB 04                     jmp         L$300 
1F86                          L$299:
1F86    16                        push        ss 
1F87    8D 5E F8                  lea         bx,-0x8[bp] 
1F8A                          L$300:
1F8A    53                        push        bx 
1F8B    16                        push        ss 
1F8C    68 00 00                  push        offset _message 
1F8F    16                        push        ss 
1F90    68 D0 02                  push        offset DGROUP:L$1488 
1F93    16                        push        ss 
1F94    68 00 00                  push        offset _message 
1F97    9A 00 00 00 00            call        sprintf_ 
1F9C    83 C4 10                  add         sp,0x0010 
1F9F    16                        push        ss 
1FA0    68 F5 02                  push        offset DGROUP:L$1492 
1FA3    16                        push        ss 
1FA4    68 00 00                  push        offset _message 
1FA7    16                        push        ss 
1FA8    68 D0 02                  push        offset DGROUP:L$1488 
1FAB    16                        push        ss 
1FAC    68 00 00                  push        offset _message 
1FAF    9A 00 00 00 00            call        sprintf_ 
1FB4    83 C4 10                  add         sp,0x0010 
1FB7    F6 C2 01                  test        dl,0x01 
1FBA    74 05                     je          L$301 
1FBC    B8 02 00                  mov         ax,0x0002 
1FBF    EB 07                     jmp         L$303 
1FC1                          L$301:
1FC1    B8 01 00                  mov         ax,0x0001 
1FC4    EB 02                     jmp         L$303 
1FC6                          L$302:
1FC6    31 C0                     xor         ax,ax 
1FC8                          L$303:
1FC8    C9                        leave       
1FC9                          L$304:
1FC9    5F                        pop         di 
1FCA                          L$305:
1FCA    5E                        pop         si 
1FCB    5A                        pop         dx 
1FCC    5B                        pop         bx 
1FCD    C3                        ret         
1FCE                          a_movdebuginfo_:
1FCE    53                        push        bx 
1FCF    51                        push        cx 
1FD0    56                        push        si 
1FD1    C8 04 00 00               enter       0x0004,0x00 
1FD5    89 C3                     mov         bx,ax 
1FD7    89 D6                     mov         si,dx 
1FD9    8E DE                     mov         ds,si 
1FDB    8A 07                     mov         al,byte ptr [bx] 
1FDD    30 D2                     xor         dl,dl 
1FDF    88 46 FC                  mov         byte ptr -0x4[bp],al 
1FE2    43                        inc         bx 
1FE3                          L$306:
1FE3    0F B6 CA                  movzx       cx,dl 
1FE6    89 C8                     mov         ax,cx 
1FE8    40                        inc         ax 
1FE9    50                        push        ax 
1FEA    16                        push        ss 
1FEB    68 00 00                  push        offset _message 
1FEE    16                        push        ss 
1FEF    68 06 03                  push        offset DGROUP:L$1493 
1FF2    16                        push        ss 
1FF3    68 00 00                  push        offset _message 
1FF6    C1 E1 02                  shl         cx,0x02 
1FF9    9A 00 00 00 00            call        sprintf_ 
1FFE    0F B6 46 FC               movzx       ax,byte ptr -0x4[bp] 
2002    D3 F8                     sar         ax,cl 
2004    89 C1                     mov         cx,ax 
2006    83 C4 0E                  add         sp,0x000e 
2009    0F B6 C1                  movzx       ax,cl 
200C    E8 00 00                  call        a_movdebuginfo_otype_ 
200F    88 C6                     mov         dh,al 
2011    80 E6 0F                  and         dh,0x0f 
2014    88 46 FE                  mov         byte ptr -0x2[bp],al 
2017    80 FE 01                  cmp         dh,0x01 
201A    75 2D                     jne         L$310 
201C    A8 10                     test        al,0x10 
201E    75 10                     jne         L$307 
2020    8E DE                     mov         ds,si 
2022    0F B6 07                  movzx       ax,byte ptr [bx] 
2025    50                        push        ax 
2026    16                        push        ss 
2027    68 00 00                  push        offset _message 
202A    16                        push        ss 
202B    68 1C 03                  push        offset DGROUP:L$1494 
202E    EB 25                     jmp         L$311 
2030                          L$307:
2030    F6 C1 04                  test        cl,0x04 
2033    74 0D                     je          L$309 
2035    8E DE                     mov         ds,si 
2037    8A 07                     mov         al,byte ptr [bx] 
2039    0C 80                     or          al,0x80 
203B    30 E4                     xor         ah,ah 
203D                          L$308:
203D    E8 00 00                  call        message_a_reg_ 
2040    EB 1F                     jmp         L$312 
2042                          L$309:
2042    8E DE                     mov         ds,si 
2044    0F B6 07                  movzx       ax,byte ptr [bx] 
2047    EB F4                     jmp         L$308 
2049                          L$310:
2049    8E DE                     mov         ds,si 
204B    FF 37                     push        word ptr [bx] 
204D    16                        push        ss 
204E    68 00 00                  push        offset _message 
2051    16                        push        ss 
2052    68 86 01                  push        offset DGROUP:L$1473 
2055                          L$311:
2055    16                        push        ss 
2056    68 00 00                  push        offset _message 
2059    9A 00 00 00 00            call        sprintf_ 
205E    83 C4 0E                  add         sp,0x000e 
2061                          L$312:
2061    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
2064    24 0F                     and         al,0x0f 
2066    30 E4                     xor         ah,ah 
2068    FE C2                     inc         dl 
206A    01 C3                     add         bx,ax 
206C    80 FA 02                  cmp         dl,0x02 
206F    0F 82 70 FF               jb          L$306 
2073    C9                        leave       
2074    E9 D7 E5                  jmp         L$50 
2077                          vpu_step_debuginfo_:
2077    51                        push        cx 
2078    56                        push        si 
2079    57                        push        di 
207A    C8 0A 00 00               enter       0x000a,0x00 
207E    89 C6                     mov         si,ax 
2080    8E DA                     mov         ds,dx 
2082    88 5E FE                  mov         byte ptr -0x2[bp],bl 
2085    8B 54 10                  mov         dx,word ptr 0x10[si] 
2088    8B 5C 40                  mov         bx,word ptr 0x40[si] 
208B    C1 E2 02                  shl         dx,0x02 
208E    8E 44 42                  mov         es,word ptr 0x42[si] 
2091    01 D3                     add         bx,dx 
2093    8B 74 12                  mov         si,word ptr 0x12[si] 
2096    26 8B 17                  mov         dx,word ptr es:[bx] 
2099    26 8B 5F 02               mov         bx,word ptr es:0x2[bx] 
209D    01 D6                     add         si,dx 
209F    0F B6 56 FE               movzx       dx,byte ptr -0x2[bp] 
20A3    89 5E FA                  mov         word ptr -0x6[bp],bx 
20A6    89 5E FC                  mov         word ptr -0x4[bp],bx 
20A9    89 D3                     mov         bx,dx 
20AB    C1 E3 02                  shl         bx,0x02 
20AE    66 36 FF B7 00 00         push        dword ptr ss:_INSTR[bx] 
20B4    8C D1                     mov         cx,ss 
20B6    16                        push        ss 
20B7    31 C0                     xor         ax,ax 
20B9    68 26 03                  push        offset DGROUP:L$1495 
20BC    89 46 F8                  mov         word ptr -0x8[bp],ax 
20BF    16                        push        ss 
20C0    89 46 F6                  mov         word ptr -0xa[bp],ax 
20C3    68 00 00                  push        offset _message 
20C6    BB 00 00                  mov         bx,offset _VINSTR 
20C9    9A 00 00 00 00            call        sprintf_ 
20CE    83 C4 0C                  add         sp,0x000c 
20D1    89 D0                     mov         ax,dx 
20D3    31 FF                     xor         di,di 
20D5    E8 00 00                  call        instr_in_array_ 
20D8    84 C0                     test        al,al 
20DA    0F 85 77 00               jne         L$318 
20DE    BB 00 00                  mov         bx,offset _SBYTE_INSTR 
20E1    8C D1                     mov         cx,ss 
20E3    89 D0                     mov         ax,dx 
20E5    E8 00 00                  call        instr_in_array_ 
20E8    84 C0                     test        al,al 
20EA    74 07                     je          L$313 
20EC    C7 46 F8 01 00            mov         word ptr -0x8[bp],0x0001 
20F1    EB 62                     jmp         L$318 
20F3                          L$313:
20F3    BB 00 00                  mov         bx,offset _DBYTE_INSTR 
20F6    8C D1                     mov         cx,ss 
20F8    89 D0                     mov         ax,dx 
20FA    E8 00 00                  call        instr_in_array_ 
20FD    84 C0                     test        al,al 
20FF    74 07                     je          L$314 
2101    C7 46 F8 02 00            mov         word ptr -0x8[bp],0x0002 
2106    EB 4D                     jmp         L$318 
2108                          L$314:
2108    BB 00 00                  mov         bx,offset _SWORD_INSTR 
210B    8C D1                     mov         cx,ss 
210D    89 D0                     mov         ax,dx 
210F    E8 00 00                  call        instr_in_array_ 
2112    84 C0                     test        al,al 
2114    74 07                     je          L$315 
2116    C7 46 F6 01 00            mov         word ptr -0xa[bp],0x0001 
211B    EB 38                     jmp         L$318 
211D                          L$315:
211D    BB 00 00                  mov         bx,offset _DWORD_INSTR 
2120    8C D1                     mov         cx,ss 
2122    89 D0                     mov         ax,dx 
2124    E8 00 00                  call        instr_in_array_ 
2127    84 C0                     test        al,al 
2129    74 07                     je          L$316 
212B    C7 46 F6 02 00            mov         word ptr -0xa[bp],0x0002 
2130    EB 23                     jmp         L$318 
2132                          L$316:
2132    BB 00 00                  mov         bx,offset _TWORD_INSTR 
2135    8C D1                     mov         cx,ss 
2137    89 D0                     mov         ax,dx 
2139    E8 00 00                  call        instr_in_array_ 
213C    84 C0                     test        al,al 
213E    74 07                     je          L$317 
2140    C7 46 F6 03 00            mov         word ptr -0xa[bp],0x0003 
2145    EB 0E                     jmp         L$318 
2147                          L$317:
2147    80 7E FE 01               cmp         byte ptr -0x2[bp],0x01 
214B    75 08                     jne         L$318 
214D    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
2150    89 F0                     mov         ax,si 
2152    E8 00 00                  call        a_movdebuginfo_ 
2155                          L$318:
2155    0F B6 56 FE               movzx       dx,byte ptr -0x2[bp] 
2159    BB 00 00                  mov         bx,offset _BYTEINT_INSTR 
215C    8C D1                     mov         cx,ss 
215E    89 D0                     mov         ax,dx 
2160    E8 00 00                  call        instr_in_array_ 
2163    84 C0                     test        al,al 
2165    74 29                     je          L$320 
2167                          L$319:
2167    FF 4E F8                  dec         word ptr -0x8[bp] 
216A    83 7E F8 FF               cmp         word ptr -0x8[bp],0xffff 
216E    74 62                     je          L$323 
2170    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
2173    0F B6 14                  movzx       dx,byte ptr [si] 
2176    52                        push        dx 
2177    47                        inc         di 
2178    57                        push        di 
2179    16                        push        ss 
217A    68 00 00                  push        offset _message 
217D    16                        push        ss 
217E    68 36 03                  push        offset DGROUP:L$1496 
2181    16                        push        ss 
2182    68 00 00                  push        offset _message 
2185    46                        inc         si 
2186    9A 00 00 00 00            call        sprintf_ 
218B    83 C4 10                  add         sp,0x0010 
218E    EB D7                     jmp         L$319 
2190                          L$320:
2190    BB 00 00                  mov         bx,offset _WREG_INSTR 
2193    8C D1                     mov         cx,ss 
2195    89 D0                     mov         ax,dx 
2197    E8 00 00                  call        instr_in_array_ 
219A    84 C0                     test        al,al 
219C    74 1C                     je          L$322 
219E                          L$321:
219E    FF 4E F8                  dec         word ptr -0x8[bp] 
21A1    83 7E F8 FF               cmp         word ptr -0x8[bp],0xffff 
21A5    74 2B                     je          L$323 
21A7    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
21AA    8A 04                     mov         al,byte ptr [si] 
21AC    0C 80                     or          al,0x80 
21AE    47                        inc         di 
21AF    0F B6 D0                  movzx       dx,al 
21B2    89 F8                     mov         ax,di 
21B4    46                        inc         si 
21B5    E8 C0 FC                  call        message_a_oreg_ 
21B8    EB E4                     jmp         L$321 
21BA                          L$322:
21BA    FF 4E F8                  dec         word ptr -0x8[bp] 
21BD    83 7E F8 FF               cmp         word ptr -0x8[bp],0xffff 
21C1    74 0F                     je          L$323 
21C3    47                        inc         di 
21C4    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
21C7    89 F8                     mov         ax,di 
21C9    0F B6 14                  movzx       dx,byte ptr [si] 
21CC    E8 A9 FC                  call        message_a_oreg_ 
21CF    46                        inc         si 
21D0    EB E8                     jmp         L$322 
21D2                          L$323:
21D2    FF 4E F6                  dec         word ptr -0xa[bp] 
21D5    83 7E F6 FF               cmp         word ptr -0xa[bp],0xffff 
21D9    74 1F                     je          L$324 
21DB    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
21DE    FF 34                     push        word ptr [si] 
21E0    47                        inc         di 
21E1    57                        push        di 
21E2    16                        push        ss 
21E3    68 00 00                  push        offset _message 
21E6    16                        push        ss 
21E7    68 4D 03                  push        offset DGROUP:L$1497 
21EA    16                        push        ss 
21EB    68 00 00                  push        offset _message 
21EE    46                        inc         si 
21EF    46                        inc         si 
21F0    9A 00 00 00 00            call        sprintf_ 
21F5    83 C4 10                  add         sp,0x0010 
21F8    EB D8                     jmp         L$323 
21FA                          L$324:
21FA    B8 00 00                  mov         ax,offset _message 
21FD    8C D2                     mov         dx,ss 
21FF    E8 00 00                  call        output_debug_info_ 
2202    E9 ED F9                  jmp         L$272 
2205                          human2unixtime_:
2205    56                        push        si 
2206    57                        push        di 
2207    C8 12 00 00               enter       0x0012,0x00 
220B    88 4E FE                  mov         byte ptr -0x2[bp],cl 
220E    B9 06 00                  mov         cx,0x0006 
2211    8D 7E EE                  lea         di,-0x12[bp] 
2214    16                        push        ss 
2215    07                        pop         es 
2216    16                        push        ss 
2217    1F                        pop         ds 
2218    BE 01 02                  mov         si,offset DGROUP:L$1588 
221B    F3 A5                     rep movsw   
221D    89 C7                     mov         di,ax 
221F    81 EF B2 07               sub         di,0x07b2 
2223    69 FF 6D 01               imul        di,0x016d 
2227    89 C6                     mov         si,ax 
2229    81 C6 4F F8               add         si,0xf84f 
222D    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
2232    C1 EE 02                  shr         si,0x02 
2235    89 C1                     mov         cx,ax 
2237    01 FE                     add         si,di 
2239    0F B6 FA                  movzx       di,dl 
223C    81 E9 B4 07               sub         cx,0x07b4 
2240    4F                        dec         di 
2241                          L$325:
2241    4F                        dec         di 
2242    83 FF FF                  cmp         di,0xffff 
2245    74 1C                     je          L$326 
2247    0F B6 43 EE               movzx       ax,byte ptr -0x12[bp+di] 
224B    31 D2                     xor         dx,dx 
224D    01 C6                     add         si,ax 
224F    11 56 FC                  adc         word ptr -0x4[bp],dx 
2252    83 FF 01                  cmp         di,0x0001 
2255    75 EA                     jne         L$325 
2257    F6 C1 03                  test        cl,0x03 
225A    75 E5                     jne         L$325 
225C    01 FE                     add         si,di 
225E    11 56 FC                  adc         word ptr -0x4[bp],dx 
2261    EB DE                     jmp         L$325 
2263                          L$326:
2263    0F B6 C3                  movzx       ax,bl 
2266    48                        dec         ax 
2267    99                        cwd         
2268    B9 01 00                  mov         cx,0x0001 
226B    01 F0                     add         ax,si 
226D    11 56 FC                  adc         word ptr -0x4[bp],dx 
2270    BB 80 51                  mov         bx,0x5180 
2273    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
2276    9A 00 00 00 00            call        __U4M 
227B    89 C6                     mov         si,ax 
227D    0F B6 46 08               movzx       ax,byte ptr 0x8[bp] 
2281    6B C0 3C                  imul        ax,0x003c 
2284    BB 10 0E                  mov         bx,0x0e10 
2287    89 56 FC                  mov         word ptr -0x4[bp],dx 
228A    99                        cwd         
228B    31 C9                     xor         cx,cx 
228D    89 46 FA                  mov         word ptr -0x6[bp],ax 
2290    89 D7                     mov         di,dx 
2292    0F B6 46 FE               movzx       ax,byte ptr -0x2[bp] 
2296    31 D2                     xor         dx,dx 
2298    9A 00 00 00 00            call        __U4M 
229D    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
22A0    01 C3                     add         bx,ax 
22A2    11 D7                     adc         di,dx 
22A4    0F B6 46 0A               movzx       ax,byte ptr 0xa[bp] 
22A8    31 D2                     xor         dx,dx 
22AA    01 D8                     add         ax,bx 
22AC    11 FA                     adc         dx,di 
22AE    01 F0                     add         ax,si 
22B0    11 56 FC                  adc         word ptr -0x4[bp],dx 
22B3    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
22B6                          L$327:
22B6    C9                        leave       
22B7    5F                        pop         di 
22B8    5E                        pop         si 
22B9    C2 04 00                  ret         0x0004 

Routine Size: 8892 bytes,    Routine Base: vpu_main_TEXT + 0000

22BC                          unixtime_:
22BC    53                        push        bx 
22BD    51                        push        cx 
22BE    57                        push        di 
22BF    C8 0E 00 00               enter       0x000e,0x00 
22C3    56                        push        si 
22C4    89 C7                     mov         di,ax 
22C6    89 56 FE                  mov         word ptr -0x2[bp],dx 
22C9    9A 00 00 00 00            call        dosdate_ 
22CE    89 C3                     mov         bx,ax 
22D0    89 56 FC                  mov         word ptr -0x4[bp],dx 
22D3    9A 00 00 00 00            call        dostime_ 
22D8    89 C6                     mov         si,ax 
22DA    8E DA                     mov         ds,dx 
22DC    89 56 FA                  mov         word ptr -0x6[bp],dx 
22DF    0F B6 44 02               movzx       ax,byte ptr 0x2[si] 
22E3    0F B6 0C                  movzx       cx,byte ptr [si] 
22E6    50                        push        ax 
22E7    0F B6 44 01               movzx       ax,byte ptr 0x1[si] 
22EB    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
22EE    50                        push        ax 
22EF    0F B6 47 03               movzx       ax,byte ptr 0x3[bx] 
22F3    0F B6 57 02               movzx       dx,byte ptr 0x2[bx] 
22F7    89 46 FC                  mov         word ptr -0x4[bp],ax 
22FA    8B 07                     mov         ax,word ptr [bx] 
22FC    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
22FF    E8 00 00                  call        human2unixtime_ 
2302    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
2305    BB 80 96                  mov         bx,0x9680 
2308    29 F8                     sub         ax,di 
230A    1B 56 FE                  sbb         dx,word ptr -0x2[bp] 
230D    89 46 F2                  mov         word ptr -0xe[bp],ax 
2310    89 56 F4                  mov         word ptr -0xc[bp],dx 
2313    B9 98 00                  mov         cx,0x0098 
2316    0F B6 44 03               movzx       ax,byte ptr 0x3[si] 
231A    31 D2                     xor         dx,dx 
231C    8B 7E F0                  mov         di,word ptr -0x10[bp] 
231F    9A 00 00 00 00            call        __I4M 
2324    8D 76 F2                  lea         si,-0xe[bp] 
2327    89 46 F6                  mov         word ptr -0xa[bp],ax 
232A    16                        push        ss 
232B    07                        pop         es 
232C    16                        push        ss 
232D    1F                        pop         ds 
232E    89 56 F8                  mov         word ptr -0x8[bp],dx 
2331    A5                        movsw       
2332    A5                        movsw       
2333    A5                        movsw       
2334    A5                        movsw       
2335    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
2338    C9                        leave       
2339    5F                        pop         di 
233A    59                        pop         cx 
233B    5B                        pop         bx 
233C    CB                        retf        
233D                          vpu_instr_jump_:
233D    51                        push        cx 
233E    56                        push        si 
233F    57                        push        di 
2340    89 C6                     mov         si,ax 
2342    89 D7                     mov         di,dx 
2344    8E DA                     mov         ds,dx 
2346    8B 44 10                  mov         ax,word ptr 0x10[si] 
2349    89 C3                     mov         bx,ax 
234B    8B 54 40                  mov         dx,word ptr 0x40[si] 
234E    C1 E3 02                  shl         bx,0x02 
2351    8E 5C 42                  mov         ds,word ptr 0x42[si] 
2354    01 D3                     add         bx,dx 
2356    C5 17                     lds         dx,dword ptr [bx] 
2358    8E C7                     mov         es,di 
235A    26 8B 5C 12               mov         bx,word ptr es:0x12[si] 
235E    01 D3                     add         bx,dx 
2360    F6 07 80                  test        byte ptr [bx],0x80 
2363    74 2D                     je          L$329 
2365    8B 07                     mov         ax,word ptr [bx] 
2367    8E DF                     mov         ds,di 
2369    80 E4 7F                  and         ah,0x7f 
236C    3B 44 46                  cmp         ax,word ptr 0x46[si] 
236F    72 1B                     jb          L$328 
2371    B8 00 00                  mov         ax,offset _segfaulterror 
2374    BB 0B 00                  mov         bx,0x000b 
2377    8C D2                     mov         dx,ss 
2379    80 4C 1E 04               or          byte ptr 0x1e[si],0x04 
237D    9A 00 00 00 00            call        putstr_ 
2382    89 F0                     mov         ax,si 
2384    89 FA                     mov         dx,di 
2386    0E                        push        cs 
2387    E8 00 00                  call        send_vpu_signal_ 
238A    EB 53                     jmp         L$332 
238C                          L$328:
238C    83 44 12 02               add         word ptr 0x12[si],0x0002 
2390    EB 05                     jmp         L$330 
2392                          L$329:
2392    8E DF                     mov         ds,di 
2394    FF 44 12                  inc         word ptr 0x12[si] 
2397                          L$330:
2397    8E DF                     mov         ds,di 
2399    8B 5C 10                  mov         bx,word ptr 0x10[si] 
239C    8B 54 40                  mov         dx,word ptr 0x40[si] 
239F    C1 E3 02                  shl         bx,0x02 
23A2    8E 5C 42                  mov         ds,word ptr 0x42[si] 
23A5    01 D3                     add         bx,dx 
23A7    C5 0F                     lds         cx,dword ptr [bx] 
23A9    8E C7                     mov         es,di 
23AB    26 8B 5C 12               mov         bx,word ptr es:0x12[si] 
23AF    01 CB                     add         bx,cx 
23B1    8B 17                     mov         dx,word ptr [bx] 
23B3    8E DF                     mov         ds,di 
23B5    89 54 12                  mov         word ptr 0x12[si],dx 
23B8    89 44 10                  mov         word ptr 0x10[si],ax 
23BB    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
23C1    74 1C                     je          L$332 
23C3    FF 74 12                  push        word ptr 0x12[si] 
23C6    50                        push        ax 
23C7    16                        push        ss 
23C8    68 64 03                  push        offset DGROUP:L$1498 
23CB    16                        push        ss 
23CC    68 00 00                  push        offset _message 
23CF    8C D2                     mov         dx,ss 
23D1    9A 00 00 00 00            call        sprintf_ 
23D6    83 C4 0C                  add         sp,0x000c 
23D9                          L$331:
23D9    B8 00 00                  mov         ax,offset _message 
23DC    E8 00 00                  call        output_debug_info_ 
23DF                          L$332:
23DF    31 C0                     xor         ax,ax 
23E1    E9 24 1C                  jmp         L$522 
23E4                          vpu_instr_printstr_:
23E4    51                        push        cx 
23E5    56                        push        si 
23E6    57                        push        di 
23E7    C8 02 00 00               enter       0x0002,0x00 
23EB    89 C6                     mov         si,ax 
23ED    89 56 FE                  mov         word ptr -0x2[bp],dx 
23F0    8E DA                     mov         ds,dx 
23F2    8B 7C 10                  mov         di,word ptr 0x10[si] 
23F5    C5 44 40                  lds         ax,dword ptr 0x40[si] 
23F8    8E C2                     mov         es,dx 
23FA    C1 E7 02                  shl         di,0x02 
23FD    26 8B 5C 12               mov         bx,word ptr es:0x12[si] 
2401    01 C7                     add         di,ax 
2403    8D 47 01                  lea         ax,0x1[bx] 
2406    26 89 44 12               mov         word ptr es:0x12[si],ax 
240A    C5 05                     lds         ax,dword ptr [di] 
240C    01 C3                     add         bx,ax 
240E    8A 07                     mov         al,byte ptr [bx] 
2410    24 07                     and         al,0x07 
2412    30 E4                     xor         ah,ah 
2414    89 F7                     mov         di,si 
2416    01 C0                     add         ax,ax 
2418    8E DA                     mov         ds,dx 
241A    01 C7                     add         di,ax 
241C    8B 3D                     mov         di,word ptr [di] 
241E    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
2424    74 19                     je          L$333 
2426    57                        push        di 
2427    16                        push        ss 
2428    68 8D 03                  push        offset DGROUP:L$1499 
242B    16                        push        ss 
242C    68 00 00                  push        offset _message 
242F    8C D2                     mov         dx,ss 
2431    9A 00 00 00 00            call        sprintf_ 
2436    83 C4 0A                  add         sp,0x000a 
2439    B8 00 00                  mov         ax,offset _message 
243C    E8 00 00                  call        output_debug_info_ 
243F                          L$333:
243F    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
2442    89 FB                     mov         bx,di 
2444    89 F0                     mov         ax,si 
2446    31 C9                     xor         cx,cx 
2448    E8 00 00                  call        memory_allowed_ 
244B    84 C0                     test        al,al 
244D    75 25                     jne         L$335 
244F    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
2455    0F 84 AC 1B               je          L$520 
2459    16                        push        ss 
245A    68 A9 03                  push        offset DGROUP:L$1500 
245D    16                        push        ss 
245E    68 00 00                  push        offset _message 
2461    8C D2                     mov         dx,ss 
2463    9A 00 00 00 00            call        sprintf_ 
2468    83 C4 08                  add         sp,0x0008 
246B                          L$334:
246B    B8 00 00                  mov         ax,offset _message 
246E    E8 00 00                  call        output_debug_info_ 
2471    E9 91 1B                  jmp         L$520 
2474                          L$335:
2474    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
2477    89 FB                     mov         bx,di 
2479    89 F0                     mov         ax,si 
247B    31 C9                     xor         cx,cx 
247D    E8 00 00                  call        memory_allowed_ 
2480    84 C0                     test        al,al 
2482    74 29                     je          L$336 
2484    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
2487    8B 44 14                  mov         ax,word ptr 0x14[si] 
248A    8B 5C 48                  mov         bx,word ptr 0x48[si] 
248D    C1 E0 02                  shl         ax,0x02 
2490    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
2493    01 C3                     add         bx,ax 
2495    C5 07                     lds         ax,dword ptr [bx] 
2497    89 C3                     mov         bx,ax 
2499    01 FB                     add         bx,di 
249B    80 3F 00                  cmp         byte ptr [bx],0x00 
249E    74 0D                     je          L$336 
24A0    89 FB                     mov         bx,di 
24A2    01 C3                     add         bx,ax 
24A4    0F B6 07                  movzx       ax,byte ptr [bx] 
24A7    47                        inc         di 
24A8    E8 00 00                  call        con_stdout_write_ 
24AB    EB C7                     jmp         L$335 
24AD                          L$336:
24AD    B8 0A 00                  mov         ax,0x000a 
24B0    E8 00 00                  call        con_stdout_write_ 
24B3    B8 03 00                  mov         ax,0x0003 
24B6    E9 4E 1B                  jmp         L$521 
24B9                          vpu_instr_mov_po_:
24B9    51                        push        cx 
24BA    56                        push        si 
24BB    57                        push        di 
24BC    C8 04 00 00               enter       0x0004,0x00 
24C0    89 C6                     mov         si,ax 
24C2    89 56 FE                  mov         word ptr -0x2[bp],dx 
24C5    88 D8                     mov         al,bl 
24C7    8E DA                     mov         ds,dx 
24C9    8B 5C 10                  mov         bx,word ptr 0x10[si] 
24CC    8B 54 40                  mov         dx,word ptr 0x40[si] 
24CF    C1 E3 02                  shl         bx,0x02 
24D2    8E 5C 42                  mov         ds,word ptr 0x42[si] 
24D5    8E 46 FE                  mov         es,word ptr -0x2[bp] 
24D8    01 D3                     add         bx,dx 
24DA    26 8B 54 12               mov         dx,word ptr es:0x12[si] 
24DE    89 D7                     mov         di,dx 
24E0    47                        inc         di 
24E1    26 89 7C 12               mov         word ptr es:0x12[si],di 
24E5    C5 3F                     lds         di,dword ptr [bx] 
24E7    89 FB                     mov         bx,di 
24E9    01 D3                     add         bx,dx 
24EB    88 C4                     mov         ah,al 
24ED    0F B6 17                  movzx       dx,byte ptr [bx] 
24F0    80 E4 0C                  and         ah,0x0c 
24F3    89 56 FC                  mov         word ptr -0x4[bp],dx 
24F6    80 FC 04                  cmp         ah,0x04 
24F9    72 13                     jb          L$337 
24FB    76 17                     jbe         L$338 
24FD    80 FC 0C                  cmp         ah,0x0c 
2500    0F 84 C6 01               je          L$362 
2504    80 FC 08                  cmp         ah,0x08 
2507    0F 84 14 01               je          L$357 
250B    E9 F7 F4                  jmp         L$250 
250E                          L$337:
250E    84 E4                     test        ah,ah 
2510    0F 85 F1 F4               jne         L$250 
2514                          L$338:
2514    A8 03                     test        al,0x03 
2516    74 2E                     je          L$339 
2518    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
251B    8B 5C 10                  mov         bx,word ptr 0x10[si] 
251E    8B 54 40                  mov         dx,word ptr 0x40[si] 
2521    C1 E3 02                  shl         bx,0x02 
2524    8E 5C 42                  mov         ds,word ptr 0x42[si] 
2527    8E 46 FE                  mov         es,word ptr -0x2[bp] 
252A    01 D3                     add         bx,dx 
252C    26 8B 54 12               mov         dx,word ptr es:0x12[si] 
2530    89 D7                     mov         di,dx 
2532    47                        inc         di 
2533    26 89 7C 12               mov         word ptr es:0x12[si],di 
2537    C5 3F                     lds         di,dword ptr [bx] 
2539    89 FB                     mov         bx,di 
253B    01 D3                     add         bx,dx 
253D    0F B6 17                  movzx       dx,byte ptr [bx] 
2540    C1 E2 08                  shl         dx,0x08 
2543    09 56 FC                  or          word ptr -0x4[bp],dx 
2546                          L$339:
2546    88 C4                     mov         ah,al 
2548    80 E4 03                  and         ah,0x03 
254B    80 FC 01                  cmp         ah,0x01 
254E    72 11                     jb          L$340 
2550    76 38                     jbe         L$343 
2552    80 FC 03                  cmp         ah,0x03 
2555    0F 84 92 00               je          L$353 
2559    80 FC 02                  cmp         ah,0x02 
255C    74 69                     je          L$350 
255E    E9 BE 00                  jmp         L$357 
2561                          L$340:
2561    84 E4                     test        ah,ah 
2563    0F 85 B8 00               jne         L$357 
2567    80 66 FC 0F               and         byte ptr -0x4[bp],0x0f 
256B    88 66 FD                  mov         byte ptr -0x3[bp],ah 
256E    A8 04                     test        al,0x04 
2570    74 0D                     je          L$342 
2572    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
2575    01 C0                     add         ax,ax 
2577    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
257A                          L$341:
257A    01 F0                     add         ax,si 
257C    E9 73 F6                  jmp         L$272 
257F                          L$342:
257F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
2582    8B 44 2A                  mov         ax,word ptr 0x2a[si] 
2585    8B 54 2C                  mov         dx,word ptr 0x2c[si] 
2588    EB 37                     jmp         L$349 
258A                          L$343:
258A    A8 04                     test        al,0x04 
258C    74 05                     je          L$344 
258E    BB 01 00                  mov         bx,0x0001 
2591    EB 02                     jmp         L$345 
2593                          L$344:
2593    31 DB                     xor         bx,bx 
2595                          L$345:
2595    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
2598    03 5E FC                  add         bx,word ptr -0x4[bp] 
259B    89 F0                     mov         ax,si 
259D    31 C9                     xor         cx,cx 
259F    E8 00 00                  call        memory_allowed_ 
25A2    84 C0                     test        al,al 
25A4    75 05                     jne         L$347 
25A6                          L$346:
25A6    30 E4                     xor         ah,ah 
25A8    E9 5C F4                  jmp         L$251 
25AB                          L$347:
25AB    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
25AE    8B 5C 14                  mov         bx,word ptr 0x14[si] 
25B1    8B 44 48                  mov         ax,word ptr 0x48[si] 
25B4    C1 E3 02                  shl         bx,0x02 
25B7    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
25BA                          L$348:
25BA    01 C3                     add         bx,ax 
25BC    8B 07                     mov         ax,word ptr [bx] 
25BE    8B 57 02                  mov         dx,word ptr 0x2[bx] 
25C1                          L$349:
25C1    03 46 FC                  add         ax,word ptr -0x4[bp] 
25C4    E9 2B F6                  jmp         L$272 
25C7                          L$350:
25C7    C5 46 FC                  lds         ax,dword ptr -0x4[bp] 
25CA    3B 44 44                  cmp         ax,word ptr 0x44[si] 
25CD    72 0E                     jb          L$352 
25CF                          L$351:
25CF    B8 00 00                  mov         ax,offset _segfaulterror 
25D2    BB 0B 00                  mov         bx,0x000b 
25D5    8C D2                     mov         dx,ss 
25D7    80 4C 1E 08               or          byte ptr 0x1e[si],0x08 
25DB    EB 22                     jmp         L$355 
25DD                          L$352:
25DD    8B 44 10                  mov         ax,word ptr 0x10[si] 
25E0    8B 5C 3C                  mov         bx,word ptr 0x3c[si] 
25E3    C1 E0 02                  shl         ax,0x02 
25E6    8E 5C 3E                  mov         ds,word ptr 0x3e[si] 
25E9    EB CF                     jmp         L$348 
25EB                          L$353:
25EB    C5 46 FC                  lds         ax,dword ptr -0x4[bp] 
25EE    3B 44 3A                  cmp         ax,word ptr 0x3a[si] 
25F1    72 1F                     jb          L$356 
25F3                          L$354:
25F3    B8 00 00                  mov         ax,offset _segfaulterror 
25F6    BB 0B 00                  mov         bx,0x000b 
25F9    8C D2                     mov         dx,ss 
25FB    80 4C 1E 10               or          byte ptr 0x1e[si],0x10 
25FF                          L$355:
25FF    9A 00 00 00 00            call        putstr_ 
2604    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
2607    89 F0                     mov         ax,si 
2609    0E                        push        cs 
260A    E8 00 00                  call        send_vpu_signal_ 
260D    31 C0                     xor         ax,ax 
260F    E9 F5 F3                  jmp         L$251 
2612                          L$356:
2612    8B 5C 2E                  mov         bx,word ptr 0x2e[si] 
2615    01 C0                     add         ax,ax 
2617    8B 54 30                  mov         dx,word ptr 0x30[si] 
261A    01 D8                     add         ax,bx 
261C    E9 D3 F5                  jmp         L$272 
261F                          L$357:
261F    C6 46 FD 00               mov         byte ptr -0x3[bp],0x00 
2623    80 66 FC 0F               and         byte ptr -0x4[bp],0x0f 
2627    C5 5E FC                  lds         bx,dword ptr -0x4[bp] 
262A    88 C4                     mov         ah,al 
262C    01 DB                     add         bx,bx 
262E    80 E4 03                  and         ah,0x03 
2631    01 F3                     add         bx,si 
2633    80 FC 03                  cmp         ah,0x03 
2636    0F 84 84 00               je          L$361 
263A    80 FC 02                  cmp         ah,0x02 
263D    74 4E                     je          L$360 
263F    80 FC 01                  cmp         ah,0x01 
2642    0F 85 84 00               jne         L$362 
2646    F6 46 FC 04               test        byte ptr -0x4[bp],0x04 
264A    74 05                     je          L$358 
264C    B8 01 00                  mov         ax,0x0001 
264F    EB 02                     jmp         L$359 
2651                          L$358:
2651    31 C0                     xor         ax,ax 
2653                          L$359:
2653    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
2656    8B 1F                     mov         bx,word ptr [bx] 
2658    31 C9                     xor         cx,cx 
265A    01 C3                     add         bx,ax 
265C    89 F0                     mov         ax,si 
265E    E8 00 00                  call        memory_allowed_ 
2661    84 C0                     test        al,al 
2663    0F 84 3F FF               je          L$346 
2667    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
266A    8B 5C 14                  mov         bx,word ptr 0x14[si] 
266D    8B 44 48                  mov         ax,word ptr 0x48[si] 
2670    C1 E3 02                  shl         bx,0x02 
2673    01 C3                     add         bx,ax 
2675    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
2678    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
267B    01 C0                     add         ax,ax 
267D    8E 46 FE                  mov         es,word ptr -0x2[bp] 
2680    01 C6                     add         si,ax 
2682    8B 07                     mov         ax,word ptr [bx] 
2684    8B 57 02                  mov         dx,word ptr 0x2[bx] 
2687    26 03 04                  add         ax,word ptr es:[si] 
268A    E9 65 F5                  jmp         L$272 
268D                          L$360:
268D    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
2690    25 07 00                  and         ax,0x0007 
2693    89 F7                     mov         di,si 
2695    01 C0                     add         ax,ax 
2697    01 C7                     add         di,ax 
2699    8B 05                     mov         ax,word ptr [di] 
269B    3B 44 44                  cmp         ax,word ptr 0x44[si] 
269E    0F 83 2D FF               jae         L$351 
26A2    8B 7C 10                  mov         di,word ptr 0x10[si] 
26A5    8B 54 3C                  mov         dx,word ptr 0x3c[si] 
26A8    C1 E7 02                  shl         di,0x02 
26AB    8E 44 3E                  mov         es,word ptr 0x3e[si] 
26AE    89 D6                     mov         si,dx 
26B0    01 FE                     add         si,di 
26B2    26 8B 04                  mov         ax,word ptr es:[si] 
26B5    26 8B 54 02               mov         dx,word ptr es:0x2[si] 
26B9    03 07                     add         ax,word ptr [bx] 
26BB    E9 34 F5                  jmp         L$272 
26BE                          L$361:
26BE    8B 07                     mov         ax,word ptr [bx] 
26C0    3B 44 3A                  cmp         ax,word ptr 0x3a[si] 
26C3    0F 83 2C FF               jae         L$354 
26C7    E9 48 FF                  jmp         L$356 
26CA                          L$362:
26CA    A8 01                     test        al,0x01 
26CC    74 26                     je          L$363 
26CE    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
26D1    8B 7C 12                  mov         di,word ptr 0x12[si] 
26D4    8B 44 10                  mov         ax,word ptr 0x10[si] 
26D7    8B 5C 40                  mov         bx,word ptr 0x40[si] 
26DA    C1 E0 02                  shl         ax,0x02 
26DD    8E 5C 42                  mov         ds,word ptr 0x42[si] 
26E0    8E 46 FE                  mov         es,word ptr -0x2[bp] 
26E3    01 C3                     add         bx,ax 
26E5    26 FF 44 12               inc         word ptr es:0x12[si] 
26E9    4F                        dec         di 
26EA    8B 07                     mov         ax,word ptr [bx] 
26EC    8B 57 02                  mov         dx,word ptr 0x2[bx] 
26EF    01 F8                     add         ax,di 
26F1    E9 FE F4                  jmp         L$272 
26F4                          L$363:
26F4    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
26F7    8B 5C 10                  mov         bx,word ptr 0x10[si] 
26FA    8B 44 40                  mov         ax,word ptr 0x40[si] 
26FD    C1 E3 02                  shl         bx,0x02 
2700    8E 5C 42                  mov         ds,word ptr 0x42[si] 
2703    8E 46 FE                  mov         es,word ptr -0x2[bp] 
2706    01 C3                     add         bx,ax 
2708    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
270C    48                        dec         ax 
270D    8B 37                     mov         si,word ptr [bx] 
270F    8B 57 02                  mov         dx,word ptr 0x2[bx] 
2712    E9 65 FE                  jmp         L$341 
2715                          vpu_instr_mov_:
2715    51                        push        cx 
2716    56                        push        si 
2717    57                        push        di 
2718    C8 0E 00 00               enter       0x000e,0x00 
271C    89 C6                     mov         si,ax 
271E    89 56 FC                  mov         word ptr -0x4[bp],dx 
2721    8E DA                     mov         ds,dx 
2723    8B 5C 10                  mov         bx,word ptr 0x10[si] 
2726    8B 44 40                  mov         ax,word ptr 0x40[si] 
2729    C1 E3 02                  shl         bx,0x02 
272C    8E 5C 42                  mov         ds,word ptr 0x42[si] 
272F    8E C2                     mov         es,dx 
2731    01 C3                     add         bx,ax 
2733    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
2737    89 C2                     mov         dx,ax 
2739    42                        inc         dx 
273A    26 89 54 12               mov         word ptr es:0x12[si],dx 
273E    C5 0F                     lds         cx,dword ptr [bx] 
2740    89 CB                     mov         bx,cx 
2742    01 C3                     add         bx,ax 
2744    C6 46 FE 00               mov         byte ptr -0x2[bp],0x00 
2748    8A 2F                     mov         ch,byte ptr [bx] 
274A                          L$364:
274A    0F B6 46 FE               movzx       ax,byte ptr -0x2[bp] 
274E    C1 E0 02                  shl         ax,0x02 
2751    89 46 FA                  mov         word ptr -0x6[bp],ax 
2754    0F B6 DD                  movzx       bx,ch 
2757    8A 4E FA                  mov         cl,byte ptr -0x6[bp] 
275A    D3 FB                     sar         bx,cl 
275C    80 E3 0F                  and         bl,0x0f 
275F    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
2762    89 F0                     mov         ax,si 
2764    30 FF                     xor         bh,bh 
2766    8B 7E FA                  mov         di,word ptr -0x6[bp] 
2769    E8 00 00                  call        vpu_instr_mov_po_ 
276C    89 43 F2                  mov         word ptr -0xe[bp+di],ax 
276F    89 53 F4                  mov         word ptr -0xc[bp+di],dx 
2772    8B 43 F4                  mov         ax,word ptr -0xc[bp+di] 
2775    8B 53 F2                  mov         dx,word ptr -0xe[bp+di] 
2778    85 C0                     test        ax,ax 
277A    75 06                     jne         L$365 
277C    85 D2                     test        dx,dx 
277E    0F 84 83 18               je          L$520 
2782                          L$365:
2782    FE 46 FE                  inc         byte ptr -0x2[bp] 
2785    80 7E FE 02               cmp         byte ptr -0x2[bp],0x02 
2789    72 BF                     jb          L$364 
278B    F6 C5 04                  test        ch,0x04 
278E    74 1A                     je          L$368 
2790    F6 C5 40                  test        ch,0x40 
2793    75 15                     jne         L$368 
2795                          L$366:
2795    88 E8                     mov         al,ch 
2797    24 C0                     and         al,0xc0 
2799    3C 80                     cmp         al,0x80 
279B    74 4B                     je          L$372 
279D    C5 5E F6                  lds         bx,dword ptr -0xa[bp] 
27A0    0F B6 07                  movzx       ax,byte ptr [bx] 
27A3                          L$367:
27A3    C5 5E F2                  lds         bx,dword ptr -0xe[bp] 
27A6    89 07                     mov         word ptr [bx],ax 
27A8    EB 4F                     jmp         L$374 
27AA                          L$368:
27AA    F6 C5 04                  test        ch,0x04 
27AD    75 22                     jne         L$370 
27AF    F6 C5 40                  test        ch,0x40 
27B2    74 1D                     je          L$370 
27B4    88 EC                     mov         ah,ch 
27B6    80 E4 0C                  and         ah,0x0c 
27B9    88 E8                     mov         al,ch 
27BB    24 C0                     and         al,0xc0 
27BD    80 FC 08                  cmp         ah,0x08 
27C0    75 06                     jne         L$369 
27C2    3C C0                     cmp         al,0xc0 
27C4    75 22                     jne         L$372 
27C6    EB 1B                     jmp         L$371 
27C8                          L$369:
27C8    3C C0                     cmp         al,0xc0 
27CA    75 23                     jne         L$373 
27CC    F6 C5 10                  test        ch,0x10 
27CF    EB 1E                     jmp         L$373 
27D1                          L$370:
27D1    F6 C5 40                  test        ch,0x40 
27D4    74 19                     je          L$373 
27D6    F6 C5 04                  test        ch,0x04 
27D9    74 14                     je          L$373 
27DB    88 E8                     mov         al,ch 
27DD    24 C0                     and         al,0xc0 
27DF    3C C0                     cmp         al,0xc0 
27E1    75 05                     jne         L$372 
27E3                          L$371:
27E3    F6 C5 10                  test        ch,0x10 
27E6    74 AD                     je          L$366 
27E8                          L$372:
27E8    C5 5E F6                  lds         bx,dword ptr -0xa[bp] 
27EB    8B 07                     mov         ax,word ptr [bx] 
27ED    EB B4                     jmp         L$367 
27EF                          L$373:
27EF    C5 5E F6                  lds         bx,dword ptr -0xa[bp] 
27F2    8A 07                     mov         al,byte ptr [bx] 
27F4    C5 5E F2                  lds         bx,dword ptr -0xe[bp] 
27F7    88 07                     mov         byte ptr [bx],al 
27F9                          L$374:
27F9    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
27FC    8B 44 10                  mov         ax,word ptr 0x10[si] 
27FF    3B 44 46                  cmp         ax,word ptr 0x46[si] 
2802    0F 82 FF 17               jb          L$520 
2806    BB 0B 00                  mov         bx,0x000b 
2809    89 F0                     mov         ax,si 
280B    8C DA                     mov         dx,ds 
280D    0E                        push        cs 
280E    E8 00 00                  call        send_vpu_signal_ 
2811    E9 F1 17                  jmp         L$520 
2814                          imm_src_:
2814    56                        push        si 
2815    89 C6                     mov         si,ax 
2817    8E DA                     mov         ds,dx 
2819    F6 C3 40                  test        bl,0x40 
281C    74 21                     je          L$375 
281E    8B 5C 12                  mov         bx,word ptr 0x12[si] 
2821    8D 47 02                  lea         ax,0x2[bx] 
2824    89 44 12                  mov         word ptr 0x12[si],ax 
2827    8B 44 10                  mov         ax,word ptr 0x10[si] 
282A    8B 54 40                  mov         dx,word ptr 0x40[si] 
282D    C1 E0 02                  shl         ax,0x02 
2830    8E 5C 42                  mov         ds,word ptr 0x42[si] 
2833    89 D6                     mov         si,dx 
2835    01 C6                     add         si,ax 
2837    C5 14                     lds         dx,dword ptr [si] 
2839    01 D3                     add         bx,dx 
283B    8B 07                     mov         ax,word ptr [bx] 
283D    5E                        pop         si 
283E    C3                        ret         
283F                          L$375:
283F    8B 44 10                  mov         ax,word ptr 0x10[si] 
2842    8B 5C 40                  mov         bx,word ptr 0x40[si] 
2845    C1 E0 02                  shl         ax,0x02 
2848    8E 44 42                  mov         es,word ptr 0x42[si] 
284B    01 C3                     add         bx,ax 
284D    8B 44 12                  mov         ax,word ptr 0x12[si] 
2850    89 C2                     mov         dx,ax 
2852    42                        inc         dx 
2853    89 54 12                  mov         word ptr 0x12[si],dx 
2856    26 8B 37                  mov         si,word ptr es:[bx] 
2859    26 8B 5F 02               mov         bx,word ptr es:0x2[bx] 
285D    8E DB                     mov         ds,bx 
285F    89 F3                     mov         bx,si 
2861    01 C3                     add         bx,ax 
2863    0F B6 07                  movzx       ax,byte ptr [bx] 
2866    5E                        pop         si 
2867    C3                        ret         
2868                          inc_debug_info_:
2868    52                        push        dx 
2869    50                        push        ax 
286A    16                        push        ss 
286B    68 C5 03                  push        offset DGROUP:L$1501 
286E    16                        push        ss 
286F    68 00 00                  push        offset _message 
2872    8C D2                     mov         dx,ss 
2874    9A 00 00 00 00            call        sprintf_ 
2879    83 C4 0A                  add         sp,0x000a 
287C    B8 00 00                  mov         ax,offset _message 
287F    E8 00 00                  call        output_debug_info_ 
2882    5A                        pop         dx 
2883    C3                        ret         
2884                          vpu_instr_inc_:
2884    51                        push        cx 
2885    56                        push        si 
2886    89 C3                     mov         bx,ax 
2888    8E DA                     mov         ds,dx 
288A    8B 77 10                  mov         si,word ptr 0x10[bx] 
288D    8B 47 40                  mov         ax,word ptr 0x40[bx] 
2890    C1 E6 02                  shl         si,0x02 
2893    8E 47 42                  mov         es,word ptr 0x42[bx] 
2896    01 C6                     add         si,ax 
2898    8B 47 12                  mov         ax,word ptr 0x12[bx] 
289B    89 C2                     mov         dx,ax 
289D    42                        inc         dx 
289E    89 57 12                  mov         word ptr 0x12[bx],dx 
28A1    26 C4 0C                  les         cx,dword ptr es:[si] 
28A4    89 CE                     mov         si,cx 
28A6    01 C6                     add         si,ax 
28A8    26 8A 04                  mov         al,byte ptr es:[si] 
28AB    24 8F                     and         al,0x8f 
28AD    A8 80                     test        al,0x80 
28AF    74 23                     je          L$377 
28B1    24 0F                     and         al,0x0f 
28B3    0F B6 F0                  movzx       si,al 
28B6    01 F6                     add         si,si 
28B8    01 DE                     add         si,bx 
28BA    FF 04                     inc         word ptr [si] 
28BC    75 04                     jne         L$376 
28BE    80 4F 1E 20               or          byte ptr 0x1e[bx],0x20 
28C2                          L$376:
28C2    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
28C8    74 3C                     je          L$381 
28CA    30 E4                     xor         ah,ah 
28CC    01 C0                     add         ax,ax 
28CE    01 C3                     add         bx,ax 
28D0    8B 07                     mov         ax,word ptr [bx] 
28D2    EB 2F                     jmp         L$380 
28D4                          L$377:
28D4    0F B6 D0                  movzx       dx,al 
28D7    C4 77 2A                  les         si,dword ptr 0x2a[bx] 
28DA    01 D6                     add         si,dx 
28DC    26 FE 04                  inc         byte ptr es:[si] 
28DF    C4 77 2A                  les         si,dword ptr 0x2a[bx] 
28E2    01 D6                     add         si,dx 
28E4    26 80 3C 00               cmp         byte ptr es:[si],0x00 
28E8                          L$378:
28E8    75 04                     jne         L$379 
28EA    80 4F 1E 20               or          byte ptr 0x1e[bx],0x20 
28EE                          L$379:
28EE    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
28F4    74 10                     je          L$381 
28F6    0F B6 C8                  movzx       cx,al 
28F9    C5 47 2A                  lds         ax,dword ptr 0x2a[bx] 
28FC    89 C3                     mov         bx,ax 
28FE    01 CB                     add         bx,cx 
2900    0F B6 07                  movzx       ax,byte ptr [bx] 
2903                          L$380:
2903    E8 00 00                  call        inc_debug_info_ 
2906                          L$381:
2906    31 C0                     xor         ax,ax 
2908    5E                        pop         si 
2909    59                        pop         cx 
290A    CB                        retf        
290B                          vpu_instr_dec_:
290B    51                        push        cx 
290C    56                        push        si 
290D    89 C3                     mov         bx,ax 
290F    8E DA                     mov         ds,dx 
2911    8B 77 10                  mov         si,word ptr 0x10[bx] 
2914    8B 47 40                  mov         ax,word ptr 0x40[bx] 
2917    C1 E6 02                  shl         si,0x02 
291A    8E 47 42                  mov         es,word ptr 0x42[bx] 
291D    01 C6                     add         si,ax 
291F    8B 47 12                  mov         ax,word ptr 0x12[bx] 
2922    89 C2                     mov         dx,ax 
2924    42                        inc         dx 
2925    89 57 12                  mov         word ptr 0x12[bx],dx 
2928    26 C4 0C                  les         cx,dword ptr es:[si] 
292B    89 CE                     mov         si,cx 
292D    01 C6                     add         si,ax 
292F    26 8A 04                  mov         al,byte ptr es:[si] 
2932    24 8F                     and         al,0x8f 
2934    A8 80                     test        al,0x80 
2936    74 26                     je          L$383 
2938    24 0F                     and         al,0x0f 
293A    0F B6 F0                  movzx       si,al 
293D    01 F6                     add         si,si 
293F    01 DE                     add         si,bx 
2941    FF 0C                     dec         word ptr [si] 
2943    83 3C FF                  cmp         word ptr [si],0xffff 
2946    75 04                     jne         L$382 
2948    80 4F 1E 20               or          byte ptr 0x1e[bx],0x20 
294C                          L$382:
294C    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
2952    74 B2                     je          L$381 
2954    30 E4                     xor         ah,ah 
2956    01 C0                     add         ax,ax 
2958    01 C3                     add         bx,ax 
295A    8B 07                     mov         ax,word ptr [bx] 
295C    EB A5                     jmp         L$380 
295E                          L$383:
295E    0F B6 D0                  movzx       dx,al 
2961    C4 77 2A                  les         si,dword ptr 0x2a[bx] 
2964    01 D6                     add         si,dx 
2966    26 FE 0C                  dec         byte ptr es:[si] 
2969    C4 77 2A                  les         si,dword ptr 0x2a[bx] 
296C    01 D6                     add         si,dx 
296E    26 80 3C FF               cmp         byte ptr es:[si],0xff 
2972    E9 73 FF                  jmp         L$378 
2975                          vpu_instr_push_:
2975    51                        push        cx 
2976    56                        push        si 
2977    57                        push        di 
2978    C8 10 00 00               enter       0x0010,0x00 
297C    89 C6                     mov         si,ax 
297E    89 D1                     mov         cx,dx 
2980    8E DA                     mov         ds,dx 
2982    8B 7C 10                  mov         di,word ptr 0x10[si] 
2985    C5 44 40                  lds         ax,dword ptr 0x40[si] 
2988    8E C2                     mov         es,dx 
298A    C1 E7 02                  shl         di,0x02 
298D    26 8B 5C 12               mov         bx,word ptr es:0x12[si] 
2991    01 C7                     add         di,ax 
2993    8D 47 01                  lea         ax,0x1[bx] 
2996    26 89 44 12               mov         word ptr es:0x12[si],ax 
299A    8B 15                     mov         dx,word ptr [di] 
299C    01 D3                     add         bx,dx 
299E    89 F2                     mov         dx,si 
29A0    8E 5D 02                  mov         ds,word ptr 0x2[di] 
29A3    83 C2 10                  add         dx,0x0010 
29A6    8A 07                     mov         al,byte ptr [bx] 
29A8    89 56 F0                  mov         word ptr -0x10[bp],dx 
29AB    89 F2                     mov         dx,si 
29AD    83 C2 12                  add         dx,0x0012 
29B0    89 4E F2                  mov         word ptr -0xe[bp],cx 
29B3    89 56 F4                  mov         word ptr -0xc[bp],dx 
29B6    89 F2                     mov         dx,si 
29B8    89 4E F6                  mov         word ptr -0xa[bp],cx 
29BB    83 C2 14                  add         dx,0x0014 
29BE    89 4E FA                  mov         word ptr -0x6[bp],cx 
29C1    89 56 F8                  mov         word ptr -0x8[bp],dx 
29C4    89 F2                     mov         dx,si 
29C6    89 4E FE                  mov         word ptr -0x2[bp],cx 
29C9    83 C2 16                  add         dx,0x0016 
29CC    8E D9                     mov         ds,cx 
29CE    89 56 FC                  mov         word ptr -0x4[bp],dx 
29D1    83 7C 16 00               cmp         word ptr 0x16[si],0x0000 
29D5    74 08                     je          L$384 
29D7    8B 54 16                  mov         dx,word ptr 0x16[si] 
29DA    3B 54 3A                  cmp         dx,word ptr 0x3a[si] 
29DD    72 18                     jb          L$385 
29DF                          L$384:
29DF    B8 00 00                  mov         ax,offset _stackoverflowerror 
29E2    8C D2                     mov         dx,ss 
29E4    BB 0B 00                  mov         bx,0x000b 
29E7    9A 00 00 00 00            call        putstr_ 
29EC    89 F0                     mov         ax,si 
29EE    89 CA                     mov         dx,cx 
29F0    0E                        push        cs 
29F1    E8 00 00                  call        send_vpu_signal_ 
29F4    E9 0E 16                  jmp         L$520 
29F7                          L$385:
29F7    A8 08                     test        al,0x08 
29F9    74 28                     je          L$386 
29FB    24 03                     and         al,0x03 
29FD    0F B6 F8                  movzx       di,al 
2A00    C1 E7 02                  shl         di,0x02 
2A03    C5 5B F0                  lds         bx,dword ptr -0x10[bp+di] 
2A06    26 8B 44 16               mov         ax,word ptr es:0x16[si] 
2A0A    89 C7                     mov         di,ax 
2A0C    01 C7                     add         di,ax 
2A0E    48                        dec         ax 
2A0F    26 89 44 16               mov         word ptr es:0x16[si],ax 
2A13    26 C4 44 2E               les         ax,dword ptr es:0x2e[si] 
2A17    89 C6                     mov         si,ax 
2A19    01 FE                     add         si,di 
2A1B    8B 07                     mov         ax,word ptr [bx] 
2A1D    26 89 04                  mov         word ptr es:[si],ax 
2A20    E9 E2 15                  jmp         L$520 
2A23                          L$386:
2A23    24 07                     and         al,0x07 
2A25    30 E4                     xor         ah,ah 
2A27    89 F7                     mov         di,si 
2A29    01 C0                     add         ax,ax 
2A2B    01 C7                     add         di,ax 
2A2D    89 D0                     mov         ax,dx 
2A2F    48                        dec         ax 
2A30    89 44 16                  mov         word ptr 0x16[si],ax 
2A33    01 D2                     add         dx,dx 
2A35    C5 44 2E                  lds         ax,dword ptr 0x2e[si] 
2A38    89 C6                     mov         si,ax 
2A3A    01 D6                     add         si,dx 
2A3C                          L$387:
2A3C    26 8B 05                  mov         ax,word ptr es:[di] 
2A3F    89 04                     mov         word ptr [si],ax 
2A41    E9 C1 15                  jmp         L$520 
2A44                          vpu_instr_pop_:
2A44    51                        push        cx 
2A45    56                        push        si 
2A46    57                        push        di 
2A47    C8 10 00 00               enter       0x0010,0x00 
2A4B    89 C6                     mov         si,ax 
2A4D    89 D1                     mov         cx,dx 
2A4F    8E DA                     mov         ds,dx 
2A51    8B 44 10                  mov         ax,word ptr 0x10[si] 
2A54    8B 5C 40                  mov         bx,word ptr 0x40[si] 
2A57    C1 E0 02                  shl         ax,0x02 
2A5A    8E 5C 42                  mov         ds,word ptr 0x42[si] 
2A5D    8E C2                     mov         es,dx 
2A5F    01 C3                     add         bx,ax 
2A61    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
2A65    89 C2                     mov         dx,ax 
2A67    42                        inc         dx 
2A68    26 89 54 12               mov         word ptr es:0x12[si],dx 
2A6C    C5 3F                     lds         di,dword ptr [bx] 
2A6E    89 FB                     mov         bx,di 
2A70    01 C3                     add         bx,ax 
2A72    89 F0                     mov         ax,si 
2A74    05 10 00                  add         ax,0x0010 
2A77    8A 1F                     mov         bl,byte ptr [bx] 
2A79    89 46 F0                  mov         word ptr -0x10[bp],ax 
2A7C    89 F0                     mov         ax,si 
2A7E    05 12 00                  add         ax,0x0012 
2A81    89 4E F2                  mov         word ptr -0xe[bp],cx 
2A84    89 46 F4                  mov         word ptr -0xc[bp],ax 
2A87    89 F0                     mov         ax,si 
2A89    89 4E F6                  mov         word ptr -0xa[bp],cx 
2A8C    05 14 00                  add         ax,0x0014 
2A8F    89 4E FA                  mov         word ptr -0x6[bp],cx 
2A92    89 46 F8                  mov         word ptr -0x8[bp],ax 
2A95    89 F0                     mov         ax,si 
2A97    89 4E FE                  mov         word ptr -0x2[bp],cx 
2A9A    05 16 00                  add         ax,0x0016 
2A9D    8E D9                     mov         ds,cx 
2A9F    89 46 FC                  mov         word ptr -0x4[bp],ax 
2AA2    8B 44 3A                  mov         ax,word ptr 0x3a[si] 
2AA5    48                        dec         ax 
2AA6    3B 44 16                  cmp         ax,word ptr 0x16[si] 
2AA9    77 18                     ja          L$388 
2AAB    B8 00 00                  mov         ax,offset _stackunderflowerror 
2AAE    8C D2                     mov         dx,ss 
2AB0    BB 0B 00                  mov         bx,0x000b 
2AB3    9A 00 00 00 00            call        putstr_ 
2AB8    89 F0                     mov         ax,si 
2ABA    89 CA                     mov         dx,cx 
2ABC    0E                        push        cs 
2ABD    E8 00 00                  call        send_vpu_signal_ 
2AC0    E9 42 15                  jmp         L$520 
2AC3                          L$388:
2AC3    F6 C3 08                  test        bl,0x08 
2AC6    74 25                     je          L$389 
2AC8    FF 44 16                  inc         word ptr 0x16[si] 
2ACB    8B 7C 16                  mov         di,word ptr 0x16[si] 
2ACE    8B 44 2E                  mov         ax,word ptr 0x2e[si] 
2AD1    01 FF                     add         di,di 
2AD3    01 C7                     add         di,ax 
2AD5    88 D8                     mov         al,bl 
2AD7    24 03                     and         al,0x03 
2AD9    8E 5C 30                  mov         ds,word ptr 0x30[si] 
2ADC    0F B6 F0                  movzx       si,al 
2ADF    C1 E6 02                  shl         si,0x02 
2AE2    C4 5A F0                  les         bx,dword ptr -0x10[bp+si] 
2AE5    8B 05                     mov         ax,word ptr [di] 
2AE7    26 89 07                  mov         word ptr es:[bx],ax 
2AEA    E9 18 15                  jmp         L$520 
2AED                          L$389:
2AED    FF 44 16                  inc         word ptr 0x16[si] 
2AF0    88 D8                     mov         al,bl 
2AF2    8B 54 2E                  mov         dx,word ptr 0x2e[si] 
2AF5    8B 7C 16                  mov         di,word ptr 0x16[si] 
2AF8    24 07                     and         al,0x07 
2AFA    01 FF                     add         di,di 
2AFC    8E 44 30                  mov         es,word ptr 0x30[si] 
2AFF    01 D7                     add         di,dx 
2B01    30 E4                     xor         ah,ah 
2B03    01 C0                     add         ax,ax 
2B05    01 C6                     add         si,ax 
2B07    E9 32 FF                  jmp         L$387 
2B0A                          vpu_set_sign_:
2B0A    51                        push        cx 
2B0B    56                        push        si 
2B0C    89 C6                     mov         si,ax 
2B0E    8E DA                     mov         ds,dx 
2B10    88 DF                     mov         bh,bl 
2B12    80 E7 0F                  and         bh,0x0f 
2B15    05 1E 00                  add         ax,0x001e 
2B18    F6 C3 80                  test        bl,0x80 
2B1B    74 2A                     je          L$392 
2B1D    0F B6 DF                  movzx       bx,bh 
2B20    01 DB                     add         bx,bx 
2B22    01 F3                     add         bx,si 
2B24    8B 1F                     mov         bx,word ptr [bx] 
2B26    89 DA                     mov         dx,bx 
2B28    89 5C 1C                  mov         word ptr 0x1c[si],bx 
2B2B    89 C3                     mov         bx,ax 
2B2D    F6 C6 80                  test        dh,0x80 
2B30    74 05                     je          L$390 
2B32    BE 01 00                  mov         si,0x0001 
2B35    EB 02                     jmp         L$391 
2B37                          L$390:
2B37    31 F6                     xor         si,si 
2B39                          L$391:
2B39    83 E6 01                  and         si,0x0001 
2B3C    80 27 BF                  and         byte ptr [bx],0xbf 
2B3F    C1 E6 06                  shl         si,0x06 
2B42    09 37                     or          word ptr [bx],si 
2B44    5E                        pop         si 
2B45    59                        pop         cx 
2B46    C3                        ret         
2B47                          L$392:
2B47    0F B6 DF                  movzx       bx,bh 
2B4A    C4 4C 2A                  les         cx,dword ptr 0x2a[si] 
2B4D    01 CB                     add         bx,cx 
2B4F    26 0F BE 1F               movsx       bx,byte ptr es:[bx] 
2B53    89 5C 1C                  mov         word ptr 0x1c[si],bx 
2B56    89 C3                     mov         bx,ax 
2B58    8E C2                     mov         es,dx 
2B5A    F6 44 1C 80               test        byte ptr 0x1c[si],0x80 
2B5E    74 05                     je          L$393 
2B60    BE 01 00                  mov         si,0x0001 
2B63    EB 02                     jmp         L$394 
2B65                          L$393:
2B65    31 F6                     xor         si,si 
2B67                          L$394:
2B67    83 E6 01                  and         si,0x0001 
2B6A    26 80 27 BF               and         byte ptr es:[bx],0xbf 
2B6E    C1 E6 06                  shl         si,0x06 
2B71    26 09 37                  or          word ptr es:[bx],si 
2B74    5E                        pop         si 
2B75    59                        pop         cx 
2B76    C3                        ret         
2B77                          set_overflow_:
2B77    56                        push        si 
2B78    89 C6                     mov         si,ax 
2B7A    8E DA                     mov         ds,dx 
2B7C    88 DF                     mov         bh,bl 
2B7E    80 E7 0F                  and         bh,0x0f 
2B81    05 1E 00                  add         ax,0x001e 
2B84    F6 C3 80                  test        bl,0x80 
2B87    74 25                     je          L$397 
2B89    0F B6 DF                  movzx       bx,bh 
2B8C    01 DB                     add         bx,bx 
2B8E    01 DE                     add         si,bx 
2B90    30 C9                     xor         cl,cl 
2B92    8B 1C                     mov         bx,word ptr [si] 
2B94    80 E5 80                  and         ch,0x80 
2B97    80 E7 80                  and         bh,0x80 
2B9A    30 FD                     xor         ch,bh 
2B9C    89 C3                     mov         bx,ax 
2B9E    85 C9                     test        cx,cx 
2BA0    74 05                     je          L$395 
2BA2    B8 01 00                  mov         ax,0x0001 
2BA5    EB 02                     jmp         L$396 
2BA7                          L$395:
2BA7    31 C0                     xor         ax,ax 
2BA9                          L$396:
2BA9    25 01 00                  and         ax,0x0001 
2BAC    EB 26                     jmp         L$400 
2BAE                          L$397:
2BAE    0F B6 D7                  movzx       dx,bh 
2BB1    C4 5C 2A                  les         bx,dword ptr 0x2a[si] 
2BB4    01 D3                     add         bx,dx 
2BB6    30 ED                     xor         ch,ch 
2BB8    26 8A 1F                  mov         bl,byte ptr es:[bx] 
2BBB    80 E1 80                  and         cl,0x80 
2BBE    80 E3 80                  and         bl,0x80 
2BC1    30 D9                     xor         cl,bl 
2BC3    89 C3                     mov         bx,ax 
2BC5    85 C9                     test        cx,cx 
2BC7    74 05                     je          L$398 
2BC9    B8 01 00                  mov         ax,0x0001 
2BCC    EB 02                     jmp         L$399 
2BCE                          L$398:
2BCE    31 C0                     xor         ax,ax 
2BD0                          L$399:
2BD0    30 E4                     xor         ah,ah 
2BD2    24 01                     and         al,0x01 
2BD4                          L$400:
2BD4    80 27 DF                  and         byte ptr [bx],0xdf 
2BD7    C1 E0 05                  shl         ax,0x05 
2BDA    09 07                     or          word ptr [bx],ax 
2BDC    5E                        pop         si 
2BDD    C3                        ret         
2BDE                          vpu_instr_add_:
2BDE    51                        push        cx 
2BDF    56                        push        si 
2BE0    57                        push        di 
2BE1    C8 06 00 00               enter       0x0006,0x00 
2BE5    89 C6                     mov         si,ax 
2BE7    89 56 FC                  mov         word ptr -0x4[bp],dx 
2BEA    89 D9                     mov         cx,bx 
2BEC    8E DA                     mov         ds,dx 
2BEE    8B 5C 10                  mov         bx,word ptr 0x10[si] 
2BF1    C5 44 40                  lds         ax,dword ptr 0x40[si] 
2BF4    8E C2                     mov         es,dx 
2BF6    C1 E3 02                  shl         bx,0x02 
2BF9    26 8B 7C 12               mov         di,word ptr es:0x12[si] 
2BFD    01 C3                     add         bx,ax 
2BFF    8D 45 01                  lea         ax,0x1[di] 
2C02    26 89 44 12               mov         word ptr es:0x12[si],ax 
2C06    C5 17                     lds         dx,dword ptr [bx] 
2C08    89 D3                     mov         bx,dx 
2C0A    01 FB                     add         bx,di 
2C0C    8A 07                     mov         al,byte ptr [bx] 
2C0E    88 46 FE                  mov         byte ptr -0x2[bp],al 
2C11    F6 C1 80                  test        cl,0x80 
2C14    74 0B                     je          L$401 
2C16    89 CB                     mov         bx,cx 
2C18    89 F0                     mov         ax,si 
2C1A    8C C2                     mov         dx,es 
2C1C    E8 00 00                  call        imm_src_ 
2C1F    EB 47                     jmp         L$403 
2C21                          L$401:
2C21    06                        push        es 
2C22    1F                        pop         ds 
2C23    8B 44 10                  mov         ax,word ptr 0x10[si] 
2C26    8B 5C 40                  mov         bx,word ptr 0x40[si] 
2C29    C1 E0 02                  shl         ax,0x02 
2C2C    8E 5C 42                  mov         ds,word ptr 0x42[si] 
2C2F    01 C3                     add         bx,ax 
2C31    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
2C35    89 C2                     mov         dx,ax 
2C37    42                        inc         dx 
2C38    26 89 54 12               mov         word ptr es:0x12[si],dx 
2C3C    C5 17                     lds         dx,dword ptr [bx] 
2C3E    89 D3                     mov         bx,dx 
2C40    01 C3                     add         bx,ax 
2C42    8A 07                     mov         al,byte ptr [bx] 
2C44    88 C3                     mov         bl,al 
2C46    80 E3 0F                  and         bl,0x0f 
2C49    A8 80                     test        al,0x80 
2C4B    74 0F                     je          L$402 
2C4D    0F B6 C3                  movzx       ax,bl 
2C50    89 F3                     mov         bx,si 
2C52    01 C0                     add         ax,ax 
2C54    06                        push        es 
2C55    1F                        pop         ds 
2C56    01 C3                     add         bx,ax 
2C58    8B 07                     mov         ax,word ptr [bx] 
2C5A    EB 0C                     jmp         L$403 
2C5C                          L$402:
2C5C    06                        push        es 
2C5D    1F                        pop         ds 
2C5E    30 FF                     xor         bh,bh 
2C60    C5 54 2A                  lds         dx,dword ptr 0x2a[si] 
2C63    01 D3                     add         bx,dx 
2C65    0F B6 07                  movzx       ax,byte ptr [bx] 
2C68                          L$403:
2C68    89 46 FA                  mov         word ptr -0x6[bp],ax 
2C6B    8A 5E FE                  mov         bl,byte ptr -0x2[bp] 
2C6E    80 E3 0F                  and         bl,0x0f 
2C71    F6 46 FE 80               test        byte ptr -0x2[bp],0x80 
2C75    74 1C                     je          L$405 
2C77    30 FF                     xor         bh,bh 
2C79    01 DB                     add         bx,bx 
2C7B    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
2C7E    01 F3                     add         bx,si 
2C80    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
2C83    8B 0F                     mov         cx,word ptr [bx] 
2C85    01 C8                     add         ax,cx 
2C87    89 07                     mov         word ptr [bx],ax 
2C89    39 C1                     cmp         cx,ax 
2C8B    76 30                     jbe         L$407 
2C8D                          L$404:
2C8D    80 4C 1E 80               or          byte ptr 0x1e[si],0x80 
2C91    EB 2E                     jmp         L$408 
2C93                          L$405:
2C93    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
2C96    0F B6 C3                  movzx       ax,bl 
2C99    C5 5C 2A                  lds         bx,dword ptr 0x2a[si] 
2C9C    01 C3                     add         bx,ax 
2C9E    8A 56 FA                  mov         dl,byte ptr -0x6[bp] 
2CA1    0F B6 0F                  movzx       cx,byte ptr [bx] 
2CA4    00 17                     add         byte ptr [bx],dl 
2CA6    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
2CA9    C5 5C 2A                  lds         bx,dword ptr 0x2a[si] 
2CAC    01 C3                     add         bx,ax 
2CAE    0F B6 07                  movzx       ax,byte ptr [bx] 
2CB1    39 C8                     cmp         ax,cx 
2CB3    73 05                     jae         L$406 
2CB5    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
2CB8    EB D3                     jmp         L$404 
2CBA                          L$406:
2CBA    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
2CBD                          L$407:
2CBD    80 64 1E 7F               and         byte ptr 0x1e[si],0x7f 
2CC1                          L$408:
2CC1    0F B6 7E FE               movzx       di,byte ptr -0x2[bp] 
2CC5    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
2CC8    89 F0                     mov         ax,si 
2CCA    89 FB                     mov         bx,di 
2CCC    E8 00 00                  call        set_overflow_ 
2CCF    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
2CD2    89 FB                     mov         bx,di 
2CD4    E9 71 09                  jmp         L$473 
2CD7                          vpu_instr_sub_:
2CD7    51                        push        cx 
2CD8    56                        push        si 
2CD9    57                        push        di 
2CDA    C8 06 00 00               enter       0x0006,0x00 
2CDE    89 C6                     mov         si,ax 
2CE0    89 56 FC                  mov         word ptr -0x4[bp],dx 
2CE3    89 D9                     mov         cx,bx 
2CE5    8E DA                     mov         ds,dx 
2CE7    8B 5C 10                  mov         bx,word ptr 0x10[si] 
2CEA    C5 44 40                  lds         ax,dword ptr 0x40[si] 
2CED    8E C2                     mov         es,dx 
2CEF    C1 E3 02                  shl         bx,0x02 
2CF2    26 8B 7C 12               mov         di,word ptr es:0x12[si] 
2CF6    01 C3                     add         bx,ax 
2CF8    8D 45 01                  lea         ax,0x1[di] 
2CFB    26 89 44 12               mov         word ptr es:0x12[si],ax 
2CFF    C5 17                     lds         dx,dword ptr [bx] 
2D01    89 D3                     mov         bx,dx 
2D03    01 FB                     add         bx,di 
2D05    8A 07                     mov         al,byte ptr [bx] 
2D07    88 46 FE                  mov         byte ptr -0x2[bp],al 
2D0A    F6 C1 80                  test        cl,0x80 
2D0D    74 0B                     je          L$409 
2D0F    89 CB                     mov         bx,cx 
2D11    89 F0                     mov         ax,si 
2D13    8C C2                     mov         dx,es 
2D15    E8 00 00                  call        imm_src_ 
2D18    EB 47                     jmp         L$411 
2D1A                          L$409:
2D1A    06                        push        es 
2D1B    1F                        pop         ds 
2D1C    8B 44 10                  mov         ax,word ptr 0x10[si] 
2D1F    8B 5C 40                  mov         bx,word ptr 0x40[si] 
2D22    C1 E0 02                  shl         ax,0x02 
2D25    8E 5C 42                  mov         ds,word ptr 0x42[si] 
2D28    01 C3                     add         bx,ax 
2D2A    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
2D2E    89 C2                     mov         dx,ax 
2D30    42                        inc         dx 
2D31    26 89 54 12               mov         word ptr es:0x12[si],dx 
2D35    C5 17                     lds         dx,dword ptr [bx] 
2D37    89 D3                     mov         bx,dx 
2D39    01 C3                     add         bx,ax 
2D3B    8A 07                     mov         al,byte ptr [bx] 
2D3D    88 C3                     mov         bl,al 
2D3F    80 E3 0F                  and         bl,0x0f 
2D42    A8 80                     test        al,0x80 
2D44    74 0F                     je          L$410 
2D46    0F B6 C3                  movzx       ax,bl 
2D49    89 F3                     mov         bx,si 
2D4B    01 C0                     add         ax,ax 
2D4D    06                        push        es 
2D4E    1F                        pop         ds 
2D4F    01 C3                     add         bx,ax 
2D51    8B 07                     mov         ax,word ptr [bx] 
2D53    EB 0C                     jmp         L$411 
2D55                          L$410:
2D55    06                        push        es 
2D56    1F                        pop         ds 
2D57    30 FF                     xor         bh,bh 
2D59    C5 54 2A                  lds         dx,dword ptr 0x2a[si] 
2D5C    01 D3                     add         bx,dx 
2D5E    0F B6 07                  movzx       ax,byte ptr [bx] 
2D61                          L$411:
2D61    89 46 FA                  mov         word ptr -0x6[bp],ax 
2D64    8A 5E FE                  mov         bl,byte ptr -0x2[bp] 
2D67    80 E3 0F                  and         bl,0x0f 
2D6A    F6 46 FE 80               test        byte ptr -0x2[bp],0x80 
2D6E    74 1F                     je          L$413 
2D70    30 FF                     xor         bh,bh 
2D72    01 DB                     add         bx,bx 
2D74    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
2D77    01 F3                     add         bx,si 
2D79    8B 0F                     mov         cx,word ptr [bx] 
2D7B    89 C8                     mov         ax,cx 
2D7D    2B 46 FA                  sub         ax,word ptr -0x6[bp] 
2D80    89 07                     mov         word ptr [bx],ax 
2D82    39 C1                     cmp         cx,ax 
2D84    0F 83 35 FF               jae         L$407 
2D88                          L$412:
2D88    80 4C 1E 80               or          byte ptr 0x1e[si],0x80 
2D8C    E9 32 FF                  jmp         L$408 
2D8F                          L$413:
2D8F    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
2D92    0F B6 C3                  movzx       ax,bl 
2D95    C5 5C 2A                  lds         bx,dword ptr 0x2a[si] 
2D98    01 C3                     add         bx,ax 
2D9A    8A 56 FA                  mov         dl,byte ptr -0x6[bp] 
2D9D    0F B6 0F                  movzx       cx,byte ptr [bx] 
2DA0    28 17                     sub         byte ptr [bx],dl 
2DA2    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
2DA5    C5 5C 2A                  lds         bx,dword ptr 0x2a[si] 
2DA8    01 C3                     add         bx,ax 
2DAA    0F B6 07                  movzx       ax,byte ptr [bx] 
2DAD    39 C8                     cmp         ax,cx 
2DAF    0F 86 07 FF               jbe         L$406 
2DB3    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
2DB6    EB D0                     jmp         L$412 
2DB8                          condjump_debug_:
2DB8    51                        push        cx 
2DB9    52                        push        dx 
2DBA    56                        push        si 
2DBB    57                        push        di 
2DBC    C8 3E 00 00               enter       0x003e,0x00 
2DC0    B9 25 00                  mov         cx,0x0025 
2DC3    8D 7E C2                  lea         di,-0x3e[bp] 
2DC6    16                        push        ss 
2DC7    07                        pop         es 
2DC8    16                        push        ss 
2DC9    1F                        pop         ds 
2DCA    BE 0D 02                  mov         si,offset DGROUP:L$1589 
2DCD    F3 A4                     rep movsb   
2DCF    B9 0C 00                  mov         cx,0x000c 
2DD2    8D 7E E8                  lea         di,-0x18[bp] 
2DD5    BE 32 02                  mov         si,offset DGROUP:L$1590 
2DD8    F3 A5                     rep movsw   
2DDA    84 C0                     test        al,al 
2DDC    74 05                     je          L$414 
2DDE    8D 56 C2                  lea         dx,-0x3e[bp] 
2DE1    EB 03                     jmp         L$415 
2DE3                          L$414:
2DE3    8D 56 E8                  lea         dx,-0x18[bp] 
2DE6                          L$415:
2DE6    36 8C 16 02 00            mov         word ptr ss:_smessage+0x2,ss 
2DEB    36 89 16 00 00            mov         word ptr ss:_smessage,dx 
2DF0    B8 00 00                  mov         ax,offset _message 
2DF3    8C D2                     mov         dx,ss 
2DF5    E8 00 00                  call        output_debug_info_ 
2DF8    C9                        leave       
2DF9    5F                        pop         di 
2DFA    5E                        pop         si 
2DFB    5A                        pop         dx 
2DFC    59                        pop         cx 
2DFD    C3                        ret         
2DFE                          vpu_instr_cmp_:
2DFE    51                        push        cx 
2DFF    56                        push        si 
2E00    57                        push        di 
2E01    C8 02 00 00               enter       0x0002,0x00 
2E05    89 C6                     mov         si,ax 
2E07    89 56 FE                  mov         word ptr -0x2[bp],dx 
2E0A    89 D8                     mov         ax,bx 
2E0C    8E DA                     mov         ds,dx 
2E0E    8B 5C 10                  mov         bx,word ptr 0x10[si] 
2E11    8B 54 40                  mov         dx,word ptr 0x40[si] 
2E14    C1 E3 02                  shl         bx,0x02 
2E17    8E 5C 42                  mov         ds,word ptr 0x42[si] 
2E1A    8E 46 FE                  mov         es,word ptr -0x2[bp] 
2E1D    01 D3                     add         bx,dx 
2E1F    26 8B 54 12               mov         dx,word ptr es:0x12[si] 
2E23    89 D7                     mov         di,dx 
2E25    47                        inc         di 
2E26    26 89 7C 12               mov         word ptr es:0x12[si],di 
2E2A    C5 3F                     lds         di,dword ptr [bx] 
2E2C    89 FB                     mov         bx,di 
2E2E    01 D3                     add         bx,dx 
2E30    8A 0F                     mov         cl,byte ptr [bx] 
2E32    A8 80                     test        al,0x80 
2E34    74 0B                     je          L$416 
2E36    89 C3                     mov         bx,ax 
2E38    8C C2                     mov         dx,es 
2E3A    89 F0                     mov         ax,si 
2E3C    E8 00 00                  call        imm_src_ 
2E3F    EB 47                     jmp         L$418 
2E41                          L$416:
2E41    06                        push        es 
2E42    1F                        pop         ds 
2E43    8B 5C 10                  mov         bx,word ptr 0x10[si] 
2E46    8B 44 40                  mov         ax,word ptr 0x40[si] 
2E49    C1 E3 02                  shl         bx,0x02 
2E4C    8E 5C 42                  mov         ds,word ptr 0x42[si] 
2E4F    01 C3                     add         bx,ax 
2E51    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
2E55    89 C2                     mov         dx,ax 
2E57    42                        inc         dx 
2E58    26 89 54 12               mov         word ptr es:0x12[si],dx 
2E5C    C5 17                     lds         dx,dword ptr [bx] 
2E5E    89 D3                     mov         bx,dx 
2E60    01 C3                     add         bx,ax 
2E62    8A 27                     mov         ah,byte ptr [bx] 
2E64    88 E0                     mov         al,ah 
2E66    24 0F                     and         al,0x0f 
2E68    F6 C4 80                  test        ah,0x80 
2E6B    74 0E                     je          L$417 
2E6D    30 E4                     xor         ah,ah 
2E6F    89 F3                     mov         bx,si 
2E71    01 C0                     add         ax,ax 
2E73    06                        push        es 
2E74    1F                        pop         ds 
2E75    01 C3                     add         bx,ax 
2E77    8B 07                     mov         ax,word ptr [bx] 
2E79    EB 0D                     jmp         L$418 
2E7B                          L$417:
2E7B    06                        push        es 
2E7C    1F                        pop         ds 
2E7D    0F B6 D8                  movzx       bx,al 
2E80    C5 54 2A                  lds         dx,dword ptr 0x2a[si] 
2E83    01 D3                     add         bx,dx 
2E85    0F B6 07                  movzx       ax,byte ptr [bx] 
2E88                          L$418:
2E88    88 CB                     mov         bl,cl 
2E8A    80 E3 0F                  and         bl,0x0f 
2E8D    F6 C1 80                  test        cl,0x80 
2E90    74 1A                     je          L$420 
2E92    30 FF                     xor         bh,bh 
2E94    01 DB                     add         bx,bx 
2E96    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
2E99    01 F3                     add         bx,si 
2E9B    8B 17                     mov         dx,word ptr [bx] 
2E9D    29 C2                     sub         dx,ax 
2E9F    89 54 1C                  mov         word ptr 0x1c[si],dx 
2EA2    39 D0                     cmp         ax,dx 
2EA4    73 21                     jae         L$421 
2EA6                          L$419:
2EA6    80 4C 1E 80               or          byte ptr 0x1e[si],0x80 
2EAA    EB 1F                     jmp         L$422 
2EAC                          L$420:
2EAC    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
2EAF    30 FF                     xor         bh,bh 
2EB1    C5 7C 2A                  lds         di,dword ptr 0x2a[si] 
2EB4    01 FB                     add         bx,di 
2EB6    0F B6 17                  movzx       dx,byte ptr [bx] 
2EB9    89 D3                     mov         bx,dx 
2EBB    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
2EBE    29 C3                     sub         bx,ax 
2EC0    89 5C 1C                  mov         word ptr 0x1c[si],bx 
2EC3    39 DA                     cmp         dx,bx 
2EC5    72 DF                     jb          L$419 
2EC7                          L$421:
2EC7    80 64 1E 7F               and         byte ptr 0x1e[si],0x7f 
2ECB                          L$422:
2ECB    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
2ECE    0F B6 D9                  movzx       bx,cl 
2ED1    8B 44 1C                  mov         ax,word ptr 0x1c[si] 
2ED4    8C DA                     mov         dx,ds 
2ED6    89 C1                     mov         cx,ax 
2ED8    89 F0                     mov         ax,si 
2EDA    E8 00 00                  call        set_overflow_ 
2EDD    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
2EE0    8D 5C 1E                  lea         bx,0x1e[si] 
2EE3    F6 44 1D 80               test        byte ptr 0x1d[si],0x80 
2EE7    74 11                     je          L$424 
2EE9    B8 01 00                  mov         ax,0x0001 
2EEC                          L$423:
2EEC    25 01 00                  and         ax,0x0001 
2EEF    80 27 BF                  and         byte ptr [bx],0xbf 
2EF2    C1 E0 06                  shl         ax,0x06 
2EF5    09 07                     or          word ptr [bx],ax 
2EF7    E9 0B 11                  jmp         L$520 
2EFA                          L$424:
2EFA    31 C0                     xor         ax,ax 
2EFC    EB EE                     jmp         L$423 
2EFE                          vpu_instr_test_:
2EFE    51                        push        cx 
2EFF    56                        push        si 
2F00    57                        push        di 
2F01    C8 02 00 00               enter       0x0002,0x00 
2F05    89 C6                     mov         si,ax 
2F07    89 56 FE                  mov         word ptr -0x2[bp],dx 
2F0A    89 D8                     mov         ax,bx 
2F0C    8E DA                     mov         ds,dx 
2F0E    8B 5C 10                  mov         bx,word ptr 0x10[si] 
2F11    8B 54 40                  mov         dx,word ptr 0x40[si] 
2F14    C1 E3 02                  shl         bx,0x02 
2F17    8E 5C 42                  mov         ds,word ptr 0x42[si] 
2F1A    8E 46 FE                  mov         es,word ptr -0x2[bp] 
2F1D    01 D3                     add         bx,dx 
2F1F    26 8B 54 12               mov         dx,word ptr es:0x12[si] 
2F23    89 D7                     mov         di,dx 
2F25    47                        inc         di 
2F26    26 89 7C 12               mov         word ptr es:0x12[si],di 
2F2A    C5 3F                     lds         di,dword ptr [bx] 
2F2C    89 FB                     mov         bx,di 
2F2E    01 D3                     add         bx,dx 
2F30    8A 0F                     mov         cl,byte ptr [bx] 
2F32    A8 80                     test        al,0x80 
2F34    74 0B                     je          L$425 
2F36    89 C3                     mov         bx,ax 
2F38    8C C2                     mov         dx,es 
2F3A    89 F0                     mov         ax,si 
2F3C    E8 00 00                  call        imm_src_ 
2F3F    EB 47                     jmp         L$427 
2F41                          L$425:
2F41    06                        push        es 
2F42    1F                        pop         ds 
2F43    8B 5C 10                  mov         bx,word ptr 0x10[si] 
2F46    8B 44 40                  mov         ax,word ptr 0x40[si] 
2F49    C1 E3 02                  shl         bx,0x02 
2F4C    8E 5C 42                  mov         ds,word ptr 0x42[si] 
2F4F    01 C3                     add         bx,ax 
2F51    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
2F55    89 C2                     mov         dx,ax 
2F57    42                        inc         dx 
2F58    26 89 54 12               mov         word ptr es:0x12[si],dx 
2F5C    C5 17                     lds         dx,dword ptr [bx] 
2F5E    89 D3                     mov         bx,dx 
2F60    01 C3                     add         bx,ax 
2F62    8A 27                     mov         ah,byte ptr [bx] 
2F64    88 E0                     mov         al,ah 
2F66    24 0F                     and         al,0x0f 
2F68    F6 C4 80                  test        ah,0x80 
2F6B    74 0E                     je          L$426 
2F6D    30 E4                     xor         ah,ah 
2F6F    89 F3                     mov         bx,si 
2F71    01 C0                     add         ax,ax 
2F73    06                        push        es 
2F74    1F                        pop         ds 
2F75    01 C3                     add         bx,ax 
2F77    8B 07                     mov         ax,word ptr [bx] 
2F79    EB 0D                     jmp         L$427 
2F7B                          L$426:
2F7B    06                        push        es 
2F7C    1F                        pop         ds 
2F7D    0F B6 D8                  movzx       bx,al 
2F80    C5 54 2A                  lds         dx,dword ptr 0x2a[si] 
2F83    01 D3                     add         bx,dx 
2F85    0F B6 07                  movzx       ax,byte ptr [bx] 
2F88                          L$427:
2F88    88 CB                     mov         bl,cl 
2F8A    80 E3 0F                  and         bl,0x0f 
2F8D    F6 C1 80                  test        cl,0x80 
2F90    74 1D                     je          L$429 
2F92    30 FF                     xor         bh,bh 
2F94    01 DB                     add         bx,bx 
2F96    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
2F99    01 F3                     add         bx,si 
2F9B    8B 17                     mov         dx,word ptr [bx] 
2F9D    21 C2                     and         dx,ax 
2F9F    89 54 1C                  mov         word ptr 0x1c[si],dx 
2FA2    39 D0                     cmp         ax,dx 
2FA4    0F 83 1F FF               jae         L$421 
2FA8                          L$428:
2FA8    80 4C 1E 80               or          byte ptr 0x1e[si],0x80 
2FAC    E9 1C FF                  jmp         L$422 
2FAF                          L$429:
2FAF    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
2FB2    30 FF                     xor         bh,bh 
2FB4    C5 7C 2A                  lds         di,dword ptr 0x2a[si] 
2FB7    01 FB                     add         bx,di 
2FB9    0F B6 17                  movzx       dx,byte ptr [bx] 
2FBC    89 D3                     mov         bx,dx 
2FBE    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
2FC1    21 C3                     and         bx,ax 
2FC3    89 5C 1C                  mov         word ptr 0x1c[si],bx 
2FC6    39 DA                     cmp         dx,bx 
2FC8    72 DE                     jb          L$428 
2FCA    E9 FA FE                  jmp         L$421 
2FCD                          vpu_instr_je_:
2FCD    56                        push        si 
2FCE    89 C3                     mov         bx,ax 
2FD0    8E DA                     mov         ds,dx 
2FD2    83 7F 1C 00               cmp         word ptr 0x1c[bx],0x0000 
2FD6                          L$430:
2FD6    74 1B                     je          L$433 
2FD8                          L$431:
2FD8    83 47 12 02               add         word ptr 0x12[bx],0x0002 
2FDC    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
2FE2    74 39                     je          L$435 
2FE4    31 C0                     xor         ax,ax 
2FE6    EB 32                     jmp         L$434 
2FE8                          vpu_instr_jne_:
2FE8    56                        push        si 
2FE9    89 C3                     mov         bx,ax 
2FEB    8E DA                     mov         ds,dx 
2FED    83 7F 1C 00               cmp         word ptr 0x1c[bx],0x0000 
2FF1                          L$432:
2FF1    74 E5                     je          L$431 
2FF3                          L$433:
2FF3    8B 77 10                  mov         si,word ptr 0x10[bx] 
2FF6    8B 47 40                  mov         ax,word ptr 0x40[bx] 
2FF9    C1 E6 02                  shl         si,0x02 
2FFC    8E 47 42                  mov         es,word ptr 0x42[bx] 
2FFF    01 C6                     add         si,ax 
3001    26 C4 04                  les         ax,dword ptr es:[si] 
3004    8B 77 12                  mov         si,word ptr 0x12[bx] 
3007    01 C6                     add         si,ax 
3009    26 8B 04                  mov         ax,word ptr es:[si] 
300C    89 47 12                  mov         word ptr 0x12[bx],ax 
300F    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
3015    74 06                     je          L$435 
3017    B8 01 00                  mov         ax,0x0001 
301A                          L$434:
301A    E8 00 00                  call        condjump_debug_ 
301D                          L$435:
301D    31 C0                     xor         ax,ax 
301F    5E                        pop         si 
3020    CB                        retf        
3021                          vpu_instr_jg_:
3021    56                        push        si 
3022    89 C3                     mov         bx,ax 
3024    8E DA                     mov         ds,dx 
3026    83 7F 1C 00               cmp         word ptr 0x1c[bx],0x0000 
302A    7E AC                     jle         L$431 
302C    EB C5                     jmp         L$433 
302E                          vpu_instr_jl_:
302E    56                        push        si 
302F    89 C3                     mov         bx,ax 
3031    8E DA                     mov         ds,dx 
3033    83 7F 1C 00               cmp         word ptr 0x1c[bx],0x0000 
3037    7D 9F                     jge         L$431 
3039    EB B8                     jmp         L$433 
303B                          vpu_instr_jge_:
303B    56                        push        si 
303C    89 C3                     mov         bx,ax 
303E    8E DA                     mov         ds,dx 
3040    83 7F 1C 00               cmp         word ptr 0x1c[bx],0x0000 
3044    7C 92                     jl          L$431 
3046    EB AB                     jmp         L$433 
3048                          vpu_instr_jle_:
3048    56                        push        si 
3049    89 C3                     mov         bx,ax 
304B    8E DA                     mov         ds,dx 
304D    83 7F 1C 00               cmp         word ptr 0x1c[bx],0x0000 
3051    7F 85                     jg          L$431 
3053    EB 9E                     jmp         L$433 
3055                          vpu_instr_jcz_:
3055    56                        push        si 
3056    89 C3                     mov         bx,ax 
3058    8E DA                     mov         ds,dx 
305A    83 7F 04 00               cmp         word ptr 0x4[bx],0x0000 
305E    E9 75 FF                  jmp         L$430 
3061                          vpu_instr_jfs_:
3061    56                        push        si 
3062    89 C3                     mov         bx,ax 
3064    8E DA                     mov         ds,dx 
3066    8B 47 10                  mov         ax,word ptr 0x10[bx] 
3069    8B 77 40                  mov         si,word ptr 0x40[bx] 
306C    C1 E0 02                  shl         ax,0x02 
306F    8E 47 42                  mov         es,word ptr 0x42[bx] 
3072    01 C6                     add         si,ax 
3074    26 C4 14                  les         dx,dword ptr es:[si] 
3077    8B 77 12                  mov         si,word ptr 0x12[bx] 
307A    01 D6                     add         si,dx 
307C    26 8B 04                  mov         ax,word ptr es:[si] 
307F    83 47 12 02               add         word ptr 0x12[bx],0x0002 
3083    85 47 1E                  test        word ptr 0x1e[bx],ax 
3086    E9 68 FF                  jmp         L$432 
3089                          vpu_instr_jfns_:
3089    56                        push        si 
308A    89 C3                     mov         bx,ax 
308C    8E DA                     mov         ds,dx 
308E    8B 47 10                  mov         ax,word ptr 0x10[bx] 
3091    8B 77 40                  mov         si,word ptr 0x40[bx] 
3094    C1 E0 02                  shl         ax,0x02 
3097    8E 47 42                  mov         es,word ptr 0x42[bx] 
309A    01 C6                     add         si,ax 
309C    26 C4 14                  les         dx,dword ptr es:[si] 
309F    8B 77 12                  mov         si,word ptr 0x12[bx] 
30A2    01 D6                     add         si,dx 
30A4    26 8B 04                  mov         ax,word ptr es:[si] 
30A7    83 47 12 02               add         word ptr 0x12[bx],0x0002 
30AB    85 47 1E                  test        word ptr 0x1e[bx],ax 
30AE    0F 85 26 FF               jne         L$431 
30B2    E9 3E FF                  jmp         L$433 
30B5                          vpu_instr_dseg_:
30B5    51                        push        cx 
30B6    56                        push        si 
30B7    57                        push        di 
30B8    89 C6                     mov         si,ax 
30BA    89 D7                     mov         di,dx 
30BC    8E DA                     mov         ds,dx 
30BE    8B 5C 10                  mov         bx,word ptr 0x10[si] 
30C1    8B 44 40                  mov         ax,word ptr 0x40[si] 
30C4    C1 E3 02                  shl         bx,0x02 
30C7    8E 5C 42                  mov         ds,word ptr 0x42[si] 
30CA    8E C2                     mov         es,dx 
30CC    01 C3                     add         bx,ax 
30CE    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
30D2    89 C1                     mov         cx,ax 
30D4    41                        inc         cx 
30D5    26 89 4C 12               mov         word ptr es:0x12[si],cx 
30D9    C5 0F                     lds         cx,dword ptr [bx] 
30DB    89 CB                     mov         bx,cx 
30DD    01 C3                     add         bx,ax 
30DF    8A 07                     mov         al,byte ptr [bx] 
30E1    24 0F                     and         al,0x0f 
30E3    30 E4                     xor         ah,ah 
30E5    89 F3                     mov         bx,si 
30E7    01 C0                     add         ax,ax 
30E9    8E DA                     mov         ds,dx 
30EB    01 C3                     add         bx,ax 
30ED    8B 0F                     mov         cx,word ptr [bx] 
30EF    89 F0                     mov         ax,si 
30F1    89 CB                     mov         bx,cx 
30F3    E8 00 00                  call        vpu_segment_in_use_ 
30F6    84 C0                     test        al,al 
30F8    75 1E                     jne         L$436 
30FA    B8 00 00                  mov         ax,offset _segfaulterror 
30FD    BB 0B 00                  mov         bx,0x000b 
3100    8E DF                     mov         ds,di 
3102    8C D2                     mov         dx,ss 
3104    80 4C 1E 01               or          byte ptr 0x1e[si],0x01 
3108    9A 00 00 00 00            call        putstr_ 
310D    89 F0                     mov         ax,si 
310F    89 FA                     mov         dx,di 
3111    0E                        push        cs 
3112    E8 00 00                  call        send_vpu_signal_ 
3115    E9 C7 F2                  jmp         L$332 
3118                          L$436:
3118    8E DF                     mov         ds,di 
311A    89 4C 14                  mov         word ptr 0x14[si],cx 
311D    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
3123    0F 84 B8 F2               je          L$332 
3127    51                        push        cx 
3128    16                        push        ss 
3129    68 DE 03                  push        offset DGROUP:L$1502 
312C    16                        push        ss 
312D    68 00 00                  push        offset _message 
3130    8C D2                     mov         dx,ss 
3132    9A 00 00 00 00            call        sprintf_ 
3137    83 C4 0A                  add         sp,0x000a 
313A    E9 9C F2                  jmp         L$331 
313D                          vpu_instr_mul_:
313D    51                        push        cx 
313E    56                        push        si 
313F    57                        push        di 
3140    C8 06 00 00               enter       0x0006,0x00 
3144    89 C6                     mov         si,ax 
3146    89 56 FC                  mov         word ptr -0x4[bp],dx 
3149    89 D9                     mov         cx,bx 
314B    8E DA                     mov         ds,dx 
314D    8B 5C 10                  mov         bx,word ptr 0x10[si] 
3150    C5 44 40                  lds         ax,dword ptr 0x40[si] 
3153    8E C2                     mov         es,dx 
3155    C1 E3 02                  shl         bx,0x02 
3158    26 8B 7C 12               mov         di,word ptr es:0x12[si] 
315C    01 C3                     add         bx,ax 
315E    8D 45 01                  lea         ax,0x1[di] 
3161    26 89 44 12               mov         word ptr es:0x12[si],ax 
3165    C5 17                     lds         dx,dword ptr [bx] 
3167    89 D3                     mov         bx,dx 
3169    01 FB                     add         bx,di 
316B    8A 07                     mov         al,byte ptr [bx] 
316D    88 46 FE                  mov         byte ptr -0x2[bp],al 
3170    F6 C1 80                  test        cl,0x80 
3173    74 0B                     je          L$437 
3175    89 CB                     mov         bx,cx 
3177    89 F0                     mov         ax,si 
3179    8C C2                     mov         dx,es 
317B    E8 00 00                  call        imm_src_ 
317E    EB 47                     jmp         L$439 
3180                          L$437:
3180    06                        push        es 
3181    1F                        pop         ds 
3182    8B 44 10                  mov         ax,word ptr 0x10[si] 
3185    8B 5C 40                  mov         bx,word ptr 0x40[si] 
3188    C1 E0 02                  shl         ax,0x02 
318B    8E 5C 42                  mov         ds,word ptr 0x42[si] 
318E    01 C3                     add         bx,ax 
3190    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
3194    89 C2                     mov         dx,ax 
3196    42                        inc         dx 
3197    26 89 54 12               mov         word ptr es:0x12[si],dx 
319B    C5 17                     lds         dx,dword ptr [bx] 
319D    89 D3                     mov         bx,dx 
319F    01 C3                     add         bx,ax 
31A1    8A 07                     mov         al,byte ptr [bx] 
31A3    88 C3                     mov         bl,al 
31A5    80 E3 0F                  and         bl,0x0f 
31A8    A8 80                     test        al,0x80 
31AA    74 0F                     je          L$438 
31AC    0F B6 C3                  movzx       ax,bl 
31AF    89 F3                     mov         bx,si 
31B1    01 C0                     add         ax,ax 
31B3    06                        push        es 
31B4    1F                        pop         ds 
31B5    01 C3                     add         bx,ax 
31B7    8B 07                     mov         ax,word ptr [bx] 
31B9    EB 0C                     jmp         L$439 
31BB                          L$438:
31BB    06                        push        es 
31BC    1F                        pop         ds 
31BD    30 FF                     xor         bh,bh 
31BF    C5 54 2A                  lds         dx,dword ptr 0x2a[si] 
31C2    01 D3                     add         bx,dx 
31C4    0F B6 07                  movzx       ax,byte ptr [bx] 
31C7                          L$439:
31C7    89 46 FA                  mov         word ptr -0x6[bp],ax 
31CA    8A 5E FE                  mov         bl,byte ptr -0x2[bp] 
31CD    80 E3 0F                  and         bl,0x0f 
31D0    F6 46 FE 80               test        byte ptr -0x2[bp],0x80 
31D4    74 20                     je          L$441 
31D6    30 FF                     xor         bh,bh 
31D8    01 DB                     add         bx,bx 
31DA    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
31DD    01 F3                     add         bx,si 
31DF    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
31E2    8B 0F                     mov         cx,word ptr [bx] 
31E4    0F AF C1                  imul        ax,cx 
31E7    89 07                     mov         word ptr [bx],ax 
31E9    39 C1                     cmp         cx,ax 
31EB    0F 86 CE FA               jbe         L$407 
31EF                          L$440:
31EF    80 4C 1E 80               or          byte ptr 0x1e[si],0x80 
31F3    E9 CB FA                  jmp         L$408 
31F6                          L$441:
31F6    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
31F9    0F B6 FB                  movzx       di,bl 
31FC    C5 5C 2A                  lds         bx,dword ptr 0x2a[si] 
31FF    01 FB                     add         bx,di 
3201    8A 07                     mov         al,byte ptr [bx] 
3203    F6 66 FA                  mul         byte ptr -0x6[bp] 
3206    0F B6 0F                  movzx       cx,byte ptr [bx] 
3209    88 07                     mov         byte ptr [bx],al 
320B    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
320E    C5 5C 2A                  lds         bx,dword ptr 0x2a[si] 
3211    01 FB                     add         bx,di 
3213    0F B6 07                  movzx       ax,byte ptr [bx] 
3216    39 C8                     cmp         ax,cx 
3218    0F 83 9E FA               jae         L$406 
321C    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
321F    EB CE                     jmp         L$440 
3221                          vpu_instr_div_:
3221    51                        push        cx 
3222    56                        push        si 
3223    57                        push        di 
3224    C8 0A 00 00               enter       0x000a,0x00 
3228    89 C6                     mov         si,ax 
322A    89 56 F8                  mov         word ptr -0x8[bp],dx 
322D    89 D9                     mov         cx,bx 
322F    8E DA                     mov         ds,dx 
3231    8B 5C 10                  mov         bx,word ptr 0x10[si] 
3234    8B 44 40                  mov         ax,word ptr 0x40[si] 
3237    C1 E3 02                  shl         bx,0x02 
323A    8E 5C 42                  mov         ds,word ptr 0x42[si] 
323D    8E C2                     mov         es,dx 
323F    01 C3                     add         bx,ax 
3241    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
3245    89 C2                     mov         dx,ax 
3247    42                        inc         dx 
3248    26 89 54 12               mov         word ptr es:0x12[si],dx 
324C    C5 3F                     lds         di,dword ptr [bx] 
324E    89 FB                     mov         bx,di 
3250    01 C3                     add         bx,ax 
3252    8A 07                     mov         al,byte ptr [bx] 
3254    88 46 FC                  mov         byte ptr -0x4[bp],al 
3257    F6 C1 80                  test        cl,0x80 
325A    74 0D                     je          L$442 
325C    89 CB                     mov         bx,cx 
325E    89 F0                     mov         ax,si 
3260    8C C2                     mov         dx,es 
3262    E8 00 00                  call        imm_src_ 
3265    89 C3                     mov         bx,ax 
3267    EB 43                     jmp         L$444 
3269                          L$442:
3269    06                        push        es 
326A    1F                        pop         ds 
326B    8B 5C 10                  mov         bx,word ptr 0x10[si] 
326E    8B 44 40                  mov         ax,word ptr 0x40[si] 
3271    C1 E3 02                  shl         bx,0x02 
3274    01 C3                     add         bx,ax 
3276    89 D0                     mov         ax,dx 
3278    42                        inc         dx 
3279    8E 5C 42                  mov         ds,word ptr 0x42[si] 
327C    26 89 54 12               mov         word ptr es:0x12[si],dx 
3280    C5 17                     lds         dx,dword ptr [bx] 
3282    89 D3                     mov         bx,dx 
3284    01 C3                     add         bx,ax 
3286    8A 07                     mov         al,byte ptr [bx] 
3288    88 46 FA                  mov         byte ptr -0x6[bp],al 
328B    24 0F                     and         al,0x0f 
328D    F6 46 FA 80               test        byte ptr -0x6[bp],0x80 
3291    74 0D                     je          L$443 
3293    0F B6 D8                  movzx       bx,al 
3296    01 DB                     add         bx,bx 
3298    06                        push        es 
3299    1F                        pop         ds 
329A    01 F3                     add         bx,si 
329C    8B 1F                     mov         bx,word ptr [bx] 
329E    EB 0C                     jmp         L$444 
32A0                          L$443:
32A0    06                        push        es 
32A1    1F                        pop         ds 
32A2    30 E4                     xor         ah,ah 
32A4    C5 5C 2A                  lds         bx,dword ptr 0x2a[si] 
32A7    01 C3                     add         bx,ax 
32A9    0F B6 1F                  movzx       bx,byte ptr [bx] 
32AC                          L$444:
32AC    85 DB                     test        bx,bx 
32AE    75 0F                     jne         L$445 
32B0    BB 08 00                  mov         bx,0x0008 
32B3    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
32B6    89 F0                     mov         ax,si 
32B8    0E                        push        cs 
32B9    E8 00 00                  call        send_vpu_signal_ 
32BC    E9 46 0D                  jmp         L$520 
32BF                          L$445:
32BF    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
32C2    24 0F                     and         al,0x0f 
32C4    88 46 FE                  mov         byte ptr -0x2[bp],al 
32C7    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
32CA    24 0F                     and         al,0x0f 
32CC    F6 46 FC 80               test        byte ptr -0x4[bp],0x80 
32D0    74 4E                     je          L$448 
32D2    F6 C1 80                  test        cl,0x80 
32D5    75 30                     jne         L$447 
32D7    30 E4                     xor         ah,ah 
32D9    89 F7                     mov         di,si 
32DB    01 C0                     add         ax,ax 
32DD    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
32E0    01 C7                     add         di,ax 
32E2    31 D2                     xor         dx,dx 
32E4    8B 05                     mov         ax,word ptr [di] 
32E6    F7 F3                     div         bx 
32E8    89 D1                     mov         cx,dx 
32EA    F6 46 FA 80               test        byte ptr -0x6[bp],0x80 
32EE    74 0C                     je          L$446 
32F0    0F B6 7E FE               movzx       di,byte ptr -0x2[bp] 
32F4    01 FF                     add         di,di 
32F6    01 F7                     add         di,si 
32F8    89 15                     mov         word ptr [di],dx 
32FA    EB 0B                     jmp         L$447 
32FC                          L$446:
32FC    0F B6 56 FE               movzx       dx,byte ptr -0x2[bp] 
3300    C5 7C 2A                  lds         di,dword ptr 0x2a[si] 
3303    01 D7                     add         di,dx 
3305    88 0D                     mov         byte ptr [di],cl 
3307                          L$447:
3307    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
330A    24 0F                     and         al,0x0f 
330C    0F B6 F8                  movzx       di,al 
330F    01 FF                     add         di,di 
3311    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
3314    01 F7                     add         di,si 
3316    31 D2                     xor         dx,dx 
3318    8B 05                     mov         ax,word ptr [di] 
331A    F7 F3                     div         bx 
331C    89 05                     mov         word ptr [di],ax 
331E    EB 55                     jmp         L$451 
3320                          L$448:
3320    F6 C1 80                  test        cl,0x80 
3323    75 37                     jne         L$450 
3325    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
3328    0F B6 F8                  movzx       di,al 
332B    31 D2                     xor         dx,dx 
332D    C5 44 2A                  lds         ax,dword ptr 0x2a[si] 
3330    01 C7                     add         di,ax 
3332    89 46 F6                  mov         word ptr -0xa[bp],ax 
3335    0F B6 05                  movzx       ax,byte ptr [di] 
3338    F7 F3                     div         bx 
333A    89 D1                     mov         cx,dx 
333C    F6 46 FA 80               test        byte ptr -0x6[bp],0x80 
3340    74 11                     je          L$449 
3342    0F B6 46 FE               movzx       ax,byte ptr -0x2[bp] 
3346    89 F7                     mov         di,si 
3348    01 C0                     add         ax,ax 
334A    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
334D    01 C7                     add         di,ax 
334F    89 15                     mov         word ptr [di],dx 
3351    EB 09                     jmp         L$450 
3353                          L$449:
3353    0F B6 7E FE               movzx       di,byte ptr -0x2[bp] 
3357    03 7E F6                  add         di,word ptr -0xa[bp] 
335A    88 15                     mov         byte ptr [di],dl 
335C                          L$450:
335C    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
335F    24 0F                     and         al,0x0f 
3361    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
3364    0F B6 F8                  movzx       di,al 
3367    C5 44 2A                  lds         ax,dword ptr 0x2a[si] 
336A    01 C7                     add         di,ax 
336C    31 D2                     xor         dx,dx 
336E    0F B6 05                  movzx       ax,byte ptr [di] 
3371    F7 F3                     div         bx 
3373    88 05                     mov         byte ptr [di],al 
3375                          L$451:
3375    0F B6 5E FC               movzx       bx,byte ptr -0x4[bp] 
3379                          L$452:
3379    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
337C    E9 C9 02                  jmp         L$473 
337F                          vpu_instr_idiv_:
337F    51                        push        cx 
3380    56                        push        si 
3381    57                        push        di 
3382    C8 0A 00 00               enter       0x000a,0x00 
3386    89 C6                     mov         si,ax 
3388    89 56 F8                  mov         word ptr -0x8[bp],dx 
338B    89 D9                     mov         cx,bx 
338D    8E DA                     mov         ds,dx 
338F    8B 5C 10                  mov         bx,word ptr 0x10[si] 
3392    8B 44 40                  mov         ax,word ptr 0x40[si] 
3395    C1 E3 02                  shl         bx,0x02 
3398    8E 5C 42                  mov         ds,word ptr 0x42[si] 
339B    8E C2                     mov         es,dx 
339D    01 C3                     add         bx,ax 
339F    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
33A3    89 C2                     mov         dx,ax 
33A5    42                        inc         dx 
33A6    26 89 54 12               mov         word ptr es:0x12[si],dx 
33AA    C5 3F                     lds         di,dword ptr [bx] 
33AC    89 FB                     mov         bx,di 
33AE    01 C3                     add         bx,ax 
33B0    8A 07                     mov         al,byte ptr [bx] 
33B2    88 46 FE                  mov         byte ptr -0x2[bp],al 
33B5    F6 C1 80                  test        cl,0x80 
33B8    74 0D                     je          L$453 
33BA    89 CB                     mov         bx,cx 
33BC    89 F0                     mov         ax,si 
33BE    8C C2                     mov         dx,es 
33C0    E8 00 00                  call        imm_src_ 
33C3    89 C3                     mov         bx,ax 
33C5    EB 43                     jmp         L$455 
33C7                          L$453:
33C7    06                        push        es 
33C8    1F                        pop         ds 
33C9    8B 5C 10                  mov         bx,word ptr 0x10[si] 
33CC    8B 44 40                  mov         ax,word ptr 0x40[si] 
33CF    C1 E3 02                  shl         bx,0x02 
33D2    01 C3                     add         bx,ax 
33D4    89 D0                     mov         ax,dx 
33D6    42                        inc         dx 
33D7    8E 5C 42                  mov         ds,word ptr 0x42[si] 
33DA    26 89 54 12               mov         word ptr es:0x12[si],dx 
33DE    C5 17                     lds         dx,dword ptr [bx] 
33E0    89 D3                     mov         bx,dx 
33E2    01 C3                     add         bx,ax 
33E4    8A 07                     mov         al,byte ptr [bx] 
33E6    88 46 FA                  mov         byte ptr -0x6[bp],al 
33E9    24 0F                     and         al,0x0f 
33EB    F6 46 FA 80               test        byte ptr -0x6[bp],0x80 
33EF    74 0D                     je          L$454 
33F1    0F B6 D8                  movzx       bx,al 
33F4    01 DB                     add         bx,bx 
33F6    06                        push        es 
33F7    1F                        pop         ds 
33F8    01 F3                     add         bx,si 
33FA    8B 1F                     mov         bx,word ptr [bx] 
33FC    EB 0C                     jmp         L$455 
33FE                          L$454:
33FE    06                        push        es 
33FF    1F                        pop         ds 
3400    30 E4                     xor         ah,ah 
3402    C5 5C 2A                  lds         bx,dword ptr 0x2a[si] 
3405    01 C3                     add         bx,ax 
3407    0F B6 1F                  movzx       bx,byte ptr [bx] 
340A                          L$455:
340A    85 DB                     test        bx,bx 
340C    75 0F                     jne         L$456 
340E    BB 08 00                  mov         bx,0x0008 
3411    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
3414    89 F0                     mov         ax,si 
3416    0E                        push        cs 
3417    E8 00 00                  call        send_vpu_signal_ 
341A    E9 E8 0B                  jmp         L$520 
341D                          L$456:
341D    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
3420    24 0F                     and         al,0x0f 
3422    88 46 FC                  mov         byte ptr -0x4[bp],al 
3425    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
3428    24 0F                     and         al,0x0f 
342A    F6 46 FE 80               test        byte ptr -0x2[bp],0x80 
342E    74 4C                     je          L$459 
3430    F6 C1 80                  test        cl,0x80 
3433    75 2F                     jne         L$458 
3435    30 E4                     xor         ah,ah 
3437    89 F7                     mov         di,si 
3439    01 C0                     add         ax,ax 
343B    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
343E    01 C7                     add         di,ax 
3440    8B 05                     mov         ax,word ptr [di] 
3442    99                        cwd         
3443    F7 FB                     idiv        bx 
3445    89 D1                     mov         cx,dx 
3447    F6 46 FA 80               test        byte ptr -0x6[bp],0x80 
344B    74 0C                     je          L$457 
344D    0F B6 7E FC               movzx       di,byte ptr -0x4[bp] 
3451    01 FF                     add         di,di 
3453    01 F7                     add         di,si 
3455    89 15                     mov         word ptr [di],dx 
3457    EB 0B                     jmp         L$458 
3459                          L$457:
3459    0F B6 56 FC               movzx       dx,byte ptr -0x4[bp] 
345D    C5 7C 2A                  lds         di,dword ptr 0x2a[si] 
3460    01 D7                     add         di,dx 
3462    88 0D                     mov         byte ptr [di],cl 
3464                          L$458:
3464    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
3467    24 0F                     and         al,0x0f 
3469    0F B6 F8                  movzx       di,al 
346C    01 FF                     add         di,di 
346E    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
3471    01 F7                     add         di,si 
3473    8B 05                     mov         ax,word ptr [di] 
3475    99                        cwd         
3476    F7 FB                     idiv        bx 
3478    89 05                     mov         word ptr [di],ax 
347A    EB 52                     jmp         L$462 
347C                          L$459:
347C    F6 C1 80                  test        cl,0x80 
347F    75 36                     jne         L$461 
3481    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
3484    0F B6 F8                  movzx       di,al 
3487    C5 44 2A                  lds         ax,dword ptr 0x2a[si] 
348A    01 C7                     add         di,ax 
348C    89 46 F6                  mov         word ptr -0xa[bp],ax 
348F    0F B6 05                  movzx       ax,byte ptr [di] 
3492    99                        cwd         
3493    F7 FB                     idiv        bx 
3495    89 D1                     mov         cx,dx 
3497    F6 46 FA 80               test        byte ptr -0x6[bp],0x80 
349B    74 11                     je          L$460 
349D    0F B6 46 FC               movzx       ax,byte ptr -0x4[bp] 
34A1    89 F7                     mov         di,si 
34A3    01 C0                     add         ax,ax 
34A5    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
34A8    01 C7                     add         di,ax 
34AA    89 15                     mov         word ptr [di],dx 
34AC    EB 09                     jmp         L$461 
34AE                          L$460:
34AE    0F B6 7E FC               movzx       di,byte ptr -0x4[bp] 
34B2    03 7E F6                  add         di,word ptr -0xa[bp] 
34B5    88 15                     mov         byte ptr [di],dl 
34B7                          L$461:
34B7    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
34BA    24 0F                     and         al,0x0f 
34BC    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
34BF    30 E4                     xor         ah,ah 
34C1    C5 7C 2A                  lds         di,dword ptr 0x2a[si] 
34C4    01 C7                     add         di,ax 
34C6    0F B6 05                  movzx       ax,byte ptr [di] 
34C9    99                        cwd         
34CA    F7 FB                     idiv        bx 
34CC    88 05                     mov         byte ptr [di],al 
34CE                          L$462:
34CE    0F B6 5E FE               movzx       bx,byte ptr -0x2[bp] 
34D2    E9 A4 FE                  jmp         L$452 
34D5                          vpu_instr_printuint_:
34D5    56                        push        si 
34D6    89 C3                     mov         bx,ax 
34D8    8E DA                     mov         ds,dx 
34DA    8B 47 10                  mov         ax,word ptr 0x10[bx] 
34DD    8B 77 40                  mov         si,word ptr 0x40[bx] 
34E0    C1 E0 02                  shl         ax,0x02 
34E3    8E 47 42                  mov         es,word ptr 0x42[bx] 
34E6    01 C6                     add         si,ax 
34E8    8B 47 12                  mov         ax,word ptr 0x12[bx] 
34EB    89 C2                     mov         dx,ax 
34ED    42                        inc         dx 
34EE    89 57 12                  mov         word ptr 0x12[bx],dx 
34F1    26 C4 14                  les         dx,dword ptr es:[si] 
34F4    89 D6                     mov         si,dx 
34F6    01 C6                     add         si,ax 
34F8    26 8A 24                  mov         ah,byte ptr es:[si] 
34FB    88 E0                     mov         al,ah 
34FD    24 0F                     and         al,0x0f 
34FF    F6 C4 80                  test        ah,0x80 
3502    74 0A                     je          L$463 
3504    30 E4                     xor         ah,ah 
3506    01 C0                     add         ax,ax 
3508    01 C3                     add         bx,ax 
350A    FF 37                     push        word ptr [bx] 
350C    EB 10                     jmp         L$464 
350E                          L$463:
350E    8B 77 2A                  mov         si,word ptr 0x2a[bx] 
3511    30 E4                     xor         ah,ah 
3513    8E 5F 2C                  mov         ds,word ptr 0x2c[bx] 
3516    89 F3                     mov         bx,si 
3518    01 C3                     add         bx,ax 
351A    0F B6 07                  movzx       ax,byte ptr [bx] 
351D    50                        push        ax 
351E                          L$464:
351E    16                        push        ss 
351F    68 F6 03                  push        offset DGROUP:L$1503 
3522                          L$465:
3522    16                        push        ss 
3523    68 00 00                  push        offset _message 
3526    9A 00 00 00 00            call        sprintf_ 
352B    83 C4 0A                  add         sp,0x000a 
352E    B8 00 00                  mov         ax,offset _message 
3531    8C D2                     mov         dx,ss 
3533    9A 00 00 00 00            call        putstr_ 
3538    B8 03 00                  mov         ax,0x0003 
353B    5E                        pop         si 
353C    CB                        retf        
353D                          vpu_instr_printsint_:
353D    56                        push        si 
353E    89 C3                     mov         bx,ax 
3540    8E DA                     mov         ds,dx 
3542    8B 47 10                  mov         ax,word ptr 0x10[bx] 
3545    8B 77 40                  mov         si,word ptr 0x40[bx] 
3548    C1 E0 02                  shl         ax,0x02 
354B    8E 47 42                  mov         es,word ptr 0x42[bx] 
354E    01 C6                     add         si,ax 
3550    8B 47 12                  mov         ax,word ptr 0x12[bx] 
3553    89 C2                     mov         dx,ax 
3555    42                        inc         dx 
3556    89 57 12                  mov         word ptr 0x12[bx],dx 
3559    26 C4 14                  les         dx,dword ptr es:[si] 
355C    89 D6                     mov         si,dx 
355E    01 C6                     add         si,ax 
3560    26 8A 24                  mov         ah,byte ptr es:[si] 
3563    88 E0                     mov         al,ah 
3565    24 0F                     and         al,0x0f 
3567    F6 C4 80                  test        ah,0x80 
356A    74 0A                     je          L$466 
356C    30 E4                     xor         ah,ah 
356E    01 C0                     add         ax,ax 
3570    01 C3                     add         bx,ax 
3572    FF 37                     push        word ptr [bx] 
3574    EB 10                     jmp         L$467 
3576                          L$466:
3576    8B 77 2A                  mov         si,word ptr 0x2a[bx] 
3579    30 E4                     xor         ah,ah 
357B    8E 5F 2C                  mov         ds,word ptr 0x2c[bx] 
357E    89 F3                     mov         bx,si 
3580    01 C3                     add         bx,ax 
3582    0F BE 07                  movsx       ax,byte ptr [bx] 
3585    50                        push        ax 
3586                          L$467:
3586    16                        push        ss 
3587    68 F9 03                  push        offset DGROUP:L$1504 
358A    EB 96                     jmp         L$465 
358C                          vpu_instr_and_:
358C    51                        push        cx 
358D    56                        push        si 
358E    57                        push        di 
358F    C8 04 00 00               enter       0x0004,0x00 
3593    89 C6                     mov         si,ax 
3595    89 56 FC                  mov         word ptr -0x4[bp],dx 
3598    89 D9                     mov         cx,bx 
359A    8E DA                     mov         ds,dx 
359C    8B 5C 10                  mov         bx,word ptr 0x10[si] 
359F    8B 44 40                  mov         ax,word ptr 0x40[si] 
35A2    C1 E3 02                  shl         bx,0x02 
35A5    8E 5C 42                  mov         ds,word ptr 0x42[si] 
35A8    8E C2                     mov         es,dx 
35AA    01 C3                     add         bx,ax 
35AC    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
35B0    89 C2                     mov         dx,ax 
35B2    42                        inc         dx 
35B3    26 89 54 12               mov         word ptr es:0x12[si],dx 
35B7    C5 3F                     lds         di,dword ptr [bx] 
35B9    89 FB                     mov         bx,di 
35BB    01 C3                     add         bx,ax 
35BD    8A 07                     mov         al,byte ptr [bx] 
35BF    88 46 FE                  mov         byte ptr -0x2[bp],al 
35C2    F6 C1 80                  test        cl,0x80 
35C5    74 0D                     je          L$468 
35C7    89 CB                     mov         bx,cx 
35C9    89 F0                     mov         ax,si 
35CB    8C C2                     mov         dx,es 
35CD    E8 00 00                  call        imm_src_ 
35D0    89 C1                     mov         cx,ax 
35D2    EB 45                     jmp         L$470 
35D4                          L$468:
35D4    06                        push        es 
35D5    1F                        pop         ds 
35D6    8B 5C 10                  mov         bx,word ptr 0x10[si] 
35D9    8B 44 40                  mov         ax,word ptr 0x40[si] 
35DC    C1 E3 02                  shl         bx,0x02 
35DF    01 C3                     add         bx,ax 
35E1    89 D0                     mov         ax,dx 
35E3    40                        inc         ax 
35E4    8E 5C 42                  mov         ds,word ptr 0x42[si] 
35E7    26 89 44 12               mov         word ptr es:0x12[si],ax 
35EB    89 D1                     mov         cx,dx 
35ED    C5 17                     lds         dx,dword ptr [bx] 
35EF    89 D3                     mov         bx,dx 
35F1    01 CB                     add         bx,cx 
35F3    8A 27                     mov         ah,byte ptr [bx] 
35F5    88 E0                     mov         al,ah 
35F7    24 0F                     and         al,0x0f 
35F9    F6 C4 80                  test        ah,0x80 
35FC    74 0E                     je          L$469 
35FE    30 E4                     xor         ah,ah 
3600    89 F3                     mov         bx,si 
3602    01 C0                     add         ax,ax 
3604    06                        push        es 
3605    1F                        pop         ds 
3606    01 C3                     add         bx,ax 
3608    8B 0F                     mov         cx,word ptr [bx] 
360A    EB 0D                     jmp         L$470 
360C                          L$469:
360C    06                        push        es 
360D    1F                        pop         ds 
360E    0F B6 D8                  movzx       bx,al 
3611    C5 54 2A                  lds         dx,dword ptr 0x2a[si] 
3614    01 D3                     add         bx,dx 
3616    0F B6 0F                  movzx       cx,byte ptr [bx] 
3619                          L$470:
3619    8A 5E FE                  mov         bl,byte ptr -0x2[bp] 
361C    80 E3 0F                  and         bl,0x0f 
361F    F6 46 FE 80               test        byte ptr -0x2[bp],0x80 
3623    74 10                     je          L$471 
3625    0F B6 C3                  movzx       ax,bl 
3628    89 F3                     mov         bx,si 
362A    01 C0                     add         ax,ax 
362C    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
362F    01 C3                     add         bx,ax 
3631    21 0F                     and         word ptr [bx],cx 
3633    EB 0C                     jmp         L$472 
3635                          L$471:
3635    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
3638    30 FF                     xor         bh,bh 
363A    C5 54 2A                  lds         dx,dword ptr 0x2a[si] 
363D    01 D3                     add         bx,dx 
363F    20 0F                     and         byte ptr [bx],cl 
3641                          L$472:
3641    0F B6 5E FE               movzx       bx,byte ptr -0x2[bp] 
3645    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
3648                          L$473:
3648    89 F0                     mov         ax,si 
364A    E8 00 00                  call        vpu_set_sign_ 
364D    E9 B5 09                  jmp         L$520 
3650                          vpu_instr_or_:
3650    51                        push        cx 
3651    56                        push        si 
3652    57                        push        di 
3653    C8 04 00 00               enter       0x0004,0x00 
3657    89 C6                     mov         si,ax 
3659    89 56 FC                  mov         word ptr -0x4[bp],dx 
365C    89 D9                     mov         cx,bx 
365E    8E DA                     mov         ds,dx 
3660    8B 5C 10                  mov         bx,word ptr 0x10[si] 
3663    8B 44 40                  mov         ax,word ptr 0x40[si] 
3666    C1 E3 02                  shl         bx,0x02 
3669    8E 5C 42                  mov         ds,word ptr 0x42[si] 
366C    8E C2                     mov         es,dx 
366E    01 C3                     add         bx,ax 
3670    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
3674    89 C2                     mov         dx,ax 
3676    42                        inc         dx 
3677    26 89 54 12               mov         word ptr es:0x12[si],dx 
367B    C5 3F                     lds         di,dword ptr [bx] 
367D    89 FB                     mov         bx,di 
367F    01 C3                     add         bx,ax 
3681    8A 07                     mov         al,byte ptr [bx] 
3683    88 46 FE                  mov         byte ptr -0x2[bp],al 
3686    F6 C1 80                  test        cl,0x80 
3689    74 0D                     je          L$474 
368B    89 CB                     mov         bx,cx 
368D    89 F0                     mov         ax,si 
368F    8C C2                     mov         dx,es 
3691    E8 00 00                  call        imm_src_ 
3694    89 C1                     mov         cx,ax 
3696    EB 45                     jmp         L$476 
3698                          L$474:
3698    06                        push        es 
3699    1F                        pop         ds 
369A    8B 5C 10                  mov         bx,word ptr 0x10[si] 
369D    8B 44 40                  mov         ax,word ptr 0x40[si] 
36A0    C1 E3 02                  shl         bx,0x02 
36A3    01 C3                     add         bx,ax 
36A5    89 D0                     mov         ax,dx 
36A7    40                        inc         ax 
36A8    8E 5C 42                  mov         ds,word ptr 0x42[si] 
36AB    26 89 44 12               mov         word ptr es:0x12[si],ax 
36AF    89 D1                     mov         cx,dx 
36B1    C5 17                     lds         dx,dword ptr [bx] 
36B3    89 D3                     mov         bx,dx 
36B5    01 CB                     add         bx,cx 
36B7    8A 27                     mov         ah,byte ptr [bx] 
36B9    88 E0                     mov         al,ah 
36BB    24 0F                     and         al,0x0f 
36BD    F6 C4 80                  test        ah,0x80 
36C0    74 0E                     je          L$475 
36C2    30 E4                     xor         ah,ah 
36C4    89 F3                     mov         bx,si 
36C6    01 C0                     add         ax,ax 
36C8    06                        push        es 
36C9    1F                        pop         ds 
36CA    01 C3                     add         bx,ax 
36CC    8B 0F                     mov         cx,word ptr [bx] 
36CE    EB 0D                     jmp         L$476 
36D0                          L$475:
36D0    06                        push        es 
36D1    1F                        pop         ds 
36D2    0F B6 D8                  movzx       bx,al 
36D5    C5 54 2A                  lds         dx,dword ptr 0x2a[si] 
36D8    01 D3                     add         bx,dx 
36DA    0F B6 0F                  movzx       cx,byte ptr [bx] 
36DD                          L$476:
36DD    8A 5E FE                  mov         bl,byte ptr -0x2[bp] 
36E0    80 E3 0F                  and         bl,0x0f 
36E3    F6 46 FE 80               test        byte ptr -0x2[bp],0x80 
36E7    74 11                     je          L$477 
36E9    0F B6 C3                  movzx       ax,bl 
36EC    89 F3                     mov         bx,si 
36EE    01 C0                     add         ax,ax 
36F0    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
36F3    01 C3                     add         bx,ax 
36F5    09 0F                     or          word ptr [bx],cx 
36F7    E9 47 FF                  jmp         L$472 
36FA                          L$477:
36FA    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
36FD    30 FF                     xor         bh,bh 
36FF    C5 54 2A                  lds         dx,dword ptr 0x2a[si] 
3702    01 D3                     add         bx,dx 
3704    08 0F                     or          byte ptr [bx],cl 
3706    E9 38 FF                  jmp         L$472 
3709                          vpu_instr_xor_:
3709    51                        push        cx 
370A    56                        push        si 
370B    57                        push        di 
370C    C8 04 00 00               enter       0x0004,0x00 
3710    89 C6                     mov         si,ax 
3712    89 56 FC                  mov         word ptr -0x4[bp],dx 
3715    89 D9                     mov         cx,bx 
3717    8E DA                     mov         ds,dx 
3719    8B 5C 10                  mov         bx,word ptr 0x10[si] 
371C    8B 44 40                  mov         ax,word ptr 0x40[si] 
371F    C1 E3 02                  shl         bx,0x02 
3722    8E 5C 42                  mov         ds,word ptr 0x42[si] 
3725    8E C2                     mov         es,dx 
3727    01 C3                     add         bx,ax 
3729    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
372D    89 C2                     mov         dx,ax 
372F    42                        inc         dx 
3730    26 89 54 12               mov         word ptr es:0x12[si],dx 
3734    C5 3F                     lds         di,dword ptr [bx] 
3736    89 FB                     mov         bx,di 
3738    01 C3                     add         bx,ax 
373A    8A 07                     mov         al,byte ptr [bx] 
373C    88 46 FE                  mov         byte ptr -0x2[bp],al 
373F    F6 C1 80                  test        cl,0x80 
3742    74 0D                     je          L$478 
3744    89 CB                     mov         bx,cx 
3746    89 F0                     mov         ax,si 
3748    8C C2                     mov         dx,es 
374A    E8 00 00                  call        imm_src_ 
374D    89 C1                     mov         cx,ax 
374F    EB 45                     jmp         L$480 
3751                          L$478:
3751    06                        push        es 
3752    1F                        pop         ds 
3753    8B 5C 10                  mov         bx,word ptr 0x10[si] 
3756    8B 44 40                  mov         ax,word ptr 0x40[si] 
3759    C1 E3 02                  shl         bx,0x02 
375C    01 C3                     add         bx,ax 
375E    89 D0                     mov         ax,dx 
3760    40                        inc         ax 
3761    8E 5C 42                  mov         ds,word ptr 0x42[si] 
3764    26 89 44 12               mov         word ptr es:0x12[si],ax 
3768    89 D1                     mov         cx,dx 
376A    C5 17                     lds         dx,dword ptr [bx] 
376C    89 D3                     mov         bx,dx 
376E    01 CB                     add         bx,cx 
3770    8A 27                     mov         ah,byte ptr [bx] 
3772    88 E0                     mov         al,ah 
3774    24 0F                     and         al,0x0f 
3776    F6 C4 80                  test        ah,0x80 
3779    74 0E                     je          L$479 
377B    30 E4                     xor         ah,ah 
377D    89 F3                     mov         bx,si 
377F    01 C0                     add         ax,ax 
3781    06                        push        es 
3782    1F                        pop         ds 
3783    01 C3                     add         bx,ax 
3785    8B 0F                     mov         cx,word ptr [bx] 
3787    EB 0D                     jmp         L$480 
3789                          L$479:
3789    06                        push        es 
378A    1F                        pop         ds 
378B    0F B6 D8                  movzx       bx,al 
378E    C5 54 2A                  lds         dx,dword ptr 0x2a[si] 
3791    01 D3                     add         bx,dx 
3793    0F B6 0F                  movzx       cx,byte ptr [bx] 
3796                          L$480:
3796    8A 5E FE                  mov         bl,byte ptr -0x2[bp] 
3799    80 E3 0F                  and         bl,0x0f 
379C    F6 46 FE 80               test        byte ptr -0x2[bp],0x80 
37A0    74 11                     je          L$481 
37A2    0F B6 C3                  movzx       ax,bl 
37A5    89 F3                     mov         bx,si 
37A7    01 C0                     add         ax,ax 
37A9    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
37AC    01 C3                     add         bx,ax 
37AE    31 0F                     xor         word ptr [bx],cx 
37B0    E9 8E FE                  jmp         L$472 
37B3                          L$481:
37B3    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
37B6    30 FF                     xor         bh,bh 
37B8    C5 54 2A                  lds         dx,dword ptr 0x2a[si] 
37BB    01 D3                     add         bx,dx 
37BD    30 0F                     xor         byte ptr [bx],cl 
37BF    E9 7F FE                  jmp         L$472 
37C2                          vpu_instr_inv_:
37C2    56                        push        si 
37C3    89 C3                     mov         bx,ax 
37C5    8E DA                     mov         ds,dx 
37C7    8B 47 10                  mov         ax,word ptr 0x10[bx] 
37CA    8B 77 40                  mov         si,word ptr 0x40[bx] 
37CD    C1 E0 02                  shl         ax,0x02 
37D0    8E 47 42                  mov         es,word ptr 0x42[bx] 
37D3    01 C6                     add         si,ax 
37D5    8B 47 12                  mov         ax,word ptr 0x12[bx] 
37D8    89 C2                     mov         dx,ax 
37DA    42                        inc         dx 
37DB    89 57 12                  mov         word ptr 0x12[bx],dx 
37DE    26 C4 14                  les         dx,dword ptr es:[si] 
37E1    89 D6                     mov         si,dx 
37E3    01 C6                     add         si,ax 
37E5    26 8A 04                  mov         al,byte ptr es:[si] 
37E8    88 C4                     mov         ah,al 
37EA    80 E4 0F                  and         ah,0x0f 
37ED    A8 80                     test        al,0x80 
37EF    74 10                     je          L$482 
37F1    0F B6 C4                  movzx       ax,ah 
37F4    01 C0                     add         ax,ax 
37F6    01 C3                     add         bx,ax 
37F8    8B 07                     mov         ax,word ptr [bx] 
37FA    F7 D0                     not         ax 
37FC    89 07                     mov         word ptr [bx],ax 
37FE    E9 1C F8                  jmp         L$435 
3801                          L$482:
3801    0F B6 C4                  movzx       ax,ah 
3804    C5 77 2A                  lds         si,dword ptr 0x2a[bx] 
3807    89 F3                     mov         bx,si 
3809    01 C3                     add         bx,ax 
380B    8A 07                     mov         al,byte ptr [bx] 
380D    F6 D0                     not         al 
380F    88 07                     mov         byte ptr [bx],al 
3811    E9 09 F8                  jmp         L$435 
3814                          vpu_instr_shl_:
3814    51                        push        cx 
3815    56                        push        si 
3816    57                        push        di 
3817    C8 02 00 00               enter       0x0002,0x00 
381B    89 C6                     mov         si,ax 
381D    89 D7                     mov         di,dx 
381F    89 D9                     mov         cx,bx 
3821    8E DA                     mov         ds,dx 
3823    8B 5C 10                  mov         bx,word ptr 0x10[si] 
3826    8B 44 40                  mov         ax,word ptr 0x40[si] 
3829    C1 E3 02                  shl         bx,0x02 
382C    8E 5C 42                  mov         ds,word ptr 0x42[si] 
382F    8E C2                     mov         es,dx 
3831    01 C3                     add         bx,ax 
3833    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
3837    89 C2                     mov         dx,ax 
3839    42                        inc         dx 
383A    26 89 54 12               mov         word ptr es:0x12[si],dx 
383E    C5 17                     lds         dx,dword ptr [bx] 
3840    89 D3                     mov         bx,dx 
3842    01 C3                     add         bx,ax 
3844    8A 07                     mov         al,byte ptr [bx] 
3846    88 46 FE                  mov         byte ptr -0x2[bp],al 
3849    F6 C1 80                  test        cl,0x80 
384C    74 0D                     je          L$483 
384E    89 CB                     mov         bx,cx 
3850    89 F0                     mov         ax,si 
3852    89 FA                     mov         dx,di 
3854    E8 00 00                  call        imm_src_ 
3857    89 C1                     mov         cx,ax 
3859    EB 47                     jmp         L$485 
385B                          L$483:
385B    8E DF                     mov         ds,di 
385D    8B 5C 10                  mov         bx,word ptr 0x10[si] 
3860    8B 44 40                  mov         ax,word ptr 0x40[si] 
3863    C1 E3 02                  shl         bx,0x02 
3866    8E 5C 42                  mov         ds,word ptr 0x42[si] 
3869    01 C3                     add         bx,ax 
386B    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
386F    89 C2                     mov         dx,ax 
3871    42                        inc         dx 
3872    26 89 54 12               mov         word ptr es:0x12[si],dx 
3876    C5 0F                     lds         cx,dword ptr [bx] 
3878    89 CB                     mov         bx,cx 
387A    01 C3                     add         bx,ax 
387C    8A 27                     mov         ah,byte ptr [bx] 
387E    88 E0                     mov         al,ah 
3880    24 0F                     and         al,0x0f 
3882    F6 C4 80                  test        ah,0x80 
3885    74 0E                     je          L$484 
3887    30 E4                     xor         ah,ah 
3889    89 F3                     mov         bx,si 
388B    01 C0                     add         ax,ax 
388D    8E DF                     mov         ds,di 
388F    01 C3                     add         bx,ax 
3891    8B 0F                     mov         cx,word ptr [bx] 
3893    EB 0D                     jmp         L$485 
3895                          L$484:
3895    8E DF                     mov         ds,di 
3897    0F B6 D8                  movzx       bx,al 
389A    C5 54 2A                  lds         dx,dword ptr 0x2a[si] 
389D    01 D3                     add         bx,dx 
389F    0F B6 0F                  movzx       cx,byte ptr [bx] 
38A2                          L$485:
38A2    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
38A5    24 0F                     and         al,0x0f 
38A7    F6 46 FE 80               test        byte ptr -0x2[bp],0x80 
38AB    74 0D                     je          L$486 
38AD    30 E4                     xor         ah,ah 
38AF    01 C0                     add         ax,ax 
38B1    8E DF                     mov         ds,di 
38B3    01 C6                     add         si,ax 
38B5    D3 24                     shl         word ptr [si],cl 
38B7    E9 4B 07                  jmp         L$520 
38BA                          L$486:
38BA    8E DF                     mov         ds,di 
38BC    30 E4                     xor         ah,ah 
38BE    C5 5C 2A                  lds         bx,dword ptr 0x2a[si] 
38C1    01 C3                     add         bx,ax 
38C3    D2 27                     shl         byte ptr [bx],cl 
38C5    E9 3D 07                  jmp         L$520 
38C8                          vpu_instr_shr_:
38C8    51                        push        cx 
38C9    56                        push        si 
38CA    57                        push        di 
38CB    C8 04 00 00               enter       0x0004,0x00 
38CF    89 C6                     mov         si,ax 
38D1    89 56 FC                  mov         word ptr -0x4[bp],dx 
38D4    89 D9                     mov         cx,bx 
38D6    8E DA                     mov         ds,dx 
38D8    8B 5C 10                  mov         bx,word ptr 0x10[si] 
38DB    8B 44 40                  mov         ax,word ptr 0x40[si] 
38DE    C1 E3 02                  shl         bx,0x02 
38E1    8E 5C 42                  mov         ds,word ptr 0x42[si] 
38E4    8E C2                     mov         es,dx 
38E6    01 C3                     add         bx,ax 
38E8    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
38EC    89 C2                     mov         dx,ax 
38EE    42                        inc         dx 
38EF    26 89 54 12               mov         word ptr es:0x12[si],dx 
38F3    C5 3F                     lds         di,dword ptr [bx] 
38F5    89 FB                     mov         bx,di 
38F7    01 C3                     add         bx,ax 
38F9    8A 07                     mov         al,byte ptr [bx] 
38FB    88 46 FE                  mov         byte ptr -0x2[bp],al 
38FE    F6 C1 80                  test        cl,0x80 
3901    74 0D                     je          L$487 
3903    89 CB                     mov         bx,cx 
3905    89 F0                     mov         ax,si 
3907    8C C2                     mov         dx,es 
3909    E8 00 00                  call        imm_src_ 
390C    89 C1                     mov         cx,ax 
390E    EB 42                     jmp         L$489 
3910                          L$487:
3910    06                        push        es 
3911    1F                        pop         ds 
3912    8B 5C 10                  mov         bx,word ptr 0x10[si] 
3915    8B 44 40                  mov         ax,word ptr 0x40[si] 
3918    C1 E3 02                  shl         bx,0x02 
391B    01 C3                     add         bx,ax 
391D    89 D0                     mov         ax,dx 
391F    42                        inc         dx 
3920    8E 5C 42                  mov         ds,word ptr 0x42[si] 
3923    26 89 54 12               mov         word ptr es:0x12[si],dx 
3927    C5 17                     lds         dx,dword ptr [bx] 
3929    89 D3                     mov         bx,dx 
392B    01 C3                     add         bx,ax 
392D    8A 27                     mov         ah,byte ptr [bx] 
392F    88 E0                     mov         al,ah 
3931    24 0F                     and         al,0x0f 
3933    F6 C4 80                  test        ah,0x80 
3936    74 0D                     je          L$488 
3938    0F B6 D8                  movzx       bx,al 
393B    01 DB                     add         bx,bx 
393D    06                        push        es 
393E    1F                        pop         ds 
393F    01 F3                     add         bx,si 
3941    8B 0F                     mov         cx,word ptr [bx] 
3943    EB 0D                     jmp         L$489 
3945                          L$488:
3945    06                        push        es 
3946    1F                        pop         ds 
3947    0F B6 D8                  movzx       bx,al 
394A    C5 54 2A                  lds         dx,dword ptr 0x2a[si] 
394D    01 D3                     add         bx,dx 
394F    0F B6 0F                  movzx       cx,byte ptr [bx] 
3952                          L$489:
3952    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
3955    24 0F                     and         al,0x0f 
3957    F6 46 FE 80               test        byte ptr -0x2[bp],0x80 
395B    74 0E                     je          L$490 
395D    30 E4                     xor         ah,ah 
395F    01 C0                     add         ax,ax 
3961    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
3964    01 C6                     add         si,ax 
3966    D3 2C                     shr         word ptr [si],cl 
3968    E9 9A 06                  jmp         L$520 
396B                          L$490:
396B    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
396E    0F B6 D0                  movzx       dx,al 
3971    C5 5C 2A                  lds         bx,dword ptr 0x2a[si] 
3974    01 D3                     add         bx,dx 
3976    D2 2F                     shr         byte ptr [bx],cl 
3978    E9 8A 06                  jmp         L$520 
397B                          vpu_instr_call_:
397B    51                        push        cx 
397C    56                        push        si 
397D    57                        push        di 
397E    C8 02 00 00               enter       0x0002,0x00 
3982    89 C6                     mov         si,ax 
3984    89 56 FE                  mov         word ptr -0x2[bp],dx 
3987    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
398D    74 1E                     je          L$491 
398F    8E DA                     mov         ds,dx 
3991    66 FF 74 10               push        dword ptr 0x10[si] 
3995    16                        push        ss 
3996    68 FC 03                  push        offset DGROUP:L$1505 
3999    16                        push        ss 
399A    68 00 00                  push        offset _message 
399D    8C D2                     mov         dx,ss 
399F    9A 00 00 00 00            call        sprintf_ 
39A4    83 C4 0C                  add         sp,0x000c 
39A7    B8 00 00                  mov         ax,offset _message 
39AA    E8 00 00                  call        output_debug_info_ 
39AD                          L$491:
39AD    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
39B0    8B 5C 10                  mov         bx,word ptr 0x10[si] 
39B3    8B 44 40                  mov         ax,word ptr 0x40[si] 
39B6    C1 E3 02                  shl         bx,0x02 
39B9    8E 5C 42                  mov         ds,word ptr 0x42[si] 
39BC    01 C3                     add         bx,ax 
39BE    C5 07                     lds         ax,dword ptr [bx] 
39C0    8E 46 FE                  mov         es,word ptr -0x2[bp] 
39C3    26 8B 5C 12               mov         bx,word ptr es:0x12[si] 
39C7    01 C3                     add         bx,ax 
39C9    F6 07 80                  test        byte ptr [bx],0x80 
39CC    74 4E                     je          L$493 
39CE    8B 0F                     mov         cx,word ptr [bx] 
39D0    30 ED                     xor         ch,ch 
39D2    06                        push        es 
39D3    1F                        pop         ds 
39D4    80 E1 7F                  and         cl,0x7f 
39D7    3B 4C 46                  cmp         cx,word ptr 0x46[si] 
39DA    76 19                     jbe         L$492 
39DC    B8 00 00                  mov         ax,offset _segfaulterror 
39DF    8C D2                     mov         dx,ss 
39E1    BB 0B 00                  mov         bx,0x000b 
39E4    9A 00 00 00 00            call        putstr_ 
39E9    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
39EC    89 F0                     mov         ax,si 
39EE    0E                        push        cs 
39EF    E8 00 00                  call        send_vpu_signal_ 
39F2    E9 10 06                  jmp         L$520 
39F5                          L$492:
39F5    83 44 12 02               add         word ptr 0x12[si],0x0002 
39F9    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
39FF    74 20                     je          L$494 
3A01    51                        push        cx 
3A02    16                        push        ss 
3A03    68 2A 04                  push        offset DGROUP:L$1506 
3A06    16                        push        ss 
3A07    68 00 00                  push        offset _message 
3A0A    8C D2                     mov         dx,ss 
3A0C    9A 00 00 00 00            call        sprintf_ 
3A11    83 C4 0A                  add         sp,0x000a 
3A14    B8 00 00                  mov         ax,offset _message 
3A17    E8 00 00                  call        output_debug_info_ 
3A1A    EB 05                     jmp         L$494 
3A1C                          L$493:
3A1C    06                        push        es 
3A1D    1F                        pop         ds 
3A1E    FF 44 12                  inc         word ptr 0x12[si] 
3A21                          L$494:
3A21    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3A24    8B 44 16                  mov         ax,word ptr 0x16[si] 
3A27    3D 02 00                  cmp         ax,0x0002 
3A2A    73 17                     jae         L$495 
3A2C    B8 00 00                  mov         ax,offset _stackoverflowerror 
3A2F    8C D2                     mov         dx,ss 
3A31    9A 00 00 00 00            call        putstr_ 
3A36    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3A39    B8 03 00                  mov         ax,0x0003 
3A3C    80 4C 1E 10               or          byte ptr 0x1e[si],0x10 
3A40    E9 C4 05                  jmp         L$521 
3A43                          L$495:
3A43    89 C7                     mov         di,ax 
3A45    8B 54 12                  mov         dx,word ptr 0x12[si] 
3A48    01 C7                     add         di,ax 
3A4A    48                        dec         ax 
3A4B    8B 5C 2E                  mov         bx,word ptr 0x2e[si] 
3A4E    89 44 16                  mov         word ptr 0x16[si],ax 
3A51    01 FB                     add         bx,di 
3A53    8E 5C 30                  mov         ds,word ptr 0x30[si] 
3A56    42                        inc         dx 
3A57    42                        inc         dx 
3A58    89 17                     mov         word ptr [bx],dx 
3A5A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3A5D    8B 44 16                  mov         ax,word ptr 0x16[si] 
3A60    89 C3                     mov         bx,ax 
3A62    01 C3                     add         bx,ax 
3A64    48                        dec         ax 
3A65    89 44 16                  mov         word ptr 0x16[si],ax 
3A68    C5 54 2E                  lds         dx,dword ptr 0x2e[si] 
3A6B    8E 46 FE                  mov         es,word ptr -0x2[bp] 
3A6E    01 D3                     add         bx,dx 
3A70    26 8B 44 10               mov         ax,word ptr es:0x10[si] 
3A74    89 07                     mov         word ptr [bx],ax 
3A76    06                        push        es 
3A77    1F                        pop         ds 
3A78    8B 5C 10                  mov         bx,word ptr 0x10[si] 
3A7B    8B 44 40                  mov         ax,word ptr 0x40[si] 
3A7E    C1 E3 02                  shl         bx,0x02 
3A81    8E 5C 42                  mov         ds,word ptr 0x42[si] 
3A84    01 C3                     add         bx,ax 
3A86    C5 17                     lds         dx,dword ptr [bx] 
3A88    26 8B 5C 12               mov         bx,word ptr es:0x12[si] 
3A8C    01 D3                     add         bx,dx 
3A8E    8B 07                     mov         ax,word ptr [bx] 
3A90    06                        push        es 
3A91    1F                        pop         ds 
3A92    89 44 12                  mov         word ptr 0x12[si],ax 
3A95    89 4C 10                  mov         word ptr 0x10[si],cx 
3A98    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
3A9E    0F 84 63 05               je          L$520 
3AA2    FF 74 12                  push        word ptr 0x12[si] 
3AA5    16                        push        ss 
3AA6    68 3A 04                  push        offset DGROUP:L$1507 
3AA9    16                        push        ss 
3AAA    68 00 00                  push        offset _message 
3AAD    8C D2                     mov         dx,ss 
3AAF    9A 00 00 00 00            call        sprintf_ 
3AB4    83 C4 0A                  add         sp,0x000a 
3AB7    E9 B1 E9                  jmp         L$334 
3ABA                          vpu_instr_ret_:
3ABA    51                        push        cx 
3ABB    56                        push        si 
3ABC    89 C6                     mov         si,ax 
3ABE    89 D1                     mov         cx,dx 
3AC0    8E DA                     mov         ds,dx 
3AC2    8B 5C 3A                  mov         bx,word ptr 0x3a[si] 
3AC5    2B 5C 16                  sub         bx,word ptr 0x16[si] 
3AC8    83 FB 03                  cmp         bx,0x0003 
3ACB    73 1D                     jae         L$496 
3ACD    B8 00 00                  mov         ax,offset _stackunderflowerror 
3AD0    8C D2                     mov         dx,ss 
3AD2    BB 0B 00                  mov         bx,0x000b 
3AD5    9A 00 00 00 00            call        putstr_ 
3ADA    8E D9                     mov         ds,cx 
3ADC    89 F0                     mov         ax,si 
3ADE    89 CA                     mov         dx,cx 
3AE0    80 4C 1E 10               or          byte ptr 0x1e[si],0x10 
3AE4    0E                        push        cs 
3AE5    E8 00 00                  call        send_vpu_signal_ 
3AE8    EB 6A                     jmp         L$498 
3AEA                          L$496:
3AEA    FF 44 16                  inc         word ptr 0x16[si] 
3AED    8B 54 16                  mov         dx,word ptr 0x16[si] 
3AF0    8B 5C 2E                  mov         bx,word ptr 0x2e[si] 
3AF3    01 D2                     add         dx,dx 
3AF5    8E 5C 30                  mov         ds,word ptr 0x30[si] 
3AF8    01 D3                     add         bx,dx 
3AFA    8B 07                     mov         ax,word ptr [bx] 
3AFC    8E D9                     mov         ds,cx 
3AFE    89 44 10                  mov         word ptr 0x10[si],ax 
3B01    FF 44 16                  inc         word ptr 0x16[si] 
3B04    8B 5C 16                  mov         bx,word ptr 0x16[si] 
3B07    8B 44 2E                  mov         ax,word ptr 0x2e[si] 
3B0A    01 DB                     add         bx,bx 
3B0C    8E 5C 30                  mov         ds,word ptr 0x30[si] 
3B0F    01 C3                     add         bx,ax 
3B11    8B 07                     mov         ax,word ptr [bx] 
3B13    8E D9                     mov         ds,cx 
3B15    89 44 12                  mov         word ptr 0x12[si],ax 
3B18    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
3B1E    74 1C                     je          L$497 
3B20    50                        push        ax 
3B21    FF 74 10                  push        word ptr 0x10[si] 
3B24    16                        push        ss 
3B25    68 48 04                  push        offset DGROUP:L$1508 
3B28    16                        push        ss 
3B29    68 00 00                  push        offset _message 
3B2C    8C D2                     mov         dx,ss 
3B2E    9A 00 00 00 00            call        sprintf_ 
3B33    83 C4 0C                  add         sp,0x000c 
3B36    B8 00 00                  mov         ax,offset _message 
3B39    E8 00 00                  call        output_debug_info_ 
3B3C                          L$497:
3B3C    8E D9                     mov         ds,cx 
3B3E    8B 84 8A 01               mov         ax,word ptr 0x18a[si] 
3B42    C1 E8 07                  shr         ax,0x07 
3B45    25 01 00                  and         ax,0x0001 
3B48    80 A4 8A 01 BF            and         byte ptr 0x18a[si],0xbf 
3B4D    C1 E0 06                  shl         ax,0x06 
3B50    09 84 8A 01               or          word ptr 0x18a[si],ax 
3B54                          L$498:
3B54    31 C0                     xor         ax,ax 
3B56    5E                        pop         si 
3B57    59                        pop         cx 
3B58    CB                        retf        
3B59                          vpu_instr_hardint_:
3B59    51                        push        cx 
3B5A    56                        push        si 
3B5B    57                        push        di 
3B5C    89 C6                     mov         si,ax 
3B5E    89 D7                     mov         di,dx 
3B60    89 D9                     mov         cx,bx 
3B62    8E DA                     mov         ds,dx 
3B64    C7 44 28 00 00            mov         word ptr 0x28[si],0x0000 
3B69    C1 E3 02                  shl         bx,0x02 
3B6C    C5 44 5E                  lds         ax,dword ptr 0x5e[si] 
3B6F    01 C3                     add         bx,ax 
3B71    83 3F 00                  cmp         word ptr [bx],0x0000 
3B74    75 09                     jne         L$499 
3B76    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3B79    85 C0                     test        ax,ax 
3B7B    0F 84 74 E0               je          L$273 
3B7F                          L$499:
3B7F    8E DF                     mov         ds,di 
3B81    8B 44 16                  mov         ax,word ptr 0x16[si] 
3B84    80 8C 8A 01 10            or          byte ptr 0x18a[si],0x10 
3B89    3D 03 00                  cmp         ax,0x0003 
3B8C    73 16                     jae         L$500 
3B8E    B8 00 00                  mov         ax,offset _stackoverflowerror 
3B91    8C D2                     mov         dx,ss 
3B93    9A 00 00 00 00            call        putstr_ 
3B98    8E DF                     mov         ds,di 
3B9A    B8 03 00                  mov         ax,0x0003 
3B9D    80 4C 1E 10               or          byte ptr 0x1e[si],0x10 
3BA1    E9 4F E0                  jmp         L$273 
3BA4                          L$500:
3BA4    89 C3                     mov         bx,ax 
3BA6    01 C3                     add         bx,ax 
3BA8    48                        dec         ax 
3BA9    89 44 16                  mov         word ptr 0x16[si],ax 
3BAC    C5 54 2E                  lds         dx,dword ptr 0x2e[si] 
3BAF    8E C7                     mov         es,di 
3BB1    01 D3                     add         bx,dx 
3BB3    26 8B 44 1E               mov         ax,word ptr es:0x1e[si] 
3BB7    89 07                     mov         word ptr [bx],ax 
3BB9    8E DF                     mov         ds,di 
3BBB    8B 44 16                  mov         ax,word ptr 0x16[si] 
3BBE    89 C2                     mov         dx,ax 
3BC0    01 C2                     add         dx,ax 
3BC2    48                        dec         ax 
3BC3    8B 5C 2E                  mov         bx,word ptr 0x2e[si] 
3BC6    89 44 16                  mov         word ptr 0x16[si],ax 
3BC9    01 D3                     add         bx,dx 
3BCB    8E 5C 30                  mov         ds,word ptr 0x30[si] 
3BCE    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
3BD2    89 07                     mov         word ptr [bx],ax 
3BD4    8E DF                     mov         ds,di 
3BD6    8B 44 16                  mov         ax,word ptr 0x16[si] 
3BD9    89 C3                     mov         bx,ax 
3BDB    01 C3                     add         bx,ax 
3BDD    48                        dec         ax 
3BDE    8B 54 2E                  mov         dx,word ptr 0x2e[si] 
3BE1    89 44 16                  mov         word ptr 0x16[si],ax 
3BE4    01 D3                     add         bx,dx 
3BE6    8E 5C 30                  mov         ds,word ptr 0x30[si] 
3BE9    26 8B 44 10               mov         ax,word ptr es:0x10[si] 
3BED    89 07                     mov         word ptr [bx],ax 
3BEF    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
3BF5    74 19                     je          L$501 
3BF7    51                        push        cx 
3BF8    16                        push        ss 
3BF9    68 6E 04                  push        offset DGROUP:L$1509 
3BFC    16                        push        ss 
3BFD    68 00 00                  push        offset _message 
3C00    8C D2                     mov         dx,ss 
3C02    9A 00 00 00 00            call        sprintf_ 
3C07    83 C4 0A                  add         sp,0x000a 
3C0A    B8 00 00                  mov         ax,offset _message 
3C0D    E8 00 00                  call        output_debug_info_ 
3C10                          L$501:
3C10    8E DF                     mov         ds,di 
3C12    C1 E1 02                  shl         cx,0x02 
3C15    C5 5C 5E                  lds         bx,dword ptr 0x5e[si] 
3C18    01 CB                     add         bx,cx 
3C1A    8B 07                     mov         ax,word ptr [bx] 
3C1C    8E C7                     mov         es,di 
3C1E    26 3B 44 46               cmp         ax,word ptr es:0x46[si] 
3C22    72 0C                     jb          L$502 
3C24    B8 93 04                  mov         ax,offset DGROUP:L$1510 
3C27    8C D2                     mov         dx,ss 
3C29    9A 00 00 00 00            call        putstr_ 
3C2E    EB 36                     jmp         L$503 
3C30                          L$502:
3C30    8E DF                     mov         ds,di 
3C32    89 44 10                  mov         word ptr 0x10[si],ax 
3C35    C5 5C 5E                  lds         bx,dword ptr 0x5e[si] 
3C38    01 CB                     add         bx,cx 
3C3A    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3C3D    8E DF                     mov         ds,di 
3C3F    89 44 12                  mov         word ptr 0x12[si],ax 
3C42    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
3C48    74 1C                     je          L$503 
3C4A    50                        push        ax 
3C4B    FF 74 10                  push        word ptr 0x10[si] 
3C4E    16                        push        ss 
3C4F    68 AD 04                  push        offset DGROUP:L$1511 
3C52    16                        push        ss 
3C53    68 00 00                  push        offset _message 
3C56    8C D2                     mov         dx,ss 
3C58    9A 00 00 00 00            call        sprintf_ 
3C5D    83 C4 0C                  add         sp,0x000c 
3C60    B8 00 00                  mov         ax,offset _message 
3C63    E8 00 00                  call        output_debug_info_ 
3C66                          L$503:
3C66    31 C0                     xor         ax,ax 
3C68    E9 88 DF                  jmp         L$273 
3C6B                          vpu_instr_int_:
3C6B    51                        push        cx 
3C6C    56                        push        si 
3C6D    57                        push        di 
3C6E    C8 02 00 00               enter       0x0002,0x00 
3C72    89 C3                     mov         bx,ax 
3C74    89 56 FE                  mov         word ptr -0x2[bp],dx 
3C77    8E DA                     mov         ds,dx 
3C79    8B 77 10                  mov         si,word ptr 0x10[bx] 
3C7C    8B 47 40                  mov         ax,word ptr 0x40[bx] 
3C7F    C1 E6 02                  shl         si,0x02 
3C82    8E 5F 42                  mov         ds,word ptr 0x42[bx] 
3C85    01 C6                     add         si,ax 
3C87    C5 14                     lds         dx,dword ptr [si] 
3C89    8E 46 FE                  mov         es,word ptr -0x2[bp] 
3C8C    26 8B 77 12               mov         si,word ptr es:0x12[bx] 
3C90    01 D6                     add         si,dx 
3C92    8B 04                     mov         ax,word ptr [si] 
3C94    06                        push        es 
3C95    1F                        pop         ds 
3C96    3B 47 62                  cmp         ax,word ptr 0x62[bx] 
3C99    72 23                     jb          L$505 
3C9B    FF 77 62                  push        word ptr 0x62[bx] 
3C9E    50                        push        ax 
3C9F    16                        push        ss 
3CA0    68 D6 04                  push        offset DGROUP:L$1512 
3CA3    16                        push        ss 
3CA4    68 00 00                  push        offset _message 
3CA7    8C D2                     mov         dx,ss 
3CA9    9A 00 00 00 00            call        sprintf_ 
3CAE    83 C4 0C                  add         sp,0x000c 
3CB1    B8 00 00                  mov         ax,offset _message 
3CB4                          L$504:
3CB4    9A 00 00 00 00            call        putstr_ 
3CB9    31 C0                     xor         ax,ax 
3CBB    E9 49 03                  jmp         L$521 
3CBE                          L$505:
3CBE    83 7F 16 03               cmp         word ptr 0x16[bx],0x0003 
3CC2    73 17                     jae         L$506 
3CC4    B8 00 00                  mov         ax,offset _stackoverflowerror 
3CC7    8C D2                     mov         dx,ss 
3CC9    9A 00 00 00 00            call        putstr_ 
3CCE    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3CD1    B8 03 00                  mov         ax,0x0003 
3CD4    80 4F 1E 10               or          byte ptr 0x1e[bx],0x10 
3CD8    E9 2C 03                  jmp         L$521 
3CDB                          L$506:
3CDB    8B 77 16                  mov         si,word ptr 0x16[bx] 
3CDE    89 F2                     mov         dx,si 
3CE0    01 F2                     add         dx,si 
3CE2    4E                        dec         si 
3CE3    89 77 16                  mov         word ptr 0x16[bx],si 
3CE6    C5 77 2E                  lds         si,dword ptr 0x2e[bx] 
3CE9    01 D6                     add         si,dx 
3CEB    26 8B 57 1E               mov         dx,word ptr es:0x1e[bx] 
3CEF    89 14                     mov         word ptr [si],dx 
3CF1    06                        push        es 
3CF2    1F                        pop         ds 
3CF3    8B 77 16                  mov         si,word ptr 0x16[bx] 
3CF6    89 F1                     mov         cx,si 
3CF8    01 F1                     add         cx,si 
3CFA    4E                        dec         si 
3CFB    89 77 16                  mov         word ptr 0x16[bx],si 
3CFE    8B 7F 12                  mov         di,word ptr 0x12[bx] 
3D01    C5 77 2E                  lds         si,dword ptr 0x2e[bx] 
3D04    01 CE                     add         si,cx 
3D06    47                        inc         di 
3D07    47                        inc         di 
3D08    89 3C                     mov         word ptr [si],di 
3D0A    06                        push        es 
3D0B    1F                        pop         ds 
3D0C    8B 77 16                  mov         si,word ptr 0x16[bx] 
3D0F    89 F1                     mov         cx,si 
3D11    01 F1                     add         cx,si 
3D13    4E                        dec         si 
3D14    89 77 16                  mov         word ptr 0x16[bx],si 
3D17    C5 77 2E                  lds         si,dword ptr 0x2e[bx] 
3D1A    01 CE                     add         si,cx 
3D1C    26 8B 57 10               mov         dx,word ptr es:0x10[bx] 
3D20    89 14                     mov         word ptr [si],dx 
3D22    06                        push        es 
3D23    1F                        pop         ds 
3D24    C1 E0 02                  shl         ax,0x02 
3D27    C5 77 5E                  lds         si,dword ptr 0x5e[bx] 
3D2A    01 C6                     add         si,ax 
3D2C    8B 14                     mov         dx,word ptr [si] 
3D2E    26 3B 57 46               cmp         dx,word ptr es:0x46[bx] 
3D32    72 08                     jb          L$507 
3D34    B8 93 04                  mov         ax,offset DGROUP:L$1510 
3D37    8C D2                     mov         dx,ss 
3D39    E9 78 FF                  jmp         L$504 
3D3C                          L$507:
3D3C    06                        push        es 
3D3D    1F                        pop         ds 
3D3E    89 57 10                  mov         word ptr 0x10[bx],dx 
3D41    C5 77 5E                  lds         si,dword ptr 0x5e[bx] 
3D44    01 C6                     add         si,ax 
3D46    8B 44 02                  mov         ax,word ptr 0x2[si] 
3D49    06                        push        es 
3D4A    1F                        pop         ds 
3D4B    89 47 12                  mov         word ptr 0x12[bx],ax 
3D4E    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
3D54    74 1C                     je          L$508 
3D56    50                        push        ax 
3D57    FF 77 10                  push        word ptr 0x10[bx] 
3D5A    16                        push        ss 
3D5B    68 22 05                  push        offset DGROUP:L$1513 
3D5E    16                        push        ss 
3D5F    68 00 00                  push        offset _message 
3D62    8C D2                     mov         dx,ss 
3D64    9A 00 00 00 00            call        sprintf_ 
3D69    83 C4 0C                  add         sp,0x000c 
3D6C    B8 00 00                  mov         ax,offset _message 
3D6F    E8 00 00                  call        output_debug_info_ 
3D72                          L$508:
3D72    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3D75    31 C0                     xor         ax,ax 
3D77    80 8F 8A 01 10            or          byte ptr 0x18a[bx],0x10 
3D7C    E9 88 02                  jmp         L$521 
3D7F                          vpu_instr_iret_:
3D7F    51                        push        cx 
3D80    56                        push        si 
3D81    89 C6                     mov         si,ax 
3D83    89 D1                     mov         cx,dx 
3D85    8E DA                     mov         ds,dx 
3D87    8B 5C 3A                  mov         bx,word ptr 0x3a[si] 
3D8A    2B 5C 16                  sub         bx,word ptr 0x16[si] 
3D8D    83 FB 04                  cmp         bx,0x0004 
3D90    73 1E                     jae         L$509 
3D92    B8 00 00                  mov         ax,offset _stackunderflowerror 
3D95    8C D2                     mov         dx,ss 
3D97    BB 0B 00                  mov         bx,0x000b 
3D9A    9A 00 00 00 00            call        putstr_ 
3D9F    8E D9                     mov         ds,cx 
3DA1    89 F0                     mov         ax,si 
3DA3    89 CA                     mov         dx,cx 
3DA5    80 4C 1E 10               or          byte ptr 0x1e[si],0x10 
3DA9    0E                        push        cs 
3DAA    E8 00 00                  call        send_vpu_signal_ 
3DAD    E9 8C 00                  jmp         L$511 
3DB0                          L$509:
3DB0    FF 44 16                  inc         word ptr 0x16[si] 
3DB3    8B 5C 16                  mov         bx,word ptr 0x16[si] 
3DB6    8B 54 2E                  mov         dx,word ptr 0x2e[si] 
3DB9    01 DB                     add         bx,bx 
3DBB    8E 5C 30                  mov         ds,word ptr 0x30[si] 
3DBE    01 D3                     add         bx,dx 
3DC0    8B 07                     mov         ax,word ptr [bx] 
3DC2    8E D9                     mov         ds,cx 
3DC4    FF 44 16                  inc         word ptr 0x16[si] 
3DC7    8B 54 2E                  mov         dx,word ptr 0x2e[si] 
3DCA    8B 5C 16                  mov         bx,word ptr 0x16[si] 
3DCD    89 44 10                  mov         word ptr 0x10[si],ax 
3DD0    01 DB                     add         bx,bx 
3DD2    8E 5C 30                  mov         ds,word ptr 0x30[si] 
3DD5    01 D3                     add         bx,dx 
3DD7    8B 07                     mov         ax,word ptr [bx] 
3DD9    8E D9                     mov         ds,cx 
3DDB    89 44 12                  mov         word ptr 0x12[si],ax 
3DDE    FF 44 16                  inc         word ptr 0x16[si] 
3DE1    8B 5C 16                  mov         bx,word ptr 0x16[si] 
3DE4    8B 44 2E                  mov         ax,word ptr 0x2e[si] 
3DE7    01 DB                     add         bx,bx 
3DE9    8E 5C 30                  mov         ds,word ptr 0x30[si] 
3DEC    01 C3                     add         bx,ax 
3DEE    8B 07                     mov         ax,word ptr [bx] 
3DF0    8B 57 02                  mov         dx,word ptr 0x2[bx] 
3DF3    8E D9                     mov         ds,cx 
3DF5    89 44 1E                  mov         word ptr 0x1e[si],ax 
3DF8    89 54 20                  mov         word ptr 0x20[si],dx 
3DFB    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
3E01    74 1C                     je          L$510 
3E03    66 FF 74 10               push        dword ptr 0x10[si] 
3E07    16                        push        ss 
3E08    68 4B 05                  push        offset DGROUP:L$1514 
3E0B    16                        push        ss 
3E0C    68 00 00                  push        offset _message 
3E0F    8C D2                     mov         dx,ss 
3E11    9A 00 00 00 00            call        sprintf_ 
3E16    83 C4 0C                  add         sp,0x000c 
3E19    B8 00 00                  mov         ax,offset _message 
3E1C    E8 00 00                  call        output_debug_info_ 
3E1F                          L$510:
3E1F    8E D9                     mov         ds,cx 
3E21    80 A4 8A 01 EF            and         byte ptr 0x18a[si],0xef 
3E26    8B 84 8A 01               mov         ax,word ptr 0x18a[si] 
3E2A    C1 E8 07                  shr         ax,0x07 
3E2D    25 01 00                  and         ax,0x0001 
3E30    80 A4 8A 01 BF            and         byte ptr 0x18a[si],0xbf 
3E35    C1 E0 06                  shl         ax,0x06 
3E38    09 84 8A 01               or          word ptr 0x18a[si],ax 
3E3C                          L$511:
3E3C    31 C0                     xor         ax,ax 
3E3E    5E                        pop         si 
3E3F    59                        pop         cx 
3E40    CB                        retf        
3E41                          vpu_instr_setint_:
3E41    51                        push        cx 
3E42    56                        push        si 
3E43    57                        push        di 
3E44    C8 04 00 00               enter       0x0004,0x00 
3E48    89 C6                     mov         si,ax 
3E4A    89 56 FE                  mov         word ptr -0x2[bp],dx 
3E4D    8E DA                     mov         ds,dx 
3E4F    8B 44 10                  mov         ax,word ptr 0x10[si] 
3E52    8B 5C 40                  mov         bx,word ptr 0x40[si] 
3E55    C1 E0 02                  shl         ax,0x02 
3E58    8E 5C 42                  mov         ds,word ptr 0x42[si] 
3E5B    01 C3                     add         bx,ax 
3E5D    C5 0F                     lds         cx,dword ptr [bx] 
3E5F    8E C2                     mov         es,dx 
3E61    26 8B 5C 12               mov         bx,word ptr es:0x12[si] 
3E65    01 CB                     add         bx,cx 
3E67    8B 0F                     mov         cx,word ptr [bx] 
3E69    8E DA                     mov         ds,dx 
3E6B    8B 5C 10                  mov         bx,word ptr 0x10[si] 
3E6E    8B 44 40                  mov         ax,word ptr 0x40[si] 
3E71    83 44 12 02               add         word ptr 0x12[si],0x0002 
3E75    C1 E3 02                  shl         bx,0x02 
3E78    8E 5C 42                  mov         ds,word ptr 0x42[si] 
3E7B    01 C3                     add         bx,ax 
3E7D    C5 3F                     lds         di,dword ptr [bx] 
3E7F    26 8B 5C 12               mov         bx,word ptr es:0x12[si] 
3E83    01 FB                     add         bx,di 
3E85    8B 07                     mov         ax,word ptr [bx] 
3E87    8E DA                     mov         ds,dx 
3E89    89 46 FC                  mov         word ptr -0x4[bp],ax 
3E8C    8B 5C 10                  mov         bx,word ptr 0x10[si] 
3E8F    8B 44 40                  mov         ax,word ptr 0x40[si] 
3E92    83 44 12 02               add         word ptr 0x12[si],0x0002 
3E96    C1 E3 02                  shl         bx,0x02 
3E99    8E 5C 42                  mov         ds,word ptr 0x42[si] 
3E9C    01 C3                     add         bx,ax 
3E9E    C5 3F                     lds         di,dword ptr [bx] 
3EA0    26 8B 5C 12               mov         bx,word ptr es:0x12[si] 
3EA4    01 FB                     add         bx,di 
3EA6    8B 3F                     mov         di,word ptr [bx] 
3EA8    8E DA                     mov         ds,dx 
3EAA    8B 44 62                  mov         ax,word ptr 0x62[si] 
3EAD    83 44 12 02               add         word ptr 0x12[si],0x0002 
3EB1    39 C1                     cmp         cx,ax 
3EB3    72 2D                     jb          L$512 
3EB5    50                        push        ax 
3EB6    51                        push        cx 
3EB7    16                        push        ss 
3EB8    68 76 05                  push        offset DGROUP:L$1515 
3EBB    16                        push        ss 
3EBC    68 00 00                  push        offset _message 
3EBF    8C D2                     mov         dx,ss 
3EC1    9A 00 00 00 00            call        sprintf_ 
3EC6    B8 00 00                  mov         ax,offset _message 
3EC9    83 C4 0C                  add         sp,0x000c 
3ECC    BB 0B 00                  mov         bx,0x000b 
3ECF    9A 00 00 00 00            call        putstr_ 
3ED4    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
3ED7    89 F0                     mov         ax,si 
3ED9    0E                        push        cs 
3EDA    E8 00 00                  call        send_vpu_signal_ 
3EDD    31 C0                     xor         ax,ax 
3EDF    E9 25 01                  jmp         L$521 
3EE2                          L$512:
3EE2    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
3EE8    74 1D                     je          L$513 
3EEA    57                        push        di 
3EEB    FF 76 FC                  push        word ptr -0x4[bp] 
3EEE    51                        push        cx 
3EEF    16                        push        ss 
3EF0    68 C5 05                  push        offset DGROUP:L$1516 
3EF3    16                        push        ss 
3EF4    68 00 00                  push        offset _message 
3EF7    8C D2                     mov         dx,ss 
3EF9    9A 00 00 00 00            call        sprintf_ 
3EFE    83 C4 0E                  add         sp,0x000e 
3F01    B8 00 00                  mov         ax,offset _message 
3F04    E8 00 00                  call        output_debug_info_ 
3F07                          L$513:
3F07    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3F0A    C1 E1 02                  shl         cx,0x02 
3F0D    C5 5C 5E                  lds         bx,dword ptr 0x5e[si] 
3F10    01 CB                     add         bx,cx 
3F12    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
3F15    89 07                     mov         word ptr [bx],ax 
3F17    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3F1A    C5 5C 5E                  lds         bx,dword ptr 0x5e[si] 
3F1D    01 CB                     add         bx,cx 
3F1F    31 C0                     xor         ax,ax 
3F21    89 7F 02                  mov         word ptr 0x2[bx],di 
3F24    E9 E0 00                  jmp         L$521 
3F27                          vpu_instr_memcpy_:
3F27    51                        push        cx 
3F28    56                        push        si 
3F29    57                        push        di 
3F2A    C8 04 00 00               enter       0x0004,0x00 
3F2E    89 C6                     mov         si,ax 
3F30    89 56 FE                  mov         word ptr -0x2[bp],dx 
3F33    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
3F39    74 24                     je          L$514 
3F3B    8E DA                     mov         ds,dx 
3F3D    66 FF 74 06               push        dword ptr 0x6[si] 
3F41    66 FF 34                  push        dword ptr [si] 
3F44    FF 74 04                  push        word ptr 0x4[si] 
3F47    16                        push        ss 
3F48    68 FB 05                  push        offset DGROUP:L$1517 
3F4B    16                        push        ss 
3F4C    68 00 00                  push        offset _message 
3F4F    8C D2                     mov         dx,ss 
3F51    9A 00 00 00 00            call        sprintf_ 
3F56    83 C4 12                  add         sp,0x0012 
3F59    B8 00 00                  mov         ax,offset _message 
3F5C    E8 00 00                  call        output_debug_info_ 
3F5F                          L$514:
3F5F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3F62    89 F0                     mov         ax,si 
3F64    8C DA                     mov         dx,ds 
3F66    8B 1C                     mov         bx,word ptr [si] 
3F68    E8 00 00                  call        segment_exists_ 
3F6B    89 C1                     mov         cx,ax 
3F6D    85 C0                     test        ax,ax 
3F6F    74 13                     je          L$515 
3F71    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3F74    89 F0                     mov         ax,si 
3F76    8C DA                     mov         dx,ds 
3F78    8B 5C 06                  mov         bx,word ptr 0x6[si] 
3F7B    E8 00 00                  call        segment_exists_ 
3F7E    89 C3                     mov         bx,ax 
3F80    85 C0                     test        ax,ax 
3F82    75 0B                     jne         L$516 
3F84                          L$515:
3F84    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3F87    31 C0                     xor         ax,ax 
3F89    80 4C 1E 01               or          byte ptr 0x1e[si],0x01 
3F8D    EB 78                     jmp         L$521 
3F8F                          L$516:
3F8F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3F92    8B 44 02                  mov         ax,word ptr 0x2[si] 
3F95    03 44 04                  add         ax,word ptr 0x4[si] 
3F98    48                        dec         ax 
3F99    39 C1                     cmp         cx,ax 
3F9B    72 0B                     jb          L$517 
3F9D    8B 44 08                  mov         ax,word ptr 0x8[si] 
3FA0    03 44 04                  add         ax,word ptr 0x4[si] 
3FA3    48                        dec         ax 
3FA4    39 C3                     cmp         bx,ax 
3FA6    73 0A                     jae         L$518 
3FA8                          L$517:
3FA8    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
3FAB    89 F0                     mov         ax,si 
3FAD    E8 00 00                  call        segfault_ 
3FB0    EB 53                     jmp         L$520 
3FB2                          L$518:
3FB2    FF 74 04                  push        word ptr 0x4[si] 
3FB5    8B 1C                     mov         bx,word ptr [si] 
3FB7    8B 4C 48                  mov         cx,word ptr 0x48[si] 
3FBA    8B 44 4A                  mov         ax,word ptr 0x4a[si] 
3FBD    C1 E3 02                  shl         bx,0x02 
3FC0    8E D8                     mov         ds,ax 
3FC2    01 CB                     add         bx,cx 
3FC4    8B 3F                     mov         di,word ptr [bx] 
3FC6    8B 57 02                  mov         dx,word ptr 0x2[bx] 
3FC9    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3FCC    89 56 FC                  mov         word ptr -0x4[bp],dx 
3FCF    8B 5C 06                  mov         bx,word ptr 0x6[si] 
3FD2    03 7C 02                  add         di,word ptr 0x2[si] 
3FD5    C1 E3 02                  shl         bx,0x02 
3FD8    8E D8                     mov         ds,ax 
3FDA    01 CB                     add         bx,cx 
3FDC    8B 4E FC                  mov         cx,word ptr -0x4[bp] 
3FDF    8B 07                     mov         ax,word ptr [bx] 
3FE1    8B 57 02                  mov         dx,word ptr 0x2[bx] 
3FE4    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3FE7    89 FB                     mov         bx,di 
3FE9    03 44 08                  add         ax,word ptr 0x8[si] 
3FEC    9A 00 00 00 00            call        memmove_ 
3FF1    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3FF4    8B 44 04                  mov         ax,word ptr 0x4[si] 
3FF7    01 44 08                  add         word ptr 0x8[si],ax 
3FFA                          L$519:
3FFA    8B 44 04                  mov         ax,word ptr 0x4[si] 
3FFD    C7 44 04 00 00            mov         word ptr 0x4[si],0x0000 
4002    01 44 02                  add         word ptr 0x2[si],ax 
4005                          L$520:
4005    31 C0                     xor         ax,ax 
4007                          L$521:
4007    C9                        leave       
4008                          L$522:
4008    5F                        pop         di 
4009    5E                        pop         si 
400A    59                        pop         cx 
400B    CB                        retf        
400C                          vpu_instr_memset_:
400C    51                        push        cx 
400D    56                        push        si 
400E    57                        push        di 
400F    C8 02 00 00               enter       0x0002,0x00 
4013    89 C6                     mov         si,ax 
4015    89 56 FE                  mov         word ptr -0x2[bp],dx 
4018    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
401E    74 20                     je          L$523 
4020    8E DA                     mov         ds,dx 
4022    66 FF 34                  push        dword ptr [si] 
4025    FF 74 04                  push        word ptr 0x4[si] 
4028    16                        push        ss 
4029    68 30 06                  push        offset DGROUP:L$1518 
402C    16                        push        ss 
402D    68 00 00                  push        offset _message 
4030    8C D2                     mov         dx,ss 
4032    9A 00 00 00 00            call        sprintf_ 
4037    83 C4 0E                  add         sp,0x000e 
403A    B8 00 00                  mov         ax,offset _message 
403D    E8 00 00                  call        output_debug_info_ 
4040                          L$523:
4040    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4043    89 F0                     mov         ax,si 
4045    8C DA                     mov         dx,ds 
4047    8B 1C                     mov         bx,word ptr [si] 
4049    E8 00 00                  call        segment_exists_ 
404C    85 C0                     test        ax,ax 
404E    75 09                     jne         L$524 
4050    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4053    80 4C 1E 01               or          byte ptr 0x1e[si],0x01 
4057    EB AE                     jmp         L$521 
4059                          L$524:
4059    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
405C    8B 5C 02                  mov         bx,word ptr 0x2[si] 
405F    03 5C 04                  add         bx,word ptr 0x4[si] 
4062    4B                        dec         bx 
4063    39 D8                     cmp         ax,bx 
4065    72 9E                     jb          L$520 
4067    C5 5C 2A                  lds         bx,dword ptr 0x2a[si] 
406A    8A 47 06                  mov         al,byte ptr 0x6[bx] 
406D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4070    8B 4C 04                  mov         cx,word ptr 0x4[si] 
4073    8B 3C                     mov         di,word ptr [si] 
4075    8B 5C 48                  mov         bx,word ptr 0x48[si] 
4078    C1 E7 02                  shl         di,0x02 
407B    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
407E    01 FB                     add         bx,di 
4080    8B 3F                     mov         di,word ptr [bx] 
4082    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
4085    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4088    03 7C 02                  add         di,word ptr 0x2[si] 
408B    8E C3                     mov         es,bx 
408D    57                        push        di 
408E    F3 AA                     rep stosb   
4090    5F                        pop         di 
4091    E9 66 FF                  jmp         L$519 
4094                          vpu_instr_memchr_:
4094    51                        push        cx 
4095    56                        push        si 
4096    57                        push        di 
4097    C8 02 00 00               enter       0x0002,0x00 
409B    89 C6                     mov         si,ax 
409D    89 56 FE                  mov         word ptr -0x2[bp],dx 
40A0    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
40A6    74 20                     je          L$525 
40A8    8E DA                     mov         ds,dx 
40AA    66 FF 34                  push        dword ptr [si] 
40AD    FF 74 04                  push        word ptr 0x4[si] 
40B0    16                        push        ss 
40B1    68 60 06                  push        offset DGROUP:L$1519 
40B4    16                        push        ss 
40B5    68 00 00                  push        offset _message 
40B8    8C D2                     mov         dx,ss 
40BA    9A 00 00 00 00            call        sprintf_ 
40BF    83 C4 0E                  add         sp,0x000e 
40C2    B8 00 00                  mov         ax,offset _message 
40C5    E8 00 00                  call        output_debug_info_ 
40C8                          L$525:
40C8    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
40CB    89 F0                     mov         ax,si 
40CD    8C DA                     mov         dx,ds 
40CF    8B 1C                     mov         bx,word ptr [si] 
40D1    E8 00 00                  call        segment_exists_ 
40D4    85 C0                     test        ax,ax 
40D6    75 0A                     jne         L$526 
40D8    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
40DB    80 4C 1E 01               or          byte ptr 0x1e[si],0x01 
40DF    E9 25 FF                  jmp         L$521 
40E2                          L$526:
40E2    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
40E5    8B 5C 02                  mov         bx,word ptr 0x2[si] 
40E8    03 5C 04                  add         bx,word ptr 0x4[si] 
40EB    4B                        dec         bx 
40EC    39 D8                     cmp         ax,bx 
40EE    0F 82 13 FF               jb          L$520 
40F2    C5 5C 2A                  lds         bx,dword ptr 0x2a[si] 
40F5    8A 47 06                  mov         al,byte ptr 0x6[bx] 
40F8    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
40FB    8B 14                     mov         dx,word ptr [si] 
40FD    8B 5C 48                  mov         bx,word ptr 0x48[si] 
4100    C1 E2 02                  shl         dx,0x02 
4103    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
4106    01 D3                     add         bx,dx 
4108    C4 0F                     les         cx,dword ptr [bx] 
410A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
410D    8B 5C 02                  mov         bx,word ptr 0x2[si] 
4110    01 CB                     add         bx,cx 
4112    89 DF                     mov         di,bx 
4114    8B 4C 04                  mov         cx,word ptr 0x4[si] 
4117    E3 08                     jcxz        L$527 
4119    F2 AE                     repne scasb 
411B    75 04                     jne         L$527 
411D    4F                        dec         di 
411E    8C C1                     mov         cx,es 
4120    A9                                              .
4121                          L$527:
4121    8B F9                     mov         di,cx 
4123    85 C9                     test        cx,cx 
4125    75 12                     jne         L$528 
4127    85 FF                     test        di,di 
4129    75 0E                     jne         L$528 
412B    8B 44 04                  mov         ax,word ptr 0x4[si] 
412E    C7 44 04 00 00            mov         word ptr 0x4[si],0x0000 
4133    01 44 02                  add         word ptr 0x2[si],ax 
4136    E9 CC FE                  jmp         L$520 
4139                          L$528:
4139    29 DF                     sub         di,bx 
413B    01 7C 02                  add         word ptr 0x2[si],di 
413E    29 7C 04                  sub         word ptr 0x4[si],di 
4141    E9 C1 FE                  jmp         L$520 
4144                          vpu_instr_memcmp_:
4144    51                        push        cx 
4145    56                        push        si 
4146    57                        push        di 
4147    C8 02 00 00               enter       0x0002,0x00 
414B    89 C6                     mov         si,ax 
414D    89 D1                     mov         cx,dx 
414F    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
4155    74 24                     je          L$529 
4157    8E DA                     mov         ds,dx 
4159    66 FF 74 06               push        dword ptr 0x6[si] 
415D    66 FF 34                  push        dword ptr [si] 
4160    FF 74 04                  push        word ptr 0x4[si] 
4163    16                        push        ss 
4164    68 8A 06                  push        offset DGROUP:L$1520 
4167    16                        push        ss 
4168    68 00 00                  push        offset _message 
416B    8C D2                     mov         dx,ss 
416D    9A 00 00 00 00            call        sprintf_ 
4172    83 C4 12                  add         sp,0x0012 
4175    B8 00 00                  mov         ax,offset _message 
4178    E8 00 00                  call        output_debug_info_ 
417B                          L$529:
417B    8E D9                     mov         ds,cx 
417D    89 F0                     mov         ax,si 
417F    89 CA                     mov         dx,cx 
4181    8B 1C                     mov         bx,word ptr [si] 
4183    E8 00 00                  call        segment_exists_ 
4186    89 C7                     mov         di,ax 
4188    85 C0                     test        ax,ax 
418A    74 10                     je          L$530 
418C    8E D9                     mov         ds,cx 
418E    89 F0                     mov         ax,si 
4190    89 CA                     mov         dx,cx 
4192    8B 5C 06                  mov         bx,word ptr 0x6[si] 
4195    E8 00 00                  call        segment_exists_ 
4198    85 C0                     test        ax,ax 
419A    75 0B                     jne         L$531 
419C                          L$530:
419C    8E D9                     mov         ds,cx 
419E    31 C0                     xor         ax,ax 
41A0    80 4C 1E 01               or          byte ptr 0x1e[si],0x01 
41A4    E9 60 FE                  jmp         L$521 
41A7                          L$531:
41A7    8E D9                     mov         ds,cx 
41A9    8B 5C 02                  mov         bx,word ptr 0x2[si] 
41AC    03 5C 04                  add         bx,word ptr 0x4[si] 
41AF    4B                        dec         bx 
41B0    39 DF                     cmp         di,bx 
41B2    72 0B                     jb          L$532 
41B4    8B 5C 08                  mov         bx,word ptr 0x8[si] 
41B7    03 5C 04                  add         bx,word ptr 0x4[si] 
41BA    4B                        dec         bx 
41BB    39 D8                     cmp         ax,bx 
41BD    73 0A                     jae         L$533 
41BF                          L$532:
41BF    89 F0                     mov         ax,si 
41C1    89 CA                     mov         dx,cx 
41C3    E8 00 00                  call        segfault_ 
41C6    E9 3C FE                  jmp         L$520 
41C9                          L$533:
41C9    8E C1                     mov         es,cx 
41CB                          L$534:
41CB    8E D9                     mov         ds,cx 
41CD    8B 5C 06                  mov         bx,word ptr 0x6[si] 
41D0    8B 44 48                  mov         ax,word ptr 0x48[si] 
41D3    8B 54 4A                  mov         dx,word ptr 0x4a[si] 
41D6    C1 E3 02                  shl         bx,0x02 
41D9    8E DA                     mov         ds,dx 
41DB    01 C3                     add         bx,ax 
41DD    8B 3F                     mov         di,word ptr [bx] 
41DF    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
41E2    8E D9                     mov         ds,cx 
41E4    89 5E FE                  mov         word ptr -0x2[bp],bx 
41E7    8B 1C                     mov         bx,word ptr [si] 
41E9    03 7C 08                  add         di,word ptr 0x8[si] 
41EC    C1 E3 02                  shl         bx,0x02 
41EF    8E DA                     mov         ds,dx 
41F1    01 C3                     add         bx,ax 
41F3    C5 07                     lds         ax,dword ptr [bx] 
41F5    26 8B 5C 02               mov         bx,word ptr es:0x2[si] 
41F9    01 C3                     add         bx,ax 
41FB    8A 07                     mov         al,byte ptr [bx] 
41FD    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4200    3A 05                     cmp         al,byte ptr [di] 
4202    0F 85 FF FD               jne         L$520 
4206    8E D9                     mov         ds,cx 
4208    FF 44 02                  inc         word ptr 0x2[si] 
420B    FF 44 08                  inc         word ptr 0x8[si] 
420E    FF 4C 04                  dec         word ptr 0x4[si] 
4211    75 B8                     jne         L$534 
4213    E9 EF FD                  jmp         L$520 
4216                          vpu_instr_in_:
4216    56                        push        si 
4217    89 C3                     mov         bx,ax 
4219    8E DA                     mov         ds,dx 
421B    8B 77 10                  mov         si,word ptr 0x10[bx] 
421E    8B 47 40                  mov         ax,word ptr 0x40[bx] 
4221    C1 E6 02                  shl         si,0x02 
4224    8E 47 42                  mov         es,word ptr 0x42[bx] 
4227    01 C6                     add         si,ax 
4229    8B 47 12                  mov         ax,word ptr 0x12[bx] 
422C    89 C2                     mov         dx,ax 
422E    42                        inc         dx 
422F    89 57 12                  mov         word ptr 0x12[bx],dx 
4232    26 C4 14                  les         dx,dword ptr es:[si] 
4235    89 D6                     mov         si,dx 
4237    01 C6                     add         si,ax 
4239    26 8A 04                  mov         al,byte ptr es:[si] 
423C    3A 47 5C                  cmp         al,byte ptr 0x5c[bx] 
423F    72 1F                     jb          L$535 
4241    30 E4                     xor         ah,ah 
4243    50                        push        ax 
4244    16                        push        ss 
4245    68 C1 06                  push        offset DGROUP:L$1521 
4248    16                        push        ss 
4249    68 00 00                  push        offset _message 
424C    8C D2                     mov         dx,ss 
424E    9A 00 00 00 00            call        sprintf_ 
4253    83 C4 0A                  add         sp,0x000a 
4256    B8 00 00                  mov         ax,offset _message 
4259    9A 00 00 00 00            call        putstr_ 
425E    EB 1C                     jmp         L$536 
4260                          L$535:
4260    30 E4                     xor         ah,ah 
4262    8B 77 58                  mov         si,word ptr 0x58[bx] 
4265    01 C0                     add         ax,ax 
4267    8E 47 5A                  mov         es,word ptr 0x5a[bx] 
426A    01 C6                     add         si,ax 
426C    26 8B 34                  mov         si,word ptr es:[si] 
426F    89 37                     mov         word ptr [bx],si 
4271    C5 77 58                  lds         si,dword ptr 0x58[bx] 
4274    89 F3                     mov         bx,si 
4276    01 C3                     add         bx,ax 
4278    C7 07 FF FF               mov         word ptr [bx],0xffff 
427C                          L$536:
427C    31 C0                     xor         ax,ax 
427E    5E                        pop         si 
427F    CB                        retf        
4280                          vpu_instr_out_:
4280    56                        push        si 
4281    89 C3                     mov         bx,ax 
4283    8E DA                     mov         ds,dx 
4285    8B 77 10                  mov         si,word ptr 0x10[bx] 
4288    8B 47 40                  mov         ax,word ptr 0x40[bx] 
428B    C1 E6 02                  shl         si,0x02 
428E    8E 47 42                  mov         es,word ptr 0x42[bx] 
4291    01 C6                     add         si,ax 
4293    8B 47 12                  mov         ax,word ptr 0x12[bx] 
4296    89 C2                     mov         dx,ax 
4298    42                        inc         dx 
4299    89 57 12                  mov         word ptr 0x12[bx],dx 
429C    26 C4 14                  les         dx,dword ptr es:[si] 
429F    89 D6                     mov         si,dx 
42A1    01 C6                     add         si,ax 
42A3    26 8A 04                  mov         al,byte ptr es:[si] 
42A6    3A 47 5C                  cmp         al,byte ptr 0x5c[bx] 
42A9    72 1F                     jb          L$537 
42AB    30 E4                     xor         ah,ah 
42AD    50                        push        ax 
42AE    16                        push        ss 
42AF    68 ED 06                  push        offset DGROUP:L$1522 
42B2    16                        push        ss 
42B3    68 00 00                  push        offset _message 
42B6    8C D2                     mov         dx,ss 
42B8    9A 00 00 00 00            call        sprintf_ 
42BD    83 C4 0A                  add         sp,0x000a 
42C0    B8 00 00                  mov         ax,offset _message 
42C3    9A 00 00 00 00            call        putstr_ 
42C8    EB 11                     jmp         L$538 
42CA                          L$537:
42CA    30 E4                     xor         ah,ah 
42CC    8B 77 58                  mov         si,word ptr 0x58[bx] 
42CF    01 C0                     add         ax,ax 
42D1    8E 47 5A                  mov         es,word ptr 0x5a[bx] 
42D4    01 C6                     add         si,ax 
42D6    8B 07                     mov         ax,word ptr [bx] 
42D8    26 89 04                  mov         word ptr es:[si],ax 
42DB                          L$538:
42DB    31 C0                     xor         ax,ax 
42DD    5E                        pop         si 
42DE    CB                        retf        
42DF                          vpu_instr_wait_:
42DF    89 C3                     mov         bx,ax 
42E1    8E DA                     mov         ds,dx 
42E3    B8 03 00                  mov         ax,0x0003 
42E6    80 8F 8A 01 40            or          byte ptr 0x18a[bx],0x40 
42EB    CB                        retf        
42EC                          vpu_instr_zeroflags_:
42EC    51                        push        cx 
42ED    57                        push        di 
42EE    B9 04 00                  mov         cx,0x0004 
42F1    89 C7                     mov         di,ax 
42F3    8E C2                     mov         es,dx 
42F5    83 C7 1E                  add         di,0x001e 
42F8    30 C0                     xor         al,al 
42FA    57                        push        di 
42FB    F3 AA                     rep stosb   
42FD    5F                        pop         di 
42FE    30 E4                     xor         ah,ah 
4300    5F                        pop         di 
4301    59                        pop         cx 
4302    CB                        retf        
4303                          vpu_instr_sconvw_:
4303    51                        push        cx 
4304    56                        push        si 
4305    89 C3                     mov         bx,ax 
4307    8E DA                     mov         ds,dx 
4309    8B 47 10                  mov         ax,word ptr 0x10[bx] 
430C    8B 77 40                  mov         si,word ptr 0x40[bx] 
430F    C1 E0 02                  shl         ax,0x02 
4312    8E 47 42                  mov         es,word ptr 0x42[bx] 
4315    01 C6                     add         si,ax 
4317    8B 47 12                  mov         ax,word ptr 0x12[bx] 
431A    89 C2                     mov         dx,ax 
431C    42                        inc         dx 
431D    89 57 12                  mov         word ptr 0x12[bx],dx 
4320    26 C4 14                  les         dx,dword ptr es:[si] 
4323    89 D6                     mov         si,dx 
4325    01 C6                     add         si,ax 
4327    26 8A 14                  mov         dl,byte ptr es:[si] 
432A    8B 77 10                  mov         si,word ptr 0x10[bx] 
432D    8B 47 40                  mov         ax,word ptr 0x40[bx] 
4330    C1 E6 02                  shl         si,0x02 
4333    8E 47 42                  mov         es,word ptr 0x42[bx] 
4336    01 C6                     add         si,ax 
4338    8B 47 12                  mov         ax,word ptr 0x12[bx] 
433B    89 C1                     mov         cx,ax 
433D    41                        inc         cx 
433E    89 4F 12                  mov         word ptr 0x12[bx],cx 
4341    26 C4 0C                  les         cx,dword ptr es:[si] 
4344    89 CE                     mov         si,cx 
4346    01 C6                     add         si,ax 
4348    26 8A 34                  mov         dh,byte ptr es:[si] 
434B    88 D0                     mov         al,dl 
434D    24 07                     and         al,0x07 
434F    30 E4                     xor         ah,ah 
4351    89 DE                     mov         si,bx 
4353    01 C0                     add         ax,ax 
4355    01 C6                     add         si,ax 
4357    88 F0                     mov         al,dh 
4359    24 0F                     and         al,0x0f 
435B    1E                        push        ds 
435C    07                        pop         es 
435D    0F B6 D0                  movzx       dx,al 
4360    C5 47 2A                  lds         ax,dword ptr 0x2a[bx] 
4363    89 C3                     mov         bx,ax 
4365    01 D3                     add         bx,dx 
4367    0F BE 07                  movsx       ax,byte ptr [bx] 
436A    26 89 04                  mov         word ptr es:[si],ax 
436D    E9 CC FA                  jmp         L$511 
4370                          vpu_instr_sconvb_:
4370    51                        push        cx 
4371    56                        push        si 
4372    89 C3                     mov         bx,ax 
4374    8E DA                     mov         ds,dx 
4376    8B 47 10                  mov         ax,word ptr 0x10[bx] 
4379    8B 77 40                  mov         si,word ptr 0x40[bx] 
437C    C1 E0 02                  shl         ax,0x02 
437F    8E 47 42                  mov         es,word ptr 0x42[bx] 
4382    01 C6                     add         si,ax 
4384    8B 47 12                  mov         ax,word ptr 0x12[bx] 
4387    89 C2                     mov         dx,ax 
4389    42                        inc         dx 
438A    89 57 12                  mov         word ptr 0x12[bx],dx 
438D    26 C4 14                  les         dx,dword ptr es:[si] 
4390    89 D6                     mov         si,dx 
4392    01 C6                     add         si,ax 
4394    26 8A 14                  mov         dl,byte ptr es:[si] 
4397    8B 77 10                  mov         si,word ptr 0x10[bx] 
439A    8B 47 40                  mov         ax,word ptr 0x40[bx] 
439D    C1 E6 02                  shl         si,0x02 
43A0    8E 47 42                  mov         es,word ptr 0x42[bx] 
43A3    01 C6                     add         si,ax 
43A5    8B 47 12                  mov         ax,word ptr 0x12[bx] 
43A8    89 C1                     mov         cx,ax 
43AA    41                        inc         cx 
43AB    89 4F 12                  mov         word ptr 0x12[bx],cx 
43AE    26 C4 0C                  les         cx,dword ptr es:[si] 
43B1    89 CE                     mov         si,cx 
43B3    01 C6                     add         si,ax 
43B5    26 8A 04                  mov         al,byte ptr es:[si] 
43B8    24 07                     and         al,0x07 
43BA    30 E4                     xor         ah,ah 
43BC    89 DE                     mov         si,bx 
43BE    01 C0                     add         ax,ax 
43C0    01 C6                     add         si,ax 
43C2    88 D0                     mov         al,dl 
43C4    24 0F                     and         al,0x0f 
43C6    1E                        push        ds 
43C7    07                        pop         es 
43C8    0F B6 C8                  movzx       cx,al 
43CB    C5 47 2A                  lds         ax,dword ptr 0x2a[bx] 
43CE    89 C3                     mov         bx,ax 
43D0    01 CB                     add         bx,cx 
43D2    26 8A 04                  mov         al,byte ptr es:[si] 
43D5    88 07                     mov         byte ptr [bx],al 
43D7    E9 62 FA                  jmp         L$511 
43DA                          vpu_instr_getstr_:
43DA    51                        push        cx 
43DB    56                        push        si 
43DC    57                        push        di 
43DD    C8 08 00 00               enter       0x0008,0x00 
43E1    89 C6                     mov         si,ax 
43E3    89 56 FE                  mov         word ptr -0x2[bp],dx 
43E6    8E DA                     mov         ds,dx 
43E8    8B 44 10                  mov         ax,word ptr 0x10[si] 
43EB    8B 5C 40                  mov         bx,word ptr 0x40[si] 
43EE    C1 E0 02                  shl         ax,0x02 
43F1    8E 44 42                  mov         es,word ptr 0x42[si] 
43F4    01 C3                     add         bx,ax 
43F6    8B 44 12                  mov         ax,word ptr 0x12[si] 
43F9    89 C2                     mov         dx,ax 
43FB    42                        inc         dx 
43FC    89 54 12                  mov         word ptr 0x12[si],dx 
43FF    26 C5 17                  lds         dx,dword ptr es:[bx] 
4402    89 D3                     mov         bx,dx 
4404    01 C3                     add         bx,ax 
4406    8A 07                     mov         al,byte ptr [bx] 
4408    24 07                     and         al,0x07 
440A    30 E4                     xor         ah,ah 
440C    89 F3                     mov         bx,si 
440E    01 C0                     add         ax,ax 
4410    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4413    01 C3                     add         bx,ax 
4415    8B 07                     mov         ax,word ptr [bx] 
4417    8B 5C 10                  mov         bx,word ptr 0x10[si] 
441A    8B 4C 40                  mov         cx,word ptr 0x40[si] 
441D    C1 E3 02                  shl         bx,0x02 
4420    8E 5C 42                  mov         ds,word ptr 0x42[si] 
4423    8E 46 FE                  mov         es,word ptr -0x2[bp] 
4426    01 CB                     add         bx,cx 
4428    26 8B 4C 12               mov         cx,word ptr es:0x12[si] 
442C    89 CA                     mov         dx,cx 
442E    42                        inc         dx 
442F    26 89 54 12               mov         word ptr es:0x12[si],dx 
4433    C5 3F                     lds         di,dword ptr [bx] 
4435    89 FB                     mov         bx,di 
4437    01 CB                     add         bx,cx 
4439    8A 17                     mov         dl,byte ptr [bx] 
443B    80 E2 07                  and         dl,0x07 
443E    0F B6 DA                  movzx       bx,dl 
4441    01 DB                     add         bx,bx 
4443    06                        push        es 
4444    1F                        pop         ds 
4445    01 F3                     add         bx,si 
4447    31 FF                     xor         di,di 
4449    8B 17                     mov         dx,word ptr [bx] 
444B    8B 5C 14                  mov         bx,word ptr 0x14[si] 
444E    89 56 FC                  mov         word ptr -0x4[bp],dx 
4451    C1 E3 02                  shl         bx,0x02 
4454    C5 54 48                  lds         dx,dword ptr 0x48[si] 
4457    01 D3                     add         bx,dx 
4459    8C C2                     mov         dx,es 
445B    8B 0F                     mov         cx,word ptr [bx] 
445D    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
4460    01 C1                     add         cx,ax 
4462    89 5E FA                  mov         word ptr -0x6[bp],bx 
4465    89 4E F8                  mov         word ptr -0x8[bp],cx 
4468    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
446B    31 C9                     xor         cx,cx 
446D    01 C3                     add         bx,ax 
446F    89 F0                     mov         ax,si 
4471    11 F9                     adc         cx,di 
4473    E8 00 00                  call        memory_allowed_ 
4476    84 C0                     test        al,al 
4478    75 0C                     jne         L$539 
447A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
447D    30 E4                     xor         ah,ah 
447F    80 4C 1E 01               or          byte ptr 0x1e[si],0x01 
4483    E9 81 FB                  jmp         L$521 
4486                          L$539:
4486    E8 00 00                  call        con_stdin_read_ 
4489    89 C3                     mov         bx,ax 
448B    3D FF FF                  cmp         ax,0xffff 
448E    75 0C                     jne         L$540 
4490    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4493    31 C0                     xor         ax,ax 
4495    83 6C 12 03               sub         word ptr 0x12[si],0x0003 
4499    E9 6B FB                  jmp         L$521 
449C                          L$540:
449C    3B 7E FC                  cmp         di,word ptr -0x4[bp] 
449F    0F 83 62 FB               jae         L$520 
44A3    89 FE                     mov         si,di 
44A5    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
44A8    03 76 F8                  add         si,word ptr -0x8[bp] 
44AB    47                        inc         di 
44AC    88 1C                     mov         byte ptr [si],bl 
44AE    E8 00 00                  call        con_stdin_read_ 
44B1    89 C3                     mov         bx,ax 
44B3    3D FF FF                  cmp         ax,0xffff 
44B6    0F 84 4B FB               je          L$520 
44BA    3D 0D 00                  cmp         ax,0x000d 
44BD    75 DD                     jne         L$540 
44BF    31 C3                     xor         bx,ax 
44C1    EB D9                     jmp         L$540 
44C3                          vpu_select_primary_stack_:
44C3    51                        push        cx 
44C4    56                        push        si 
44C5    89 C3                     mov         bx,ax 
44C7    8E DA                     mov         ds,dx 
44C9    8B 57 2E                  mov         dx,word ptr 0x2e[bx] 
44CC    8B 77 30                  mov         si,word ptr 0x30[bx] 
44CF    8B 4F 34                  mov         cx,word ptr 0x34[bx] 
44D2    8B 47 32                  mov         ax,word ptr 0x32[bx] 
44D5    39 CE                     cmp         si,cx 
44D7    75 04                     jne         L$541 
44D9    39 C2                     cmp         dx,ax 
44DB    74 12                     je          L$542 
44DD                          L$541:
44DD    89 47 2E                  mov         word ptr 0x2e[bx],ax 
44E0    89 4F 30                  mov         word ptr 0x30[bx],cx 
44E3    8B 47 16                  mov         ax,word ptr 0x16[bx] 
44E6    89 47 1A                  mov         word ptr 0x1a[bx],ax 
44E9    8B 47 18                  mov         ax,word ptr 0x18[bx] 
44EC    89 47 16                  mov         word ptr 0x16[bx],ax 
44EF                          L$542:
44EF    31 C0                     xor         ax,ax 
44F1    5E                        pop         si 
44F2    59                        pop         cx 
44F3    CB                        retf        
44F4                          vpu_select_secondary_stack_:
44F4    51                        push        cx 
44F5    56                        push        si 
44F6    89 C3                     mov         bx,ax 
44F8    8E DA                     mov         ds,dx 
44FA    8B 57 2E                  mov         dx,word ptr 0x2e[bx] 
44FD    8B 77 30                  mov         si,word ptr 0x30[bx] 
4500    8B 4F 38                  mov         cx,word ptr 0x38[bx] 
4503    8B 47 36                  mov         ax,word ptr 0x36[bx] 
4506    39 CE                     cmp         si,cx 
4508    75 04                     jne         L$543 
450A    39 C2                     cmp         dx,ax 
450C    74 12                     je          L$544 
450E                          L$543:
450E    89 47 2E                  mov         word ptr 0x2e[bx],ax 
4511    89 4F 30                  mov         word ptr 0x30[bx],cx 
4514    8B 47 16                  mov         ax,word ptr 0x16[bx] 
4517    89 47 18                  mov         word ptr 0x18[bx],ax 
451A    8B 47 1A                  mov         ax,word ptr 0x1a[bx] 
451D    89 47 16                  mov         word ptr 0x16[bx],ax 
4520                          L$544:
4520    31 C0                     xor         ax,ax 
4522    5E                        pop         si 
4523    59                        pop         cx 
4524    CB                        retf        
4525                          vpu_instr_nop_:
4525    31 C0                     xor         ax,ax 
4527    CB                        retf        
4528                          vpu_scrcall_createwindow_:
4528    53                        push        bx 
4529    51                        push        cx 
452A    56                        push        si 
452B    57                        push        di 
452C    C8 0C 00 00               enter       0x000c,0x00 
4530    89 C6                     mov         si,ax 
4532    89 56 FE                  mov         word ptr -0x2[bp],dx 
4535    8E DA                     mov         ds,dx 
4537    8B 44 14                  mov         ax,word ptr 0x14[si] 
453A    8B 5C 48                  mov         bx,word ptr 0x48[si] 
453D    C1 E0 02                  shl         ax,0x02 
4540    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
4543    01 C3                     add         bx,ax 
4545    8B 07                     mov         ax,word ptr [bx] 
4547    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
454A    8E DA                     mov         ds,dx 
454C    8B 54 06                  mov         dx,word ptr 0x6[si] 
454F    01 C2                     add         dx,ax 
4551    89 56 F6                  mov         word ptr -0xa[bp],dx 
4554    C7 46 F4 00 00            mov         word ptr -0xc[bp],0x0000 
4559    8B 7E F6                  mov         di,word ptr -0xa[bp] 
455C    8B 54 06                  mov         dx,word ptr 0x6[si] 
455F    8E C3                     mov         es,bx 
4561    89 5E F8                  mov         word ptr -0x8[bp],bx 
4564    B9 FF FF                  mov         cx,0xffff 
4567    33 C0                     xor         ax,ax 
4569    F2 AE                     repne scasb 
456B    F7 D1                     not         cx 
456D    49                        dec         cx 
456E    89 D3                     mov         bx,dx 
4570    31 C0                     xor         ax,ax 
4572    8C DA                     mov         dx,ds 
4574    01 CB                     add         bx,cx 
4576    8B 4E F4                  mov         cx,word ptr -0xc[bp] 
4579    11 C1                     adc         cx,ax 
457B    89 F0                     mov         ax,si 
457D    E8 00 00                  call        memory_allowed_ 
4580    84 C0                     test        al,al 
4582    75 05                     jne         L$545 
4584    30 E4                     xor         ah,ah 
4586    E9 78 54                  jmp         L$1046 
4589                          L$545:
4589    C7 46 FA 00 00            mov         word ptr -0x6[bp],0x0000 
458E    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4591    89 F3                     mov         bx,si 
4593                          L$546:
4593    8B 47 78                  mov         ax,word ptr 0x78[bx] 
4596    8B 57 76                  mov         dx,word ptr 0x76[bx] 
4599    85 C0                     test        ax,ax 
459B    75 04                     jne         L$547 
459D    85 D2                     test        dx,dx 
459F    74 0E                     je          L$548 
45A1                          L$547:
45A1    83 7E FA 05               cmp         word ptr -0x6[bp],0x0005 
45A5    73 08                     jae         L$548 
45A7    FF 46 FA                  inc         word ptr -0x6[bp] 
45AA    83 C3 12                  add         bx,0x0012 
45AD    EB E4                     jmp         L$546 
45AF                          L$548:
45AF    83 7E FA 04               cmp         word ptr -0x6[bp],0x0004 
45B3    73 67                     jae         L$550 
45B5    6B 7E FA 12               imul        di,word ptr -0x6[bp],0x0012 
45B9    FF 76 FE                  push        word ptr -0x2[bp] 
45BC    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
45BF    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
45C2    56                        push        si 
45C3    8B 4E F8                  mov         cx,word ptr -0x8[bp] 
45C6    FF 74 0E                  push        word ptr 0xe[si] 
45C9    8B 54 04                  mov         dx,word ptr 0x4[si] 
45CC    FF 74 0C                  push        word ptr 0xc[si] 
45CF    8B 44 02                  mov         ax,word ptr 0x2[si] 
45D2    9A 00 00 00 00            call        init_vpuprog_window_ 
45D7    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
45DA    8E DB                     mov         ds,bx 
45DC    01 F7                     add         di,si 
45DE    89 45 76                  mov         word ptr 0x76[di],ax 
45E1    89 55 78                  mov         word ptr 0x78[di],dx 
45E4    89 5E FC                  mov         word ptr -0x4[bp],bx 
45E7    8B 45 76                  mov         ax,word ptr 0x76[di] 
45EA    85 D2                     test        dx,dx 
45EC    75 04                     jne         L$549 
45EE    85 C0                     test        ax,ax 
45F0    74 2A                     je          L$550 
45F2                          L$549:
45F2    BB 01 00                  mov         bx,0x0001 
45F5    31 C9                     xor         cx,cx 
45F7    9A 00 00 00 00            call        draw_window_ 
45FC    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
45FF    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
4602    89 04                     mov         word ptr [si],ax 
4604    8B 44 08                  mov         ax,word ptr 0x8[si] 
4607    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
460A    89 45 7C                  mov         word ptr 0x7c[di],ax 
460D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4610    8B 44 0A                  mov         ax,word ptr 0xa[si] 
4613    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
4616    89 45 7A                  mov         word ptr 0x7a[di],ax 
4619    E9 69 0F                  jmp         L$617 
461C                          L$550:
461C    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
461F                          L$551:
461F    C7 04 FF FF               mov         word ptr [si],0xffff 
4623    E9 5F 0F                  jmp         L$617 
4626                          vpu_scrcall_fullscreen_:
4626    53                        push        bx 
4627    51                        push        cx 
4628    56                        push        si 
4629    57                        push        di 
462A    C8 0A 00 00               enter       0x000a,0x00 
462E    89 C3                     mov         bx,ax 
4630    89 56 FE                  mov         word ptr -0x2[bp],dx 
4633    8D 7E F6                  lea         di,-0xa[bp] 
4636    16                        push        ss 
4637    07                        pop         es 
4638    16                        push        ss 
4639    1F                        pop         ds 
463A    BE 5A 02                  mov         si,offset DGROUP:L$1591 
463D    A5                        movsw       
463E    A5                        movsw       
463F    A5                        movsw       
4640    A4                        movsb       
4641    0E                        push        cs 
4642    E8 00 00                  call        vpu_scrcall_createwindow_ 
4645    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4648    6B 37 12                  imul        si,word ptr [bx],0x0012 
464B    01 DE                     add         si,bx 
464D    C5 7C 76                  lds         di,dword ptr 0x76[si] 
4650    80 4D 16 40               or          byte ptr 0x16[di],0x40 
4654    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4657    8B 47 02                  mov         ax,word ptr 0x2[bx] 
465A    85 C0                     test        ax,ax 
465C    74 34                     je          L$555 
465E    8D 76 F6                  lea         si,-0xa[bp] 
4661    89 C1                     mov         cx,ax 
4663    16                        push        ss 
4664    1F                        pop         ds 
4665    8C DA                     mov         dx,ds 
4667                          L$552:
4667    8A 04                     mov         al,byte ptr [si] 
4669    3A C1                     cmp         al,cl 
466B    74 09                     je          L$553 
466D    46                        inc         si 
466E    3C 00                     cmp         al,0x00 
4670    75 F5                     jne         L$552 
4672    2B F6                     sub         si,si 
4674    2B D2                     sub         dx,dx 
4676                          L$553:
4676    85 D2                     test        dx,dx 
4678    75 04                     jne         L$554 
467A    85 F6                     test        si,si 
467C    74 14                     je          L$555 
467E                          L$554:
467E    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4681    6B 37 12                  imul        si,word ptr [bx],0x0012 
4684    01 DE                     add         si,bx 
4686    C5 7C 76                  lds         di,dword ptr 0x76[si] 
4689    8E 46 FE                  mov         es,word ptr -0x2[bp] 
468C    26 8A 47 02               mov         al,byte ptr es:0x2[bx] 
4690    EB 0F                     jmp         L$556 
4692                          L$555:
4692    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4695    6B 37 12                  imul        si,word ptr [bx],0x0012 
4698    01 DE                     add         si,bx 
469A    C5 7C 76                  lds         di,dword ptr 0x76[si] 
469D    36 A0 00 00               mov         al,byte ptr ss:_video 
46A1                          L$556:
46A1    88 45 10                  mov         byte ptr 0x10[di],al 
46A4    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
46A7    6B 37 12                  imul        si,word ptr [bx],0x0012 
46AA    01 DE                     add         si,bx 
46AC    C5 7C 76                  lds         di,dword ptr 0x76[si] 
46AF    0F B6 45 10               movzx       ax,byte ptr 0x10[di] 
46B3    9A 00 00 00 00            call        video_mode_ 
46B8    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
46BB    6B 37 12                  imul        si,word ptr [bx],0x0012 
46BE    01 DE                     add         si,bx 
46C0    C5 7C 76                  lds         di,dword ptr 0x76[si] 
46C3    36 A1 00 00               mov         ax,word ptr ss:__RES_X 
46C7    89 45 12                  mov         word ptr 0x12[di],ax 
46CA    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
46CD    6B 37 12                  imul        si,word ptr [bx],0x0012 
46D0    01 DE                     add         si,bx 
46D2    C5 7C 76                  lds         di,dword ptr 0x76[si] 
46D5    36 A1 00 00               mov         ax,word ptr ss:__RES_Y 
46D9    89 45 14                  mov         word ptr 0x14[di],ax 
46DC    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
46DF    6B 37 12                  imul        si,word ptr [bx],0x0012 
46E2    01 DE                     add         si,bx 
46E4    C5 7C 76                  lds         di,dword ptr 0x76[si] 
46E7    C7 45 04 00 00            mov         word ptr 0x4[di],0x0000 
46EC    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
46EF    6B 37 12                  imul        si,word ptr [bx],0x0012 
46F2    01 DE                     add         si,bx 
46F4    C5 7C 76                  lds         di,dword ptr 0x76[si] 
46F7    C7 45 06 00 00            mov         word ptr 0x6[di],0x0000 
46FC    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
46FF    8B 77 02                  mov         si,word ptr 0x2[bx] 
4702    83 FE 0F                  cmp         si,0x000f 
4705    72 0E                     jb          L$557 
4707    76 31                     jbe         L$560 
4709    83 FE 13                  cmp         si,0x0013 
470C    74 0E                     je          L$558 
470E    83 FE 11                  cmp         si,0x0011 
4711    74 36                     je          L$561 
4713    EB 41                     jmp         L$562 
4715                          L$557:
4715    83 FE 06                  cmp         si,0x0006 
4718    74 11                     je          L$559 
471A    EB 3A                     jmp         L$562 
471C                          L$558:
471C    6B 37 12                  imul        si,word ptr [bx],0x0012 
471F    01 DE                     add         si,bx 
4721    66 C7 44 7E 00 FA 00 00
                                  mov         dword ptr 0x7e[si],0x0000fa00 
4729    EB 2B                     jmp         L$562 
472B                          L$559:
472B    6B 37 12                  imul        si,word ptr [bx],0x0012 
472E    01 DE                     add         si,bx 
4730    66 C7 44 7E 00 40 00 00
                                  mov         dword ptr 0x7e[si],0x00004000 
4738    EB 1C                     jmp         L$562 
473A                          L$560:
473A    6B 37 12                  imul        si,word ptr [bx],0x0012 
473D    01 DE                     add         si,bx 
473F    66 C7 44 7E 60 6D 00 00
                                  mov         dword ptr 0x7e[si],0x00006d60 
4747    EB 0D                     jmp         L$562 
4749                          L$561:
4749    6B 37 12                  imul        si,word ptr [bx],0x0012 
474C    01 DE                     add         si,bx 
474E    66 C7 44 7E 00 96 00 00
                                  mov         dword ptr 0x7e[si],0x00009600 
4756                          L$562:
4756    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4759    6B 37 12                  imul        si,word ptr [bx],0x0012 
475C    01 DE                     add         si,bx 
475E    8B BC 80 00               mov         di,word ptr 0x80[si] 
4762    0B 7C 7E                  or          di,word ptr 0x7e[si] 
4765    74 19                     je          L$563 
4767    BA 01 00                  mov         dx,0x0001 
476A    8B 44 7E                  mov         ax,word ptr 0x7e[si] 
476D    9A 00 00 00 00            call        _fcalloc_ 
4772    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4775    6B 0F 12                  imul        cx,word ptr [bx],0x0012 
4778    01 CB                     add         bx,cx 
477A    89 47 72                  mov         word ptr 0x72[bx],ax 
477D    89 57 74                  mov         word ptr 0x74[bx],dx 
4780                          L$563:
4780    9A 00 00 00 00            call        draw_screen_ 
4785    E9 FD 0D                  jmp         L$617 
4788                          vpu_scrcall_putpixel_:
4788    53                        push        bx 
4789    56                        push        si 
478A    57                        push        di 
478B    89 C3                     mov         bx,ax 
478D    8E DA                     mov         ds,dx 
478F    6B 77 08 12               imul        si,word ptr 0x8[bx],0x0012 
4793    01 C6                     add         si,ax 
4795    C4 7C 76                  les         di,dword ptr 0x76[si] 
4798    36 0F B6 16 00 00         movzx       dx,byte ptr ss:__FONT_HEIGHT 
479E    26 8B 75 06               mov         si,word ptr es:0x6[di] 
47A2    26 8B 45 04               mov         ax,word ptr es:0x4[di] 
47A6    03 77 04                  add         si,word ptr 0x4[bx] 
47A9    03 47 02                  add         ax,word ptr 0x2[bx] 
47AC    01 F2                     add         dx,si 
47AE    0F B6 5F 06               movzx       bx,byte ptr 0x6[bx] 
47B2    42                        inc         dx 
47B3    42                        inc         dx 
47B4    9A 00 00 00 00            call        put_pixel_ 
47B9                          L$564:
47B9    31 C0                     xor         ax,ax 
47BB                          L$565:
47BB    5F                        pop         di 
47BC    5E                        pop         si 
47BD    5B                        pop         bx 
47BE    CB                        retf        
47BF                          vpu_scrcall_memset_:
47BF    53                        push        bx 
47C0    51                        push        cx 
47C1    56                        push        si 
47C2    57                        push        di 
47C3    C8 0A 00 00               enter       0x000a,0x00 
47C7    89 C6                     mov         si,ax 
47C9    89 56 FE                  mov         word ptr -0x2[bp],dx 
47CC    8E DA                     mov         ds,dx 
47CE    6B 7C 08 12               imul        di,word ptr 0x8[si],0x0012 
47D2    8B 44 06                  mov         ax,word ptr 0x6[si] 
47D5    89 46 F8                  mov         word ptr -0x8[bp],ax 
47D8    01 F7                     add         di,si 
47DA    8B 44 0A                  mov         ax,word ptr 0xa[si] 
47DD    C5 5D 76                  lds         bx,dword ptr 0x76[di] 
47E0    8B 4F 04                  mov         cx,word ptr 0x4[bx] 
47E3    03 4F 12                  add         cx,word ptr 0x12[bx] 
47E6    89 46 FC                  mov         word ptr -0x4[bp],ax 
47E9    89 4E F6                  mov         word ptr -0xa[bp],cx 
47EC    8B 4F 06                  mov         cx,word ptr 0x6[bx] 
47EF    36 0F B6 06 00 00         movzx       ax,byte ptr ss:__FONT_HEIGHT 
47F5    03 4F 14                  add         cx,word ptr 0x14[bx] 
47F8    8B 7F 04                  mov         di,word ptr 0x4[bx] 
47FB    01 C1                     add         cx,ax 
47FD    8E C2                     mov         es,dx 
47FF    41                        inc         cx 
4800    41                        inc         cx 
4801    8B 5F 06                  mov         bx,word ptr 0x6[bx] 
4804    26 03 7C 02               add         di,word ptr es:0x2[si] 
4808    89 4E FA                  mov         word ptr -0x6[bp],cx 
480B    8E DA                     mov         ds,dx 
480D    36 0F B6 0E 00 00         movzx       cx,byte ptr ss:__FONT_HEIGHT 
4813    03 5C 04                  add         bx,word ptr 0x4[si] 
4816    01 D9                     add         cx,bx 
4818    41                        inc         cx 
4819    41                        inc         cx 
481A                          L$566:
481A    FF 4E FC                  dec         word ptr -0x4[bp] 
481D    83 7E FC FF               cmp         word ptr -0x4[bp],0xffff 
4821    0F 84 60 0D               je          L$617 
4825    3B 7E F6                  cmp         di,word ptr -0xa[bp] 
4828    72 10                     jb          L$567 
482A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
482D    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
4831    01 F3                     add         bx,si 
4833    C5 7F 76                  lds         di,dword ptr 0x76[bx] 
4836    41                        inc         cx 
4837    8B 7D 04                  mov         di,word ptr 0x4[di] 
483A                          L$567:
483A    3B 4E FA                  cmp         cx,word ptr -0x6[bp] 
483D    0F 83 44 0D               jae         L$617 
4841    0F B6 5E F8               movzx       bx,byte ptr -0x8[bp] 
4845    89 F8                     mov         ax,di 
4847    89 CA                     mov         dx,cx 
4849    9A 00 00 00 00            call        put_pixel_ 
484E    47                        inc         di 
484F    EB C9                     jmp         L$566 
4851                          vpu_scrcall_memcpy_:
4851    53                        push        bx 
4852    51                        push        cx 
4853    56                        push        si 
4854    57                        push        di 
4855    C8 0E 00 00               enter       0x000e,0x00 
4859    89 C6                     mov         si,ax 
485B    89 56 FE                  mov         word ptr -0x2[bp],dx 
485E    8E DA                     mov         ds,dx 
4860    8B 44 0A                  mov         ax,word ptr 0xa[si] 
4863    8B 4C 06                  mov         cx,word ptr 0x6[si] 
4866    8B 5C 14                  mov         bx,word ptr 0x14[si] 
4869    89 46 FC                  mov         word ptr -0x4[bp],ax 
486C    C1 E3 02                  shl         bx,0x02 
486F    C5 44 48                  lds         ax,dword ptr 0x48[si] 
4872    01 C3                     add         bx,ax 
4874    8B 3F                     mov         di,word ptr [bx] 
4876    8B 47 02                  mov         ax,word ptr 0x2[bx] 
4879    01 CF                     add         di,cx 
487B    8E DA                     mov         ds,dx 
487D    89 7E F6                  mov         word ptr -0xa[bp],di 
4880    6B 7C 08 12               imul        di,word ptr 0x8[si],0x0012 
4884    01 F7                     add         di,si 
4886    C5 5D 76                  lds         bx,dword ptr 0x76[di] 
4889    89 46 F8                  mov         word ptr -0x8[bp],ax 
488C    8B 47 04                  mov         ax,word ptr 0x4[bx] 
488F    03 47 12                  add         ax,word ptr 0x12[bx] 
4892    89 46 F4                  mov         word ptr -0xc[bp],ax 
4895    8B 47 06                  mov         ax,word ptr 0x6[bx] 
4898    36 0F B6 3E 00 00         movzx       di,byte ptr ss:__FONT_HEIGHT 
489E    03 47 14                  add         ax,word ptr 0x14[bx] 
48A1    01 F8                     add         ax,di 
48A3    40                        inc         ax 
48A4    40                        inc         ax 
48A5    8B 7F 04                  mov         di,word ptr 0x4[bx] 
48A8    89 46 F2                  mov         word ptr -0xe[bp],ax 
48AB    8E C2                     mov         es,dx 
48AD    8B 47 06                  mov         ax,word ptr 0x6[bx] 
48B0    26 03 7C 02               add         di,word ptr es:0x2[si] 
48B4    8E DA                     mov         ds,dx 
48B6    36 0F B6 1E 00 00         movzx       bx,byte ptr ss:__FONT_HEIGHT 
48BC    03 44 04                  add         ax,word ptr 0x4[si] 
48BF    01 D8                     add         ax,bx 
48C1    31 D2                     xor         dx,dx 
48C3    40                        inc         ax 
48C4    40                        inc         ax 
48C5    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
48C8    89 46 FA                  mov         word ptr -0x6[bp],ax 
48CB    01 CB                     add         bx,cx 
48CD    89 D1                     mov         cx,dx 
48CF    89 F0                     mov         ax,si 
48D1    11 D1                     adc         cx,dx 
48D3    8C C2                     mov         dx,es 
48D5    E8 00 00                  call        memory_allowed_ 
48D8    84 C0                     test        al,al 
48DA    75 05                     jne         L$568 
48DC    30 E4                     xor         ah,ah 
48DE    E9 20 51                  jmp         L$1046 
48E1                          L$568:
48E1    FF 4E FC                  dec         word ptr -0x4[bp] 
48E4    83 7E FC FF               cmp         word ptr -0x4[bp],0xffff 
48E8    0F 84 99 0C               je          L$617 
48EC    3B 7E F4                  cmp         di,word ptr -0xc[bp] 
48EF    72 12                     jb          L$569 
48F1    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
48F4    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
48F8    01 F3                     add         bx,si 
48FA    C5 7F 76                  lds         di,dword ptr 0x76[bx] 
48FD    FF 46 FA                  inc         word ptr -0x6[bp] 
4900    8B 7D 04                  mov         di,word ptr 0x4[di] 
4903                          L$569:
4903    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
4906    3B 46 F2                  cmp         ax,word ptr -0xe[bp] 
4909    0F 83 78 0C               jae         L$617 
490D    C5 5E F6                  lds         bx,dword ptr -0xa[bp] 
4910    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
4913    89 F9                     mov         cx,di 
4915    0F B6 07                  movzx       ax,byte ptr [bx] 
4918    FF 46 F6                  inc         word ptr -0xa[bp] 
491B    89 C3                     mov         bx,ax 
491D    89 C8                     mov         ax,cx 
491F    47                        inc         di 
4920    9A 00 00 00 00            call        put_pixel_ 
4925    EB BA                     jmp         L$568 
4927                          vpu_scrcall_update_:
4927    53                        push        bx 
4928    51                        push        cx 
4929    56                        push        si 
492A    57                        push        di 
492B    89 C3                     mov         bx,ax 
492D    8E DA                     mov         ds,dx 
492F    6B 47 08 12               imul        ax,word ptr 0x8[bx],0x0012 
4933    01 C3                     add         bx,ax 
4935    8B 47 78                  mov         ax,word ptr 0x78[bx] 
4938    8B 4F 76                  mov         cx,word ptr 0x76[bx] 
493B    85 C0                     test        ax,ax 
493D    75 10                     jne         L$570 
493F    85 C9                     test        cx,cx 
4941    75 0C                     jne         L$570 
4943    B8 00 00                  mov         ax,offset _nowindowerror 
4946    8C D2                     mov         dx,ss 
4948    9A 00 00 00 00            call        putstr_ 
494D    EB 2A                     jmp         L$572 
494F                          L$570:
494F    89 CE                     mov         si,cx 
4951    8E C0                     mov         es,ax 
4953    26 F6 44 16 08            test        byte ptr es:0x16[si],0x08 
4958    75 1F                     jne         L$572 
495A    8B 47 74                  mov         ax,word ptr 0x74[bx] 
495D    8B 4F 72                  mov         cx,word ptr 0x72[bx] 
4960    85 C0                     test        ax,ax 
4962    75 04                     jne         L$571 
4964    85 C9                     test        cx,cx 
4966    74 11                     je          L$572 
4968                          L$571:
4968    8B 4F 7E                  mov         cx,word ptr 0x7e[bx] 
496B    8B 77 72                  mov         si,word ptr 0x72[bx] 
496E    8E D8                     mov         ds,ax 
4970    36 C4 3E 00 00            les         di,dword ptr ss:_VGA 
4975    57                        push        di 
4976    F3 A4                     rep movsb   
4978    5F                        pop         di 
4979                          L$572:
4979    31 C0                     xor         ax,ax 
497B    E9 84 50                  jmp         L$1047 
497E                          vpu_scrcall_clear_:
497E    53                        push        bx 
497F    51                        push        cx 
4980    56                        push        si 
4981    89 C3                     mov         bx,ax 
4983    8E DA                     mov         ds,dx 
4985    6B 47 08 12               imul        ax,word ptr 0x8[bx],0x0012 
4989    01 C3                     add         bx,ax 
498B    8B 4F 78                  mov         cx,word ptr 0x78[bx] 
498E    8B 77 76                  mov         si,word ptr 0x76[bx] 
4991    8E D9                     mov         ds,cx 
4993    F6 44 16 08               test        byte ptr 0x16[si],0x08 
4997    75 26                     jne         L$573 
4999    36 A1 00 00               mov         ax,word ptr ss:_active_window 
499D    36 8B 1E 00 00            mov         bx,word ptr ss:_windows 
49A2    C1 E0 02                  shl         ax,0x02 
49A5    36 8E 1E 02 00            mov         ds,word ptr ss:_windows+0x2 
49AA    01 C3                     add         bx,ax 
49AC    8B 47 02                  mov         ax,word ptr 0x2[bx] 
49AF    8B 17                     mov         dx,word ptr [bx] 
49B1    39 C8                     cmp         ax,cx 
49B3    75 0A                     jne         L$573 
49B5    39 F2                     cmp         dx,si 
49B7    75 06                     jne         L$573 
49B9    B8 01 00                  mov         ax,0x0001 
49BC    E9 44 50                  jmp         L$1048 
49BF                          L$573:
49BF    31 C0                     xor         ax,ax 
49C1    E9 3F 50                  jmp         L$1048 
49C4                          vpu_scrcall_text_:
49C4    53                        push        bx 
49C5    51                        push        cx 
49C6    56                        push        si 
49C7    57                        push        di 
49C8    C8 06 00 00               enter       0x0006,0x00 
49CC    89 C6                     mov         si,ax 
49CE    89 56 FA                  mov         word ptr -0x6[bp],dx 
49D1    8E DA                     mov         ds,dx 
49D3    8B 5C 14                  mov         bx,word ptr 0x14[si] 
49D6    8B 44 48                  mov         ax,word ptr 0x48[si] 
49D9    C1 E3 02                  shl         bx,0x02 
49DC    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
49DF    01 C3                     add         bx,ax 
49E1    8B 07                     mov         ax,word ptr [bx] 
49E3    8B 57 02                  mov         dx,word ptr 0x2[bx] 
49E6    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
49E9    89 56 FE                  mov         word ptr -0x2[bp],dx 
49EC    8B 54 06                  mov         dx,word ptr 0x6[si] 
49EF    01 C2                     add         dx,ax 
49F1    8B 5C 06                  mov         bx,word ptr 0x6[si] 
49F4    89 56 FC                  mov         word ptr -0x4[bp],dx 
49F7    C4 7E FC                  les         di,dword ptr -0x4[bp] 
49FA    B9 FF FF                  mov         cx,0xffff 
49FD    33 C0                     xor         ax,ax 
49FF    F2 AE                     repne scasb 
4A01    F7 D1                     not         cx 
4A03    49                        dec         cx 
4A04    31 D2                     xor         dx,dx 
4A06    01 CB                     add         bx,cx 
4A08    89 D1                     mov         cx,dx 
4A0A    89 F0                     mov         ax,si 
4A0C    11 D1                     adc         cx,dx 
4A0E    8C DA                     mov         dx,ds 
4A10    E8 00 00                  call        memory_allowed_ 
4A13    84 C0                     test        al,al 
4A15    75 05                     jne         L$574 
4A17    30 E4                     xor         ah,ah 
4A19    E9 E5 4F                  jmp         L$1046 
4A1C                          L$574:
4A1C    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
4A1F    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
4A23    0F B6 44 0A               movzx       ax,byte ptr 0xa[si] 
4A27    8B 4C 04                  mov         cx,word ptr 0x4[si] 
4A2A    50                        push        ax 
4A2B    8B 54 02                  mov         dx,word ptr 0x2[si] 
4A2E    FF 76 FE                  push        word ptr -0x2[bp] 
4A31    01 F3                     add         bx,si 
4A33    FF 76 FC                  push        word ptr -0x4[bp] 
4A36    8B 47 76                  mov         ax,word ptr 0x76[bx] 
4A39    8B 7F 78                  mov         di,word ptr 0x78[bx] 
4A3C    89 D3                     mov         bx,dx 
4A3E    89 FA                     mov         dx,di 
4A40    9A 00 00 00 00            call        window_text_ 
4A45    85 D2                     test        dx,dx 
4A47    0F 85 3A 0B               jne         L$617 
4A4B    85 C0                     test        ax,ax 
4A4D    0F 85 34 0B               jne         L$617 
4A51    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
4A54    E9 C8 FB                  jmp         L$551 
4A57                          vpu_scrcall_button_:
4A57    53                        push        bx 
4A58    51                        push        cx 
4A59    56                        push        si 
4A5A    57                        push        di 
4A5B    C8 06 00 00               enter       0x0006,0x00 
4A5F    89 C6                     mov         si,ax 
4A61    89 56 FE                  mov         word ptr -0x2[bp],dx 
4A64    8E DA                     mov         ds,dx 
4A66    8B 5C 14                  mov         bx,word ptr 0x14[si] 
4A69    8B 44 48                  mov         ax,word ptr 0x48[si] 
4A6C    C1 E3 02                  shl         bx,0x02 
4A6F    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
4A72    01 C3                     add         bx,ax 
4A74    8B 07                     mov         ax,word ptr [bx] 
4A76    8B 57 02                  mov         dx,word ptr 0x2[bx] 
4A79    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4A7C    89 56 FC                  mov         word ptr -0x4[bp],dx 
4A7F    8B 54 06                  mov         dx,word ptr 0x6[si] 
4A82    01 C2                     add         dx,ax 
4A84    8B 5C 06                  mov         bx,word ptr 0x6[si] 
4A87    89 56 FA                  mov         word ptr -0x6[bp],dx 
4A8A    C4 7E FA                  les         di,dword ptr -0x6[bp] 
4A8D    B9 FF FF                  mov         cx,0xffff 
4A90    33 C0                     xor         ax,ax 
4A92    F2 AE                     repne scasb 
4A94    F7 D1                     not         cx 
4A96    49                        dec         cx 
4A97    31 D2                     xor         dx,dx 
4A99    01 CB                     add         bx,cx 
4A9B    89 D1                     mov         cx,dx 
4A9D    89 F0                     mov         ax,si 
4A9F    11 D1                     adc         cx,dx 
4AA1    8C DA                     mov         dx,ds 
4AA3    E8 00 00                  call        memory_allowed_ 
4AA6    84 C0                     test        al,al 
4AA8    75 05                     jne         L$575 
4AAA    30 E4                     xor         ah,ah 
4AAC    E9 52 4F                  jmp         L$1046 
4AAF                          L$575:
4AAF    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4AB2    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
4AB6    0F B6 44 0A               movzx       ax,byte ptr 0xa[si] 
4ABA    50                        push        ax 
4ABB    FF 76 FC                  push        word ptr -0x4[bp] 
4ABE    8B 4C 04                  mov         cx,word ptr 0x4[si] 
4AC1    FF 76 FA                  push        word ptr -0x6[bp] 
4AC4    8B 44 02                  mov         ax,word ptr 0x2[si] 
4AC7    FF 74 0E                  push        word ptr 0xe[si] 
4ACA    01 F3                     add         bx,si 
4ACC    FF 74 0C                  push        word ptr 0xc[si] 
4ACF    8B 7F 76                  mov         di,word ptr 0x76[bx] 
4AD2    8B 57 78                  mov         dx,word ptr 0x78[bx] 
4AD5    89 C3                     mov         bx,ax 
4AD7    89 F8                     mov         ax,di 
4AD9    9A 00 00 00 00            call        window_button_ 
4ADE    85 D2                     test        dx,dx 
4AE0    75 0E                     jne         L$576 
4AE2    85 C0                     test        ax,ax 
4AE4    75 0A                     jne         L$576 
4AE6    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4AE9    C7 04 FF FF               mov         word ptr [si],0xffff 
4AED    E9 95 0A                  jmp         L$617 
4AF0                          L$576:
4AF0    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4AF3    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
4AF7    01 F3                     add         bx,si 
4AF9    C5 7F 76                  lds         di,dword ptr 0x76[bx] 
4AFC    8B 5D 28                  mov         bx,word ptr 0x28[di] 
4AFF    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4B02    81 C3 FF 00               add         bx,0x00ff 
4B06    89 1C                     mov         word ptr [si],bx 
4B08    E9 7A 0A                  jmp         L$617 
4B0B                          vpu_scrcall_checkbox_:
4B0B    53                        push        bx 
4B0C    51                        push        cx 
4B0D    56                        push        si 
4B0E    57                        push        di 
4B0F    C8 06 00 00               enter       0x0006,0x00 
4B13    89 C6                     mov         si,ax 
4B15    89 56 FE                  mov         word ptr -0x2[bp],dx 
4B18    8E DA                     mov         ds,dx 
4B1A    8B 44 14                  mov         ax,word ptr 0x14[si] 
4B1D    8B 5C 48                  mov         bx,word ptr 0x48[si] 
4B20    C1 E0 02                  shl         ax,0x02 
4B23    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
4B26    01 C3                     add         bx,ax 
4B28    8B 07                     mov         ax,word ptr [bx] 
4B2A    8B 57 02                  mov         dx,word ptr 0x2[bx] 
4B2D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4B30    89 56 FC                  mov         word ptr -0x4[bp],dx 
4B33    8B 54 06                  mov         dx,word ptr 0x6[si] 
4B36    01 C2                     add         dx,ax 
4B38    8B 5C 06                  mov         bx,word ptr 0x6[si] 
4B3B    89 56 FA                  mov         word ptr -0x6[bp],dx 
4B3E    C4 7E FA                  les         di,dword ptr -0x6[bp] 
4B41    B9 FF FF                  mov         cx,0xffff 
4B44    33 C0                     xor         ax,ax 
4B46    F2 AE                     repne scasb 
4B48    F7 D1                     not         cx 
4B4A    49                        dec         cx 
4B4B    31 D2                     xor         dx,dx 
4B4D    01 CB                     add         bx,cx 
4B4F    89 D1                     mov         cx,dx 
4B51    89 F0                     mov         ax,si 
4B53    11 D1                     adc         cx,dx 
4B55    8C DA                     mov         dx,ds 
4B57    E8 00 00                  call        memory_allowed_ 
4B5A    84 C0                     test        al,al 
4B5C    75 05                     jne         L$577 
4B5E    30 E4                     xor         ah,ah 
4B60    E9 9E 4E                  jmp         L$1046 
4B63                          L$577:
4B63    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4B66    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
4B6A    FF 74 0A                  push        word ptr 0xa[si] 
4B6D    8B 4C 04                  mov         cx,word ptr 0x4[si] 
4B70    8B 7C 02                  mov         di,word ptr 0x2[si] 
4B73    FF 76 FC                  push        word ptr -0x4[bp] 
4B76    01 F3                     add         bx,si 
4B78    FF 76 FA                  push        word ptr -0x6[bp] 
4B7B    8B 47 76                  mov         ax,word ptr 0x76[bx] 
4B7E    8B 57 78                  mov         dx,word ptr 0x78[bx] 
4B81    89 FB                     mov         bx,di 
4B83    9A 00 00 00 00            call        window_checkbox_ 
4B88    85 D2                     test        dx,dx 
4B8A    75 0E                     jne         L$578 
4B8C    85 C0                     test        ax,ax 
4B8E    75 0A                     jne         L$578 
4B90    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4B93    C7 04 FF FF               mov         word ptr [si],0xffff 
4B97    E9 EB 09                  jmp         L$617 
4B9A                          L$578:
4B9A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4B9D    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
4BA1    01 F3                     add         bx,si 
4BA3    C5 7F 76                  lds         di,dword ptr 0x76[bx] 
4BA6    8B 5D 28                  mov         bx,word ptr 0x28[di] 
4BA9    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4BAC    81 C3 FF 00               add         bx,0x00ff 
4BB0    89 1C                     mov         word ptr [si],bx 
4BB2    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
4BB6    01 F3                     add         bx,si 
4BB8    C5 7F 76                  lds         di,dword ptr 0x76[bx] 
4BBB    8B 5D 26                  mov         bx,word ptr 0x26[di] 
4BBE    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4BC1    4B                        dec         bx 
4BC2    89 5C 02                  mov         word ptr 0x2[si],bx 
4BC5    E9 BD 09                  jmp         L$617 
4BC8                          vpu_scrcall_textbox_update_:
4BC8    53                        push        bx 
4BC9    51                        push        cx 
4BCA    56                        push        si 
4BCB    57                        push        di 
4BCC    C8 06 00 00               enter       0x0006,0x00 
4BD0    89 C6                     mov         si,ax 
4BD2    89 56 FE                  mov         word ptr -0x2[bp],dx 
4BD5    8E DA                     mov         ds,dx 
4BD7    8B 5C 14                  mov         bx,word ptr 0x14[si] 
4BDA    8B 44 48                  mov         ax,word ptr 0x48[si] 
4BDD    C1 E3 02                  shl         bx,0x02 
4BE0    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
4BE3    01 C3                     add         bx,ax 
4BE5    8B 07                     mov         ax,word ptr [bx] 
4BE7    8B 57 02                  mov         dx,word ptr 0x2[bx] 
4BEA    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4BED    89 56 FC                  mov         word ptr -0x4[bp],dx 
4BF0    8B 54 06                  mov         dx,word ptr 0x6[si] 
4BF3    01 C2                     add         dx,ax 
4BF5    8B 5C 06                  mov         bx,word ptr 0x6[si] 
4BF8    89 56 FA                  mov         word ptr -0x6[bp],dx 
4BFB    C4 7E FA                  les         di,dword ptr -0x6[bp] 
4BFE    B9 FF FF                  mov         cx,0xffff 
4C01    33 C0                     xor         ax,ax 
4C03    F2 AE                     repne scasb 
4C05    F7 D1                     not         cx 
4C07    49                        dec         cx 
4C08    31 D2                     xor         dx,dx 
4C0A    01 CB                     add         bx,cx 
4C0C    89 D1                     mov         cx,dx 
4C0E    89 F0                     mov         ax,si 
4C10    11 D1                     adc         cx,dx 
4C12    8C DA                     mov         dx,ds 
4C14    E8 00 00                  call        memory_allowed_ 
4C17    84 C0                     test        al,al 
4C19    0F 84 68 09               je          L$617 
4C1D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4C20    6B 7C 08 12               imul        di,word ptr 0x8[si],0x0012 
4C24    01 F7                     add         di,si 
4C26    C5 5D 76                  lds         bx,dword ptr 0x76[di] 
4C29    8E 46 FE                  mov         es,word ptr -0x2[bp] 
4C2C    26 8B 44 02               mov         ax,word ptr es:0x2[si] 
4C30    3B 47 26                  cmp         ax,word ptr 0x26[bx] 
4C33    0F 83 4E 09               jae         L$617 
4C37    C1 E0 02                  shl         ax,0x02 
4C3A    C5 7F 18                  lds         di,dword ptr 0x18[bx] 
4C3D    01 C7                     add         di,ax 
4C3F    8B 4D 02                  mov         cx,word ptr 0x2[di] 
4C42    8B 1D                     mov         bx,word ptr [di] 
4C44    8E D9                     mov         ds,cx 
4C46    8B 47 0C                  mov         ax,word ptr 0xc[bx] 
4C49    8B 57 0E                  mov         dx,word ptr 0xe[bx] 
4C4C    9A 00 00 00 00            call        free_ 
4C51    8E D9                     mov         ds,cx 
4C53    8B 47 20                  mov         ax,word ptr 0x20[bx] 
4C56    BA 01 00                  mov         dx,0x0001 
4C59    40                        inc         ax 
4C5A    9A 00 00 00 00            call        calloc_ 
4C5F    8E D9                     mov         ds,cx 
4C61    89 47 0C                  mov         word ptr 0xc[bx],ax 
4C64    89 57 0E                  mov         word ptr 0xe[bx],dx 
4C67    8B 4E FC                  mov         cx,word ptr -0x4[bp] 
4C6A    FF 77 20                  push        word ptr 0x20[bx] 
4C6D    8B 47 0C                  mov         ax,word ptr 0xc[bx] 
4C70    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
4C73    9A 00 00 00 00            call        strncpy_ 
4C78                          L$579:
4C78    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4C7B    6B 44 08 12               imul        ax,word ptr 0x8[si],0x0012 
4C7F    8B 5C 02                  mov         bx,word ptr 0x2[si] 
4C82    01 C6                     add         si,ax 
4C84    8B 44 76                  mov         ax,word ptr 0x76[si] 
4C87    8B 54 78                  mov         dx,word ptr 0x78[si] 
4C8A    9A 00 00 00 00            call        window_drawelement_ 
4C8F    E9 F3 08                  jmp         L$617 
4C92                          vpu_scrcall_textbox_:
4C92    53                        push        bx 
4C93    51                        push        cx 
4C94    56                        push        si 
4C95    57                        push        di 
4C96    C8 08 00 00               enter       0x0008,0x00 
4C9A    89 C6                     mov         si,ax 
4C9C    89 56 FE                  mov         word ptr -0x2[bp],dx 
4C9F    8E DA                     mov         ds,dx 
4CA1    8B 44 14                  mov         ax,word ptr 0x14[si] 
4CA4    8B 5C 48                  mov         bx,word ptr 0x48[si] 
4CA7    C1 E0 02                  shl         ax,0x02 
4CAA    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
4CAD    01 C3                     add         bx,ax 
4CAF    8B 07                     mov         ax,word ptr [bx] 
4CB1    8B 7F 02                  mov         di,word ptr 0x2[bx] 
4CB4    8E DA                     mov         ds,dx 
4CB6    C7 46 F8 00 00            mov         word ptr -0x8[bp],0x0000 
4CBB    8B 54 06                  mov         dx,word ptr 0x6[si] 
4CBE    31 C9                     xor         cx,cx 
4CC0    01 C2                     add         dx,ax 
4CC2    8B 5C 0A                  mov         bx,word ptr 0xa[si] 
4CC5    89 56 FC                  mov         word ptr -0x4[bp],dx 
4CC8    8B 44 06                  mov         ax,word ptr 0x6[si] 
4CCB    8C DA                     mov         dx,ds 
4CCD    01 C3                     add         bx,ax 
4CCF    13 4E F8                  adc         cx,word ptr -0x8[bp] 
4CD2    89 F0                     mov         ax,si 
4CD4    89 7E FA                  mov         word ptr -0x6[bp],di 
4CD7    E8 00 00                  call        memory_allowed_ 
4CDA    84 C0                     test        al,al 
4CDC    75 05                     jne         L$580 
4CDE    30 E4                     xor         ah,ah 
4CE0    E9 1E 4D                  jmp         L$1046 
4CE3                          L$580:
4CE3    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4CE6    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
4CEA    FF 74 0A                  push        word ptr 0xa[si] 
4CED    8B 4C 04                  mov         cx,word ptr 0x4[si] 
4CF0    57                        push        di 
4CF1    8B 54 02                  mov         dx,word ptr 0x2[si] 
4CF4    FF 76 FC                  push        word ptr -0x4[bp] 
4CF7    01 F3                     add         bx,si 
4CF9    FF 74 0C                  push        word ptr 0xc[si] 
4CFC    8B 47 76                  mov         ax,word ptr 0x76[bx] 
4CFF    8B 7F 78                  mov         di,word ptr 0x78[bx] 
4D02    89 D3                     mov         bx,dx 
4D04    89 FA                     mov         dx,di 
4D06    9A 00 00 00 00            call        window_textbox_ 
4D0B    89 C7                     mov         di,ax 
4D0D    8E C2                     mov         es,dx 
4D0F    85 D2                     test        dx,dx 
4D11    75 0D                     jne         L$581 
4D13    85 C0                     test        ax,ax 
4D15    75 09                     jne         L$581 
4D17    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4D1A    C7 04 FF FF               mov         word ptr [si],0xffff 
4D1E    EB 2F                     jmp         L$582 
4D20                          L$581:
4D20    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4D23    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
4D27    01 F3                     add         bx,si 
4D29    C5 47 76                  lds         ax,dword ptr 0x76[bx] 
4D2C    89 C3                     mov         bx,ax 
4D2E    8B 57 28                  mov         dx,word ptr 0x28[bx] 
4D31    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4D34    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
4D38    81 C2 FF 00               add         dx,0x00ff 
4D3C    01 F3                     add         bx,si 
4D3E    89 14                     mov         word ptr [si],dx 
4D40    C5 47 76                  lds         ax,dword ptr 0x76[bx] 
4D43    89 C3                     mov         bx,ax 
4D45    8B 47 26                  mov         ax,word ptr 0x26[bx] 
4D48    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4D4B    48                        dec         ax 
4D4C    89 44 02                  mov         word ptr 0x2[si],ax 
4D4F                          L$582:
4D4F    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
4D52    26 89 45 26               mov         word ptr es:0x26[di],ax 
4D56    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
4D59    26 89 45 28               mov         word ptr es:0x28[di],ax 
4D5D    E9 25 08                  jmp         L$617 
4D60                          make_list_:
4D60    51                        push        cx 
4D61    56                        push        si 
4D62    57                        push        di 
4D63    C8 0C 00 00               enter       0x000c,0x00 
4D67    50                        push        ax 
4D68    52                        push        dx 
4D69    53                        push        bx 
4D6A    BA 04 00                  mov         dx,0x0004 
4D6D    89 D8                     mov         ax,bx 
4D6F    9A 00 00 00 00            call        calloc_ 
4D74    89 46 F4                  mov         word ptr -0xc[bp],ax 
4D77    89 56 F8                  mov         word ptr -0x8[bp],dx 
4D7A    85 D2                     test        dx,dx 
4D7C    75 15                     jne         L$584 
4D7E    85 C0                     test        ax,ax 
4D80    75 11                     jne         L$584 
4D82                          L$583:
4D82    8E 5E F0                  mov         ds,word ptr -0x10[bp] 
4D85    8B 5E F2                  mov         bx,word ptr -0xe[bp] 
4D88    31 C0                     xor         ax,ax 
4D8A    31 D2                     xor         dx,dx 
4D8C    C7 07 FF FF               mov         word ptr [bx],0xffff 
4D90    E9 03 01                  jmp         L$591 
4D93                          L$584:
4D93    01 DB                     add         bx,bx 
4D95    03 5E 0A                  add         bx,word ptr 0xa[bp] 
4D98    89 5E FC                  mov         word ptr -0x4[bp],bx 
4D9B    8B 5E 0C                  mov         bx,word ptr 0xc[bp] 
4D9E    89 5E F6                  mov         word ptr -0xa[bp],bx 
4DA1    8B 5E EE                  mov         bx,word ptr -0x12[bp] 
4DA4    C1 E3 02                  shl         bx,0x02 
4DA7    01 C3                     add         bx,ax 
4DA9    89 56 FA                  mov         word ptr -0x6[bp],dx 
4DAC    89 5E FE                  mov         word ptr -0x2[bp],bx 
4DAF                          L$585:
4DAF    83 46 FC FE               add         word ptr -0x4[bp],0xfffe 
4DB3    FF 4E EE                  dec         word ptr -0x12[bp] 
4DB6    83 46 FE FC               add         word ptr -0x2[bp],0xfffc 
4DBA    83 7E EE FF               cmp         word ptr -0x12[bp],0xffff 
4DBE    0F 84 CE 00               je          L$590 
4DC2    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
4DC5    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
4DC8    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
4DCB    8B 56 F0                  mov         dx,word ptr -0x10[bp] 
4DCE    31 C9                     xor         cx,cx 
4DD0    8B 1F                     mov         bx,word ptr [bx] 
4DD2    E8 00 00                  call        memory_allowed_ 
4DD5    84 C0                     test        al,al 
4DD7    74 D6                     je          L$585 
4DD9    8E 5E F0                  mov         ds,word ptr -0x10[bp] 
4DDC    8B 5E F2                  mov         bx,word ptr -0xe[bp] 
4DDF    8B 76 F2                  mov         si,word ptr -0xe[bp] 
4DE2    8B 5F 14                  mov         bx,word ptr 0x14[bx] 
4DE5    8B 44 48                  mov         ax,word ptr 0x48[si] 
4DE8    C1 E3 02                  shl         bx,0x02 
4DEB    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
4DEE    01 C3                     add         bx,ax 
4DF0    C4 3F                     les         di,dword ptr [bx] 
4DF2    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
4DF5    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
4DF8    03 3F                     add         di,word ptr [bx] 
4DFA    B9 FF FF                  mov         cx,0xffff 
4DFD    33 C0                     xor         ax,ax 
4DFF    F2 AE                     repne scasb 
4E01    F7 D1                     not         cx 
4E03    49                        dec         cx 
4E04    89 C8                     mov         ax,cx 
4E06    BA 01 00                  mov         dx,0x0001 
4E09    40                        inc         ax 
4E0A    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
4E0D    9A 00 00 00 00            call        calloc_ 
4E12    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
4E15    89 07                     mov         word ptr [bx],ax 
4E17    89 DF                     mov         di,bx 
4E19    89 57 02                  mov         word ptr 0x2[bx],dx 
4E1C    89 D0                     mov         ax,dx 
4E1E    8B 3D                     mov         di,word ptr [di] 
4E20    85 D2                     test        dx,dx 
4E22    75 3D                     jne         L$588 
4E24    85 FF                     test        di,di 
4E26    75 39                     jne         L$588 
4E28    8B 5E EE                  mov         bx,word ptr -0x12[bp] 
4E2B    8B 4E F8                  mov         cx,word ptr -0x8[bp] 
4E2E    C1 E3 02                  shl         bx,0x02 
4E31    8B 76 F2                  mov         si,word ptr -0xe[bp] 
4E34    03 5E F4                  add         bx,word ptr -0xc[bp] 
4E37                          L$586:
4E37    FF 46 EE                  inc         word ptr -0x12[bp] 
4E3A    C5 46 EE                  lds         ax,dword ptr -0x12[bp] 
4E3D    83 C3 04                  add         bx,0x0004 
4E40    3B 44 0E                  cmp         ax,word ptr 0xe[si] 
4E43    73 0E                     jae         L$587 
4E45    8E D9                     mov         ds,cx 
4E47    8B 07                     mov         ax,word ptr [bx] 
4E49    8B 57 02                  mov         dx,word ptr 0x2[bx] 
4E4C    9A 00 00 00 00            call        free_ 
4E51    EB E4                     jmp         L$586 
4E53                          L$587:
4E53    8B 46 F4                  mov         ax,word ptr -0xc[bp] 
4E56    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
4E59    9A 00 00 00 00            call        free_ 
4E5E    E9 21 FF                  jmp         L$583 
4E61                          L$588:
4E61    8E 5E F0                  mov         ds,word ptr -0x10[bp] 
4E64    89 F3                     mov         bx,si 
4E66    8B 5F 14                  mov         bx,word ptr 0x14[bx] 
4E69    8B 54 48                  mov         dx,word ptr 0x48[si] 
4E6C    C1 E3 02                  shl         bx,0x02 
4E6F    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
4E72    01 D3                     add         bx,dx 
4E74    8B 37                     mov         si,word ptr [bx] 
4E76    8B 57 02                  mov         dx,word ptr 0x2[bx] 
4E79    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
4E7C    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
4E7F    03 37                     add         si,word ptr [bx] 
4E81    8E DA                     mov         ds,dx 
4E83    8E C0                     mov         es,ax 
4E85    57                        push        di 
4E86                          L$589:
4E86    AC                        lodsb       
4E87    AA                        stosb       
4E88    3C 00                     cmp         al,0x00 
4E8A    75 FA                     jne         L$589 
4E8C    5F                        pop         di 
4E8D    E9 1F FF                  jmp         L$585 
4E90                          L$590:
4E90    8B 46 F4                  mov         ax,word ptr -0xc[bp] 
4E93    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
4E96                          L$591:
4E96    C9                        leave       
4E97    5F                        pop         di 
4E98    5E                        pop         si 
4E99    59                        pop         cx 
4E9A    C2 04 00                  ret         0x0004 
4E9D                          vpu_scrcall_textbuff_:
4E9D    53                        push        bx 
4E9E    51                        push        cx 
4E9F    56                        push        si 
4EA0    57                        push        di 
4EA1    C8 06 00 00               enter       0x0006,0x00 
4EA5    89 C6                     mov         si,ax 
4EA7    89 56 FE                  mov         word ptr -0x2[bp],dx 
4EAA    8E DA                     mov         ds,dx 
4EAC    8B 44 14                  mov         ax,word ptr 0x14[si] 
4EAF    8B 5C 48                  mov         bx,word ptr 0x48[si] 
4EB2    C1 E0 02                  shl         ax,0x02 
4EB5    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
4EB8    01 C3                     add         bx,ax 
4EBA    31 C9                     xor         cx,cx 
4EBC    8B 07                     mov         ax,word ptr [bx] 
4EBE    8B 57 02                  mov         dx,word ptr 0x2[bx] 
4EC1    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4EC4    89 56 FC                  mov         word ptr -0x4[bp],dx 
4EC7    8B 54 06                  mov         dx,word ptr 0x6[si] 
4ECA    8B 7C 0A                  mov         di,word ptr 0xa[si] 
4ECD    01 C2                     add         dx,ax 
4ECF    8B 5C 06                  mov         bx,word ptr 0x6[si] 
4ED2    89 56 FA                  mov         word ptr -0x6[bp],dx 
4ED5    31 C0                     xor         ax,ax 
4ED7    8C DA                     mov         dx,ds 
4ED9    01 FB                     add         bx,di 
4EDB    11 C1                     adc         cx,ax 
4EDD    89 F0                     mov         ax,si 
4EDF    E8 00 00                  call        memory_allowed_ 
4EE2    84 C0                     test        al,al 
4EE4    75 06                     jne         L$592 
4EE6    B8 01 00                  mov         ax,0x0001 
4EE9    E9 15 4B                  jmp         L$1046 
4EEC                          L$592:
4EEC    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4EEF    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
4EF3    57                        push        di 
4EF4    FF 76 FC                  push        word ptr -0x4[bp] 
4EF7    8B 4C 04                  mov         cx,word ptr 0x4[si] 
4EFA    FF 76 FA                  push        word ptr -0x6[bp] 
4EFD    8B 7C 02                  mov         di,word ptr 0x2[si] 
4F00    FF 74 0E                  push        word ptr 0xe[si] 
4F03    01 F3                     add         bx,si 
4F05    FF 74 0C                  push        word ptr 0xc[si] 
4F08    8B 47 76                  mov         ax,word ptr 0x76[bx] 
4F0B    8B 57 78                  mov         dx,word ptr 0x78[bx] 
4F0E    89 FB                     mov         bx,di 
4F10    9A 00 00 00 00            call        window_ml_textbox_ 
4F15    85 D2                     test        dx,dx 
4F17    75 11                     jne         L$593 
4F19    85 C0                     test        ax,ax 
4F1B    75 0D                     jne         L$593 
4F1D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4F20    B8 01 00                  mov         ax,0x0001 
4F23    C7 04 FF FF               mov         word ptr [si],0xffff 
4F27    E9 D7 4A                  jmp         L$1046 
4F2A                          L$593:
4F2A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4F2D    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
4F31    01 F3                     add         bx,si 
4F33    C5 7F 76                  lds         di,dword ptr 0x76[bx] 
4F36    8B 45 28                  mov         ax,word ptr 0x28[di] 
4F39    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4F3C    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
4F40    05 FF 00                  add         ax,0x00ff 
4F43    01 F3                     add         bx,si 
4F45    89 04                     mov         word ptr [si],ax 
4F47    C5 7F 76                  lds         di,dword ptr 0x76[bx] 
4F4A    8B 45 26                  mov         ax,word ptr 0x26[di] 
4F4D                          L$594:
4F4D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
4F50    48                        dec         ax 
4F51    89 44 02                  mov         word ptr 0x2[si],ax 
4F54    E9 2E 06                  jmp         L$617 
4F57                          vpu_scrcall_list_textbox_:
4F57    51                        push        cx 
4F58    56                        push        si 
4F59    57                        push        di 
4F5A    C8 0A 00 00               enter       0x000a,0x00 
4F5E    89 C6                     mov         si,ax 
4F60    89 56 FC                  mov         word ptr -0x4[bp],dx 
4F63    88 5E FE                  mov         byte ptr -0x2[bp],bl 
4F66    8E DA                     mov         ds,dx 
4F68    8B 44 14                  mov         ax,word ptr 0x14[si] 
4F6B    8B 7C 48                  mov         di,word ptr 0x48[si] 
4F6E    C1 E0 02                  shl         ax,0x02 
4F71    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
4F74    01 C7                     add         di,ax 
4F76    8B 05                     mov         ax,word ptr [di] 
4F78    8B 55 02                  mov         dx,word ptr 0x2[di] 
4F7B    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
4F7E    89 56 F8                  mov         word ptr -0x8[bp],dx 
4F81    8B 54 06                  mov         dx,word ptr 0x6[si] 
4F84    01 C2                     add         dx,ax 
4F86    8B 44 0E                  mov         ax,word ptr 0xe[si] 
4F89    31 C9                     xor         cx,cx 
4F8B    89 46 FA                  mov         word ptr -0x6[bp],ax 
4F8E    89 56 F6                  mov         word ptr -0xa[bp],dx 
4F91    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
4F94    8B 44 06                  mov         ax,word ptr 0x6[si] 
4F97    01 DB                     add         bx,bx 
4F99    31 D2                     xor         dx,dx 
4F9B    01 C3                     add         bx,ax 
4F9D    89 F0                     mov         ax,si 
4F9F    11 D1                     adc         cx,dx 
4FA1    8C DA                     mov         dx,ds 
4FA3    E8 00 00                  call        memory_allowed_ 
4FA6    84 C0                     test        al,al 
4FA8    0F 84 46 CC               je          L$272 
4FAC    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
4FAF    6B 7C 08 12               imul        di,word ptr 0x8[si],0x0012 
4FB3    FF 74 0E                  push        word ptr 0xe[si] 
4FB6    6A 00                     push        0x0000 
4FB8    8B 4C 04                  mov         cx,word ptr 0x4[si] 
4FBB    6A 00                     push        0x0000 
4FBD    8B 5C 02                  mov         bx,word ptr 0x2[si] 
4FC0    FF 74 0C                  push        word ptr 0xc[si] 
4FC3    01 F7                     add         di,si 
4FC5    FF 74 0A                  push        word ptr 0xa[si] 
4FC8    8B 45 76                  mov         ax,word ptr 0x76[di] 
4FCB    8B 55 78                  mov         dx,word ptr 0x78[di] 
4FCE    9A 00 00 00 00            call        window_list_ 
4FD3    89 C7                     mov         di,ax 
4FD5    89 D1                     mov         cx,dx 
4FD7    85 D2                     test        dx,dx 
4FD9    75 0E                     jne         L$596 
4FDB    85 C0                     test        ax,ax 
4FDD    75 0A                     jne         L$596 
4FDF                          L$595:
4FDF    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
4FE2    C7 04 FF FF               mov         word ptr [si],0xffff 
4FE6    E9 09 CC                  jmp         L$272 
4FE9                          L$596:
4FE9    FF 76 F8                  push        word ptr -0x8[bp] 
4FEC    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
4FEF    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
4FF2    FF 76 F6                  push        word ptr -0xa[bp] 
4FF5    89 F0                     mov         ax,si 
4FF7    E8 00 00                  call        make_list_ 
4FFA    85 D2                     test        dx,dx 
4FFC    75 04                     jne         L$597 
4FFE    85 C0                     test        ax,ax 
5000    74 DD                     je          L$595 
5002                          L$597:
5002    8E D9                     mov         ds,cx 
5004    89 45 14                  mov         word ptr 0x14[di],ax 
5007    89 55 16                  mov         word ptr 0x16[di],dx 
500A    80 7E FE 00               cmp         byte ptr -0x2[bp],0x00 
500E    74 04                     je          L$598 
5010    80 65 02 FB               and         byte ptr 0x2[di],0xfb 
5014                          L$598:
5014    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
5017    6B 7C 08 12               imul        di,word ptr 0x8[si],0x0012 
501B    01 F7                     add         di,si 
501D    C5 5D 76                  lds         bx,dword ptr 0x76[di] 
5020    8B 7F 28                  mov         di,word ptr 0x28[bx] 
5023    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
5026    81 C7 FF 00               add         di,0x00ff 
502A    89 3C                     mov         word ptr [si],di 
502C    6B 7C 08 12               imul        di,word ptr 0x8[si],0x0012 
5030    01 F7                     add         di,si 
5032    C5 5D 76                  lds         bx,dword ptr 0x76[di] 
5035    8B 7F 26                  mov         di,word ptr 0x26[bx] 
5038    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
503B    4F                        dec         di 
503C    89 7C 02                  mov         word ptr 0x2[si],di 
503F    E9 B0 CB                  jmp         L$272 
5042                          vpu_scrcall_list_:
5042    53                        push        bx 
5043    31 DB                     xor         bx,bx 
5045                          L$599:
5045    E8 00 00                  call        vpu_scrcall_list_textbox_ 
5048    E9 0E 2E                  jmp         L$903 
504B                          vpu_scrcall_mltext_:
504B    53                        push        bx 
504C    BB 01 00                  mov         bx,0x0001 
504F    EB F4                     jmp         L$599 
5051                          vpu_scrcall_updatemltext_:
5051    53                        push        bx 
5052    51                        push        cx 
5053    56                        push        si 
5054    57                        push        di 
5055    C8 08 00 00               enter       0x0008,0x00 
5059    89 C6                     mov         si,ax 
505B    89 56 FE                  mov         word ptr -0x2[bp],dx 
505E    8E DA                     mov         ds,dx 
5060    8B 5C 14                  mov         bx,word ptr 0x14[si] 
5063    8B 44 48                  mov         ax,word ptr 0x48[si] 
5066    C1 E3 02                  shl         bx,0x02 
5069    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
506C    01 C3                     add         bx,ax 
506E    8B 17                     mov         dx,word ptr [bx] 
5070    8B 47 02                  mov         ax,word ptr 0x2[bx] 
5073    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5076    89 46 FA                  mov         word ptr -0x6[bp],ax 
5079    8B 44 06                  mov         ax,word ptr 0x6[si] 
507C    01 D0                     add         ax,dx 
507E    89 46 F8                  mov         word ptr -0x8[bp],ax 
5081    8B 44 0E                  mov         ax,word ptr 0xe[si] 
5084    89 46 FC                  mov         word ptr -0x4[bp],ax 
5087    31 C9                     xor         cx,cx 
5089    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
508C    8B 44 06                  mov         ax,word ptr 0x6[si] 
508F    01 DB                     add         bx,bx 
5091    31 D2                     xor         dx,dx 
5093    01 C3                     add         bx,ax 
5095    89 F0                     mov         ax,si 
5097    11 D1                     adc         cx,dx 
5099    8C DA                     mov         dx,ds 
509B    E8 00 00                  call        memory_allowed_ 
509E    84 C0                     test        al,al 
50A0    0F 84 E1 04               je          L$617 
50A4    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
50A7    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
50AB    01 F3                     add         bx,si 
50AD    C5 7F 76                  lds         di,dword ptr 0x76[bx] 
50B0    8E 46 FE                  mov         es,word ptr -0x2[bp] 
50B3    26 8B 44 02               mov         ax,word ptr es:0x2[si] 
50B7    3B 45 26                  cmp         ax,word ptr 0x26[di] 
50BA    0F 83 C7 04               jae         L$617 
50BE    89 C3                     mov         bx,ax 
50C0    C1 E3 02                  shl         bx,0x02 
50C3    C5 45 18                  lds         ax,dword ptr 0x18[di] 
50C6    01 C3                     add         bx,ax 
50C8    8B 3F                     mov         di,word ptr [bx] 
50CA    8B 4F 02                  mov         cx,word ptr 0x2[bx] 
50CD                          L$600:
50CD    8E D9                     mov         ds,cx 
50CF    8B 45 20                  mov         ax,word ptr 0x20[di] 
50D2    89 C2                     mov         dx,ax 
50D4    4A                        dec         dx 
50D5    89 55 20                  mov         word ptr 0x20[di],dx 
50D8    85 C0                     test        ax,ax 
50DA    74 19                     je          L$601 
50DC    89 D0                     mov         ax,dx 
50DE    8B 5D 14                  mov         bx,word ptr 0x14[di] 
50E1    C1 E0 02                  shl         ax,0x02 
50E4    8E 5D 16                  mov         ds,word ptr 0x16[di] 
50E7    01 C3                     add         bx,ax 
50E9    8B 07                     mov         ax,word ptr [bx] 
50EB    8B 57 02                  mov         dx,word ptr 0x2[bx] 
50EE    9A 00 00 00 00            call        free_ 
50F3    EB D8                     jmp         L$600 
50F5                          L$601:
50F5    8B 45 14                  mov         ax,word ptr 0x14[di] 
50F8    8B 55 16                  mov         dx,word ptr 0x16[di] 
50FB    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
50FE    9A 00 00 00 00            call        free_ 
5103    FF 76 FA                  push        word ptr -0x6[bp] 
5106    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
5109    FF 76 F8                  push        word ptr -0x8[bp] 
510C    89 F0                     mov         ax,si 
510E    E8 00 00                  call        make_list_ 
5111    85 D2                     test        dx,dx 
5113    75 04                     jne         L$602 
5115    85 C0                     test        ax,ax 
5117    74 16                     je          L$603 
5119                          L$602:
5119    8E D9                     mov         ds,cx 
511B    89 45 14                  mov         word ptr 0x14[di],ax 
511E    89 55 16                  mov         word ptr 0x16[di],dx 
5121    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5124    8B 44 0E                  mov         ax,word ptr 0xe[si] 
5127    8E D9                     mov         ds,cx 
5129    89 45 20                  mov         word ptr 0x20[di],ax 
512C    E9 49 FB                  jmp         L$579 
512F                          L$603:
512F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5132    C7 04 FF FF               mov         word ptr [si],0xffff 
5136    E9 3F FB                  jmp         L$579 
5139                          vpu_scrcall_scrollbar_:
5139    53                        push        bx 
513A    51                        push        cx 
513B    56                        push        si 
513C    57                        push        di 
513D    C8 0E 00 00               enter       0x000e,0x00 
5141    89 C6                     mov         si,ax 
5143    89 56 FE                  mov         word ptr -0x2[bp],dx 
5146    8E DA                     mov         ds,dx 
5148    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
514C    01 C3                     add         bx,ax 
514E    8B 47 78                  mov         ax,word ptr 0x78[bx] 
5151    89 46 FC                  mov         word ptr -0x4[bp],ax 
5154    8B 44 02                  mov         ax,word ptr 0x2[si] 
5157    89 46 F4                  mov         word ptr -0xc[bp],ax 
515A    8B 44 04                  mov         ax,word ptr 0x4[si] 
515D    89 46 F6                  mov         word ptr -0xa[bp],ax 
5160    8B 44 0A                  mov         ax,word ptr 0xa[si] 
5163    8B 4C 06                  mov         cx,word ptr 0x6[si] 
5166    89 46 FA                  mov         word ptr -0x6[bp],ax 
5169    8B 44 0C                  mov         ax,word ptr 0xc[si] 
516C    8B 7F 76                  mov         di,word ptr 0x76[bx] 
516F    89 46 F8                  mov         word ptr -0x8[bp],ax 
5172    8B 44 0E                  mov         ax,word ptr 0xe[si] 
5175    83 F9 02                  cmp         cx,0x0002 
5178    73 3B                     jae         L$607 
517A    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
517D    3B 45 28                  cmp         ax,word ptr 0x28[di] 
5180    72 0C                     jb          L$605 
5182                          L$604:
5182    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5185    31 C0                     xor         ax,ax 
5187    C7 04 FF FF               mov         word ptr [si],0xffff 
518B    E9 73 48                  jmp         L$1046 
518E                          L$605:
518E    89 C3                     mov         bx,ax 
5190    C1 E3 02                  shl         bx,0x02 
5193    85 C9                     test        cx,cx 
5195    75 0F                     jne         L$606 
5197    C5 55 18                  lds         dx,dword ptr 0x18[di] 
519A    01 D3                     add         bx,dx 
519C    8B 17                     mov         dx,word ptr [bx] 
519E    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
51A1    83 C2 1A                  add         dx,0x001a 
51A4    EB 24                     jmp         L$608 
51A6                          L$606:
51A6    C5 55 18                  lds         dx,dword ptr 0x18[di] 
51A9    01 D3                     add         bx,dx 
51AB    8B 17                     mov         dx,word ptr [bx] 
51AD    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
51B0    83 C2 18                  add         dx,0x0018 
51B3    EB 15                     jmp         L$608 
51B5                          L$607:
51B5    3D FF 00                  cmp         ax,0x00ff 
51B8    73 C8                     jae         L$604 
51BA    89 C2                     mov         dx,ax 
51BC    01 C2                     add         dx,ax 
51BE    89 56 F2                  mov         word ptr -0xe[bp],dx 
51C1    8B 54 58                  mov         dx,word ptr 0x58[si] 
51C4    8B 5C 5A                  mov         bx,word ptr 0x5a[si] 
51C7    03 56 F2                  add         dx,word ptr -0xe[bp] 
51CA                          L$608:
51CA    53                        push        bx 
51CB    52                        push        dx 
51CC    50                        push        ax 
51CD    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
51D0    FF 76 F8                  push        word ptr -0x8[bp] 
51D3    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
51D6    FF 76 FA                  push        word ptr -0x6[bp] 
51D9    89 F8                     mov         ax,di 
51DB    51                        push        cx 
51DC    8B 4E F6                  mov         cx,word ptr -0xa[bp] 
51DF    9A 00 00 00 00            call        window_scrollbar_ 
51E4    85 D2                     test        dx,dx 
51E6    75 04                     jne         L$609 
51E8    85 C0                     test        ax,ax 
51EA    74 96                     je          L$604 
51EC                          L$609:
51EC    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
51EF    B9 03 00                  mov         cx,0x0003 
51F2    BB 01 00                  mov         bx,0x0001 
51F5    8B 45 28                  mov         ax,word ptr 0x28[di] 
51F8    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
51FB    05 FF 00                  add         ax,0x00ff 
51FE    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
5201    89 04                     mov         word ptr [si],ax 
5203    89 F8                     mov         ax,di 
5205    9A 00 00 00 00            call        draw_window_ 
520A    E9 78 03                  jmp         L$617 
520D                          vpu_scrcall_icon_:
520D    53                        push        bx 
520E    51                        push        cx 
520F    56                        push        si 
5210    57                        push        di 
5211    C8 08 00 00               enter       0x0008,0x00 
5215    89 C6                     mov         si,ax 
5217    89 56 FE                  mov         word ptr -0x2[bp],dx 
521A    8E DA                     mov         ds,dx 
521C    8B 44 14                  mov         ax,word ptr 0x14[si] 
521F    8B 5C 48                  mov         bx,word ptr 0x48[si] 
5222    C1 E0 02                  shl         ax,0x02 
5225    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
5228    01 C3                     add         bx,ax 
522A    8B 07                     mov         ax,word ptr [bx] 
522C    8B 57 02                  mov         dx,word ptr 0x2[bx] 
522F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5232    89 56 FC                  mov         word ptr -0x4[bp],dx 
5235    8B 54 06                  mov         dx,word ptr 0x6[si] 
5238    01 C2                     add         dx,ax 
523A    89 56 F8                  mov         word ptr -0x8[bp],dx 
523D    8B 5C 06                  mov         bx,word ptr 0x6[si] 
5240    8B 7E F8                  mov         di,word ptr -0x8[bp] 
5243    8B 54 0A                  mov         dx,word ptr 0xa[si] 
5246    8E 46 FC                  mov         es,word ptr -0x4[bp] 
5249    01 C2                     add         dx,ax 
524B    B9 FF FF                  mov         cx,0xffff 
524E    33 C0                     xor         ax,ax 
5250    F2 AE                     repne scasb 
5252    F7 D1                     not         cx 
5254    49                        dec         cx 
5255    89 56 FA                  mov         word ptr -0x6[bp],dx 
5258    31 D2                     xor         dx,dx 
525A    01 CB                     add         bx,cx 
525C    89 D1                     mov         cx,dx 
525E    89 F0                     mov         ax,si 
5260    11 D1                     adc         cx,dx 
5262    8C DA                     mov         dx,ds 
5264    E8 00 00                  call        memory_allowed_ 
5267    84 C0                     test        al,al 
5269    0F 84 18 03               je          L$617 
526D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5270    8B 7E FA                  mov         di,word ptr -0x6[bp] 
5273    8B 5C 0A                  mov         bx,word ptr 0xa[si] 
5276    8E 46 FC                  mov         es,word ptr -0x4[bp] 
5279    31 D2                     xor         dx,dx 
527B    B9 FF FF                  mov         cx,0xffff 
527E    33 C0                     xor         ax,ax 
5280    F2 AE                     repne scasb 
5282    F7 D1                     not         cx 
5284    49                        dec         cx 
5285    01 CB                     add         bx,cx 
5287    89 D1                     mov         cx,dx 
5289    89 F0                     mov         ax,si 
528B    11 D1                     adc         cx,dx 
528D    8C DA                     mov         dx,ds 
528F    E8 00 00                  call        memory_allowed_ 
5292    84 C0                     test        al,al 
5294    0F 84 ED 02               je          L$617 
5298    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
529B    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
529F    66 FF 76 FA               push        dword ptr -0x6[bp] 
52A3    8B 4C 04                  mov         cx,word ptr 0x4[si] 
52A6    8B 44 02                  mov         ax,word ptr 0x2[si] 
52A9    FF 76 FC                  push        word ptr -0x4[bp] 
52AC    01 F3                     add         bx,si 
52AE    FF 76 F8                  push        word ptr -0x8[bp] 
52B1    8B 57 76                  mov         dx,word ptr 0x76[bx] 
52B4    8B 7F 78                  mov         di,word ptr 0x78[bx] 
52B7    89 C3                     mov         bx,ax 
52B9    89 D0                     mov         ax,dx 
52BB    89 FA                     mov         dx,di 
52BD    9A 00 00 00 00            call        window_icon_ 
52C2    85 D2                     test        dx,dx 
52C4    0F 85 28 F8               jne         L$576 
52C8    85 C0                     test        ax,ax 
52CA    0F 85 22 F8               jne         L$576 
52CE    E9 4B F3                  jmp         L$550 
52D1                          vpu_scrcall_circle_:
52D1    53                        push        bx 
52D2    51                        push        cx 
52D3    56                        push        si 
52D4    57                        push        di 
52D5    89 C3                     mov         bx,ax 
52D7    8E DA                     mov         ds,dx 
52D9    6B 7F 08 12               imul        di,word ptr 0x8[bx],0x0012 
52DD    01 C7                     add         di,ax 
52DF    C4 75 76                  les         si,dword ptr 0x76[di] 
52E2    36 0F B6 16 00 00         movzx       dx,byte ptr ss:__FONT_HEIGHT 
52E8    26 8B 44 04               mov         ax,word ptr es:0x4[si] 
52EC    26 8B 74 06               mov         si,word ptr es:0x6[si] 
52F0    0F B6 4F 06               movzx       cx,byte ptr 0x6[bx] 
52F4    03 77 04                  add         si,word ptr 0x4[bx] 
52F7    03 47 02                  add         ax,word ptr 0x2[bx] 
52FA    01 F2                     add         dx,si 
52FC    8B 77 0A                  mov         si,word ptr 0xa[bx] 
52FF    42                        inc         dx 
5300    42                        inc         dx 
5301    89 F3                     mov         bx,si 
5303    9A 00 00 00 00            call        draw_circle_ 
5308    E9 6E F6                  jmp         L$572 
530B                          vpu_scrcall_line_:
530B    53                        push        bx 
530C    51                        push        cx 
530D    56                        push        si 
530E    57                        push        di 
530F    C8 02 00 00               enter       0x0002,0x00 
5313    89 C3                     mov         bx,ax 
5315    8E DA                     mov         ds,dx 
5317    6B 7F 08 12               imul        di,word ptr 0x8[bx],0x0012 
531B    01 C7                     add         di,ax 
531D    C4 75 76                  les         si,dword ptr 0x76[di] 
5320    36 0F B6 16 00 00         movzx       dx,byte ptr ss:__FONT_HEIGHT 
5326    26 8B 7C 06               mov         di,word ptr es:0x6[si] 
532A    26 8B 44 04               mov         ax,word ptr es:0x4[si] 
532E    03 7F 04                  add         di,word ptr 0x4[bx] 
5331    89 D1                     mov         cx,dx 
5333    01 D7                     add         di,dx 
5335    03 47 02                  add         ax,word ptr 0x2[bx] 
5338    47                        inc         di 
5339    47                        inc         di 
533A    0F B6 57 06               movzx       dx,byte ptr 0x6[bx] 
533E    89 7E FE                  mov         word ptr -0x2[bp],di 
5341    52                        push        dx 
5342    26 8B 7C 04               mov         di,word ptr es:0x4[si] 
5346    26 8B 74 06               mov         si,word ptr es:0x6[si] 
534A    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
534D    03 77 0C                  add         si,word ptr 0xc[bx] 
5350    03 7F 0A                  add         di,word ptr 0xa[bx] 
5353    01 F1                     add         cx,si 
5355    89 FB                     mov         bx,di 
5357    41                        inc         cx 
5358    41                        inc         cx 
5359    9A 00 00 00 00            call        draw_line_ 
535E    E9 24 02                  jmp         L$617 
5361                          vpu_scrcall_rectangle_:
5361    53                        push        bx 
5362    51                        push        cx 
5363    56                        push        si 
5364    57                        push        di 
5365    89 C3                     mov         bx,ax 
5367    8E DA                     mov         ds,dx 
5369    6B 7F 08 12               imul        di,word ptr 0x8[bx],0x0012 
536D    01 C7                     add         di,ax 
536F    C4 75 76                  les         si,dword ptr 0x76[di] 
5372    36 0F B6 16 00 00         movzx       dx,byte ptr ss:__FONT_HEIGHT 
5378    26 8B 44 04               mov         ax,word ptr es:0x4[si] 
537C    26 8B 74 06               mov         si,word ptr es:0x6[si] 
5380    8B 4F 0C                  mov         cx,word ptr 0xc[bx] 
5383    03 77 04                  add         si,word ptr 0x4[bx] 
5386    03 47 02                  add         ax,word ptr 0x2[bx] 
5389    01 F2                     add         dx,si 
538B    8B 77 0A                  mov         si,word ptr 0xa[bx] 
538E    0F B6 5F 06               movzx       bx,byte ptr 0x6[bx] 
5392    42                        inc         dx 
5393    42                        inc         dx 
5394    53                        push        bx 
5395    89 F3                     mov         bx,si 
5397    9A 00 00 00 00            call        draw_rectangle_ 
539C    E9 DA F5                  jmp         L$572 
539F                          vpu_scrcall_temptext_:
539F    53                        push        bx 
53A0    51                        push        cx 
53A1    56                        push        si 
53A2    57                        push        di 
53A3    C8 0C 00 00               enter       0x000c,0x00 
53A7    89 C6                     mov         si,ax 
53A9    89 56 FE                  mov         word ptr -0x2[bp],dx 
53AC    8E DA                     mov         ds,dx 
53AE    8B 44 14                  mov         ax,word ptr 0x14[si] 
53B1    8B 5C 48                  mov         bx,word ptr 0x48[si] 
53B4    C1 E0 02                  shl         ax,0x02 
53B7    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
53BA    01 C3                     add         bx,ax 
53BC    8B 07                     mov         ax,word ptr [bx] 
53BE    8B 57 02                  mov         dx,word ptr 0x2[bx] 
53C1    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
53C4    6B 7C 08 12               imul        di,word ptr 0x8[si],0x0012 
53C8    89 56 F8                  mov         word ptr -0x8[bp],dx 
53CB    01 F7                     add         di,si 
53CD    8B 54 06                  mov         dx,word ptr 0x6[si] 
53D0    C5 5D 76                  lds         bx,dword ptr 0x76[di] 
53D3    01 C2                     add         dx,ax 
53D5    8B 47 04                  mov         ax,word ptr 0x4[bx] 
53D8    8E 46 FE                  mov         es,word ptr -0x2[bp] 
53DB    89 46 FC                  mov         word ptr -0x4[bp],ax 
53DE    26 8B 44 02               mov         ax,word ptr es:0x2[si] 
53E2    8B 7F 06                  mov         di,word ptr 0x6[bx] 
53E5    01 46 FC                  add         word ptr -0x4[bp],ax 
53E8    26 03 7C 04               add         di,word ptr es:0x4[si] 
53EC    36 0F B6 06 00 00         movzx       ax,byte ptr ss:__FONT_HEIGHT 
53F2    01 F8                     add         ax,di 
53F4    40                        inc         ax 
53F5    40                        inc         ax 
53F6    89 56 F4                  mov         word ptr -0xc[bp],dx 
53F9    89 46 F6                  mov         word ptr -0xa[bp],ax 
53FC    8B 47 04                  mov         ax,word ptr 0x4[bx] 
53FF    31 D2                     xor         dx,dx 
5401    89 46 FA                  mov         word ptr -0x6[bp],ax 
5404    8B 47 12                  mov         ax,word ptr 0x12[bx] 
5407    06                        push        es 
5408    1F                        pop         ds 
5409    8B 7E F4                  mov         di,word ptr -0xc[bp] 
540C    8B 5C 06                  mov         bx,word ptr 0x6[si] 
540F    8E 46 F8                  mov         es,word ptr -0x8[bp] 
5412    01 46 FA                  add         word ptr -0x6[bp],ax 
5415    B9 FF FF                  mov         cx,0xffff 
5418    33 C0                     xor         ax,ax 
541A    F2 AE                     repne scasb 
541C    F7 D1                     not         cx 
541E    49                        dec         cx 
541F    01 CB                     add         bx,cx 
5421    89 D1                     mov         cx,dx 
5423    89 F0                     mov         ax,si 
5425    11 D1                     adc         cx,dx 
5427    8C DA                     mov         dx,ds 
5429    E8 00 00                  call        memory_allowed_ 
542C    84 C0                     test        al,al 
542E    75 05                     jne         L$610 
5430    30 E4                     xor         ah,ah 
5432    E9 CC 45                  jmp         L$1046 
5435                          L$610:
5435    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5438    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
543B    FF 74 0C                  push        word ptr 0xc[si] 
543E    36 0F B6 06 00 00         movzx       ax,byte ptr ss:__FONT_HEIGHT 
5444    FF 76 FA                  push        word ptr -0x6[bp] 
5447    8B 4E F8                  mov         cx,word ptr -0x8[bp] 
544A    50                        push        ax 
544B    0F B6 44 0A               movzx       ax,byte ptr 0xa[si] 
544F    8B 56 F6                  mov         dx,word ptr -0xa[bp] 
5452    50                        push        ax 
5453    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
5456    9A 00 00 00 00            call        gprint_text_ 
545B    E9 27 01                  jmp         L$617 
545E                          vpu_scrcall_dialog_:
545E    53                        push        bx 
545F    51                        push        cx 
5460    56                        push        si 
5461    57                        push        di 
5462    C8 10 00 00               enter       0x0010,0x00 
5466    89 C6                     mov         si,ax 
5468    89 56 FE                  mov         word ptr -0x2[bp],dx 
546B    8E DA                     mov         ds,dx 
546D    8B 5C 14                  mov         bx,word ptr 0x14[si] 
5470    8B 44 48                  mov         ax,word ptr 0x48[si] 
5473    C1 E3 02                  shl         bx,0x02 
5476    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
5479    01 C3                     add         bx,ax 
547B    8B 07                     mov         ax,word ptr [bx] 
547D    8B 57 02                  mov         dx,word ptr 0x2[bx] 
5480    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5483    89 56 FC                  mov         word ptr -0x4[bp],dx 
5486    89 56 F2                  mov         word ptr -0xe[bp],dx 
5489    8B 54 02                  mov         dx,word ptr 0x2[si] 
548C    01 C2                     add         dx,ax 
548E    89 56 F0                  mov         word ptr -0x10[bp],dx 
5491    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
5494    89 56 F4                  mov         word ptr -0xc[bp],dx 
5497    8B 54 04                  mov         dx,word ptr 0x4[si] 
549A    01 C2                     add         dx,ax 
549C    8B 5C 04                  mov         bx,word ptr 0x4[si] 
549F    89 56 FA                  mov         word ptr -0x6[bp],dx 
54A2    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
54A5    8B 7E FA                  mov         di,word ptr -0x6[bp] 
54A8    89 56 F8                  mov         word ptr -0x8[bp],dx 
54AB    8B 54 06                  mov         dx,word ptr 0x6[si] 
54AE    8E 46 FC                  mov         es,word ptr -0x4[bp] 
54B1    01 C2                     add         dx,ax 
54B3    B9 FF FF                  mov         cx,0xffff 
54B6    33 C0                     xor         ax,ax 
54B8    F2 AE                     repne scasb 
54BA    F7 D1                     not         cx 
54BC    49                        dec         cx 
54BD    89 56 F6                  mov         word ptr -0xa[bp],dx 
54C0    31 D2                     xor         dx,dx 
54C2    01 CB                     add         bx,cx 
54C4    89 D1                     mov         cx,dx 
54C6    89 F0                     mov         ax,si 
54C8    11 D1                     adc         cx,dx 
54CA    8C DA                     mov         dx,ds 
54CC    E8 00 00                  call        memory_allowed_ 
54CF    84 C0                     test        al,al 
54D1    75 2E                     jne         L$612 
54D3    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
54D6    8B 7E F0                  mov         di,word ptr -0x10[bp] 
54D9    8B 5C 02                  mov         bx,word ptr 0x2[si] 
54DC    8E 46 FC                  mov         es,word ptr -0x4[bp] 
54DF    31 D2                     xor         dx,dx 
54E1    B9 FF FF                  mov         cx,0xffff 
54E4    33 C0                     xor         ax,ax 
54E6    F2 AE                     repne scasb 
54E8    F7 D1                     not         cx 
54EA    49                        dec         cx 
54EB    01 CB                     add         bx,cx 
54ED    89 D1                     mov         cx,dx 
54EF    89 F0                     mov         ax,si 
54F1    11 D1                     adc         cx,dx 
54F3    8C DA                     mov         dx,ds 
54F5    E8 00 00                  call        memory_allowed_ 
54F8    84 C0                     test        al,al 
54FA    75 05                     jne         L$612 
54FC                          L$611:
54FC    30 E4                     xor         ah,ah 
54FE    E9 00 45                  jmp         L$1046 
5501                          L$612:
5501    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5504    8B 44 06                  mov         ax,word ptr 0x6[si] 
5507    85 C0                     test        ax,ax 
5509    74 24                     je          L$613 
550B    C4 7E F6                  les         di,dword ptr -0xa[bp] 
550E    89 C3                     mov         bx,ax 
5510    B9 FF FF                  mov         cx,0xffff 
5513    33 C0                     xor         ax,ax 
5515    F2 AE                     repne scasb 
5517    F7 D1                     not         cx 
5519    49                        dec         cx 
551A    31 D2                     xor         dx,dx 
551C    01 CB                     add         bx,cx 
551E    89 D1                     mov         cx,dx 
5520    89 F0                     mov         ax,si 
5522    11 D1                     adc         cx,dx 
5524    8C DA                     mov         dx,ds 
5526    E8 00 00                  call        memory_allowed_ 
5529    84 C0                     test        al,al 
552B    75 08                     jne         L$614 
552D    EB CD                     jmp         L$611 
552F                          L$613:
552F    89 46 F6                  mov         word ptr -0xa[bp],ax 
5532    89 46 F8                  mov         word ptr -0x8[bp],ax 
5535                          L$614:
5535    66 FF 76 F6               push        dword ptr -0xa[bp] 
5539    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
553C    FF 76 F2                  push        word ptr -0xe[bp] 
553F    8B 44 08                  mov         ax,word ptr 0x8[si] 
5542    FF 76 F0                  push        word ptr -0x10[bp] 
5545    30 C0                     xor         al,al 
5547    FF 76 F4                  push        word ptr -0xc[bp] 
554A    C1 E8 08                  shr         ax,0x08 
554D    FF 76 FA                  push        word ptr -0x6[bp] 
5550    8B 7E FA                  mov         di,word ptr -0x6[bp] 
5553    50                        push        ax 
5554    8B 44 08                  mov         ax,word ptr 0x8[si] 
5557    FF 74 06                  push        word ptr 0x6[si] 
555A    30 E4                     xor         ah,ah 
555C    8E 46 F4                  mov         es,word ptr -0xc[bp] 
555F    50                        push        ax 
5560    BA FF FF                  mov         dx,0xffff 
5563    B9 FF FF                  mov         cx,0xffff 
5566    33 C0                     xor         ax,ax 
5568    F2 AE                     repne scasb 
556A    F7 D1                     not         cx 
556C    49                        dec         cx 
556D    89 CB                     mov         bx,cx 
556F    89 D0                     mov         ax,dx 
5571    C1 E3 03                  shl         bx,0x03 
5574    B9 32 00                  mov         cx,0x0032 
5577    81 C3 AA 00               add         bx,0x00aa 
557B    9A 00 00 00 00            call        dialog_ 
5580                          L$615:
5580    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5583                          L$616:
5583    89 04                     mov         word ptr [si],ax 
5585                          L$617:
5585    31 C0                     xor         ax,ax 
5587    E9 77 44                  jmp         L$1046 
558A                          vpu_scrcall_xpm2img_:
558A    53                        push        bx 
558B    51                        push        cx 
558C    56                        push        si 
558D    57                        push        di 
558E    C8 A8 00 00               enter       0x00a8,0x00 
5592    81 ED 80 00               sub         bp,0x0080 
5596    89 C6                     mov         si,ax 
5598    89 56 7E                  mov         word ptr 0x7e[bp],dx 
559B    8E DA                     mov         ds,dx 
559D    8B 5C 14                  mov         bx,word ptr 0x14[si] 
55A0    8B 44 48                  mov         ax,word ptr 0x48[si] 
55A3    C1 E3 02                  shl         bx,0x02 
55A6    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
55A9    01 C3                     add         bx,ax 
55AB    8B 07                     mov         ax,word ptr [bx] 
55AD    8B 57 02                  mov         dx,word ptr 0x2[bx] 
55B0    8E 5E 7E                  mov         ds,word ptr 0x7e[bp] 
55B3    89 56 7C                  mov         word ptr 0x7c[bp],dx 
55B6    8B 54 06                  mov         dx,word ptr 0x6[si] 
55B9    01 C2                     add         dx,ax 
55BB    8B 5C 06                  mov         bx,word ptr 0x6[si] 
55BE    89 56 7A                  mov         word ptr 0x7a[bp],dx 
55C1    C4 7E 7A                  les         di,dword ptr 0x7a[bp] 
55C4    B9 FF FF                  mov         cx,0xffff 
55C7    33 C0                     xor         ax,ax 
55C9    F2 AE                     repne scasb 
55CB    F7 D1                     not         cx 
55CD    49                        dec         cx 
55CE    31 D2                     xor         dx,dx 
55D0    01 CB                     add         bx,cx 
55D2    89 D1                     mov         cx,dx 
55D4    89 F0                     mov         ax,si 
55D6    11 D1                     adc         cx,dx 
55D8    8C DA                     mov         dx,ds 
55DA    E8 00 00                  call        memory_allowed_ 
55DD    84 C0                     test        al,al 
55DF    75 04                     jne         L$618 
55E1    30 E4                     xor         ah,ah 
55E3    EB 50                     jmp         L$620 
55E5                          L$618:
55E5    FF 76 7C                  push        word ptr 0x7c[bp] 
55E8    8D 5E D8                  lea         bx,-0x28[bp] 
55EB    8B 56 7E                  mov         dx,word ptr 0x7e[bp] 
55EE    8C D1                     mov         cx,ss 
55F0    FF 76 7A                  push        word ptr 0x7a[bp] 
55F3    89 F0                     mov         ax,si 
55F5    0E                        push        cs 
55F6    E8 00 00                  call        append_path_ 
55F9    8E 5E 7E                  mov         ds,word ptr 0x7e[bp] 
55FC    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
5600    16                        push        ss 
5601    8D 56 D8                  lea         dx,-0x28[bp] 
5604    52                        push        dx 
5605    8B 4C 04                  mov         cx,word ptr 0x4[si] 
5608    8B 44 02                  mov         ax,word ptr 0x2[si] 
560B    FF 74 0C                  push        word ptr 0xc[si] 
560E    01 F3                     add         bx,si 
5610    FF 74 0A                  push        word ptr 0xa[si] 
5613    8B 57 76                  mov         dx,word ptr 0x76[bx] 
5616    8B 7F 78                  mov         di,word ptr 0x78[bx] 
5619    89 C3                     mov         bx,ax 
561B    89 D0                     mov         ax,dx 
561D    89 FA                     mov         dx,di 
561F    9A 00 00 00 00            call        window_image_ 
5624    85 D2                     test        dx,dx 
5626    75 0B                     jne         L$619 
5628    85 C0                     test        ax,ax 
562A    75 07                     jne         L$619 
562C    8E 5E 7E                  mov         ds,word ptr 0x7e[bp] 
562F    C7 04 FF FF               mov         word ptr [si],0xffff 
5633                          L$619:
5633    31 C0                     xor         ax,ax 
5635                          L$620:
5635    8D A6 80 00               lea         sp,0x80[bp] 
5639    5D                        pop         bp 
563A    E9 C5 43                  jmp         L$1047 
563D                          vpu_scrcall_delelement_:
563D    53                        push        bx 
563E    56                        push        si 
563F    57                        push        di 
5640    89 C3                     mov         bx,ax 
5642    8E DA                     mov         ds,dx 
5644    6B 77 08 12               imul        si,word ptr 0x8[bx],0x0012 
5648    01 C6                     add         si,ax 
564A    8B 7C 76                  mov         di,word ptr 0x76[si] 
564D    8B 54 78                  mov         dx,word ptr 0x78[si] 
5650    8B 77 02                  mov         si,word ptr 0x2[bx] 
5653    8E C2                     mov         es,dx 
5655    26 3B 75 26               cmp         si,word ptr es:0x26[di] 
5659    0F 83 5C F1               jae         L$564 
565D    89 F3                     mov         bx,si 
565F    89 F8                     mov         ax,di 
5661    9A 00 00 00 00            call        window_grid_delelement_ 
5666    E9 50 F1                  jmp         L$564 
5669                          vpu_scrcall_move_element_:
5669    53                        push        bx 
566A    51                        push        cx 
566B    56                        push        si 
566C    57                        push        di 
566D    C8 02 00 00               enter       0x0002,0x00 
5671    89 C3                     mov         bx,ax 
5673    8E DA                     mov         ds,dx 
5675    6B 7F 08 12               imul        di,word ptr 0x8[bx],0x0012 
5679    01 C7                     add         di,ax 
567B    8B 75 76                  mov         si,word ptr 0x76[di] 
567E    8B 4D 78                  mov         cx,word ptr 0x78[di] 
5681    8B 47 02                  mov         ax,word ptr 0x2[bx] 
5684    8E C1                     mov         es,cx 
5686    26 3B 44 26               cmp         ax,word ptr es:0x26[si] 
568A    0F 83 F7 FE               jae         L$617 
568E    89 C2                     mov         dx,ax 
5690    26 8B 7C 18               mov         di,word ptr es:0x18[si] 
5694    C1 E2 02                  shl         dx,0x02 
5697    26 8E 44 1A               mov         es,word ptr es:0x1a[si] 
569B    01 D7                     add         di,dx 
569D    26 8B 45 02               mov         ax,word ptr es:0x2[di] 
56A1    26 8B 15                  mov         dx,word ptr es:[di] 
56A4    89 46 FE                  mov         word ptr -0x2[bp],ax 
56A7    89 D7                     mov         di,dx 
56A9    8B 47 04                  mov         ax,word ptr 0x4[bx] 
56AC    8E 46 FE                  mov         es,word ptr -0x2[bp] 
56AF    26 89 45 04               mov         word ptr es:0x4[di],ax 
56B3    8B 47 06                  mov         ax,word ptr 0x6[bx] 
56B6    06                        push        es 
56B7    1F                        pop         ds 
56B8    89 D3                     mov         bx,dx 
56BA    89 CA                     mov         dx,cx 
56BC    89 47 06                  mov         word ptr 0x6[bx],ax 
56BF                          L$621:
56BF    89 F0                     mov         ax,si 
56C1    9A 00 00 00 00            call        window_recalc_hitboxes_ 
56C6    E9 BC FE                  jmp         L$617 
56C9                          vpu_scrcall_resize_element_:
56C9    53                        push        bx 
56CA    51                        push        cx 
56CB    56                        push        si 
56CC    57                        push        di 
56CD    C8 02 00 00               enter       0x0002,0x00 
56D1    89 C3                     mov         bx,ax 
56D3    8E DA                     mov         ds,dx 
56D5    6B 7F 08 12               imul        di,word ptr 0x8[bx],0x0012 
56D9    01 C7                     add         di,ax 
56DB    8B 75 76                  mov         si,word ptr 0x76[di] 
56DE    8B 4D 78                  mov         cx,word ptr 0x78[di] 
56E1    8B 47 02                  mov         ax,word ptr 0x2[bx] 
56E4    8E C1                     mov         es,cx 
56E6    26 3B 44 26               cmp         ax,word ptr es:0x26[si] 
56EA    0F 83 97 FE               jae         L$617 
56EE    89 C2                     mov         dx,ax 
56F0    26 8B 7C 18               mov         di,word ptr es:0x18[si] 
56F4    C1 E2 02                  shl         dx,0x02 
56F7    26 8E 44 1A               mov         es,word ptr es:0x1a[si] 
56FB    01 D7                     add         di,dx 
56FD    26 8B 45 02               mov         ax,word ptr es:0x2[di] 
5701    26 8B 15                  mov         dx,word ptr es:[di] 
5704    89 46 FE                  mov         word ptr -0x2[bp],ax 
5707    89 D7                     mov         di,dx 
5709    8B 47 04                  mov         ax,word ptr 0x4[bx] 
570C    8E 46 FE                  mov         es,word ptr -0x2[bp] 
570F    26 89 45 08               mov         word ptr es:0x8[di],ax 
5713    8B 47 06                  mov         ax,word ptr 0x6[bx] 
5716    06                        push        es 
5717    1F                        pop         ds 
5718    89 D3                     mov         bx,dx 
571A    89 CA                     mov         dx,cx 
571C    89 47 0A                  mov         word ptr 0xa[bx],ax 
571F    EB 9E                     jmp         L$621 
5721                          vpu_scrcall_setelementmaxcount_:
5721    53                        push        bx 
5722    56                        push        si 
5723    57                        push        di 
5724    89 C3                     mov         bx,ax 
5726    8E DA                     mov         ds,dx 
5728    6B 7F 08 12               imul        di,word ptr 0x8[bx],0x0012 
572C    01 C7                     add         di,ax 
572E    8B 75 76                  mov         si,word ptr 0x76[di] 
5731    8B 55 78                  mov         dx,word ptr 0x78[di] 
5734    8B 47 02                  mov         ax,word ptr 0x2[bx] 
5737    8E C2                     mov         es,dx 
5739    26 3B 44 26               cmp         ax,word ptr es:0x26[si] 
573D    0F 83 78 F0               jae         L$564 
5741    C1 E0 02                  shl         ax,0x02 
5744    26 C4 7C 18               les         di,dword ptr es:0x18[si] 
5748    89 FE                     mov         si,di 
574A    01 C6                     add         si,ax 
574C    26 C4 3C                  les         di,dword ptr es:[si] 
574F    8B 47 04                  mov         ax,word ptr 0x4[bx] 
5752    26 89 45 20               mov         word ptr es:0x20[di],ax 
5756    E9 60 F0                  jmp         L$564 
5759                          vpu_scrcall_drawelement_:
5759    53                        push        bx 
575A    56                        push        si 
575B    57                        push        di 
575C    89 C3                     mov         bx,ax 
575E    8E DA                     mov         ds,dx 
5760    6B 77 08 12               imul        si,word ptr 0x8[bx],0x0012 
5764    01 C6                     add         si,ax 
5766    8B 7C 76                  mov         di,word ptr 0x76[si] 
5769    8B 54 78                  mov         dx,word ptr 0x78[si] 
576C    8B 47 02                  mov         ax,word ptr 0x2[bx] 
576F    8E C2                     mov         es,dx 
5771    26 3B 45 26               cmp         ax,word ptr es:0x26[di] 
5775    0F 83 40 F0               jae         L$564 
5779    89 C3                     mov         bx,ax 
577B    89 F8                     mov         ax,di 
577D    9A 00 00 00 00            call        window_drawelement_ 
5782    E9 34 F0                  jmp         L$564 
5785                          vpu_scrcall_setfont_:
5785    53                        push        bx 
5786    51                        push        cx 
5787    56                        push        si 
5788    57                        push        di 
5789    89 C3                     mov         bx,ax 
578B    8E DA                     mov         ds,dx 
578D    6B 7F 08 12               imul        di,word ptr 0x8[bx],0x0012 
5791    01 C7                     add         di,ax 
5793    8B 75 76                  mov         si,word ptr 0x76[di] 
5796    8B 4D 78                  mov         cx,word ptr 0x78[di] 
5799    8B 47 02                  mov         ax,word ptr 0x2[bx] 
579C    8E C1                     mov         es,cx 
579E    26 3B 44 26               cmp         ax,word ptr es:0x26[si] 
57A2    0F 83 D3 F1               jae         L$572 
57A6    89 C2                     mov         dx,ax 
57A8    26 8B 7C 18               mov         di,word ptr es:0x18[si] 
57AC    C1 E2 02                  shl         dx,0x02 
57AF    26 8E 44 1A               mov         es,word ptr es:0x1a[si] 
57B3    01 D7                     add         di,dx 
57B5    26 C4 35                  les         si,dword ptr es:[di] 
57B8    8B 47 04                  mov         ax,word ptr 0x4[bx] 
57BB    25 01 00                  and         ax,0x0001 
57BE    26 80 64 02 F7            and         byte ptr es:0x2[si],0xf7 
57C3    C1 E0 03                  shl         ax,0x03 
57C6    26 09 44 02               or          word ptr es:0x2[si],ax 
57CA    6B 57 08 12               imul        dx,word ptr 0x8[bx],0x0012 
57CE    8B 47 02                  mov         ax,word ptr 0x2[bx] 
57D1    01 D3                     add         bx,dx 
57D3    8B 77 76                  mov         si,word ptr 0x76[bx] 
57D6    8B 57 78                  mov         dx,word ptr 0x78[bx] 
57D9    89 C3                     mov         bx,ax 
57DB    89 F0                     mov         ax,si 
57DD    9A 00 00 00 00            call        window_drawelement_ 
57E2    E9 94 F1                  jmp         L$572 
57E5                          vpu_scrcall_getselectc_:
57E5    53                        push        bx 
57E6    51                        push        cx 
57E7    56                        push        si 
57E8    57                        push        di 
57E9    89 C3                     mov         bx,ax 
57EB    8E DA                     mov         ds,dx 
57ED    6B 7F 08 12               imul        di,word ptr 0x8[bx],0x0012 
57F1    01 C7                     add         di,ax 
57F3    8B 75 76                  mov         si,word ptr 0x76[di] 
57F6    8B 4D 78                  mov         cx,word ptr 0x78[di] 
57F9    8B 47 02                  mov         ax,word ptr 0x2[bx] 
57FC    8E C1                     mov         es,cx 
57FE    26 3B 44 26               cmp         ax,word ptr es:0x26[si] 
5802    0F 83 73 F1               jae         L$572 
5806    89 C7                     mov         di,ax 
5808    26 8B 54 18               mov         dx,word ptr es:0x18[si] 
580C    C1 E7 02                  shl         di,0x02 
580F    26 8E 44 1A               mov         es,word ptr es:0x1a[si] 
5813    89 D6                     mov         si,dx 
5815    01 FE                     add         si,di 
5817    26 C4 3C                  les         di,dword ptr es:[si] 
581A    26 8B 45 2A               mov         ax,word ptr es:0x2a[di] 
581E    89 07                     mov         word ptr [bx],ax 
5820    E9 56 F1                  jmp         L$572 
5823                          vpu_scrcall_setselectc_:
5823    53                        push        bx 
5824    51                        push        cx 
5825    56                        push        si 
5826    57                        push        di 
5827    C8 02 00 00               enter       0x0002,0x00 
582B    89 C3                     mov         bx,ax 
582D    8E DA                     mov         ds,dx 
582F    6B 7F 08 12               imul        di,word ptr 0x8[bx],0x0012 
5833    01 C7                     add         di,ax 
5835    8B 45 78                  mov         ax,word ptr 0x78[di] 
5838    8B 75 76                  mov         si,word ptr 0x76[di] 
583B    89 46 FE                  mov         word ptr -0x2[bp],ax 
583E    8B 47 02                  mov         ax,word ptr 0x2[bx] 
5841    8E 46 FE                  mov         es,word ptr -0x2[bp] 
5844    26 3B 44 26               cmp         ax,word ptr es:0x26[si] 
5848    0F 83 39 FD               jae         L$617 
584C    89 C2                     mov         dx,ax 
584E    26 8B 7C 18               mov         di,word ptr es:0x18[si] 
5852    C1 E2 02                  shl         dx,0x02 
5855    26 8E 44 1A               mov         es,word ptr es:0x1a[si] 
5859    01 D7                     add         di,dx 
585B    26 8B 4D 02               mov         cx,word ptr es:0x2[di] 
585F    26 8B 15                  mov         dx,word ptr es:[di] 
5862    8E C1                     mov         es,cx 
5864    89 D7                     mov         di,dx 
5866    26 8A 05                  mov         al,byte ptr es:[di] 
5869    24 1F                     and         al,0x1f 
586B    3C 07                     cmp         al,0x07 
586D    75 0F                     jne         L$622 
586F    89 D3                     mov         bx,dx 
5871    89 F0                     mov         ax,si 
5873    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
5876    9A 00 00 00 00            call        window_radiobutton_select_ 
587B    E9 07 FD                  jmp         L$617 
587E                          L$622:
587E    8B 47 04                  mov         ax,word ptr 0x4[bx] 
5881    8E D9                     mov         ds,cx 
5883    89 D3                     mov         bx,dx 
5885    89 47 2A                  mov         word ptr 0x2a[bx],ax 
5888    E9 FA FC                  jmp         L$617 
588B                          vpu_scrcall_getwindowsize_:
588B    53                        push        bx 
588C    56                        push        si 
588D    57                        push        di 
588E    89 C3                     mov         bx,ax 
5890    8E DA                     mov         ds,dx 
5892    6B 7F 08 12               imul        di,word ptr 0x8[bx],0x0012 
5896    01 C7                     add         di,ax 
5898    C4 75 76                  les         si,dword ptr 0x76[di] 
589B    26 8B 7C 12               mov         di,word ptr es:0x12[si] 
589F    89 3F                     mov         word ptr [bx],di 
58A1    26 8B 74 14               mov         si,word ptr es:0x14[si] 
58A5    31 C0                     xor         ax,ax 
58A7    89 77 02                  mov         word ptr 0x2[bx],si 
58AA    E9 0E EF                  jmp         L$565 
58AD                          vpu_scrcall_radiobutton_:
58AD    53                        push        bx 
58AE    51                        push        cx 
58AF    56                        push        si 
58B0    57                        push        di 
58B1    C8 0A 00 00               enter       0x000a,0x00 
58B5    89 C6                     mov         si,ax 
58B7    89 56 FE                  mov         word ptr -0x2[bp],dx 
58BA    8E DA                     mov         ds,dx 
58BC    8B 5C 14                  mov         bx,word ptr 0x14[si] 
58BF    8B 44 48                  mov         ax,word ptr 0x48[si] 
58C2    C1 E3 02                  shl         bx,0x02 
58C5    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
58C8    01 C3                     add         bx,ax 
58CA    8B 17                     mov         dx,word ptr [bx] 
58CC    8B 47 02                  mov         ax,word ptr 0x2[bx] 
58CF    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
58D2    8B 5C 06                  mov         bx,word ptr 0x6[si] 
58D5    01 D3                     add         bx,dx 
58D7    C7 46 F8 00 00            mov         word ptr -0x8[bp],0x0000 
58DC    89 5E FC                  mov         word ptr -0x4[bp],bx 
58DF    89 46 F6                  mov         word ptr -0xa[bp],ax 
58E2    8B 7E FC                  mov         di,word ptr -0x4[bp] 
58E5    8B 5C 06                  mov         bx,word ptr 0x6[si] 
58E8    8E C0                     mov         es,ax 
58EA    31 D2                     xor         dx,dx 
58EC    B9 FF FF                  mov         cx,0xffff 
58EF    33 C0                     xor         ax,ax 
58F1    F2 AE                     repne scasb 
58F3    F7 D1                     not         cx 
58F5    49                        dec         cx 
58F6    01 CB                     add         bx,cx 
58F8    89 D1                     mov         cx,dx 
58FA    89 F0                     mov         ax,si 
58FC    11 D1                     adc         cx,dx 
58FE    8C DA                     mov         dx,ds 
5900    C7 46 FA 00 00            mov         word ptr -0x6[bp],0x0000 
5905    E8 00 00                  call        memory_allowed_ 
5908    84 C0                     test        al,al 
590A    75 05                     jne         L$623 
590C    30 E4                     xor         ah,ah 
590E    E9 F0 40                  jmp         L$1046 
5911                          L$623:
5911    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5914    6B 7C 08 12               imul        di,word ptr 0x8[si],0x0012 
5918    01 F7                     add         di,si 
591A    C5 5D 76                  lds         bx,dword ptr 0x76[di] 
591D    8E 46 FE                  mov         es,word ptr -0x2[bp] 
5920    26 8B 44 0C               mov         ax,word ptr es:0xc[si] 
5924    3B 47 26                  cmp         ax,word ptr 0x26[bx] 
5927    73 15                     jae         L$624 
5929    C1 E0 02                  shl         ax,0x02 
592C    C5 57 18                  lds         dx,dword ptr 0x18[bx] 
592F    89 D3                     mov         bx,dx 
5931    01 C3                     add         bx,ax 
5933    8B 07                     mov         ax,word ptr [bx] 
5935    89 46 F8                  mov         word ptr -0x8[bp],ax 
5938    8B 47 02                  mov         ax,word ptr 0x2[bx] 
593B    89 46 FA                  mov         word ptr -0x6[bp],ax 
593E                          L$624:
593E    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5941    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
5945    66 FF 76 F8               push        dword ptr -0x8[bp] 
5949    8B 4C 04                  mov         cx,word ptr 0x4[si] 
594C    FF 74 0A                  push        word ptr 0xa[si] 
594F    8B 44 02                  mov         ax,word ptr 0x2[si] 
5952    FF 76 F6                  push        word ptr -0xa[bp] 
5955    01 F3                     add         bx,si 
5957    FF 76 FC                  push        word ptr -0x4[bp] 
595A    8B 7F 76                  mov         di,word ptr 0x76[bx] 
595D    8B 57 78                  mov         dx,word ptr 0x78[bx] 
5960    89 C3                     mov         bx,ax 
5962    89 F8                     mov         ax,di 
5964    9A 00 00 00 00            call        window_radiobutton_ 
5969    85 D2                     test        dx,dx 
596B    75 0E                     jne         L$626 
596D    85 C0                     test        ax,ax 
596F    75 0A                     jne         L$626 
5971                          L$625:
5971    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5974    C7 04 FF FF               mov         word ptr [si],0xffff 
5978    E9 0A FC                  jmp         L$617 
597B                          L$626:
597B    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
597E    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
5982    01 F3                     add         bx,si 
5984    C5 7F 76                  lds         di,dword ptr 0x76[bx] 
5987    8B 5D 28                  mov         bx,word ptr 0x28[di] 
598A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
598D    81 C3 FF 00               add         bx,0x00ff 
5991    89 1C                     mov         word ptr [si],bx 
5993    6B 5C 08 12               imul        bx,word ptr 0x8[si],0x0012 
5997    01 F3                     add         bx,si 
5999    C5 7F 76                  lds         di,dword ptr 0x76[bx] 
599C    8B 45 28                  mov         ax,word ptr 0x28[di] 
599F    E9 AB F5                  jmp         L$594 
59A2                          vpuwin_disk_busy_:
59A2    53                        push        bx 
59A3    89 C3                     mov         bx,ax 
59A5    8E DA                     mov         ds,dx 
59A7    8B 07                     mov         ax,word ptr [bx] 
59A9    3D 01 00                  cmp         ax,0x0001 
59AC    76 14                     jbe         L$627 
59AE    3D 0B 00                  cmp         ax,0x000b 
59B1    74 0F                     je          L$627 
59B3    3D 0C 00                  cmp         ax,0x000c 
59B6    74 0A                     je          L$627 
59B8    3D 15 00                  cmp         ax,0x0015 
59BB    74 05                     je          L$627 
59BD    3D 1F 00                  cmp         ax,0x001f 
59C0    75 1A                     jne         L$628 
59C2                          L$627:
59C2    B8 00 00                  mov         ax,seg _diskio_in_progress 
59C5    8E C0                     mov         es,ax 
59C7    26 80 3E 00 00 00         cmp         byte ptr es:_diskio_in_progress,0x00 
59CD    74 0D                     je          L$628 
59CF    FF 4F 12                  dec         word ptr 0x12[bx] 
59D2    B8 01 00                  mov         ax,0x0001 
59D5    80 8F 8B 01 02            or          byte ptr 0x18b[bx],0x02 
59DA    5B                        pop         bx 
59DB    C3                        ret         
59DC                          L$628:
59DC    31 C0                     xor         ax,ax 
59DE    5B                        pop         bx 
59DF    C3                        ret         
59E0                          vpu_instr_scr_:
59E0    51                        push        cx 
59E1    56                        push        si 
59E2    57                        push        di 
59E3    C8 08 00 00               enter       0x0008,0x00 
59E7    89 C3                     mov         bx,ax 
59E9    89 56 FE                  mov         word ptr -0x2[bp],dx 
59EC    36 A1 02 00               mov         ax,word ptr ss:_running_window+0x2 
59F0    89 46 FA                  mov         word ptr -0x6[bp],ax 
59F3    89 D8                     mov         ax,bx 
59F5    36 8B 0E 00 00            mov         cx,word ptr ss:_running_window 
59FA    E8 00 00                  call        vpuwin_disk_busy_ 
59FD    85 C0                     test        ax,ax 
59FF    74 06                     je          L$629 
5A01    B8 03 00                  mov         ax,0x0003 
5A04    E9 00 E6                  jmp         L$521 
5A07                          L$629:
5A07    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5A0A    8B 07                     mov         ax,word ptr [bx] 
5A0C    80 8F 8A 01 01            or          byte ptr 0x18a[bx],0x01 
5A11    3D 22 00                  cmp         ax,0x0022 
5A14    0F 83 EA 00               jae         L$637 
5A18    3D 02 00                  cmp         ax,0x0002 
5A1B    0F 86 D2 00               jbe         L$636 
5A1F    89 C6                     mov         si,ax 
5A21    C1 E6 02                  shl         si,0x02 
5A24    36 8B 84 02 00            mov         ax,word ptr ss:_vpu_instr_scrcall+0x2[si] 
5A29    36 8B BC 00 00            mov         di,word ptr ss:_vpu_instr_scrcall[si] 
5A2E    3D 00 00                  cmp         ax,seg vpu_scrcall_dialog_ 
5A31    75 08                     jne         L$630 
5A33    81 FF 00 00               cmp         di,offset vpu_scrcall_dialog_ 
5A37    0F 84 B6 00               je          L$636 
5A3B                          L$630:
5A3B    6B 77 08 12               imul        si,word ptr 0x8[bx],0x0012 
5A3F    01 DE                     add         si,bx 
5A41    8B 44 78                  mov         ax,word ptr 0x78[si] 
5A44    8B 7C 76                  mov         di,word ptr 0x76[si] 
5A47    85 C0                     test        ax,ax 
5A49    75 06                     jne         L$631 
5A4B    85 FF                     test        di,di 
5A4D    0F 84 8D 00               je          L$635 
5A51                          L$631:
5A51    8B 74 78                  mov         si,word ptr 0x78[si] 
5A54    36 89 3E 00 00            mov         word ptr ss:_running_window,di 
5A59    36 89 36 02 00            mov         word ptr ss:_running_window+0x2,si 
5A5E    6B 77 08 12               imul        si,word ptr 0x8[bx],0x0012 
5A62    36 A1 00 00               mov         ax,word ptr ss:_VGA 
5A66    89 46 F8                  mov         word ptr -0x8[bp],ax 
5A69    36 A1 02 00               mov         ax,word ptr ss:_VGA+0x2 
5A6D    01 DE                     add         si,bx 
5A6F    89 46 FC                  mov         word ptr -0x4[bp],ax 
5A72    8B 44 74                  mov         ax,word ptr 0x74[si] 
5A75    8B 7C 72                  mov         di,word ptr 0x72[si] 
5A78    85 C0                     test        ax,ax 
5A7A    75 04                     jne         L$632 
5A7C    85 FF                     test        di,di 
5A7E    74 19                     je          L$633 
5A80                          L$632:
5A80    C4 7C 76                  les         di,dword ptr 0x76[si] 
5A83    26 F6 45 16 08            test        byte ptr es:0x16[di],0x08 
5A88    75 0F                     jne         L$633 
5A8A    8B 44 72                  mov         ax,word ptr 0x72[si] 
5A8D    8B 74 74                  mov         si,word ptr 0x74[si] 
5A90    36 A3 00 00               mov         word ptr ss:_VGA,ax 
5A94    36 89 36 02 00            mov         word ptr ss:_VGA+0x2,si 
5A99                          L$633:
5A99    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5A9C    8B 37                     mov         si,word ptr [bx] 
5A9E    89 D8                     mov         ax,bx 
5AA0    C1 E6 02                  shl         si,0x02 
5AA3    8C DA                     mov         dx,ds 
5AA5    36 FF 9C 00 00            call        dword ptr ss:_vpu_instr_scrcall[si] 
5AAA    85 C0                     test        ax,ax 
5AAC    74 14                     je          L$634 
5AAE    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5AB1    6B 7F 08 12               imul        di,word ptr 0x8[bx],0x0012 
5AB5    01 DF                     add         di,bx 
5AB7    C5 75 76                  lds         si,dword ptr 0x76[di] 
5ABA    80 64 17 E3               and         byte ptr 0x17[si],0xe3 
5ABE    80 4C 17 04               or          byte ptr 0x17[si],0x04 
5AC2                          L$634:
5AC2    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
5AC5    36 A3 02 00               mov         word ptr ss:_running_window+0x2,ax 
5AC9    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
5ACC    36 A3 00 00               mov         word ptr ss:_VGA,ax 
5AD0    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
5AD3    36 89 0E 00 00            mov         word ptr ss:_running_window,cx 
5AD8    36 A3 02 00               mov         word ptr ss:_VGA+0x2,ax 
5ADC    EB 24                     jmp         L$637 
5ADE                          L$635:
5ADE    B8 00 00                  mov         ax,offset _nowindowerror 
5AE1    8C D2                     mov         dx,ss 
5AE3    9A 00 00 00 00            call        putstr_ 
5AE8    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5AEB    C7 07 FF FF               mov         word ptr [bx],0xffff 
5AEF    EB 11                     jmp         L$637 
5AF1                          L$636:
5AF1    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5AF4    8B 37                     mov         si,word ptr [bx] 
5AF6    89 D8                     mov         ax,bx 
5AF8    C1 E6 02                  shl         si,0x02 
5AFB    8C DA                     mov         dx,ds 
5AFD    36 FF 9C 00 00            call        dword ptr ss:_vpu_instr_scrcall[si] 
5B02                          L$637:
5B02    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5B05    31 C0                     xor         ax,ax 
5B07    80 A7 8A 01 FE            and         byte ptr 0x18a[bx],0xfe 
5B0C    E9 F8 E4                  jmp         L$521 
5B0F                          vpu_getwindowkeys_:
5B0F    53                        push        bx 
5B10    51                        push        cx 
5B11    56                        push        si 
5B12    57                        push        di 
5B13    C8 08 00 00               enter       0x0008,0x00 
5B17    89 C7                     mov         di,ax 
5B19    89 56 FE                  mov         word ptr -0x2[bp],dx 
5B1C    B9 05 00                  mov         cx,0x0005 
5B1F    8D 75 5A                  lea         si,0x5a[di] 
5B22    8E DA                     mov         ds,dx 
5B24                          L$638:
5B24    49                        dec         cx 
5B25    83 C6 EE                  add         si,0xffee 
5B28    83 F9 FF                  cmp         cx,0xffff 
5B2B    0F 84 04 4C               je          L$1143 
5B2F    8B 44 78                  mov         ax,word ptr 0x78[si] 
5B32    8B 54 76                  mov         dx,word ptr 0x76[si] 
5B35    85 C0                     test        ax,ax 
5B37    75 04                     jne         L$639 
5B39    85 D2                     test        dx,dx 
5B3B    74 E7                     je          L$638 
5B3D                          L$639:
5B3D    83 7C 7C 00               cmp         word ptr 0x7c[si],0x0000 
5B41    74 E1                     je          L$638 
5B43    89 D3                     mov         bx,dx 
5B45    8E C0                     mov         es,ax 
5B47    89 56 FA                  mov         word ptr -0x6[bp],dx 
5B4A    26 F6 47 16 08            test        byte ptr es:0x16[bx],0x08 
5B4F    75 D3                     jne         L$638 
5B51    36 80 3E E9 02 00         cmp         byte ptr ss:L$1592,0x00 
5B57    74 2C                     je          L$640 
5B59    8B 54 7A                  mov         dx,word ptr 0x7a[si] 
5B5C    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5B5F    01 D2                     add         dx,dx 
5B61    C5 75 58                  lds         si,dword ptr 0x58[di] 
5B64    01 D6                     add         si,dx 
5B66    83 3C FF                  cmp         word ptr [si],0xffff 
5B69    75 1A                     jne         L$640 
5B6B    8B 7E FA                  mov         di,word ptr -0x6[bp] 
5B6E    26 8B 5F 3A               mov         bx,word ptr es:0x3a[bx] 
5B72    26 8E 45 3C               mov         es,word ptr es:0x3c[di] 
5B76    26 8B 47 02               mov         ax,word ptr es:0x2[bx] 
5B7A    89 04                     mov         word ptr [si],ax 
5B7C    36 C6 06 E9 02 00         mov         byte ptr ss:L$1592,0x00 
5B82    E9 AE 4B                  jmp         L$1143 
5B85                          L$640:
5B85    6B F1 12                  imul        si,cx,0x0012 
5B88    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
5B8B    8E D8                     mov         ds,ax 
5B8D    01 FE                     add         si,di 
5B8F    C5 5C 76                  lds         bx,dword ptr 0x76[si] 
5B92    89 46 FC                  mov         word ptr -0x4[bp],ax 
5B95    C5 47 3A                  lds         ax,dword ptr 0x3a[bx] 
5B98    89 C3                     mov         bx,ax 
5B9A    83 3F FF                  cmp         word ptr [bx],0xffff 
5B9D    0F 84 92 4B               je          L$1143 
5BA1    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
5BA4    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
5BA7    89 F8                     mov         ax,di 
5BA9    8B 5C 7C                  mov         bx,word ptr 0x7c[si] 
5BAC    0E                        push        cs 
5BAD    E8 00 00                  call        send_vpu_signal_ 
5BB0    85 C0                     test        ax,ax 
5BB2    0F 85 7D 4B               jne         L$1143 
5BB6    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
5BB9    C5 5C 76                  lds         bx,dword ptr 0x76[si] 
5BBC    C5 47 3A                  lds         ax,dword ptr 0x3a[bx] 
5BBF    8E 46 FC                  mov         es,word ptr -0x4[bp] 
5BC2    89 46 F8                  mov         word ptr -0x8[bp],ax 
5BC5    26 8B 5C 7A               mov         bx,word ptr es:0x7a[si] 
5BC9    8E 46 FE                  mov         es,word ptr -0x2[bp] 
5BCC    01 DB                     add         bx,bx 
5BCE    26 C4 45 58               les         ax,dword ptr es:0x58[di] 
5BD2    01 D8                     add         ax,bx 
5BD4    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
5BD7    89 46 F8                  mov         word ptr -0x8[bp],ax 
5BDA    8B 07                     mov         ax,word ptr [bx] 
5BDC    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
5BDF    26 89 07                  mov         word ptr es:[bx],ax 
5BE2    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
5BE5    C5 5C 76                  lds         bx,dword ptr 0x76[si] 
5BE8    C5 77 3A                  lds         si,dword ptr 0x3a[bx] 
5BEB    83 3C 00                  cmp         word ptr [si],0x0000 
5BEE    75 06                     jne         L$641 
5BF0    36 C6 06 E9 02 01         mov         byte ptr ss:L$1592,0x01 
5BF6                          L$641:
5BF6    6B C9 12                  imul        cx,0x0012 
5BF9    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5BFC    01 CF                     add         di,cx 
5BFE    C5 5D 76                  lds         bx,dword ptr 0x76[di] 
5C01    C5 77 3A                  lds         si,dword ptr 0x3a[bx] 
5C04    C7 04 FF FF               mov         word ptr [si],0xffff 
5C08    E9 28 4B                  jmp         L$1143 
5C0B                          save_file_errno_:
5C0B    51                        push        cx 
5C0C    56                        push        si 
5C0D    57                        push        di 
5C0E    89 C6                     mov         si,ax 
5C10    89 D1                     mov         cx,dx 
5C12    8E DA                     mov         ds,dx 
5C14    C1 E3 02                  shl         bx,0x02 
5C17    C5 7C 64                  lds         di,dword ptr 0x64[si] 
5C1A    01 DF                     add         di,bx 
5C1C    C5 1D                     lds         bx,dword ptr [di] 
5C1E    8A 47 0A                  mov         al,byte ptr 0xa[bx] 
5C21    84 C0                     test        al,al 
5C23    75 13                     jne         L$643 
5C25    9A 00 00 00 00            call        __get_errno_ptr_ 
5C2A    89 C3                     mov         bx,ax 
5C2C    8E DA                     mov         ds,dx 
5C2E    8B 07                     mov         ax,word ptr [bx] 
5C30                          L$642:
5C30    8E D9                     mov         ds,cx 
5C32    89 84 6E 01               mov         word ptr 0x16e[si],ax 
5C36    EB 19                     jmp         L$645 
5C38                          L$643:
5C38    3C 09                     cmp         al,0x09 
5C3A    75 0D                     jne         L$644 
5C3C    8B 57 0E                  mov         dx,word ptr 0xe[bx] 
5C3F    8B 47 0C                  mov         ax,word ptr 0xc[bx] 
5C42    9A 00 00 00 00            call        dev_geterror_ 
5C47    EB E7                     jmp         L$642 
5C49                          L$644:
5C49    8E DA                     mov         ds,dx 
5C4B    C7 84 6E 01 00 00         mov         word ptr 0x16e[si],0x0000 
5C51                          L$645:
5C51    8E D9                     mov         ds,cx 
5C53    8B 84 6E 01               mov         ax,word ptr 0x16e[si] 
5C57    E9 99 BF                  jmp         L$273 

Routine Size: 14750 bytes,    Routine Base: vpu_main_TEXT + 22BC

5C5A                          send_vpu_signal_:
5C5A    51                        push        cx 
5C5B    56                        push        si 
5C5C    89 C6                     mov         si,ax 
5C5E    89 D1                     mov         cx,dx 
5C60    8E DA                     mov         ds,dx 
5C62    83 7C 26 00               cmp         word ptr 0x26[si],0x0000 
5C66    74 15                     je          L$646 
5C68    83 FB 09                  cmp         bx,0x0009 
5C6B    74 10                     je          L$646 
5C6D    83 FB 17                  cmp         bx,0x0017 
5C70    74 0B                     je          L$646 
5C72    83 FB 19                  cmp         bx,0x0019 
5C75    74 06                     je          L$646 
5C77    B8 01 00                  mov         ax,0x0001 
5C7A    5E                        pop         si 
5C7B    59                        pop         cx 
5C7C    CB                        retf        
5C7D                          L$646:
5C7D    8E D9                     mov         ds,cx 
5C7F    89 5C 26                  mov         word ptr 0x26[si],bx 
5C82    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
5C88    74 1D                     je          L$647 
5C8A    FF B4 88 01               push        word ptr 0x188[si] 
5C8E    53                        push        bx 
5C8F    16                        push        ss 
5C90    68 1D 07                  push        offset DGROUP:L$1523 
5C93    16                        push        ss 
5C94    68 00 00                  push        offset _message 
5C97    8C D2                     mov         dx,ss 
5C99    9A 00 00 00 00            call        sprintf_ 
5C9E    83 C4 0C                  add         sp,0x000c 
5CA1    B8 00 00                  mov         ax,offset _message 
5CA4    E8 00 00                  call        output_debug_info_ 
5CA7                          L$647:
5CA7    8E D9                     mov         ds,cx 
5CA9    F6 84 8A 01 20            test        byte ptr 0x18a[si],0x20 
5CAE    74 0B                     je          L$648 
5CB0    C7 84 6E 01 06 01         mov         word ptr 0x16e[si],0x0106 
5CB6    80 A4 8A 01 DF            and         byte ptr 0x18a[si],0xdf 
5CBB                          L$648:
5CBB    31 C0                     xor         ax,ax 
5CBD    5E                        pop         si 
5CBE    59                        pop         cx 
5CBF    CB                        retf        
5CC0                          L$649:
5CC0    32 5E                                           DW	offset L$655
5CC2    32 5E                                           DW	offset L$655
5CC4    B7 5E                                           DW	offset L$662
5CC6    B7 5E                                           DW	offset L$662
5CC8    B7 5E                                           DW	offset L$662
5CCA    B7 5E                                           DW	offset L$662
5CCC    B7 5E                                           DW	offset L$662
5CCE    B7 5E                                           DW	offset L$662
5CD0    4F 5E                                           DW	offset L$656
5CD2    B7 5E                                           DW	offset L$662
5CD4    B7 5E                                           DW	offset L$662
5CD6    B7 5E                                           DW	offset L$662
5CD8    32 5E                                           DW	offset L$655
5CDA    32 5E                                           DW	offset L$655
5CDC    32 5E                                           DW	offset L$655
5CDE    32 5E                                           DW	offset L$655
5CE0    32 5E                                           DW	offset L$655
5CE2    41 5F                                           DW	offset L$666
5CE4    41 5F                                           DW	offset L$666
5CE6    41 5F                                           DW	offset L$666
5CE8    41 5F                                           DW	offset L$666
5CEA    32 5E                                           DW	offset L$655
5CEC    95 5E                                           DW	offset L$660
5CEE    78 5E                                           DW	offset L$659
5CF0    A3 5E                                           DW	offset L$661
5CF2    78 5E                                           DW	offset L$659
5CF4    78 5E                                           DW	offset L$659
5CF6    32 5E                                           DW	offset L$655
5CF8    32 5E                                           DW	offset L$655
5CFA    B7 5E                                           DW	offset L$662
5CFC    B7 5E                                           DW	offset L$662
5CFE                          process_vpu_signal_:
5CFE    53                        push        bx 
5CFF    51                        push        cx 
5D00    56                        push        si 
5D01    57                        push        di 
5D02    C8 0A 00 00               enter       0x000a,0x00 
5D06    89 C3                     mov         bx,ax 
5D08    89 56 FE                  mov         word ptr -0x2[bp],dx 
5D0B    8E DA                     mov         ds,dx 
5D0D    8B 4F 26                  mov         cx,word ptr 0x26[bx] 
5D10    C7 47 26 00 00            mov         word ptr 0x26[bx],0x0000 
5D15    81 F9 83 00               cmp         cx,0x0083 
5D19    0F 84 B1 00               je          L$652 
5D1D    81 F9 82 00               cmp         cx,0x0082 
5D21    0F 84 A1 00               je          L$651 
5D25    81 F9 80 00               cmp         cx,0x0080 
5D29    0F 82 F4 00               jb          L$654 
5D2D    81 F9 81 00               cmp         cx,0x0081 
5D31    0F 87 EC 00               ja          L$654 
5D35    36 A1 00 00               mov         ax,word ptr ss:_window_count 
5D39    89 C2                     mov         dx,ax 
5D3B    C1 E2 02                  shl         dx,0x02 
5D3E    89 56 FC                  mov         word ptr -0x4[bp],dx 
5D41                          L$650:
5D41    48                        dec         ax 
5D42    83 6E FC 04               sub         word ptr -0x4[bp],0x0004 
5D46    3D FF FF                  cmp         ax,0xffff 
5D49    0F 84 CB A7               je          L$36 
5D4D    36 C5 3E 00 00            lds         di,dword ptr ss:_windows 
5D52    03 7E FC                  add         di,word ptr -0x4[bp] 
5D55    C5 35                     lds         si,dword ptr [di] 
5D57    8B 54 36                  mov         dx,word ptr 0x36[si] 
5D5A    89 56 FA                  mov         word ptr -0x6[bp],dx 
5D5D    8B 54 38                  mov         dx,word ptr 0x38[si] 
5D60    81 FA 00 00               cmp         dx,seg vpuconsole_program_ 
5D64    75 DB                     jne         L$650 
5D66    81 7E FA 00 00            cmp         word ptr -0x6[bp],offset vpuconsole_program_ 
5D6B    75 D4                     jne         L$650 
5D6D    C4 7C 3A                  les         di,dword ptr 0x3a[si] 
5D70    26 8B 55 16               mov         dx,word ptr es:0x16[di] 
5D74    89 56 FA                  mov         word ptr -0x6[bp],dx 
5D77    26 8B 55 18               mov         dx,word ptr es:0x18[di] 
5D7B    3B 56 FE                  cmp         dx,word ptr -0x2[bp] 
5D7E    75 C1                     jne         L$650 
5D80    3B 5E FA                  cmp         bx,word ptr -0x6[bp] 
5D83    75 BC                     jne         L$650 
5D85    BA 81 00                  mov         dx,0x0081 
5D88    29 CA                     sub         dx,cx 
5D8A    83 E2 01                  and         dx,0x0001 
5D8D    80 64 16 DF               and         byte ptr 0x16[si],0xdf 
5D91    C1 E2 05                  shl         dx,0x05 
5D94    09 54 16                  or          word ptr 0x16[si],dx 
5D97    31 D2                     xor         dx,dx 
5D99    9A 00 00 00 00            call        set_active_window_ 
5D9E    36 C5 1E 00 00            lds         bx,dword ptr ss:_windows 
5DA3    03 5E FC                  add         bx,word ptr -0x4[bp] 
5DA6    8B 17                     mov         dx,word ptr [bx] 
5DA8    8B 47 02                  mov         ax,word ptr 0x2[bx] 
5DAB    36 89 16 00 00            mov         word ptr ss:_draw_window_box,dx 
5DB0    36 A3 02 00               mov         word ptr ss:_draw_window_box+0x2,ax 
5DB4    9A 00 00 00 00            call        draw_screen_ 
5DB9    31 C0                     xor         ax,ax 
5DBB    36 A3 00 00               mov         word ptr ss:_draw_window_box,ax 
5DBF    36 A3 02 00               mov         word ptr ss:_draw_window_box+0x2,ax 
5DC3    E9 52 A7                  jmp         L$36 
5DC6                          L$651:
5DC6    80 8F 8A 01 04            or          byte ptr 0x18a[bx],0x04 
5DCB    E9 4A A7                  jmp         L$36 
5DCE                          L$652:
5DCE    36 A1 00 00               mov         ax,word ptr ss:_vpu_count 
5DD2    89 C1                     mov         cx,ax 
5DD4    8E 46 FE                  mov         es,word ptr -0x2[bp] 
5DD7    C1 E1 02                  shl         cx,0x02 
5DDA                          L$653:
5DDA    48                        dec         ax 
5DDB    83 E9 04                  sub         cx,0x0004 
5DDE    3D FF FF                  cmp         ax,0xffff 
5DE1    0F 84 33 A7               je          L$36 
5DE5    36 C5 3E 00 00            lds         di,dword ptr ss:_vpus 
5DEA    01 CF                     add         di,cx 
5DEC    C5 35                     lds         si,dword ptr [di] 
5DEE    8B 54 48                  mov         dx,word ptr 0x48[si] 
5DF1    89 56 F6                  mov         word ptr -0xa[bp],dx 
5DF4    8B 54 4A                  mov         dx,word ptr 0x4a[si] 
5DF7    26 8B 7F 4A               mov         di,word ptr es:0x4a[bx] 
5DFB    89 56 F8                  mov         word ptr -0x8[bp],dx 
5DFE    89 7E FA                  mov         word ptr -0x6[bp],di 
5E01    8B 7E F8                  mov         di,word ptr -0x8[bp] 
5E04    26 8B 57 48               mov         dx,word ptr es:0x48[bx] 
5E08    3B 7E FA                  cmp         di,word ptr -0x6[bp] 
5E0B    75 CD                     jne         L$653 
5E0D    3B 56 F6                  cmp         dx,word ptr -0xa[bp] 
5E10    75 C8                     jne         L$653 
5E12    F6 84 8A 01 04            test        byte ptr 0x18a[si],0x04 
5E17    74 C1                     je          L$653 
5E19    80 A4 8A 01 FB            and         byte ptr 0x18a[si],0xfb 
5E1E    E9 F7 A6                  jmp         L$36 
5E21                          L$654:
5E21    89 CE                     mov         si,cx 
5E23    4E                        dec         si 
5E24    83 FE 1E                  cmp         si,0x001e 
5E27    0F 87 16 01               ja          L$666 
5E2B    01 F6                     add         si,si 
5E2D    2E FF A4 C0 5C            jmp         word ptr cs:L$649[si] 
5E32                          L$655:
5E32    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5E35    3B 4F 62                  cmp         cx,word ptr 0x62[bx] 
5E38    73 15                     jae         L$656 
5E3A    89 CE                     mov         si,cx 
5E3C    8B 47 5E                  mov         ax,word ptr 0x5e[bx] 
5E3F    C1 E6 02                  shl         si,0x02 
5E42    8E 5F 60                  mov         ds,word ptr 0x60[bx] 
5E45    01 C6                     add         si,ax 
5E47    83 7C 02 00               cmp         word ptr 0x2[si],0x0000 
5E4B    0F 85 F2 00               jne         L$666 
5E4F                          L$656:
5E4F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5E52                          L$657:
5E52    F6 87 8A 01 02            test        byte ptr 0x18a[bx],0x02 
5E57    74 14                     je          L$658 
5E59    8B 97 74 01               mov         dx,word ptr 0x174[bx] 
5E5D    8B 87 76 01               mov         ax,word ptr 0x176[bx] 
5E61    89 D3                     mov         bx,dx 
5E63    8E D8                     mov         ds,ax 
5E65    85 C0                     test        ax,ax 
5E67    75 E9                     jne         L$657 
5E69    85 D2                     test        dx,dx 
5E6B    75 E5                     jne         L$657 
5E6D                          L$658:
5E6D    B8 01 00                  mov         ax,0x0001 
5E70    80 8F 8A 01 08            or          byte ptr 0x18a[bx],0x08 
5E75    E9 BB 48                  jmp         L$1143 
5E78                          L$659:
5E78    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5E7B    3B 4F 62                  cmp         cx,word ptr 0x62[bx] 
5E7E    73 15                     jae         L$660 
5E80    89 CE                     mov         si,cx 
5E82    8B 47 5E                  mov         ax,word ptr 0x5e[bx] 
5E85    C1 E6 02                  shl         si,0x02 
5E88    8E 5F 60                  mov         ds,word ptr 0x60[bx] 
5E8B    01 C6                     add         si,ax 
5E8D    83 7C 02 00               cmp         word ptr 0x2[si],0x0000 
5E91    0F 85 AC 00               jne         L$666 
5E95                          L$660:
5E95    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5E98    B8 01 00                  mov         ax,0x0001 
5E9B    80 8F 8A 01 20            or          byte ptr 0x18a[bx],0x20 
5EA0    E9 90 48                  jmp         L$1143 
5EA3                          L$661:
5EA3    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5EA6    66 C7 87 8C 01 00 00 00 00
                                  mov         dword ptr 0x18c[bx],0x00000000 
5EAF    80 A7 8A 01 DF            and         byte ptr 0x18a[bx],0xdf 
5EB4    E9 61 A6                  jmp         L$36 
5EB7                          L$662:
5EB7    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5EBA    3B 4F 62                  cmp         cx,word ptr 0x62[bx] 
5EBD    73 13                     jae         L$663 
5EBF    89 CE                     mov         si,cx 
5EC1    8B 57 5E                  mov         dx,word ptr 0x5e[bx] 
5EC4    C1 E6 02                  shl         si,0x02 
5EC7    8E 5F 60                  mov         ds,word ptr 0x60[bx] 
5ECA    01 D6                     add         si,dx 
5ECC    83 7C 02 00               cmp         word ptr 0x2[si],0x0000 
5ED0    75 6F                     jne         L$666 
5ED2                          L$663:
5ED2    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5ED5    51                        push        cx 
5ED6    66 FF 77 10               push        dword ptr 0x10[bx] 
5EDA    FF B7 88 01               push        word ptr 0x188[bx] 
5EDE    16                        push        ss 
5EDF    68 35 07                  push        offset DGROUP:L$1524 
5EE2    16                        push        ss 
5EE3    68 00 00                  push        offset _message 
5EE6    9A 00 00 00 00            call        sprintf_ 
5EEB    36 A1 00 00               mov         ax,word ptr ss:_debugfp 
5EEF    36 8B 16 02 00            mov         dx,word ptr ss:_debugfp+0x2 
5EF4    83 C4 10                  add         sp,0x0010 
5EF7    85 D2                     test        dx,dx 
5EF9    75 04                     jne         L$664 
5EFB    85 C0                     test        ax,ax 
5EFD    74 12                     je          L$665 
5EFF                          L$664:
5EFF    16                        push        ss 
5F00    68 00 00                  push        offset _message 
5F03    16                        push        ss 
5F04    68 4E 01                  push        offset DGROUP:L$1469 
5F07    52                        push        dx 
5F08    50                        push        ax 
5F09    9A 00 00 00 00            call        fprintf_ 
5F0E    83 C4 0C                  add         sp,0x000c 
5F11                          L$665:
5F11    B8 00 00                  mov         ax,offset _message 
5F14    8C D2                     mov         dx,ss 
5F16    9A 00 00 00 00            call        putstr_ 
5F1B    B8 00 00                  mov         ax,offset _message 
5F1E    8C D2                     mov         dx,ss 
5F20    9A 00 00 00 00            call        log_error_ 
5F25    36 C5 36 00 00            lds         si,dword ptr ss:_running_console 
5F2A    8B 44 3A                  mov         ax,word ptr 0x3a[si] 
5F2D    8B 54 3C                  mov         dx,word ptr 0x3c[si] 
5F30    E8 00 00                  call        core_debug_ 
5F33    85 C0                     test        ax,ax 
5F35    0F 85 16 FF               jne         L$656 
5F39    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5F3C    80 8F 8A 01 40            or          byte ptr 0x18a[bx],0x40 
5F41                          L$666:
5F41    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
5F44    89 4F 28                  mov         word ptr 0x28[bx],cx 
5F47    E9 CE A5                  jmp         L$36 
5F4A                          segment_exists_:
5F4A    51                        push        cx 
5F4B    56                        push        si 
5F4C    89 C6                     mov         si,ax 
5F4E    8E DA                     mov         ds,dx 
5F50    89 DA                     mov         dx,bx 
5F52    3B 5C 4E                  cmp         bx,word ptr 0x4e[si] 
5F55    73 06                     jae         L$667 
5F57    8B 44 4C                  mov         ax,word ptr 0x4c[si] 
5F5A    5E                        pop         si 
5F5B    59                        pop         cx 
5F5C    C3                        ret         
5F5D                          L$667:
5F5D    8B 44 52                  mov         ax,word ptr 0x52[si] 
5F60    89 C1                     mov         cx,ax 
5F62    C1 E1 02                  shl         cx,0x02 
5F65                          L$668:
5F65    48                        dec         ax 
5F66    83 E9 04                  sub         cx,0x0004 
5F69    3D FF FF                  cmp         ax,0xffff 
5F6C    74 11                     je          L$669 
5F6E    C4 5C 54                  les         bx,dword ptr 0x54[si] 
5F71    01 CB                     add         bx,cx 
5F73    26 3B 57 02               cmp         dx,word ptr es:0x2[bx] 
5F77    75 EC                     jne         L$668 
5F79    26 8B 07                  mov         ax,word ptr es:[bx] 
5F7C    5E                        pop         si 
5F7D    59                        pop         cx 
5F7E    C3                        ret         
5F7F                          L$669:
5F7F    31 C0                     xor         ax,ax 
5F81    5E                        pop         si 
5F82    59                        pop         cx 
5F83    C3                        ret         
5F84                          segfault_:
5F84    53                        push        bx 
5F85    51                        push        cx 
5F86    56                        push        si 
5F87    89 C6                     mov         si,ax 
5F89    89 D1                     mov         cx,dx 
5F8B    B8 00 00                  mov         ax,offset _segfaulterror 
5F8E    BB 0B 00                  mov         bx,0x000b 
5F91    8E DA                     mov         ds,dx 
5F93    8C D2                     mov         dx,ss 
5F95    80 4C 1E 02               or          byte ptr 0x1e[si],0x02 
5F99    9A 00 00 00 00            call        putstr_ 
5F9E    89 F0                     mov         ax,si 
5FA0    89 CA                     mov         dx,cx 
5FA2    0E                        push        cs 
5FA3    E8 00 00                  call        send_vpu_signal_ 
5FA6    E9 A5 A6                  jmp         L$50 
5FA9                          memory_allowed_:
5FA9    56                        push        si 
5FAA    57                        push        di 
5FAB    C8 02 00 00               enter       0x0002,0x00 
5FAF    89 C6                     mov         si,ax 
5FB1    89 56 FE                  mov         word ptr -0x2[bp],dx 
5FB4    89 DF                     mov         di,bx 
5FB6    85 C9                     test        cx,cx 
5FB8    75 0C                     jne         L$670 
5FBA    8E DA                     mov         ds,dx 
5FBC    8B 5C 14                  mov         bx,word ptr 0x14[si] 
5FBF    E8 00 00                  call        segment_exists_ 
5FC2    39 C7                     cmp         di,ax 
5FC4    72 0D                     jb          L$671 
5FC6                          L$670:
5FC6    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
5FC9    89 F0                     mov         ax,si 
5FCB    E8 00 00                  call        segfault_ 
5FCE    30 C0                     xor         al,al 
5FD0    E9 FD B2                  jmp         L$160 
5FD3                          L$671:
5FD3    B0 01                     mov         al,0x01 
5FD5    E9 F8 B2                  jmp         L$160 
5FD8                          is_subpath_:
5FD8    56                        push        si 
5FD9    57                        push        di 
5FDA    C8 04 00 00               enter       0x0004,0x00 
5FDE    50                        push        ax 
5FDF    52                        push        dx 
5FE0    89 CE                     mov         si,cx 
5FE2    89 DF                     mov         di,bx 
5FE4    8E C1                     mov         es,cx 
5FE6    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
5FEB    B9 FF FF                  mov         cx,0xffff 
5FEE    33 C0                     xor         ax,ax 
5FF0    F2 AE                     repne scasb 
5FF2    F7 D1                     not         cx 
5FF4    49                        dec         cx 
5FF5    8B 7E FA                  mov         di,word ptr -0x6[bp] 
5FF8    8E DA                     mov         ds,dx 
5FFA    89 4E FC                  mov         word ptr -0x4[bp],cx 
5FFD    80 7D 01 3A               cmp         byte ptr 0x1[di],0x3a 
6001    74 05                     je          L$672 
6003    80 3D 5C                  cmp         byte ptr [di],0x5c 
6006    75 25                     jne         L$674 
6008                          L$672:
6008    89 DF                     mov         di,bx 
600A    8E C6                     mov         es,si 
600C    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
600F    B9 FF FF                  mov         cx,0xffff 
6012    33 C0                     xor         ax,ax 
6014    F2 AE                     repne scasb 
6016    F7 D1                     not         cx 
6018    49                        dec         cx 
6019    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
601C    51                        push        cx 
601D    89 F1                     mov         cx,si 
601F    9A 00 00 00 00            call        strncmp_ 
6024    85 C0                     test        ax,ax 
6026    74 05                     je          L$674 
6028                          L$673:
6028    31 F6                     xor         si,si 
602A    E9 87 00                  jmp         L$685 
602D                          L$674:
602D    C4 7E 08                  les         di,dword ptr 0x8[bp] 
6030    B9 FF FF                  mov         cx,0xffff 
6033    33 C0                     xor         ax,ax 
6035    F2 AE                     repne scasb 
6037    F7 D1                     not         cx 
6039    49                        dec         cx 
603A    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
603D    39 C1                     cmp         cx,ax 
603F    76 2A                     jbe         L$679 
6041    8B 76 08                  mov         si,word ptr 0x8[bp] 
6044    B1 5C                     mov         cl,0x5c 
6046    8C C2                     mov         dx,es 
6048    01 C6                     add         si,ax 
604A                          L$675:
604A    8E DA                     mov         ds,dx 
604C    8C DA                     mov         dx,ds 
604E                          L$676:
604E    8A 04                     mov         al,byte ptr [si] 
6050    3A C1                     cmp         al,cl 
6052    74 09                     je          L$677 
6054    46                        inc         si 
6055    3C 00                     cmp         al,0x00 
6057    75 F5                     jne         L$676 
6059    2B F6                     sub         si,si 
605B    2B D2                     sub         dx,dx 
605D                          L$677:
605D    85 D2                     test        dx,dx 
605F    75 04                     jne         L$678 
6061    85 F6                     test        si,si 
6063    74 06                     je          L$679 
6065                          L$678:
6065    FF 46 FE                  inc         word ptr -0x2[bp] 
6068    46                        inc         si 
6069    EB DF                     jmp         L$675 
606B                          L$679:
606B    8B 76 FA                  mov         si,word ptr -0x6[bp] 
606E    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
6071    B1 5C                     mov         cl,0x5c 
6073                          L$680:
6073    80 3C 00                  cmp         byte ptr [si],0x00 
6076    74 13                     je          L$682 
6078    81 3C 2E 2E               cmp         word ptr [si],0x2e2e 
607C    75 05                     jne         L$681 
607E    FF 4E FE                  dec         word ptr -0x2[bp] 
6081    EB 08                     jmp         L$682 
6083                          L$681:
6083    80 3C 2E                  cmp         byte ptr [si],0x2e 
6086    74 03                     je          L$682 
6088    FF 46 FE                  inc         word ptr -0x2[bp] 
608B                          L$682:
608B    8C DA                     mov         dx,ds 
608D                          L$683:
608D    8A 04                     mov         al,byte ptr [si] 
608F    3A C1                     cmp         al,cl 
6091    74 09                     je          L$684 
6093    46                        inc         si 
6094    3C 00                     cmp         al,0x00 
6096    75 F5                     jne         L$683 
6098    2B F6                     sub         si,si 
609A    2B D2                     sub         dx,dx 
609C                          L$684:
609C    89 F3                     mov         bx,si 
609E    8E DA                     mov         ds,dx 
60A0    46                        inc         si 
60A1    85 D2                     test        dx,dx 
60A3    75 CE                     jne         L$680 
60A5    85 DB                     test        bx,bx 
60A7    75 CA                     jne         L$680 
60A9    83 7E FE 00               cmp         word ptr -0x2[bp],0x0000 
60AD    0F 8C 77 FF               jl          L$673 
60B1    BE 01 00                  mov         si,0x0001 
60B4                          L$685:
60B4    89 F0                     mov         ax,si 
60B6    E9 FD C1                  jmp         L$327 

Routine Size: 1119 bytes,    Routine Base: vpu_main_TEXT + 5C5A

60B9                          reset_vpu_interrupt_handlers_:
60B9    53                        push        bx 
60BA    51                        push        cx 
60BB    52                        push        dx 
60BC    56                        push        si 
60BD    C8 02 00 00               enter       0x0002,0x00 
60C1    36 8B 16 00 00            mov         dx,word ptr ss:_vpu_hwint_count 
60C6    89 D6                     mov         si,dx 
60C8    C1 E6 04                  shl         si,0x04 
60CB                          L$686:
60CB    4A                        dec         dx 
60CC    83 EE 10                  sub         si,0x0010 
60CF    83 FA FF                  cmp         dx,0xffff 
60D2    74 1F                     je          L$687 
60D4    36 C5 1E 00 00            lds         bx,dword ptr ss:_vpu_hardware_int_table 
60D9    01 F3                     add         bx,si 
60DB    8B 47 08                  mov         ax,word ptr 0x8[bx] 
60DE    8B 4F 0A                  mov         cx,word ptr 0xa[bx] 
60E1    0F B6 1F                  movzx       bx,byte ptr [bx] 
60E4    89 5E FE                  mov         word ptr -0x2[bp],bx 
60E7    89 C3                     mov         bx,ax 
60E9    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
60EC    9A 00 00 00 00            call        _dos_setvect_ 
60F1    EB D8                     jmp         L$686 
60F3                          L$687:
60F3    C9                        leave       
60F4                          L$688:
60F4    5E                        pop         si 
60F5    5A                        pop         dx 
60F6    59                        pop         cx 
60F7    5B                        pop         bx 
60F8    CB                        retf        

Routine Size: 64 bytes,    Routine Base: vpu_main_TEXT + 60B9

60F9                          set_vpu_interrupt_handlers_:
60F9    53                        push        bx 
60FA    51                        push        cx 
60FB    52                        push        dx 
60FC    56                        push        si 
60FD    C8 02 00 00               enter       0x0002,0x00 
6101    36 8B 16 00 00            mov         dx,word ptr ss:_vpu_hwint_count 
6106    89 D6                     mov         si,dx 
6108    C1 E6 04                  shl         si,0x04 
610B                          L$689:
610B    4A                        dec         dx 
610C    83 EE 10                  sub         si,0x0010 
610F    83 FA FF                  cmp         dx,0xffff 
6112    74 DF                     je          L$687 
6114    36 C5 1E 00 00            lds         bx,dword ptr ss:_vpu_hardware_int_table 
6119    01 F3                     add         bx,si 
611B    8B 47 0C                  mov         ax,word ptr 0xc[bx] 
611E    8B 4F 0E                  mov         cx,word ptr 0xe[bx] 
6121    0F B6 1F                  movzx       bx,byte ptr [bx] 
6124    89 5E FE                  mov         word ptr -0x2[bp],bx 
6127    89 C3                     mov         bx,ax 
6129    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
612C    9A 00 00 00 00            call        _dos_setvect_ 
6131    EB D8                     jmp         L$689 
6133                          new_vpu_interrupt_mask_handler_:
6133    56                        push        si 
6134    57                        push        di 
6135    C8 02 00 00               enter       0x0002,0x00 
6139    88 46 FE                  mov         byte ptr -0x2[bp],al 
613C    89 CE                     mov         si,cx 
613E    89 D1                     mov         cx,dx 
6140    0F B6 46 FE               movzx       ax,byte ptr -0x2[bp] 
6144    9A 00 00 00 00            call        _dos_getvect_ 
6149    8E DE                     mov         ds,si 
614B    89 07                     mov         word ptr [bx],ax 
614D    89 57 02                  mov         word ptr 0x2[bx],dx 
6150    8B 47 02                  mov         ax,word ptr 0x2[bx] 
6153    8B 17                     mov         dx,word ptr [bx] 
6155    85 C0                     test        ax,ax 
6157    75 04                     jne         L$690 
6159    85 D2                     test        dx,dx 
615B    74 0F                     je          L$691 
615D                          L$690:
615D    85 C9                     test        cx,cx 
615F    74 0B                     je          L$691 
6161    BE 00 00                  mov         si,offset dummy_interrupt_mask_handler_cont_ 
6164    B8 00 00                  mov         ax,offset dummy_interrupt_mask_handler_cont_end_ 
6167    BF 00 00                  mov         di,seg dummy_interrupt_mask_handler_cont_ 
616A    EB 09                     jmp         L$692 
616C                          L$691:
616C    BE 00 00                  mov         si,offset dummy_interrupt_mask_handler_ 
616F    B8 00 00                  mov         ax,offset dummy_interrupt_mask_handler_end_ 
6172    BF 00 00                  mov         di,seg dummy_interrupt_mask_handler_ 
6175                          L$692:
6175    29 F0                     sub         ax,si 
6177    89 C1                     mov         cx,ax 
6179    9A 00 00 00 00            call        malloc_ 
617E    89 C3                     mov         bx,ax 
6180    85 D2                     test        dx,dx 
6182    75 0B                     jne         L$693 
6184    85 DB                     test        bx,bx 
6186    75 07                     jne         L$693 
6188    31 C0                     xor         ax,ax 
618A    31 D2                     xor         dx,dx 
618C    E9 41 B1                  jmp         L$160 
618F                          L$693:
618F    8E DF                     mov         ds,di 
6191    8E C2                     mov         es,dx 
6193    89 DF                     mov         di,bx 
6195    57                        push        di 
6196    F3 A4                     rep movsb   
6198    5F                        pop         di 
6199    8E DA                     mov         ds,dx 
619B    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
619E    88 47 02                  mov         byte ptr 0x2[bx],al 
61A1    89 D8                     mov         ax,bx 
61A3    E9 2A B1                  jmp         L$160 
61A6                          set_vpu_hw_int_:
61A6    56                        push        si 
61A7    57                        push        di 
61A8    C8 0C 00 00               enter       0x000c,0x00 
61AC    89 C7                     mov         di,ax 
61AE    89 56 FC                  mov         word ptr -0x4[bp],dx 
61B1    88 5E FE                  mov         byte ptr -0x2[bp],bl 
61B4    89 4E F8                  mov         word ptr -0x8[bp],cx 
61B7    36 A1 00 00               mov         ax,word ptr ss:_vpu_hwint_count 
61BB    89 C2                     mov         dx,ax 
61BD    36 8E 1E 02 00            mov         ds,word ptr ss:_vpu_hardware_int_table+0x2 
61C2    C1 E2 04                  shl         dx,0x04 
61C5                          L$694:
61C5    48                        dec         ax 
61C6    83 EA 10                  sub         dx,0x0010 
61C9    3D FF FF                  cmp         ax,0xffff 
61CC    74 22                     je          L$696 
61CE    36 8B 1E 00 00            mov         bx,word ptr ss:_vpu_hardware_int_table 
61D3    01 D3                     add         bx,dx 
61D5    8B 77 06                  mov         si,word ptr 0x6[bx] 
61D8    8B 4F 04                  mov         cx,word ptr 0x4[bx] 
61DB    3B 76 FC                  cmp         si,word ptr -0x4[bp] 
61DE    75 E5                     jne         L$694 
61E0    39 F9                     cmp         cx,di 
61E2    75 E1                     jne         L$694 
61E4    8A 1F                     mov         bl,byte ptr [bx] 
61E6    3A 5E FE                  cmp         bl,byte ptr -0x2[bp] 
61E9    75 DA                     jne         L$694 
61EB                          L$695:
61EB    31 C0                     xor         ax,ax 
61ED    E9 BB B2                  jmp         L$196 
61F0                          L$696:
61F0    36 FF 06 00 00            inc         word ptr ss:_vpu_hwint_count 
61F5    36 A1 00 00               mov         ax,word ptr ss:_vpu_hwint_count 
61F9    3D 01 00                  cmp         ax,0x0001 
61FC    75 20                     jne         L$698 
61FE    BA 10 00                  mov         dx,0x0010 
6201    9A 00 00 00 00            call        calloc_ 
6206    36 A3 00 00               mov         word ptr ss:_vpu_hardware_int_table,ax 
620A    36 89 16 02 00            mov         word ptr ss:_vpu_hardware_int_table+0x2,dx 
620F    85 D2                     test        dx,dx 
6211    75 2F                     jne         L$700 
6213    85 C0                     test        ax,ax 
6215    75 2B                     jne         L$700 
6217                          L$697:
6217    36 FF 0E 00 00            dec         word ptr ss:_vpu_hwint_count 
621C    EB CD                     jmp         L$695 
621E                          L$698:
621E    36 8B 16 02 00            mov         dx,word ptr ss:_vpu_hardware_int_table+0x2 
6223    89 C3                     mov         bx,ax 
6225    36 A1 00 00               mov         ax,word ptr ss:_vpu_hardware_int_table 
6229    C1 E3 04                  shl         bx,0x04 
622C    9A 00 00 00 00            call        realloc_ 
6231    85 D2                     test        dx,dx 
6233    75 04                     jne         L$699 
6235    85 C0                     test        ax,ax 
6237    74 DE                     je          L$697 
6239                          L$699:
6239    36 A3 00 00               mov         word ptr ss:_vpu_hardware_int_table,ax 
623D    36 89 16 02 00            mov         word ptr ss:_vpu_hardware_int_table+0x2,dx 
6242                          L$700:
6242    0F B6 46 FE               movzx       ax,byte ptr -0x2[bp] 
6246    8B 56 08                  mov         dx,word ptr 0x8[bp] 
6249    8D 5E F4                  lea         bx,-0xc[bp] 
624C    8C D1                     mov         cx,ss 
624E    E8 00 00                  call        new_vpu_interrupt_mask_handler_ 
6251    89 C6                     mov         si,ax 
6253    89 C1                     mov         cx,ax 
6255    89 56 FA                  mov         word ptr -0x6[bp],dx 
6258    85 D2                     test        dx,dx 
625A    75 25                     jne         L$701 
625C    85 C0                     test        ax,ax 
625E    75 21                     jne         L$701 
6260    36 8B 1E 00 00            mov         bx,word ptr ss:_vpu_hwint_count 
6265    36 A1 00 00               mov         ax,word ptr ss:_vpu_hardware_int_table 
6269    36 8B 16 02 00            mov         dx,word ptr ss:_vpu_hardware_int_table+0x2 
626E    83 EB 10                  sub         bx,0x0010 
6271    9A 00 00 00 00            call        realloc_ 
6276    36 A3 00 00               mov         word ptr ss:_vpu_hardware_int_table,ax 
627A    36 89 16 02 00            mov         word ptr ss:_vpu_hardware_int_table+0x2,dx 
627F    EB 96                     jmp         L$697 
6281                          L$701:
6281    36 8B 1E 00 00            mov         bx,word ptr ss:_vpu_hwint_count 
6286    36 C5 06 00 00            lds         ax,dword ptr ss:_vpu_hardware_int_table 
628B    C1 E3 04                  shl         bx,0x04 
628E    01 C3                     add         bx,ax 
6290    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
6293    88 47 F0                  mov         byte ptr -0x10[bx],al 
6296    36 A1 00 00               mov         ax,word ptr ss:_vpu_hwint_count 
629A    36 8B 1E 00 00            mov         bx,word ptr ss:_vpu_hardware_int_table 
629F    C1 E0 04                  shl         ax,0x04 
62A2    36 8E 1E 02 00            mov         ds,word ptr ss:_vpu_hardware_int_table+0x2 
62A7    01 C3                     add         bx,ax 
62A9    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
62AC    89 7F F4                  mov         word ptr -0xc[bx],di 
62AF    89 47 F6                  mov         word ptr -0xa[bx],ax 
62B2    36 8B 1E 00 00            mov         bx,word ptr ss:_vpu_hwint_count 
62B7    36 8B 3E 00 00            mov         di,word ptr ss:_vpu_hardware_int_table 
62BC    C1 E3 04                  shl         bx,0x04 
62BF    36 8E 1E 02 00            mov         ds,word ptr ss:_vpu_hardware_int_table+0x2 
62C4    01 FB                     add         bx,di 
62C6    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
62C9    89 47 F2                  mov         word ptr -0xe[bx],ax 
62CC    36 8B 1E 00 00            mov         bx,word ptr ss:_vpu_hwint_count 
62D1    36 A1 00 00               mov         ax,word ptr ss:_vpu_hardware_int_table 
62D5    C1 E3 04                  shl         bx,0x04 
62D8    36 8E 1E 02 00            mov         ds,word ptr ss:_vpu_hardware_int_table+0x2 
62DD    01 C3                     add         bx,ax 
62DF    89 77 FC                  mov         word ptr -0x4[bx],si 
62E2    89 57 FE                  mov         word ptr -0x2[bx],dx 
62E5    36 8B 1E 00 00            mov         bx,word ptr ss:_vpu_hwint_count 
62EA    36 A1 00 00               mov         ax,word ptr ss:_vpu_hardware_int_table 
62EE    C1 E3 04                  shl         bx,0x04 
62F1    36 8E 1E 02 00            mov         ds,word ptr ss:_vpu_hardware_int_table+0x2 
62F6    01 C3                     add         bx,ax 
62F8    8B 46 F4                  mov         ax,word ptr -0xc[bp] 
62FB    89 47 F8                  mov         word ptr -0x8[bx],ax 
62FE    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
6301    89 47 FA                  mov         word ptr -0x6[bx],ax 
6304    8B 47 F8                  mov         ax,word ptr -0x8[bx] 
6307    8B 5F FA                  mov         bx,word ptr -0x6[bx] 
630A    85 DB                     test        bx,bx 
630C    75 04                     jne         L$702 
630E    85 C0                     test        ax,ax 
6310    74 2B                     je          L$703 
6312                          L$702:
6312    83 7E 08 00               cmp         word ptr 0x8[bp],0x0000 
6316    74 25                     je          L$703 
6318    8E DA                     mov         ds,dx 
631A    8D 5C 0C                  lea         bx,0xc[si] 
631D    36 A1 00 00               mov         ax,word ptr ss:_vpu_hwint_count 
6321    36 8B 36 00 00            mov         si,word ptr ss:_vpu_hardware_int_table 
6326    C1 E0 04                  shl         ax,0x04 
6329    36 8E 06 02 00            mov         es,word ptr ss:_vpu_hardware_int_table+0x2 
632E    01 C6                     add         si,ax 
6330    26 8B 54 F8               mov         dx,word ptr es:-0x8[si] 
6334    26 8B 44 FA               mov         ax,word ptr es:-0x6[si] 
6338    89 17                     mov         word ptr [bx],dx 
633A    89 47 02                  mov         word ptr 0x2[bx],ax 
633D                          L$703:
633D    0F B6 46 FE               movzx       ax,byte ptr -0x2[bp] 
6341    89 CB                     mov         bx,cx 
6343    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
6346    9A 00 00 00 00            call        _dos_setvect_ 
634B    B8 01 00                  mov         ax,0x0001 
634E    E9 5A B1                  jmp         L$196 
6351                          remove_vpu_hw_int_:
6351    51                        push        cx 
6352    56                        push        si 
6353    57                        push        di 
6354    C8 04 00 00               enter       0x0004,0x00 
6358    89 C1                     mov         cx,ax 
635A    89 DE                     mov         si,bx 
635C    36 A1 00 00               mov         ax,word ptr ss:_vpu_hwint_count 
6360    36 8E 1E 02 00            mov         ds,word ptr ss:_vpu_hardware_int_table+0x2 
6365    89 46 FE                  mov         word ptr -0x2[bp],ax 
6368    C1 E0 04                  shl         ax,0x04 
636B                          L$704:
636B    FF 4E FE                  dec         word ptr -0x2[bp] 
636E    2D 10 00                  sub         ax,0x0010 
6371    83 7E FE FF               cmp         word ptr -0x2[bp],0xffff 
6375    74 1E                     je          L$705 
6377    36 8B 1E 00 00            mov         bx,word ptr ss:_vpu_hardware_int_table 
637C    01 C3                     add         bx,ax 
637E    8B 7F 04                  mov         di,word ptr 0x4[bx] 
6381    89 7E FC                  mov         word ptr -0x4[bp],di 
6384    8B 7F 06                  mov         di,word ptr 0x6[bx] 
6387    39 D7                     cmp         di,dx 
6389    75 E0                     jne         L$704 
638B    3B 4E FC                  cmp         cx,word ptr -0x4[bp] 
638E    75 DB                     jne         L$704 
6390    3B 77 02                  cmp         si,word ptr 0x2[bx] 
6393    75 D6                     jne         L$704 
6395                          L$705:
6395    8B 76 FE                  mov         si,word ptr -0x2[bp] 
6398    36 8B 1E 00 00            mov         bx,word ptr ss:_vpu_hardware_int_table 
639D    C1 E6 04                  shl         si,0x04 
63A0    36 8E 1E 02 00            mov         ds,word ptr ss:_vpu_hardware_int_table+0x2 
63A5    01 F3                     add         bx,si 
63A7    8B 47 0C                  mov         ax,word ptr 0xc[bx] 
63AA    8B 57 0E                  mov         dx,word ptr 0xe[bx] 
63AD    9A 00 00 00 00            call        free_ 
63B2    36 C5 1E 00 00            lds         bx,dword ptr ss:_vpu_hardware_int_table 
63B7    01 F3                     add         bx,si 
63B9    8B 57 08                  mov         dx,word ptr 0x8[bx] 
63BC    8B 4F 0A                  mov         cx,word ptr 0xa[bx] 
63BF    0F B6 07                  movzx       ax,byte ptr [bx] 
63C2    89 D3                     mov         bx,dx 
63C4    9A 00 00 00 00            call        _dos_setvect_ 
63C9    89 F0                     mov         ax,si 
63CB                          L$706:
63CB    36 8B 16 00 00            mov         dx,word ptr ss:_vpu_hwint_count 
63D0    4A                        dec         dx 
63D1    3B 56 FE                  cmp         dx,word ptr -0x2[bp] 
63D4    76 22                     jbe         L$707 
63D6    B9 08 00                  mov         cx,0x0008 
63D9    FF 46 FE                  inc         word ptr -0x2[bp] 
63DC    36 8B 1E 02 00            mov         bx,word ptr ss:_vpu_hardware_int_table+0x2 
63E1    36 8B 36 00 00            mov         si,word ptr ss:_vpu_hardware_int_table 
63E6    8E C3                     mov         es,bx 
63E8    01 C6                     add         si,ax 
63EA    8E DB                     mov         ds,bx 
63EC    89 F7                     mov         di,si 
63EE    8D 74 10                  lea         si,0x10[si] 
63F1    05 10 00                  add         ax,0x0010 
63F4    F3 A5                     rep movsw   
63F6    EB D3                     jmp         L$706 
63F8                          L$707:
63F8    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
63FB    36 89 16 00 00            mov         word ptr ss:_vpu_hwint_count,dx 
6400    85 D2                     test        dx,dx 
6402    75 11                     jne         L$708 
6404    36 A1 00 00               mov         ax,word ptr ss:_vpu_hardware_int_table 
6408    36 8B 16 02 00            mov         dx,word ptr ss:_vpu_hardware_int_table+0x2 
640D    9A 00 00 00 00            call        free_ 
6412    E9 DD B7                  jmp         L$272 
6415                          L$708:
6415    36 8B 16 00 00            mov         dx,word ptr ss:_vpu_hardware_int_table 
641A    36 8B 0E 02 00            mov         cx,word ptr ss:_vpu_hardware_int_table+0x2 
641F    89 C3                     mov         bx,ax 
6421    89 D0                     mov         ax,dx 
6423    89 CA                     mov         dx,cx 
6425    9A 00 00 00 00            call        realloc_ 
642A    36 A3 00 00               mov         word ptr ss:_vpu_hardware_int_table,ax 
642E    36 89 16 02 00            mov         word ptr ss:_vpu_hardware_int_table+0x2,dx 
6433    E9 BC B7                  jmp         L$272 
6436                          vpu_addenv_:
6436    56                        push        si 
6437    57                        push        di 
6438    C8 06 00 00               enter       0x0006,0x00 
643C    89 C6                     mov         si,ax 
643E    89 56 FE                  mov         word ptr -0x2[bp],dx 
6441    89 5E FA                  mov         word ptr -0x6[bp],bx 
6444    89 4E FC                  mov         word ptr -0x4[bp],cx 
6447    8E DA                     mov         ds,dx 
6449    8B 44 70                  mov         ax,word ptr 0x70[si] 
644C    89 C2                     mov         dx,ax 
644E    42                        inc         dx 
644F    89 54 70                  mov         word ptr 0x70[si],dx 
6452    85 C0                     test        ax,ax 
6454    75 2B                     jne         L$710 
6456    B8 04 00                  mov         ax,0x0004 
6459    9A 00 00 00 00            call        malloc_ 
645E    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6461    89 44 6C                  mov         word ptr 0x6c[si],ax 
6464    89 54 6E                  mov         word ptr 0x6e[si],dx 
6467    8B 44 6E                  mov         ax,word ptr 0x6e[si] 
646A    8B 54 6C                  mov         dx,word ptr 0x6c[si] 
646D    85 C0                     test        ax,ax 
646F    75 31                     jne         L$712 
6471    85 D2                     test        dx,dx 
6473    75 2D                     jne         L$712 
6475                          L$709:
6475    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6478    B8 FF FF                  mov         ax,0xffff 
647B    FF 4C 70                  dec         word ptr 0x70[si] 
647E    E9 4F AE                  jmp         L$160 
6481                          L$710:
6481    89 D3                     mov         bx,dx 
6483    8B 44 6C                  mov         ax,word ptr 0x6c[si] 
6486    C1 E3 02                  shl         bx,0x02 
6489    8B 54 6E                  mov         dx,word ptr 0x6e[si] 
648C    9A 00 00 00 00            call        realloc_ 
6491    85 D2                     test        dx,dx 
6493    75 04                     jne         L$711 
6495    85 C0                     test        ax,ax 
6497    74 DC                     je          L$709 
6499                          L$711:
6499    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
649C    89 44 6C                  mov         word ptr 0x6c[si],ax 
649F    89 54 6E                  mov         word ptr 0x6e[si],dx 
64A2                          L$712:
64A2    C4 7E FA                  les         di,dword ptr -0x6[bp] 
64A5    B9 FF FF                  mov         cx,0xffff 
64A8    33 C0                     xor         ax,ax 
64AA    F2 AE                     repne scasb 
64AC    F7 D1                     not         cx 
64AE    49                        dec         cx 
64AF    89 C8                     mov         ax,cx 
64B1    40                        inc         ax 
64B2    9A 00 00 00 00            call        malloc_ 
64B7    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
64BA    8B 5C 70                  mov         bx,word ptr 0x70[si] 
64BD    8B 4C 6C                  mov         cx,word ptr 0x6c[si] 
64C0    C1 E3 02                  shl         bx,0x02 
64C3    8E 5C 6E                  mov         ds,word ptr 0x6e[si] 
64C6    01 CB                     add         bx,cx 
64C8    89 47 FC                  mov         word ptr -0x4[bx],ax 
64CB    89 57 FE                  mov         word ptr -0x2[bx],dx 
64CE    8B 47 FC                  mov         ax,word ptr -0x4[bx] 
64D1    85 D2                     test        dx,dx 
64D3    75 2A                     jne         L$713 
64D5    85 C0                     test        ax,ax 
64D7    75 26                     jne         L$713 
64D9    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
64DC    FF 4C 70                  dec         word ptr 0x70[si] 
64DF    8B 44 6C                  mov         ax,word ptr 0x6c[si] 
64E2    8B 5C 70                  mov         bx,word ptr 0x70[si] 
64E5    8B 54 6E                  mov         dx,word ptr 0x6e[si] 
64E8    C1 E3 02                  shl         bx,0x02 
64EB    9A 00 00 00 00            call        realloc_ 
64F0    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
64F3    89 44 6C                  mov         word ptr 0x6c[si],ax 
64F6    89 54 6E                  mov         word ptr 0x6e[si],dx 
64F9    B8 FF FF                  mov         ax,0xffff 
64FC    E9 D1 AD                  jmp         L$160 
64FF                          L$713:
64FF    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6502    8B 44 70                  mov         ax,word ptr 0x70[si] 
6505    8B 5C 6C                  mov         bx,word ptr 0x6c[si] 
6508    C1 E0 02                  shl         ax,0x02 
650B    8E 5C 6E                  mov         ds,word ptr 0x6e[si] 
650E    01 C3                     add         bx,ax 
6510    8B 76 FA                  mov         si,word ptr -0x6[bp] 
6513    C4 7F FC                  les         di,dword ptr -0x4[bx] 
6516    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
6519    57                        push        di 
651A                          L$714:
651A    AC                        lodsb       
651B    AA                        stosb       
651C    3C 00                     cmp         al,0x00 
651E    75 FA                     jne         L$714 
6520    5F                        pop         di 
6521    E9 AA AD                  jmp         L$159 
6524                          init_envs_:
6524    53                        push        bx 
6525    51                        push        cx 
6526    56                        push        si 
6527    57                        push        di 
6528    55                        push        bp 
6529    89 E5                     mov         bp,sp 
652B    50                        push        ax 
652C    52                        push        dx 
652D    36 8B 1E 00 00            mov         bx,word ptr ss:_environ 
6532    31 F6                     xor         si,si 
6534    36 8E 1E 02 00            mov         ds,word ptr ss:_environ+0x2 
6539                          L$715:
6539    8B 47 02                  mov         ax,word ptr 0x2[bx] 
653C    8B 0F                     mov         cx,word ptr [bx] 
653E    85 C0                     test        ax,ax 
6540    75 04                     jne         L$716 
6542    85 C9                     test        cx,cx 
6544    74 06                     je          L$717 
6546                          L$716:
6546    83 C3 04                  add         bx,0x0004 
6549    46                        inc         si 
654A    EB ED                     jmp         L$715 
654C                          L$717:
654C    89 F7                     mov         di,si 
654E    C1 E7 02                  shl         di,0x02 
6551                          L$718:
6551    4E                        dec         si 
6552    83 EF 04                  sub         di,0x0004 
6555    83 FE FF                  cmp         si,0xffff 
6558    0F 84 BC 9F               je          L$36 
655C    36 C5 1E 00 00            lds         bx,dword ptr ss:_environ 
6561    01 FB                     add         bx,di 
6563    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
6566    8B 07                     mov         ax,word ptr [bx] 
6568    8B 4F 02                  mov         cx,word ptr 0x2[bx] 
656B    89 C3                     mov         bx,ax 
656D    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
6570    E8 00 00                  call        vpu_addenv_ 
6573    85 C0                     test        ax,ax 
6575    74 DA                     je          L$718 
6577    E9 98 9F                  jmp         L$35 
657A                          vpu_findenv_:
657A    56                        push        si 
657B    57                        push        di 
657C    C8 0A 00 00               enter       0x000a,0x00 
6580    89 C6                     mov         si,ax 
6582    89 56 F8                  mov         word ptr -0x8[bp],dx 
6585    89 5E FC                  mov         word ptr -0x4[bp],bx 
6588    89 4E FE                  mov         word ptr -0x2[bp],cx 
658B    89 DF                     mov         di,bx 
658D    8E C1                     mov         es,cx 
658F    B9 FF FF                  mov         cx,0xffff 
6592    33 C0                     xor         ax,ax 
6594    F2 AE                     repne scasb 
6596    F7 D1                     not         cx 
6598    49                        dec         cx 
6599    06                        push        es 
659A    1F                        pop         ds 
659B    01 CB                     add         bx,cx 
659D    C6 07 3D                  mov         byte ptr [bx],0x3d 
65A0    8E DA                     mov         ds,dx 
65A2    8B 7C 70                  mov         di,word ptr 0x70[si] 
65A5    89 F8                     mov         ax,di 
65A7    C1 E0 02                  shl         ax,0x02 
65AA    89 4E F6                  mov         word ptr -0xa[bp],cx 
65AD    89 46 FA                  mov         word ptr -0x6[bp],ax 
65B0                          L$719:
65B0    4F                        dec         di 
65B1    83 6E FA 04               sub         word ptr -0x6[bp],0x0004 
65B5    83 FF FF                  cmp         di,0xffff 
65B8    74 25                     je          L$720 
65BA    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
65BD    8B 5C 6C                  mov         bx,word ptr 0x6c[si] 
65C0    FF 76 F6                  push        word ptr -0xa[bp] 
65C3    03 5E FA                  add         bx,word ptr -0x6[bp] 
65C6    8E 5C 6E                  mov         ds,word ptr 0x6e[si] 
65C9    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
65CC    8B 07                     mov         ax,word ptr [bx] 
65CE    8B 4F 02                  mov         cx,word ptr 0x2[bx] 
65D1    89 C3                     mov         bx,ax 
65D3    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
65D6    9A 00 00 00 00            call        strncmp_ 
65DB    85 C0                     test        ax,ax 
65DD    75 D1                     jne         L$719 
65DF                          L$720:
65DF    C5 5E FC                  lds         bx,dword ptr -0x4[bp] 
65E2    03 5E F6                  add         bx,word ptr -0xa[bp] 
65E5    89 F8                     mov         ax,di 
65E7    C6 07 00                  mov         byte ptr [bx],0x00 
65EA    E9 E3 AC                  jmp         L$160 
65ED                          vpu_unsetenv_:
65ED    56                        push        si 
65EE    57                        push        di 
65EF    C8 02 00 00               enter       0x0002,0x00 
65F3    89 C6                     mov         si,ax 
65F5    89 56 FE                  mov         word ptr -0x2[bp],dx 
65F8    E8 00 00                  call        vpu_findenv_ 
65FB    89 C1                     mov         cx,ax 
65FD    3D FF FF                  cmp         ax,0xffff 
6600    75 06                     jne         L$722 
6602                          L$721:
6602    B8 FF FF                  mov         ax,0xffff 
6605    E9 C8 AC                  jmp         L$160 
6608                          L$722:
6608    89 C7                     mov         di,ax 
660A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
660D    C1 E7 02                  shl         di,0x02 
6610    C5 5C 6C                  lds         bx,dword ptr 0x6c[si] 
6613    01 FB                     add         bx,di 
6615    8B 07                     mov         ax,word ptr [bx] 
6617    8B 57 02                  mov         dx,word ptr 0x2[bx] 
661A    9A 00 00 00 00            call        free_ 
661F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6622    FF 4C 70                  dec         word ptr 0x70[si] 
6625    8B 44 70                  mov         ax,word ptr 0x70[si] 
6628    29 C8                     sub         ax,cx 
662A    8D 5D 04                  lea         bx,0x4[di] 
662D    C1 E0 02                  shl         ax,0x02 
6630    8B 54 6E                  mov         dx,word ptr 0x6e[si] 
6633    50                        push        ax 
6634    8B 44 6C                  mov         ax,word ptr 0x6c[si] 
6637    89 D1                     mov         cx,dx 
6639    01 C3                     add         bx,ax 
663B    01 F8                     add         ax,di 
663D    9A 00 00 00 00            call        memmove_ 
6642    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6645    8B 5C 70                  mov         bx,word ptr 0x70[si] 
6648    8B 44 6C                  mov         ax,word ptr 0x6c[si] 
664B    8B 54 6E                  mov         dx,word ptr 0x6e[si] 
664E    C1 E3 02                  shl         bx,0x02 
6651    9A 00 00 00 00            call        realloc_ 
6656    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6659    89 44 6C                  mov         word ptr 0x6c[si],ax 
665C    89 54 6E                  mov         word ptr 0x6e[si],dx 
665F    E9 6C AC                  jmp         L$159 
6662                          vpu_format_env_:
6662    55                        push        bp 
6663    89 E5                     mov         bp,sp 
6665    66 FF 76 04               push        dword ptr 0x4[bp] 
6669    51                        push        cx 
666A    53                        push        bx 
666B    16                        push        ss 
666C    68 5D 07                  push        offset DGROUP:L$1525 
666F    52                        push        dx 
6670    50                        push        ax 
6671    9A 00 00 00 00            call        sprintf_ 
6676    83 C4 10                  add         sp,0x0010 
6679    5D                        pop         bp 
667A    C2 04 00                  ret         0x0004 
667D                          vpu_setenv_:
667D    56                        push        si 
667E    57                        push        di 
667F    C8 0C 00 00               enter       0x000c,0x00 
6683    89 C6                     mov         si,ax 
6685    89 56 FE                  mov         word ptr -0x2[bp],dx 
6688    89 5E FA                  mov         word ptr -0x6[bp],bx 
668B    89 4E FC                  mov         word ptr -0x4[bp],cx 
668E    E8 00 00                  call        vpu_findenv_ 
6691    89 C2                     mov         dx,ax 
6693    3D FF FF                  cmp         ax,0xffff 
6696    0F 84 7E 00               je          L$725 
669A    8B 46 0C                  mov         ax,word ptr 0xc[bp] 
669D    85 C0                     test        ax,ax 
669F    0F 84 2D B7               je          L$284 
66A3    C4 7E FA                  les         di,dword ptr -0x6[bp] 
66A6    B9 FF FF                  mov         cx,0xffff 
66A9    33 C0                     xor         ax,ax 
66AB    F2 AE                     repne scasb 
66AD    F7 D1                     not         cx 
66AF    49                        dec         cx 
66B0    C1 E2 02                  shl         dx,0x02 
66B3    C4 7E 08                  les         di,dword ptr 0x8[bp] 
66B6    89 CB                     mov         bx,cx 
66B8    B9 FF FF                  mov         cx,0xffff 
66BB    33 C0                     xor         ax,ax 
66BD    F2 AE                     repne scasb 
66BF    F7 D1                     not         cx 
66C1    49                        dec         cx 
66C2    89 56 F4                  mov         word ptr -0xc[bp],dx 
66C5    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
66C8    43                        inc         bx 
66C9    8B 7C 6C                  mov         di,word ptr 0x6c[si] 
66CC    01 CB                     add         bx,cx 
66CE    8E 5C 6E                  mov         ds,word ptr 0x6e[si] 
66D1    01 D7                     add         di,dx 
66D3    43                        inc         bx 
66D4    8B 05                     mov         ax,word ptr [di] 
66D6    8B 55 02                  mov         dx,word ptr 0x2[di] 
66D9    9A 00 00 00 00            call        realloc_ 
66DE    89 46 F6                  mov         word ptr -0xa[bp],ax 
66E1    89 D7                     mov         di,dx 
66E3    85 D2                     test        dx,dx 
66E5    75 0A                     jne         L$724 
66E7    85 C0                     test        ax,ax 
66E9    75 06                     jne         L$724 
66EB                          L$723:
66EB    B8 FF FF                  mov         ax,0xffff 
66EE    E9 DF B6                  jmp         L$284 
66F1                          L$724:
66F1    FF 76 0A                  push        word ptr 0xa[bp] 
66F4    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
66F7    FF 76 08                  push        word ptr 0x8[bp] 
66FA    8B 4E FC                  mov         cx,word ptr -0x4[bp] 
66FD    E8 00 00                  call        vpu_format_env_ 
6700    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6703    C5 44 6C                  lds         ax,dword ptr 0x6c[si] 
6706    8B 76 F4                  mov         si,word ptr -0xc[bp] 
6709    01 C6                     add         si,ax 
670B    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
670E    89 7C 02                  mov         word ptr 0x2[si],di 
6711    89 04                     mov         word ptr [si],ax 
6713    31 C0                     xor         ax,ax 
6715    E9 B8 B6                  jmp         L$284 
6718                          L$725:
6718    C4 7E FA                  les         di,dword ptr -0x6[bp] 
671B    B9 FF FF                  mov         cx,0xffff 
671E    33 C0                     xor         ax,ax 
6720    F2 AE                     repne scasb 
6722    F7 D1                     not         cx 
6724    49                        dec         cx 
6725    C4 7E 08                  les         di,dword ptr 0x8[bp] 
6728    89 CA                     mov         dx,cx 
672A    B9 FF FF                  mov         cx,0xffff 
672D    33 C0                     xor         ax,ax 
672F    F2 AE                     repne scasb 
6731    F7 D1                     not         cx 
6733    49                        dec         cx 
6734    89 D0                     mov         ax,dx 
6736    40                        inc         ax 
6737    01 C8                     add         ax,cx 
6739    40                        inc         ax 
673A    9A 00 00 00 00            call        malloc_ 
673F    89 46 F8                  mov         word ptr -0x8[bp],ax 
6742    89 D7                     mov         di,dx 
6744    85 D2                     test        dx,dx 
6746    75 04                     jne         L$726 
6748    85 C0                     test        ax,ax 
674A    74 9F                     je          L$723 
674C                          L$726:
674C    FF 76 0A                  push        word ptr 0xa[bp] 
674F    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
6752    FF 76 08                  push        word ptr 0x8[bp] 
6755    8B 4E FC                  mov         cx,word ptr -0x4[bp] 
6758    E8 00 00                  call        vpu_format_env_ 
675B    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
675E    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
6761    89 F9                     mov         cx,di 
6763    89 F0                     mov         ax,si 
6765    E8 00 00                  call        vpu_addenv_ 
6768    89 C3                     mov         bx,ax 
676A    89 FA                     mov         dx,di 
676C    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
676F    9A 00 00 00 00            call        free_ 
6774    89 D8                     mov         ax,bx 
6776    E9 57 B6                  jmp         L$284 
6779                          vpu_copy_envs_:
6779    56                        push        si 
677A    57                        push        di 
677B    C8 04 00 00               enter       0x0004,0x00 
677F    89 C6                     mov         si,ax 
6781    89 56 FE                  mov         word ptr -0x2[bp],dx 
6784    89 DF                     mov         di,bx 
6786    89 4E FC                  mov         word ptr -0x4[bp],cx 
6789    8E DA                     mov         ds,dx 
678B    C7 44 70 00 00            mov         word ptr 0x70[si],0x0000 
6790                          L$727:
6790    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6793    8B 44 70                  mov         ax,word ptr 0x70[si] 
6796    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
6799    3B 45 70                  cmp         ax,word ptr 0x70[di] 
679C    0F 83 2E AB               jae         L$159 
67A0    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
67A3    8B 5C 70                  mov         bx,word ptr 0x70[si] 
67A6    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
67A9    C1 E3 02                  shl         bx,0x02 
67AC    C5 45 6C                  lds         ax,dword ptr 0x6c[di] 
67AF    01 C3                     add         bx,ax 
67B1    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
67B4    8B 07                     mov         ax,word ptr [bx] 
67B6    8B 4F 02                  mov         cx,word ptr 0x2[bx] 
67B9    89 C3                     mov         bx,ax 
67BB    89 F0                     mov         ax,si 
67BD    E8 00 00                  call        vpu_addenv_ 
67C0    85 C0                     test        ax,ax 
67C2    74 CC                     je          L$727 
67C4                          L$728:
67C4    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
67C7    83 7C 70 00               cmp         word ptr 0x70[si],0x0000 
67CB    74 1D                     je          L$729 
67CD    FF 4C 70                  dec         word ptr 0x70[si] 
67D0    8B 44 70                  mov         ax,word ptr 0x70[si] 
67D3    8B 5C 6C                  mov         bx,word ptr 0x6c[si] 
67D6    C1 E0 02                  shl         ax,0x02 
67D9    8E 5C 6E                  mov         ds,word ptr 0x6e[si] 
67DC    01 C3                     add         bx,ax 
67DE    8B 07                     mov         ax,word ptr [bx] 
67E0    8B 57 02                  mov         dx,word ptr 0x2[bx] 
67E3    9A 00 00 00 00            call        free_ 
67E8    EB DA                     jmp         L$728 
67EA                          L$729:
67EA    8B 44 6C                  mov         ax,word ptr 0x6c[si] 
67ED    8B 54 6E                  mov         dx,word ptr 0x6e[si] 
67F0    9A 00 00 00 00            call        free_ 
67F5    E9 0A FE                  jmp         L$721 
67F8                          vpu_shares_envs_:
67F8    53                        push        bx 
67F9    51                        push        cx 
67FA    56                        push        si 
67FB    57                        push        di 
67FC    C8 06 00 00               enter       0x0006,0x00 
6800    89 C6                     mov         si,ax 
6802    89 56 FE                  mov         word ptr -0x2[bp],dx 
6805    36 A1 00 00               mov         ax,word ptr ss:_vpu_count 
6809    89 C2                     mov         dx,ax 
680B    8E 46 FE                  mov         es,word ptr -0x2[bp] 
680E    C1 E2 02                  shl         dx,0x02 
6811                          L$730:
6811    48                        dec         ax 
6812    83 EA 04                  sub         dx,0x0004 
6815    3D FF FF                  cmp         ax,0xffff 
6818    74 3B                     je          L$732 
681A    36 C5 1E 00 00            lds         bx,dword ptr ss:_vpus 
681F    01 D3                     add         bx,dx 
6821    8B 4F 02                  mov         cx,word ptr 0x2[bx] 
6824    8B 3F                     mov         di,word ptr [bx] 
6826    3B 4E FE                  cmp         cx,word ptr -0x2[bp] 
6829    75 04                     jne         L$731 
682B    39 F7                     cmp         di,si 
682D    74 E2                     je          L$730 
682F                          L$731:
682F    8E D9                     mov         ds,cx 
6831    8B 5D 6C                  mov         bx,word ptr 0x6c[di] 
6834    89 5E FA                  mov         word ptr -0x6[bp],bx 
6837    26 8B 5C 6C               mov         bx,word ptr es:0x6c[si] 
683B    8B 4D 6E                  mov         cx,word ptr 0x6e[di] 
683E    89 5E FC                  mov         word ptr -0x4[bp],bx 
6841    26 8B 5C 6E               mov         bx,word ptr es:0x6e[si] 
6845    39 D9                     cmp         cx,bx 
6847    75 C8                     jne         L$730 
6849    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
684C    3B 5E FC                  cmp         bx,word ptr -0x4[bp] 
684F    75 C0                     jne         L$730 
6851    8C DA                     mov         dx,ds 
6853    EB 04                     jmp         L$733 
6855                          L$732:
6855    31 FF                     xor         di,di 
6857    31 D2                     xor         dx,dx 
6859                          L$733:
6859    89 F8                     mov         ax,di 
685B    E9 D5 3E                  jmp         L$1143 

Routine Size: 1893 bytes,    Routine Base: vpu_main_TEXT + 60F9

685E                          append_path_:
685E    56                        push        si 
685F    57                        push        di 
6860    C8 02 00 00               enter       0x0002,0x00 
6864    89 C6                     mov         si,ax 
6866    89 5E FE                  mov         word ptr -0x2[bp],bx 
6869    8B 5E 0A                  mov         bx,word ptr 0xa[bp] 
686C    89 D0                     mov         ax,dx 
686E    89 CA                     mov         dx,cx 
6870    8E 5E 0C                  mov         ds,word ptr 0xc[bp] 
6873    80 3F 5C                  cmp         byte ptr [bx],0x5c 
6876    74 06                     je          L$734 
6878    80 7F 01 3A               cmp         byte ptr 0x1[bx],0x3a 
687C    75 0F                     jne         L$735 
687E                          L$734:
687E    6A 50                     push        0x0050 
6880    8B 4E 0C                  mov         cx,word ptr 0xc[bp] 
6883    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
6886    9A 00 00 00 00            call        strncpy_ 
688B    EB 51                     jmp         L$739 
688D                          L$735:
688D    8B 7E FE                  mov         di,word ptr -0x2[bp] 
6890    81 C6 CC 00               add         si,0x00cc 
6894    8E D8                     mov         ds,ax 
6896    8E C1                     mov         es,cx 
6898    57                        push        di 
6899                          L$736:
6899    AC                        lodsb       
689A    AA                        stosb       
689B    3C 00                     cmp         al,0x00 
689D    75 FA                     jne         L$736 
689F    5F                        pop         di 
68A0    B9 FF FF                  mov         cx,0xffff 
68A3    33 C0                     xor         ax,ax 
68A5    F2 AE                     repne scasb 
68A7    F7 D1                     not         cx 
68A9    49                        dec         cx 
68AA    8B 76 FE                  mov         si,word ptr -0x2[bp] 
68AD    8E DA                     mov         ds,dx 
68AF    01 CE                     add         si,cx 
68B1    80 7C FF 5C               cmp         byte ptr -0x1[si],0x5c 
68B5    74 1A                     je          L$738 
68B7    BE 63 07                  mov         si,offset DGROUP:L$1526 
68BA    8B 7E FE                  mov         di,word ptr -0x2[bp] 
68BD    16                        push        ss 
68BE    1F                        pop         ds 
68BF    57                        push        di 
68C0    51                        push        cx 
68C1    B9 FF FF                  mov         cx,0xffff 
68C4    B0 00                     mov         al,0x00 
68C6    F2 AE                     repne scasb 
68C8    59                        pop         cx 
68C9    4F                        dec         di 
68CA                          L$737:
68CA    AC                        lodsb       
68CB    AA                        stosb       
68CC    3C 00                     cmp         al,0x00 
68CE    75 FA                     jne         L$737 
68D0    5F                        pop         di 
68D1                          L$738:
68D1    6A 50                     push        0x0050 
68D3    8B 4E 0C                  mov         cx,word ptr 0xc[bp] 
68D6    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
68D9    9A 00 00 00 00            call        strncat_ 
68DE                          L$739:
68DE    C9                        leave       
68DF    5F                        pop         di 
68E0    5E                        pop         si 
68E1    CA 04 00                  retf        0x0004 

Routine Size: 134 bytes,    Routine Base: vpu_main_TEXT + 685E

68E4                          vpu_sched_yield_:
68E4    53                        push        bx 
68E5    89 C3                     mov         bx,ax 
68E7    8E DA                     mov         ds,dx 
68E9    81 8F 8A 01 40 08         or          word ptr 0x18a[bx],0x0840 
68EF    5B                        pop         bx 
68F0    CB                        retf        
68F1                          sync_dup_:
68F1    56                        push        si 
68F2    57                        push        di 
68F3    C8 04 00 00               enter       0x0004,0x00 
68F7    89 C6                     mov         si,ax 
68F9    89 56 FE                  mov         word ptr -0x2[bp],dx 
68FC    8E D9                     mov         ds,cx 
68FE    8E C2                     mov         es,dx 
6900    26 8B 44 02               mov         ax,word ptr es:0x2[si] 
6904    26 8B 3C                  mov         di,word ptr es:[si] 
6907    85 C0                     test        ax,ax 
6909    75 04                     jne         L$740 
690B    85 FF                     test        di,di 
690D    74 31                     je          L$742 
690F                          L$740:
690F    8B 7F 02                  mov         di,word ptr 0x2[bx] 
6912    8B 07                     mov         ax,word ptr [bx] 
6914    85 FF                     test        di,di 
6916    75 04                     jne         L$741 
6918    85 C0                     test        ax,ax 
691A    74 24                     je          L$742 
691C                          L$741:
691C    89 C7                     mov         di,ax 
691E    26 8B 0C                  mov         cx,word ptr es:[si] 
6921    8B 47 02                  mov         ax,word ptr 0x2[bx] 
6924    26 8B 54 02               mov         dx,word ptr es:0x2[si] 
6928    8E C0                     mov         es,ax 
692A    89 56 FC                  mov         word ptr -0x4[bp],dx 
692D    26 8B 15                  mov         dx,word ptr es:[di] 
6930    26 8B 45 02               mov         ax,word ptr es:0x2[di] 
6934    8E 46 FC                  mov         es,word ptr -0x4[bp] 
6937    89 CF                     mov         di,cx 
6939    26 89 15                  mov         word ptr es:[di],dx 
693C    26 89 45 02               mov         word ptr es:0x2[di],ax 
6940                          L$742:
6940    8B 47 1C                  mov         ax,word ptr 0x1c[bx] 
6943    8B 7F 1E                  mov         di,word ptr 0x1e[bx] 
6946    8E 46 FE                  mov         es,word ptr -0x2[bp] 
6949    26 89 44 1C               mov         word ptr es:0x1c[si],ax 
694D    26 89 7C 1E               mov         word ptr es:0x1e[si],di 
6951    8B 47 18                  mov         ax,word ptr 0x18[bx] 
6954    8B 7F 1A                  mov         di,word ptr 0x1a[bx] 
6957    26 89 44 18               mov         word ptr es:0x18[si],ax 
695B    26 89 7C 1A               mov         word ptr es:0x1a[si],di 
695F    8B 7F 08                  mov         di,word ptr 0x8[bx] 
6962    26 89 7C 08               mov         word ptr es:0x8[si],di 
6966    8B 7F 26                  mov         di,word ptr 0x26[bx] 
6969    26 89 7C 26               mov         word ptr es:0x26[si],di 
696D    8B 5F 24                  mov         bx,word ptr 0x24[bx] 
6970    06                        push        es 
6971    1F                        pop         ds 
6972    89 5C 24                  mov         word ptr 0x24[si],bx 
6975    E9 58 A9                  jmp         L$160 
6978                          fd_dup_sync_:
6978    53                        push        bx 
6979    51                        push        cx 
697A    56                        push        si 
697B    57                        push        di 
697C    C8 04 00 00               enter       0x0004,0x00 
6980    50                        push        ax 
6981    89 D7                     mov         di,dx 
6983    89 C6                     mov         si,ax 
6985    89 56 FC                  mov         word ptr -0x4[bp],dx 
6988                          L$743:
6988    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
698B    8B 44 10                  mov         ax,word ptr 0x10[si] 
698E    8B 54 12                  mov         dx,word ptr 0x12[si] 
6991    89 C6                     mov         si,ax 
6993    89 56 FC                  mov         word ptr -0x4[bp],dx 
6996    85 D2                     test        dx,dx 
6998    75 04                     jne         L$744 
699A    85 C0                     test        ax,ax 
699C    74 0A                     je          L$745 
699E                          L$744:
699E    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
69A1    89 F9                     mov         cx,di 
69A3    E8 00 00                  call        sync_dup_ 
69A6    EB E0                     jmp         L$743 
69A8                          L$745:
69A8    8B 76 FA                  mov         si,word ptr -0x6[bp] 
69AB    89 7E FE                  mov         word ptr -0x2[bp],di 
69AE                          L$746:
69AE    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
69B1    8B 44 14                  mov         ax,word ptr 0x14[si] 
69B4    8B 54 16                  mov         dx,word ptr 0x16[si] 
69B7    89 C6                     mov         si,ax 
69B9    89 56 FE                  mov         word ptr -0x2[bp],dx 
69BC    85 D2                     test        dx,dx 
69BE    75 06                     jne         L$747 
69C0    85 C0                     test        ax,ax 
69C2    0F 84 6D 3D               je          L$1143 
69C6                          L$747:
69C6    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
69C9    89 F9                     mov         cx,di 
69CB    E8 00 00                  call        sync_dup_ 
69CE    EB DE                     jmp         L$746 
69D0                          reset_fd_:
69D0    51                        push        cx 
69D1    56                        push        si 
69D2    57                        push        di 
69D3    89 C6                     mov         si,ax 
69D5    8E DA                     mov         ds,dx 
69D7    89 DA                     mov         dx,bx 
69D9    B9 2C 00                  mov         cx,0x002c 
69DC    C1 E2 02                  shl         dx,0x02 
69DF    C4 5C 64                  les         bx,dword ptr 0x64[si] 
69E2    01 D3                     add         bx,dx 
69E4    30 C0                     xor         al,al 
69E6    26 C4 3F                  les         di,dword ptr es:[bx] 
69E9    57                        push        di 
69EA    F3 AA                     rep stosb   
69EC    5F                        pop         di 
69ED    C5 5C 64                  lds         bx,dword ptr 0x64[si] 
69F0    89 DE                     mov         si,bx 
69F2    01 D6                     add         si,dx 
69F4    C5 1C                     lds         bx,dword ptr [si] 
69F6    80 4F 2A 01               or          byte ptr 0x2a[bx],0x01 
69FA    E9 F6 B1                  jmp         L$273 
69FD                          vpu_dd_makedup_:
69FD    51                        push        cx 
69FE    56                        push        si 
69FF    57                        push        di 
6A00    C8 02 00 00               enter       0x0002,0x00 
6A04    50                        push        ax 
6A05    52                        push        dx 
6A06    89 D8                     mov         ax,bx 
6A08    8B 5E 0A                  mov         bx,word ptr 0xa[bp] 
6A0B    8B 56 0E                  mov         dx,word ptr 0xe[bp] 
6A0E    8E 5E 0C                  mov         ds,word ptr 0xc[bp] 
6A11    C1 E2 02                  shl         dx,0x02 
6A14    C5 77 68                  lds         si,dword ptr 0x68[bx] 
6A17    01 D6                     add         si,dx 
6A19    8B 7E FC                  mov         di,word ptr -0x4[bp] 
6A1C    8B 1C                     mov         bx,word ptr [si] 
6A1E    8B 54 02                  mov         dx,word ptr 0x2[si] 
6A21    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
6A24    8B 76 FC                  mov         si,word ptr -0x4[bp] 
6A27    89 56 FE                  mov         word ptr -0x2[bp],dx 
6A2A    89 C2                     mov         dx,ax 
6A2C    8B 74 68                  mov         si,word ptr 0x68[si] 
6A2F    C1 E2 02                  shl         dx,0x02 
6A32    8E 5D 6A                  mov         ds,word ptr 0x6a[di] 
6A35    01 D6                     add         si,dx 
6A37    B9 1B 00                  mov         cx,0x001b 
6A3A    8B 3C                     mov         di,word ptr [si] 
6A3C    8B 74 02                  mov         si,word ptr 0x2[si] 
6A3F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6A42    8E C6                     mov         es,si 
6A44    89 DE                     mov         si,bx 
6A46    F3 A5                     rep movsw   
6A48                          L$748:
6A48    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6A4B    8B 57 30                  mov         dx,word ptr 0x30[bx] 
6A4E    8B 77 2E                  mov         si,word ptr 0x2e[bx] 
6A51    85 D2                     test        dx,dx 
6A53    75 04                     jne         L$749 
6A55    85 F6                     test        si,si 
6A57    74 0C                     je          L$750 
6A59                          L$749:
6A59    89 F2                     mov         dx,si 
6A5B    8B 77 30                  mov         si,word ptr 0x30[bx] 
6A5E    89 D3                     mov         bx,dx 
6A60    89 76 FE                  mov         word ptr -0x2[bp],si 
6A63    EB E3                     jmp         L$748 
6A65                          L$750:
6A65    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
6A68    8B 7E FC                  mov         di,word ptr -0x4[bp] 
6A6B    8B 76 FC                  mov         si,word ptr -0x4[bp] 
6A6E    C1 E0 02                  shl         ax,0x02 
6A71    8B 7D 68                  mov         di,word ptr 0x68[di] 
6A74    8E 5C 6A                  mov         ds,word ptr 0x6a[si] 
6A77    01 C7                     add         di,ax 
6A79    C5 35                     lds         si,dword ptr [di] 
6A7B    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
6A7E    89 5C 32                  mov         word ptr 0x32[si],bx 
6A81    89 54 34                  mov         word ptr 0x34[si],dx 
6A84    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
6A87    8B 76 FC                  mov         si,word ptr -0x4[bp] 
6A8A    8B 7E FC                  mov         di,word ptr -0x4[bp] 
6A8D    8B 74 68                  mov         si,word ptr 0x68[si] 
6A90    8E 5D 6A                  mov         ds,word ptr 0x6a[di] 
6A93    01 C6                     add         si,ax 
6A95    8B 3C                     mov         di,word ptr [si] 
6A97    8B 44 02                  mov         ax,word ptr 0x2[si] 
6A9A    8E DA                     mov         ds,dx 
6A9C    89 7F 2E                  mov         word ptr 0x2e[bx],di 
6A9F    89 47 30                  mov         word ptr 0x30[bx],ax 
6AA2                          L$751:
6AA2    C9                        leave       
6AA3    5F                        pop         di 
6AA4    5E                        pop         si 
6AA5    59                        pop         cx 
6AA6    C2 06 00                  ret         0x0006 
6AA9                          pipe_read_:
6AA9    56                        push        si 
6AAA    57                        push        di 
6AAB    C8 04 00 00               enter       0x0004,0x00 
6AAF    89 C6                     mov         si,ax 
6AB1    8E DA                     mov         ds,dx 
6AB3    89 5E FC                  mov         word ptr -0x4[bp],bx 
6AB6    89 CA                     mov         dx,cx 
6AB8    8D 7C 26                  lea         di,0x26[si] 
6ABB    8D 5C 24                  lea         bx,0x24[si] 
6ABE    8B 07                     mov         ax,word ptr [bx] 
6AC0    2B 05                     sub         ax,word ptr [di] 
6AC2    8C 5E FE                  mov         word ptr -0x2[bp],ds 
6AC5    3B 46 08                  cmp         ax,word ptr 0x8[bp] 
6AC8    73 03                     jae         L$752 
6ACA    89 46 08                  mov         word ptr 0x8[bp],ax 
6ACD                          L$752:
6ACD    FF 76 08                  push        word ptr 0x8[bp] 
6AD0    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
6AD3    68 00 02                  push        0x0200 
6AD6    8B 5C 20                  mov         bx,word ptr 0x20[si] 
6AD9    FF 74 26                  push        word ptr 0x26[si] 
6ADC    8B 4C 22                  mov         cx,word ptr 0x22[si] 
6ADF    E8 00 00                  call        ringcopy_ 
6AE2    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6AE5    8B 46 08                  mov         ax,word ptr 0x8[bp] 
6AE8    01 05                     add         word ptr [di],ax 
6AEA    E9 BE A9                  jmp         L$196 
6AED                          stdin_has_endchar_:
6AED    53                        push        bx 
6AEE    51                        push        cx 
6AEF    56                        push        si 
6AF0    57                        push        di 
6AF1    C8 02 00 00               enter       0x0002,0x00 
6AF5    89 C3                     mov         bx,ax 
6AF7    8E DA                     mov         ds,dx 
6AF9    BE 00 00                  mov         si,offset _stdin_endchars 
6AFC    8C 56 FE                  mov         word ptr -0x2[bp],ss 
6AFF                          L$753:
6AFF    8B 8F D8 06               mov         cx,word ptr 0x6d8[bx] 
6B03    8B BF C0 06               mov         di,word ptr 0x6c0[bx] 
6B07    8B 97 C2 06               mov         dx,word ptr 0x6c2[bx] 
6B0B    8E 46 FE                  mov         es,word ptr -0x2[bp] 
6B0E    26 8A 04                  mov         al,byte ptr es:[si] 
6B11    8E C2                     mov         es,dx 
6B13    E3 08                     jcxz        L$754 
6B15    F2 AE                     repne scasb 
6B17    75 04                     jne         L$754 
6B19    4F                        dec         di 
6B1A    8C C1                     mov         cx,es 
6B1C    A9                                              .
6B1D                          L$754:
6B1D    8B F9                     mov         di,cx 
6B1F    85 C9                     test        cx,cx 
6B21    75 04                     jne         L$755 
6B23    85 FF                     test        di,di 
6B25    74 06                     je          L$756 
6B27                          L$755:
6B27    B8 01 00                  mov         ax,0x0001 
6B2A    E9 06 3C                  jmp         L$1143 
6B2D                          L$756:
6B2D    8E 46 FE                  mov         es,word ptr -0x2[bp] 
6B30    46                        inc         si 
6B31    26 8A 04                  mov         al,byte ptr es:[si] 
6B34    84 C0                     test        al,al 
6B36    75 C7                     jne         L$753 
6B38    30 E4                     xor         ah,ah 
6B3A    E9 F6 3B                  jmp         L$1143 
6B3D                          con_stdin_read_:
6B3D    53                        push        bx 
6B3E    52                        push        dx 
6B3F    56                        push        si 
6B40    57                        push        di 
6B41    55                        push        bp 
6B42    31 ED                     xor         bp,bp 
6B44    C5 9E 00 00               lds         bx,dword ptr _running_console[bp] 
6B48    C5 77 3A                  lds         si,dword ptr 0x3a[bx] 
6B4B    F6 44 0F 02               test        byte ptr 0xf[si],0x02 
6B4F    75 0D                     jne         L$757 
6B51    89 F0                     mov         ax,si 
6B53    8C DA                     mov         dx,ds 
6B55    E8 00 00                  call        stdin_has_endchar_ 
6B58    85 C0                     test        ax,ax 
6B5A    0F 84 93 00               je          L$759 
6B5E                          L$757:
6B5E    C5 B6 00 00               lds         si,dword ptr _running_console[bp] 
6B62    C5 5C 3A                  lds         bx,dword ptr 0x3a[si] 
6B65    8B 87 C2 06               mov         ax,word ptr 0x6c2[bx] 
6B69    8B B7 C0 06               mov         si,word ptr 0x6c0[bx] 
6B6D    8E C0                     mov         es,ax 
6B6F    8B BF C6 06               mov         di,word ptr 0x6c6[bx] 
6B73    01 F7                     add         di,si 
6B75    26 80 3D 00               cmp         byte ptr es:[di],0x00 
6B79    74 1D                     je          L$758 
6B7B    8B 87 C6 06               mov         ax,word ptr 0x6c6[bx] 
6B7F    89 C2                     mov         dx,ax 
6B81    42                        inc         dx 
6B82    89 97 C6 06               mov         word ptr 0x6c6[bx],dx 
6B86    C5 9E 00 00               lds         bx,dword ptr _running_console[bp] 
6B8A    C5 77 3A                  lds         si,dword ptr 0x3a[bx] 
6B8D    C5 9C C0 06               lds         bx,dword ptr 0x6c0[si] 
6B91    01 C3                     add         bx,ax 
6B93    0F B6 07                  movzx       ax,byte ptr [bx] 
6B96    EB 5C                     jmp         L$760 
6B98                          L$758:
6B98    8E D8                     mov         ds,ax 
6B9A    C6 04 00                  mov         byte ptr [si],0x00 
6B9D    C5 9E 00 00               lds         bx,dword ptr _running_console[bp] 
6BA1    C5 77 3A                  lds         si,dword ptr 0x3a[bx] 
6BA4    C7 84 C6 06 00 00         mov         word ptr 0x6c6[si],0x0000 
6BAA    C5 9E 00 00               lds         bx,dword ptr _running_console[bp] 
6BAE    C5 77 3A                  lds         si,dword ptr 0x3a[bx] 
6BB1    C7 84 D8 06 00 00         mov         word ptr 0x6d8[si],0x0000 
6BB7    C5 B6 00 00               lds         si,dword ptr _running_console[bp] 
6BBB    C5 5C 3A                  lds         bx,dword ptr 0x3a[si] 
6BBE    83 BF C4 06 20            cmp         word ptr 0x6c4[bx],0x0020 
6BC3    74 2C                     je          L$759 
6BC5    8B 87 C0 06               mov         ax,word ptr 0x6c0[bx] 
6BC9    8B 97 C2 06               mov         dx,word ptr 0x6c2[bx] 
6BCD    BB 20 00                  mov         bx,0x0020 
6BD0    9A 00 00 00 00            call        realloc_ 
6BD5    C5 9E 00 00               lds         bx,dword ptr _running_console[bp] 
6BD9    C5 77 3A                  lds         si,dword ptr 0x3a[bx] 
6BDC    89 84 C0 06               mov         word ptr 0x6c0[si],ax 
6BE0    89 94 C2 06               mov         word ptr 0x6c2[si],dx 
6BE4    C5 9E 00 00               lds         bx,dword ptr _running_console[bp] 
6BE8    C5 77 3A                  lds         si,dword ptr 0x3a[bx] 
6BEB    C7 84 C4 06 20 00         mov         word ptr 0x6c4[si],0x0020 
6BF1                          L$759:
6BF1    B8 FF FF                  mov         ax,0xffff 
6BF4                          L$760:
6BF4    5D                        pop         bp 
6BF5    E9 D1 B3                  jmp         L$304 
6BF8                          con_fsync_:
6BF8    53                        push        bx 
6BF9    52                        push        dx 
6BFA    56                        push        si 
6BFB    55                        push        bp 
6BFC    31 ED                     xor         bp,bp 
6BFE    9A 00 00 00 00            call        flush_stdout_ 
6C03    C5 9E 00 00               lds         bx,dword ptr _running_console[bp] 
6C07    C5 77 3A                  lds         si,dword ptr 0x3a[bx] 
6C0A    C7 84 CE 06 00 00         mov         word ptr 0x6ce[si],0x0000 
6C10    C5 B6 00 00               lds         si,dword ptr _running_console[bp] 
6C14    C5 5C 3A                  lds         bx,dword ptr 0x3a[si] 
6C17    83 BF CC 06 20            cmp         word ptr 0x6cc[bx],0x0020 
6C1C    74 2C                     je          L$761 
6C1E    8B 87 C8 06               mov         ax,word ptr 0x6c8[bx] 
6C22    8B 97 CA 06               mov         dx,word ptr 0x6ca[bx] 
6C26    BB 20 00                  mov         bx,0x0020 
6C29    9A 00 00 00 00            call        realloc_ 
6C2E    C5 B6 00 00               lds         si,dword ptr _running_console[bp] 
6C32    C5 5C 3A                  lds         bx,dword ptr 0x3a[si] 
6C35    89 87 C8 06               mov         word ptr 0x6c8[bx],ax 
6C39    89 97 CA 06               mov         word ptr 0x6ca[bx],dx 
6C3D    C5 9E 00 00               lds         bx,dword ptr _running_console[bp] 
6C41    C5 77 3A                  lds         si,dword ptr 0x3a[bx] 
6C44    C7 84 CC 06 20 00         mov         word ptr 0x6cc[si],0x0020 
6C4A                          L$761:
6C4A    5D                        pop         bp 
6C4B    E9 7C B3                  jmp         L$305 
6C4E                          con_stdout_write_:
6C4E    53                        push        bx 
6C4F    51                        push        cx 
6C50    52                        push        dx 
6C51    56                        push        si 
6C52    55                        push        bp 
6C53    31 ED                     xor         bp,bp 
6C55    3C 08                     cmp         al,0x08 
6C57    75 0B                     jne         L$763 
6C59    9A 00 00 00 00            call        con_move_back_ 
6C5E                          L$762:
6C5E    B8 03 00                  mov         ax,0x0003 
6C61    E9 82 00                  jmp         L$767 
6C64                          L$763:
6C64    3C 0A                     cmp         al,0x0a 
6C66    75 0A                     jne         L$764 
6C68    E8 00 00                  call        con_fsync_ 
6C6B    9A 00 00 00 00            call        inc_row_ 
6C70    EB EC                     jmp         L$762 
6C72                          L$764:
6C72    C5 9E 00 00               lds         bx,dword ptr _running_console[bp] 
6C76    C5 77 3A                  lds         si,dword ptr 0x3a[bx] 
6C79    8B 94 CE 06               mov         dx,word ptr 0x6ce[si] 
6C7D    89 D3                     mov         bx,dx 
6C7F    43                        inc         bx 
6C80    89 9C CE 06               mov         word ptr 0x6ce[si],bx 
6C84    C5 B6 00 00               lds         si,dword ptr _running_console[bp] 
6C88    C5 5C 3A                  lds         bx,dword ptr 0x3a[si] 
6C8B    C5 8F C8 06               lds         cx,dword ptr 0x6c8[bx] 
6C8F    89 CB                     mov         bx,cx 
6C91    01 D3                     add         bx,dx 
6C93    88 07                     mov         byte ptr [bx],al 
6C95    C5 B6 00 00               lds         si,dword ptr _running_console[bp] 
6C99    C5 5C 3A                  lds         bx,dword ptr 0x3a[si] 
6C9C    8B 87 CC 06               mov         ax,word ptr 0x6cc[bx] 
6CA0    48                        dec         ax 
6CA1    3B 87 CE 06               cmp         ax,word ptr 0x6ce[bx] 
6CA5    75 3D                     jne         L$766 
6CA7    83 87 CC 06 20            add         word ptr 0x6cc[bx],0x0020 
6CAC    8B 87 CC 06               mov         ax,word ptr 0x6cc[bx] 
6CB0    C5 9E 00 00               lds         bx,dword ptr _running_console[bp] 
6CB4    C5 77 3A                  lds         si,dword ptr 0x3a[bx] 
6CB7    89 C3                     mov         bx,ax 
6CB9    8B 8C C8 06               mov         cx,word ptr 0x6c8[si] 
6CBD    8B 94 CA 06               mov         dx,word ptr 0x6ca[si] 
6CC1    89 C8                     mov         ax,cx 
6CC3    9A 00 00 00 00            call        realloc_ 
6CC8    85 D2                     test        dx,dx 
6CCA    75 09                     jne         L$765 
6CCC    85 C0                     test        ax,ax 
6CCE    75 05                     jne         L$765 
6CD0    E8 00 00                  call        con_fsync_ 
6CD3    EB 89                     jmp         L$762 
6CD5                          L$765:
6CD5    C5 9E 00 00               lds         bx,dword ptr _running_console[bp] 
6CD9    C5 77 3A                  lds         si,dword ptr 0x3a[bx] 
6CDC    89 84 C8 06               mov         word ptr 0x6c8[si],ax 
6CE0    89 94 CA 06               mov         word ptr 0x6ca[si],dx 
6CE4                          L$766:
6CE4    31 C0                     xor         ax,ax 
6CE6                          L$767:
6CE6    5D                        pop         bp 
6CE7                          L$768:
6CE7    5E                        pop         si 
6CE8                          L$769:
6CE8    5A                        pop         dx 
6CE9    59                        pop         cx 
6CEA    5B                        pop         bx 
6CEB    C3                        ret         
6CEC                          vpu_syscall_read_:
6CEC    53                        push        bx 
6CED    51                        push        cx 
6CEE    56                        push        si 
6CEF    57                        push        di 
6CF0    C8 0E 00 00               enter       0x000e,0x00 
6CF4    89 C6                     mov         si,ax 
6CF6    89 56 FE                  mov         word ptr -0x2[bp],dx 
6CF9    8E DA                     mov         ds,dx 
6CFB    8B 5C 14                  mov         bx,word ptr 0x14[si] 
6CFE    8B 44 48                  mov         ax,word ptr 0x48[si] 
6D01    C1 E3 02                  shl         bx,0x02 
6D04    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
6D07    01 C3                     add         bx,ax 
6D09    8B 17                     mov         dx,word ptr [bx] 
6D0B    8B 47 02                  mov         ax,word ptr 0x2[bx] 
6D0E    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6D11    89 46 F6                  mov         word ptr -0xa[bp],ax 
6D14    8B 44 02                  mov         ax,word ptr 0x2[si] 
6D17    01 D0                     add         ax,dx 
6D19    89 46 F4                  mov         word ptr -0xc[bp],ax 
6D1C    8B 44 04                  mov         ax,word ptr 0x4[si] 
6D1F    89 46 F8                  mov         word ptr -0x8[bp],ax 
6D22    8B 44 06                  mov         ax,word ptr 0x6[si] 
6D25    89 C3                     mov         bx,ax 
6D27    89 46 F2                  mov         word ptr -0xe[bp],ax 
6D2A    C1 E3 02                  shl         bx,0x02 
6D2D    C5 44 64                  lds         ax,dword ptr 0x64[si] 
6D30    01 C3                     add         bx,ax 
6D32    8B 47 02                  mov         ax,word ptr 0x2[bx] 
6D35    C7 46 FA FF FF            mov         word ptr -0x6[bp],0xffff 
6D3A    89 46 FC                  mov         word ptr -0x4[bp],ax 
6D3D    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
6D40    8B 3F                     mov         di,word ptr [bx] 
6D42    85 C0                     test        ax,ax 
6D44    74 24                     je          L$770 
6D46    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6D49    31 D2                     xor         dx,dx 
6D4B    8B 5C 02                  mov         bx,word ptr 0x2[si] 
6D4E    31 C9                     xor         cx,cx 
6D50    01 C3                     add         bx,ax 
6D52    89 F0                     mov         ax,si 
6D54    11 D1                     adc         cx,dx 
6D56    8C DA                     mov         dx,ds 
6D58    83 C3 FF                  add         bx,0xffff 
6D5B    83 D1 FF                  adc         cx,0xffff 
6D5E    E8 00 00                  call        memory_allowed_ 
6D61    84 C0                     test        al,al 
6D63    75 05                     jne         L$770 
6D65    30 E4                     xor         ah,ah 
6D67    E9 97 2C                  jmp         L$1046 
6D6A                          L$770:
6D6A    83 7E F2 3C               cmp         word ptr -0xe[bp],0x003c 
6D6E    0F 83 55 01               jae         L$790 
6D72    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
6D75    F6 45 2A 01               test        byte ptr 0x2a[di],0x01 
6D79    0F 84 4A 01               je          L$790 
6D7D    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
6D80    FF 46 FA                  inc         word ptr -0x6[bp] 
6D83    85 C0                     test        ax,ax 
6D85    75 08                     jne         L$771 
6D87    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6D8A    89 04                     mov         word ptr [si],ax 
6D8C    E9 72 2C                  jmp         L$1046 
6D8F                          L$771:
6D8F    8A 45 0A                  mov         al,byte ptr 0xa[di] 
6D92    84 C0                     test        al,al 
6D94    75 37                     jne         L$775 
6D96    B8 00 00                  mov         ax,seg _diskio_in_progress 
6D99    8E D8                     mov         ds,ax 
6D9B    80 3E 00 00 00            cmp         byte ptr _diskio_in_progress,0x00 
6DA0    74 11                     je          L$773 
6DA2                          L$772:
6DA2    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6DA5    FF 4C 12                  dec         word ptr 0x12[si] 
6DA8    B8 03 00                  mov         ax,0x0003 
6DAB    80 8C 8B 01 02            or          byte ptr 0x18b[si],0x02 
6DB0    E9 4E 2C                  jmp         L$1046 
6DB3                          L$773:
6DB3    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
6DB6    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
6DB9    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
6DBC    8B 4E F6                  mov         cx,word ptr -0xa[bp] 
6DBF    8B 45 28                  mov         ax,word ptr 0x28[di] 
6DC2    9A 00 00 00 00            call        read_ 
6DC7                          L$774:
6DC7    89 46 FA                  mov         word ptr -0x6[bp],ax 
6DCA    E9 A2 00                  jmp         L$783 
6DCD                          L$775:
6DCD    3C 09                     cmp         al,0x09 
6DCF    75 25                     jne         L$776 
6DD1    B8 00 00                  mov         ax,seg _diskio_in_progress 
6DD4    8E D8                     mov         ds,ax 
6DD6    80 3E 00 00 00            cmp         byte ptr _diskio_in_progress,0x00 
6DDB    75 C5                     jne         L$772 
6DDD    FF 76 F8                  push        word ptr -0x8[bp] 
6DE0    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
6DE3    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
6DE6    8B 4E F6                  mov         cx,word ptr -0xa[bp] 
6DE9    8B 55 0E                  mov         dx,word ptr 0xe[di] 
6DEC    8B 45 0C                  mov         ax,word ptr 0xc[di] 
6DEF    9A 00 00 00 00            call        dev_read_ 
6DF4    EB D1                     jmp         L$774 
6DF6                          L$776:
6DF6    3C 0B                     cmp         al,0x0b 
6DF8    75 12                     jne         L$777 
6DFA    FF 76 F8                  push        word ptr -0x8[bp] 
6DFD    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
6E00    8B 4E F6                  mov         cx,word ptr -0xa[bp] 
6E03    89 F8                     mov         ax,di 
6E05    8C DA                     mov         dx,ds 
6E07    E8 00 00                  call        pipe_read_ 
6E0A    EB BB                     jmp         L$774 
6E0C                          L$777:
6E0C    FF 4E F8                  dec         word ptr -0x8[bp] 
6E0F    83 7E F8 FF               cmp         word ptr -0x8[bp],0xffff 
6E13    74 5A                     je          L$783 
6E15    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
6E18    8A 45 0A                  mov         al,byte ptr 0xa[di] 
6E1B    3C 04                     cmp         al,0x04 
6E1D    77 0B                     ja          L$778 
6E1F    FE C8                     dec         al 
6E21    30 E4                     xor         ah,ah 
6E23    9A 00 00 00 00            call        serial_read_ 
6E28    EB 07                     jmp         L$779 
6E2A                          L$778:
6E2A    3C 0C                     cmp         al,0x0c 
6E2C    75 0F                     jne         L$780 
6E2E    E8 00 00                  call        con_stdin_read_ 
6E31                          L$779:
6E31    89 C2                     mov         dx,ax 
6E33    83 FA FF                  cmp         dx,0xffff 
6E36    74 37                     je          L$783 
6E38    83 FA FE                  cmp         dx,0xfffe 
6E3B    75 07                     jne         L$781 
6E3D                          L$780:
6E3D    C7 46 FA FF FF            mov         word ptr -0x6[bp],0xffff 
6E42    EB 42                     jmp         L$785 
6E44                          L$781:
6E44    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
6E47    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
6E4A    03 5E F4                  add         bx,word ptr -0xc[bp] 
6E4D    88 17                     mov         byte ptr [bx],dl 
6E4F    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
6E52    FF 46 FA                  inc         word ptr -0x6[bp] 
6E55    8B 45 02                  mov         ax,word ptr 0x2[di] 
6E58    8B 15                     mov         dx,word ptr [di] 
6E5A    85 C0                     test        ax,ax 
6E5C    75 04                     jne         L$782 
6E5E    85 D2                     test        dx,dx 
6E60    74 AA                     je          L$777 
6E62                          L$782:
6E62    89 D3                     mov         bx,dx 
6E64    8E D8                     mov         ds,ax 
6E66    83 07 01                  add         word ptr [bx],0x0001 
6E69    83 57 02 00               adc         word ptr 0x2[bx],0x0000 
6E6D    EB 9D                     jmp         L$777 
6E6F                          L$783:
6E6F    83 7E FA 00               cmp         word ptr -0x6[bp],0x0000 
6E73    75 0B                     jne         L$784 
6E75    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
6E78    F6 45 09 10               test        byte ptr 0x9[di],0x10 
6E7C    0F 84 22 FF               je          L$772 
6E80                          L$784:
6E80    83 7E FA FF               cmp         word ptr -0x6[bp],0xffff 
6E84    75 1A                     jne         L$786 
6E86                          L$785:
6E86    8B 5E F2                  mov         bx,word ptr -0xe[bp] 
6E89    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
6E8C    89 F0                     mov         ax,si 
6E8E    E8 00 00                  call        save_file_errno_ 
6E91    85 C0                     test        ax,ax 
6E93    7F 2A                     jg          L$789 
6E95    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6E98    C7 84 6E 01 00 01         mov         word ptr 0x16e[si],0x0100 
6E9E    EB 1F                     jmp         L$789 
6EA0                          L$786:
6EA0    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
6EA3    8B 45 02                  mov         ax,word ptr 0x2[di] 
6EA6    8B 15                     mov         dx,word ptr [di] 
6EA8    85 C0                     test        ax,ax 
6EAA    75 04                     jne         L$787 
6EAC    85 D2                     test        dx,dx 
6EAE    74 0F                     je          L$789 
6EB0                          L$787:
6EB0    89 D3                     mov         bx,dx 
6EB2    8E 5D 02                  mov         ds,word ptr 0x2[di] 
6EB5                          L$788:
6EB5    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
6EB8    31 C0                     xor         ax,ax 
6EBA    01 17                     add         word ptr [bx],dx 
6EBC    11 47 02                  adc         word ptr 0x2[bx],ax 
6EBF                          L$789:
6EBF    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
6EC2    89 F8                     mov         ax,di 
6EC4    E8 00 00                  call        fd_dup_sync_ 
6EC7                          L$790:
6EC7    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6ECA    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
6ECD    E9 B3 E6                  jmp         L$616 
6ED0                          pipe_write_:
6ED0    56                        push        si 
6ED1    57                        push        di 
6ED2    C8 04 00 00               enter       0x0004,0x00 
6ED6    50                        push        ax 
6ED7    52                        push        dx 
6ED8    89 DE                     mov         si,bx 
6EDA    89 4E FE                  mov         word ptr -0x2[bp],cx 
6EDD    8E D9                     mov         ds,cx 
6EDF    8B 54 1A                  mov         dx,word ptr 0x1a[si] 
6EE2    8B 44 18                  mov         ax,word ptr 0x18[si] 
6EE5    89 56 FC                  mov         word ptr -0x4[bp],dx 
6EE8    89 C7                     mov         di,ax 
6EEA    8E DA                     mov         ds,dx 
6EEC    89 C3                     mov         bx,ax 
6EEE    83 C7 24                  add         di,0x0024 
6EF1    83 C3 26                  add         bx,0x0026 
6EF4    85 D2                     test        dx,dx 
6EF6    75 27                     jne         L$792 
6EF8    85 C0                     test        ax,ax 
6EFA    75 23                     jne         L$792 
6EFC    BB 0D 00                  mov         bx,0x000d 
6EFF    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
6F02    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
6F05    0E                        push        cs 
6F06    E8 00 00                  call        send_vpu_signal_ 
6F09    85 C0                     test        ax,ax 
6F0B    74 0D                     je          L$791 
6F0D    BB 06 00                  mov         bx,0x0006 
6F10    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
6F13    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
6F16    0E                        push        cs 
6F17    E8 00 00                  call        send_vpu_signal_ 
6F1A                          L$791:
6F1A    31 C0                     xor         ax,ax 
6F1C    E9 B1 AE                  jmp         L$284 
6F1F                          L$792:
6F1F    8B 07                     mov         ax,word ptr [bx] 
6F21    80 C4 02                  add         ah,0x02 
6F24    2B 05                     sub         ax,word ptr [di] 
6F26    3B 46 0C                  cmp         ax,word ptr 0xc[bp] 
6F29    73 03                     jae         L$793 
6F2B    89 46 0C                  mov         word ptr 0xc[bp],ax 
6F2E                          L$793:
6F2E    FF 76 0C                  push        word ptr 0xc[bp] 
6F31    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
6F34    68 00 02                  push        0x0200 
6F37    FF 35                     push        word ptr [di] 
6F39    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6F3C    C5 5C 18                  lds         bx,dword ptr 0x18[si] 
6F3F    8B 4E 0A                  mov         cx,word ptr 0xa[bp] 
6F42    8B 47 20                  mov         ax,word ptr 0x20[bx] 
6F45    8B 57 22                  mov         dx,word ptr 0x22[bx] 
6F48    8B 5E 08                  mov         bx,word ptr 0x8[bp] 
6F4B    E8 00 00                  call        copy2ring_ 
6F4E    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
6F51    8B 46 0C                  mov         ax,word ptr 0xc[bp] 
6F54    01 05                     add         word ptr [di],ax 
6F56    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6F59    8B 44 18                  mov         ax,word ptr 0x18[si] 
6F5C    8B 54 1A                  mov         dx,word ptr 0x1a[si] 
6F5F    E8 00 00                  call        fd_dup_sync_ 
6F62    8B 46 0C                  mov         ax,word ptr 0xc[bp] 
6F65    E9 68 AE                  jmp         L$284 
6F68                          vpu_syscall_write_:
6F68    53                        push        bx 
6F69    51                        push        cx 
6F6A    56                        push        si 
6F6B    57                        push        di 
6F6C    C8 0E 00 00               enter       0x000e,0x00 
6F70    89 C6                     mov         si,ax 
6F72    89 56 FE                  mov         word ptr -0x2[bp],dx 
6F75    8E DA                     mov         ds,dx 
6F77    8B 5C 14                  mov         bx,word ptr 0x14[si] 
6F7A    8B 44 48                  mov         ax,word ptr 0x48[si] 
6F7D    C1 E3 02                  shl         bx,0x02 
6F80    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
6F83    01 C3                     add         bx,ax 
6F85    8B 17                     mov         dx,word ptr [bx] 
6F87    8B 47 02                  mov         ax,word ptr 0x2[bx] 
6F8A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6F8D    89 46 F6                  mov         word ptr -0xa[bp],ax 
6F90    8B 44 02                  mov         ax,word ptr 0x2[si] 
6F93    01 D0                     add         ax,dx 
6F95    89 46 F4                  mov         word ptr -0xc[bp],ax 
6F98    8B 44 04                  mov         ax,word ptr 0x4[si] 
6F9B    89 46 F8                  mov         word ptr -0x8[bp],ax 
6F9E    8B 44 06                  mov         ax,word ptr 0x6[si] 
6FA1    8B 5C 64                  mov         bx,word ptr 0x64[si] 
6FA4    89 46 F2                  mov         word ptr -0xe[bp],ax 
6FA7    C1 E0 02                  shl         ax,0x02 
6FAA    8E 5C 66                  mov         ds,word ptr 0x66[si] 
6FAD    01 C3                     add         bx,ax 
6FAF    C7 46 FA FF FF            mov         word ptr -0x6[bp],0xffff 
6FB4    8B 47 02                  mov         ax,word ptr 0x2[bx] 
6FB7    8B 3F                     mov         di,word ptr [bx] 
6FB9    89 46 FC                  mov         word ptr -0x4[bp],ax 
6FBC    83 7E F8 00               cmp         word ptr -0x8[bp],0x0000 
6FC0    74 25                     je          L$794 
6FC2    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
6FC5    31 C0                     xor         ax,ax 
6FC7    31 C9                     xor         cx,cx 
6FC9    8B 5C 02                  mov         bx,word ptr 0x2[si] 
6FCC    8C DA                     mov         dx,ds 
6FCE    03 5E F8                  add         bx,word ptr -0x8[bp] 
6FD1    11 C1                     adc         cx,ax 
6FD3    89 F0                     mov         ax,si 
6FD5    83 C3 FF                  add         bx,0xffff 
6FD8    83 D1 FF                  adc         cx,0xffff 
6FDB    E8 00 00                  call        memory_allowed_ 
6FDE    84 C0                     test        al,al 
6FE0    75 05                     jne         L$794 
6FE2    30 E4                     xor         ah,ah 
6FE4    E9 1A 2A                  jmp         L$1046 
6FE7                          L$794:
6FE7    83 7E F2 3C               cmp         word ptr -0xe[bp],0x003c 
6FEB    0F 83 D8 FE               jae         L$790 
6FEF    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
6FF2    F6 45 2A 01               test        byte ptr 0x2a[di],0x01 
6FF6    0F 84 CD FE               je          L$790 
6FFA    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
6FFD    FF 46 FA                  inc         word ptr -0x6[bp] 
7000    85 C0                     test        ax,ax 
7002    75 08                     jne         L$795 
7004    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7007    89 04                     mov         word ptr [si],ax 
7009    E9 F5 29                  jmp         L$1046 
700C                          L$795:
700C    8A 45 0A                  mov         al,byte ptr 0xa[di] 
700F    84 C0                     test        al,al 
7011    75 55                     jne         L$799 
7013    B8 00 00                  mov         ax,seg _diskio_in_progress 
7016    8E D8                     mov         ds,ax 
7018    80 3E 00 00 00            cmp         byte ptr _diskio_in_progress,0x00 
701D    74 11                     je          L$797 
701F                          L$796:
701F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7022    FF 4C 12                  dec         word ptr 0x12[si] 
7025    B8 03 00                  mov         ax,0x0003 
7028    80 8C 8B 01 02            or          byte ptr 0x18b[si],0x02 
702D    E9 D1 29                  jmp         L$1046 
7030                          L$797:
7030    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
7033    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
7036    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
7039    8B 4E F6                  mov         cx,word ptr -0xa[bp] 
703C    8B 45 28                  mov         ax,word ptr 0x28[di] 
703F    9A 00 00 00 00            call        write_ 
7044    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
7047    89 46 FA                  mov         word ptr -0x6[bp],ax 
704A    83 7D 08 08               cmp         word ptr 0x8[di],0x0008 
704E    0F 85 D5 00               jne         L$807 
7052    8B 45 28                  mov         ax,word ptr 0x28[di] 
7055    9A 00 00 00 00            call        fsync_ 
705A    85 C0                     test        ax,ax 
705C    0F 84 C7 00               je          L$807 
7060                          L$798:
7060    C7 46 FA FF FF            mov         word ptr -0x6[bp],0xffff 
7065    E9 D6 00                  jmp         L$809 
7068                          L$799:
7068    3C 09                     cmp         al,0x09 
706A    75 29                     jne         L$801 
706C    B8 00 00                  mov         ax,seg _diskio_in_progress 
706F    8E D8                     mov         ds,ax 
7071    80 3E 00 00 00            cmp         byte ptr _diskio_in_progress,0x00 
7076    75 A7                     jne         L$796 
7078    FF 76 F8                  push        word ptr -0x8[bp] 
707B    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
707E    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
7081    8B 4E F6                  mov         cx,word ptr -0xa[bp] 
7084    8B 55 0E                  mov         dx,word ptr 0xe[di] 
7087    8B 45 0C                  mov         ax,word ptr 0xc[di] 
708A    9A 00 00 00 00            call        dev_write_ 
708F                          L$800:
708F    89 46 FA                  mov         word ptr -0x6[bp],ax 
7092    E9 92 00                  jmp         L$807 
7095                          L$801:
7095    3C 0A                     cmp         al,0x0a 
7097    75 17                     jne         L$802 
7099    FF 76 F8                  push        word ptr -0x8[bp] 
709C    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
709F    89 FB                     mov         bx,di 
70A1    FF 76 F6                  push        word ptr -0xa[bp] 
70A4    8C D9                     mov         cx,ds 
70A6    FF 76 F4                  push        word ptr -0xc[bp] 
70A9    89 F0                     mov         ax,si 
70AB    E8 00 00                  call        pipe_write_ 
70AE    EB DF                     jmp         L$800 
70B0                          L$802:
70B0    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
70B3    8B 4E F6                  mov         cx,word ptr -0xa[bp] 
70B6    03 5E FA                  add         bx,word ptr -0x6[bp] 
70B9                          L$803:
70B9    FF 4E F8                  dec         word ptr -0x8[bp] 
70BC    83 7E F8 FF               cmp         word ptr -0x8[bp],0xffff 
70C0    74 65                     je          L$807 
70C2    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
70C5    8A 45 0A                  mov         al,byte ptr 0xa[di] 
70C8    3C 04                     cmp         al,0x04 
70CA    77 16                     ja          L$804 
70CC    8E D9                     mov         ds,cx 
70CE    0F B6 17                  movzx       dx,byte ptr [bx] 
70D1    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
70D4    8A 45 0A                  mov         al,byte ptr 0xa[di] 
70D7    FE C8                     dec         al 
70D9    30 E4                     xor         ah,ah 
70DB    9A 00 00 00 00            call        serial_write_ 
70E0    EB 35                     jmp         L$806 
70E2                          L$804:
70E2    3C 09                     cmp         al,0x09 
70E4    73 16                     jae         L$805 
70E6    8E D9                     mov         ds,cx 
70E8    0F B6 17                  movzx       dx,byte ptr [bx] 
70EB    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
70EE    0F B6 45 0A               movzx       ax,byte ptr 0xa[di] 
70F2    2D 05 00                  sub         ax,0x0005 
70F5    9A 00 00 00 00            call        parallel_write_ 
70FA    EB 1B                     jmp         L$806 
70FC                          L$805:
70FC    3C 0C                     cmp         al,0x0c 
70FE    0F 85 5E FF               jne         L$798 
7102    8E D9                     mov         ds,cx 
7104    0F B6 07                  movzx       ax,byte ptr [bx] 
7107    E8 00 00                  call        con_stdout_write_ 
710A    3C 03                     cmp         al,0x03 
710C    75 09                     jne         L$806 
710E    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7111    81 8C 8A 01 40 08         or          word ptr 0x18a[si],0x0840 
7117                          L$806:
7117    3C 01                     cmp         al,0x01 
7119    74 0C                     je          L$807 
711B    3C 02                     cmp         al,0x02 
711D    0F 84 3F FF               je          L$798 
7121    FF 46 FA                  inc         word ptr -0x6[bp] 
7124    43                        inc         bx 
7125    EB 92                     jmp         L$803 
7127                          L$807:
7127    83 7E FA 00               cmp         word ptr -0x6[bp],0x0000 
712B    75 0B                     jne         L$808 
712D    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
7130    F6 45 09 10               test        byte ptr 0x9[di],0x10 
7134    0F 84 E7 FE               je          L$796 
7138                          L$808:
7138    83 7E FA FF               cmp         word ptr -0x6[bp],0xffff 
713C    75 1D                     jne         L$810 
713E                          L$809:
713E    8B 5E F2                  mov         bx,word ptr -0xe[bp] 
7141    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
7144    89 F0                     mov         ax,si 
7146    E8 00 00                  call        save_file_errno_ 
7149    85 C0                     test        ax,ax 
714B    0F 8F 70 FD               jg          L$789 
714F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7152    C7 84 6E 01 00 01         mov         word ptr 0x16e[si],0x0100 
7158    E9 64 FD                  jmp         L$789 
715B                          L$810:
715B    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
715E    8B 55 02                  mov         dx,word ptr 0x2[di] 
7161    8B 05                     mov         ax,word ptr [di] 
7163    85 D2                     test        dx,dx 
7165    75 06                     jne         L$811 
7167    85 C0                     test        ax,ax 
7169    0F 84 52 FD               je          L$789 
716D                          L$811:
716D    8B 1D                     mov         bx,word ptr [di] 
716F    8E DA                     mov         ds,dx 
7171    E9 41 FD                  jmp         L$788 
7174                          vpu_syscall_fsync_:
7174    53                        push        bx 
7175    51                        push        cx 
7176    56                        push        si 
7177    57                        push        di 
7178    C8 04 00 00               enter       0x0004,0x00 
717C    89 C7                     mov         di,ax 
717E    89 56 FC                  mov         word ptr -0x4[bp],dx 
7181    8E DA                     mov         ds,dx 
7183    8B 4D 02                  mov         cx,word ptr 0x2[di] 
7186    89 C8                     mov         ax,cx 
7188    8B 5D 64                  mov         bx,word ptr 0x64[di] 
718B    C1 E0 02                  shl         ax,0x02 
718E    8E 5D 66                  mov         ds,word ptr 0x66[di] 
7191    01 C3                     add         bx,ax 
7193    8B 47 02                  mov         ax,word ptr 0x2[bx] 
7196    8B 37                     mov         si,word ptr [bx] 
7198    89 46 FE                  mov         word ptr -0x2[bp],ax 
719B    83 F9 3C                  cmp         cx,0x003c 
719E    0F 83 E3 E3               jae         L$617 
71A2    8E D8                     mov         ds,ax 
71A4    F6 44 2A 01               test        byte ptr 0x2a[si],0x01 
71A8    0F 84 D9 E3               je          L$617 
71AC    8A 44 0A                  mov         al,byte ptr 0xa[si] 
71AF    84 C0                     test        al,al 
71B1    75 19                     jne         L$813 
71B3    8B 44 28                  mov         ax,word ptr 0x28[si] 
71B6    9A 00 00 00 00            call        fsync_ 
71BB    8E DA                     mov         ds,dx 
71BD    89 05                     mov         word ptr [di],ax 
71BF    85 C0                     test        ax,ax 
71C1    74 28                     je          L$815 
71C3                          L$812:
71C3    89 CB                     mov         bx,cx 
71C5    89 F8                     mov         ax,di 
71C7    E8 00 00                  call        save_file_errno_ 
71CA    EB 1F                     jmp         L$815 
71CC                          L$813:
71CC    3C 09                     cmp         al,0x09 
71CE    75 14                     jne         L$814 
71D0    8B 54 0E                  mov         dx,word ptr 0xe[si] 
71D3    8B 44 0C                  mov         ax,word ptr 0xc[si] 
71D6    9A 00 00 00 00            call        dev_fsync_ 
71DB    85 C0                     test        ax,ax 
71DD    74 0C                     je          L$815 
71DF    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
71E2    EB DF                     jmp         L$812 
71E4                          L$814:
71E4    3C 0C                     cmp         al,0x0c 
71E6    75 03                     jne         L$815 
71E8    E8 00 00                  call        con_fsync_ 
71EB                          L$815:
71EB    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
71EE    89 F0                     mov         ax,si 
71F0    E8 00 00                  call        fd_dup_sync_ 
71F3    E9 8F E3                  jmp         L$617 
71F6                          openflags2openmod_:
71F6    52                        push        dx 
71F7    89 C2                     mov         dx,ax 
71F9    B8 00 02                  mov         ax,0x0200 
71FC    F6 C2 01                  test        dl,0x01 
71FF    74 03                     je          L$816 
7201    B8 61 02                  mov         ax,0x0261 
7204                          L$816:
7204    F6 C2 02                  test        dl,0x02 
7207    74 03                     je          L$817 
7209    B8 11 02                  mov         ax,0x0211 
720C                          L$817:
720C    F6 C2 04                  test        dl,0x04 
720F    74 02                     je          L$818 
7211    0C 02                     or          al,0x02 
7213                          L$818:
7213    5A                        pop         dx 
7214    C3                        ret         
7215                          detect_ioport_:
7215    53                        push        bx 
7216    51                        push        cx 
7217    56                        push        si 
7218    57                        push        di 
7219    C8 02 00 00               enter       0x0002,0x00 
721D    89 C6                     mov         si,ax 
721F    89 56 FE                  mov         word ptr -0x2[bp],dx 
7222    89 C7                     mov         di,ax 
7224    8E C2                     mov         es,dx 
7226    B9 FF FF                  mov         cx,0xffff 
7229    33 C0                     xor         ax,ax 
722B    F2 AE                     repne scasb 
722D    F7 D1                     not         cx 
722F    49                        dec         cx 
7230    83 F9 04                  cmp         cx,0x0004 
7233    75 4C                     jne         L$820 
7235    8E DA                     mov         ds,dx 
7237    8A 44 03                  mov         al,byte ptr 0x3[si] 
723A    3C 30                     cmp         al,0x30 
723C    76 43                     jbe         L$820 
723E    3C 35                     cmp         al,0x35 
7240    73 3F                     jae         L$820 
7242    6A 03                     push        0x0003 
7244    BB 65 07                  mov         bx,offset DGROUP:L$1527 
7247    8C D1                     mov         cx,ss 
7249    89 F0                     mov         ax,si 
724B    9A 00 00 00 00            call        strncmp_ 
7250    85 C0                     test        ax,ax 
7252    75 0B                     jne         L$819 
7254    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7257    8A 44 03                  mov         al,byte ptr 0x3[si] 
725A    2C 30                     sub         al,0x30 
725C    E9 D4 34                  jmp         L$1143 
725F                          L$819:
725F    6A 03                     push        0x0003 
7261    BB 69 07                  mov         bx,offset DGROUP:L$1528 
7264    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
7267    8C D1                     mov         cx,ss 
7269    89 F0                     mov         ax,si 
726B    9A 00 00 00 00            call        strncmp_ 
7270    85 C0                     test        ax,ax 
7272    0F 85 CE 9D               jne         L$130 
7276    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7279    8A 44 03                  mov         al,byte ptr 0x3[si] 
727C    2C 2C                     sub         al,0x2c 
727E    E9 B2 34                  jmp         L$1143 
7281                          L$820:
7281    BF 6D 07                  mov         di,offset DGROUP:L$1529 
7284    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7287    16                        push        ss 
7288    07                        pop         es 
7289                          L$821:
7289    AC                        lodsb       
728A    26 8A 25                  mov         ah,byte ptr es:[di] 
728D    2A C4                     sub         al,ah 
728F    75 05                     jne         L$822 
7291    47                        inc         di 
7292    3A C4                     cmp         al,ah 
7294    75 F3                     jne         L$821 
7296                          L$822:
7296    18 E4                     sbb         ah,ah 
7298    85 C0                     test        ax,ax 
729A    0F 85 A6 9D               jne         L$130 
729E    B0 0C                     mov         al,0x0c 
72A0    E9 90 34                  jmp         L$1143 
72A3                          vpu_syscall_open_:
72A3    53                        push        bx 
72A4    51                        push        cx 
72A5    56                        push        si 
72A6    57                        push        di 
72A7    C8 B8 00 00               enter       0x00b8,0x00 
72AB    81 ED 80 00               sub         bp,0x0080 
72AF    89 C6                     mov         si,ax 
72B1    89 56 7C                  mov         word ptr 0x7c[bp],dx 
72B4    8E DA                     mov         ds,dx 
72B6    8B 7C 14                  mov         di,word ptr 0x14[si] 
72B9    8B 44 48                  mov         ax,word ptr 0x48[si] 
72BC    C1 E7 02                  shl         di,0x02 
72BF    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
72C2    01 C7                     add         di,ax 
72C4    8B 05                     mov         ax,word ptr [di] 
72C6    8B 55 02                  mov         dx,word ptr 0x2[di] 
72C9    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
72CC    89 56 76                  mov         word ptr 0x76[bp],dx 
72CF    8B 54 06                  mov         dx,word ptr 0x6[si] 
72D2    C7 46 72 00 00            mov         word ptr 0x72[bp],0x0000 
72D7    01 C2                     add         dx,ax 
72D9    8B 44 02                  mov         ax,word ptr 0x2[si] 
72DC    89 56 74                  mov         word ptr 0x74[bp],dx 
72DF    E8 00 00                  call        openflags2openmod_ 
72E2    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
72E5    89 46 70                  mov         word ptr 0x70[bp],ax 
72E8    F6 44 24 02               test        byte ptr 0x24[si],0x02 
72EC    75 06                     jne         L$823 
72EE    F6 44 02 07               test        byte ptr 0x2[si],0x07 
72F2    75 2F                     jne         L$825 
72F4                          L$823:
72F4    C4 7E 74                  les         di,dword ptr 0x74[bp] 
72F7    B9 FF FF                  mov         cx,0xffff 
72FA    33 C0                     xor         ax,ax 
72FC    F2 AE                     repne scasb 
72FE    F7 D1                     not         cx 
7300    49                        dec         cx 
7301    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
7304    89 CF                     mov         di,cx 
7306    89 F0                     mov         ax,si 
7308    8C DA                     mov         dx,ds 
730A    8B 5C 06                  mov         bx,word ptr 0x6[si] 
730D    31 C9                     xor         cx,cx 
730F    01 FB                     add         bx,di 
7311    11 C9                     adc         cx,cx 
7313    E8 00 00                  call        memory_allowed_ 
7316    84 C0                     test        al,al 
7318    75 05                     jne         L$824 
731A    30 E4                     xor         ah,ah 
731C    E9 16 E3                  jmp         L$620 
731F                          L$824:
731F    85 FF                     test        di,di 
7321    75 0C                     jne         L$826 
7323                          L$825:
7323    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
7326    31 C0                     xor         ax,ax 
7328    C7 04 FF FF               mov         word ptr [si],0xffff 
732C    E9 06 E3                  jmp         L$620 
732F                          L$826:
732F    31 C0                     xor         ax,ax 
7331    89 46 6E                  mov         word ptr 0x6e[bp],ax 
7334                          L$827:
7334    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
7337    C5 7C 64                  lds         di,dword ptr 0x64[si] 
733A    01 C7                     add         di,ax 
733C    C5 1D                     lds         bx,dword ptr [di] 
733E    F6 47 2A 01               test        byte ptr 0x2a[bx],0x01 
7342    74 0D                     je          L$828 
7344    3D F0 00                  cmp         ax,0x00f0 
7347    74 DA                     je          L$825 
7349    FF 46 6E                  inc         word ptr 0x6e[bp] 
734C    05 04 00                  add         ax,0x0004 
734F    EB E3                     jmp         L$827 
7351                          L$828:
7351    8B 46 74                  mov         ax,word ptr 0x74[bp] 
7354    8B 56 76                  mov         dx,word ptr 0x76[bp] 
7357    89 5E 78                  mov         word ptr 0x78[bp],bx 
735A    8C 5E 7A                  mov         word ptr 0x7a[bp],ds 
735D    E8 00 00                  call        detect_ioport_ 
7360    88 46 7E                  mov         byte ptr 0x7e[bp],al 
7363    84 C0                     test        al,al 
7365    74 3F                     je          L$832 
7367    3C 04                     cmp         al,0x04 
7369    77 13                     ja          L$829 
736B    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
736E    FE C8                     dec         al 
7370    8B 54 02                  mov         dx,word ptr 0x2[si] 
7373    30 E4                     xor         ah,ah 
7375    9A 00 00 00 00            call        serial_init_ 
737A    85 C0                     test        ax,ax 
737C    EB 16                     jmp         L$830 
737E                          L$829:
737E    3C 08                     cmp         al,0x08 
7380    77 16                     ja          L$831 
7382    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
7385    8B 54 02                  mov         dx,word ptr 0x2[si] 
7388    30 E4                     xor         ah,ah 
738A    2D 05 00                  sub         ax,0x0005 
738D    9A 00 00 00 00            call        parallel_init_ 
7392    84 C0                     test        al,al 
7394                          L$830:
7394    0F 85 5C 01               jne         L$838 
7398                          L$831:
7398    8B 5E 6E                  mov         bx,word ptr 0x6e[bp] 
739B    8B 56 7C                  mov         dx,word ptr 0x7c[bp] 
739E    89 F0                     mov         ax,si 
73A0    E8 00 00                  call        reset_fd_ 
73A3    E9 FA 01                  jmp         L$840 
73A6                          L$832:
73A6    BF 00 00                  mov         di,offset _modfs 
73A9    16                        push        ss 
73AA    07                        pop         es 
73AB    8B 5E 74                  mov         bx,word ptr 0x74[bp] 
73AE    B9 FF FF                  mov         cx,0xffff 
73B1    33 C0                     xor         ax,ax 
73B3    F2 AE                     repne scasb 
73B5    F7 D1                     not         cx 
73B7    49                        dec         cx 
73B8    8C D2                     mov         dx,ss 
73BA    B8 00 00                  mov         ax,offset _modfs 
73BD    51                        push        cx 
73BE    8B 4E 76                  mov         cx,word ptr 0x76[bp] 
73C1    9A 00 00 00 00            call        strncmp_ 
73C6    85 C0                     test        ax,ax 
73C8    0F 85 C7 00               jne         L$836 
73CC    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
73CF    F6 44 24 10               test        byte ptr 0x24[si],0x10 
73D3    0F 84 4C FF               je          L$825 
73D7    6A 08                     push        0x0008 
73D9    BF 00 00                  mov         di,offset _modfs 
73DC    16                        push        ss 
73DD    07                        pop         es 
73DE    8B 5E 74                  mov         bx,word ptr 0x74[bp] 
73E1    B9 FF FF                  mov         cx,0xffff 
73E4    33 C0                     xor         ax,ax 
73E6    F2 AE                     repne scasb 
73E8    F7 D1                     not         cx 
73EA    49                        dec         cx 
73EB    8C D2                     mov         dx,ss 
73ED    8D 46 C8                  lea         ax,-0x38[bp] 
73F0    01 CB                     add         bx,cx 
73F2    8B 4E 76                  mov         cx,word ptr 0x76[bp] 
73F5    9A 00 00 00 00            call        strncpy_ 
73FA    8D 46 C8                  lea         ax,-0x38[bp] 
73FD    8C D2                     mov         dx,ss 
73FF    C6 46 D0 00               mov         byte ptr -0x30[bp],0x00 
7403    9A 00 00 00 00            call        driver_id_ 
7408    89 C7                     mov         di,ax 
740A    85 C0                     test        ax,ax 
740C    7D 4A                     jge         L$835 
740E    31 C7                     xor         di,ax 
7410                          L$833:
7410    80 7B C8 61               cmp         byte ptr -0x38[bp+di],0x61 
7414    72 03                     jb          L$834 
7416    47                        inc         di 
7417    EB F7                     jmp         L$833 
7419                          L$834:
7419    6A 10                     push        0x0010 
741B    8D 46 C8                  lea         ax,-0x38[bp] 
741E    8D 5E 6A                  lea         bx,0x6a[bp] 
7421    8C D2                     mov         dx,ss 
7423    8C D1                     mov         cx,ss 
7425    01 F8                     add         ax,di 
7427    9A 00 00 00 00            call        strtoul_ 
742C    89 C1                     mov         cx,ax 
742E    89 46 72                  mov         word ptr 0x72[bp],ax 
7431    8C D2                     mov         dx,ss 
7433    8D 46 C8                  lea         ax,-0x38[bp] 
7436    C6 43 C8 00               mov         byte ptr -0x38[bp+di],0x00 
743A    9A 00 00 00 00            call        driver_id_ 
743F    89 C7                     mov         di,ax 
7441    85 C0                     test        ax,ax 
7443    0F 8C DC FE               jl          L$825 
7447    6B C0 2E                  imul        ax,0x002e 
744A    36 C5 1E 00 00            lds         bx,dword ptr ss:_drivers 
744F    01 C3                     add         bx,ax 
7451    3B 4F 06                  cmp         cx,word ptr 0x6[bx] 
7454    0F 83 CB FE               jae         L$825 
7458                          L$835:
7458    8B 5E 6E                  mov         bx,word ptr 0x6e[bp] 
745B    8B 56 7C                  mov         dx,word ptr 0x7c[bp] 
745E    89 F0                     mov         ax,si 
7460    E8 00 00                  call        reset_fd_ 
7463    C5 5E 78                  lds         bx,dword ptr 0x78[bp] 
7466    8B 46 72                  mov         ax,word ptr 0x72[bp] 
7469    89 7F 0C                  mov         word ptr 0xc[bx],di 
746C    89 47 0E                  mov         word ptr 0xe[bx],ax 
746F    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
7472    8B 7E 78                  mov         di,word ptr 0x78[bp] 
7475    8B 5C 02                  mov         bx,word ptr 0x2[si] 
7478    8E 5E 7A                  mov         ds,word ptr 0x7a[bp] 
747B    8B 56 72                  mov         dx,word ptr 0x72[bp] 
747E    8B 45 0C                  mov         ax,word ptr 0xc[di] 
7481    C6 46 7E 09               mov         byte ptr 0x7e[bp],0x09 
7485    9A 00 00 00 00            call        dev_open_ 
748A    85 C0                     test        ax,ax 
748C    0F 85 93 FE               jne         L$825 
7490    E9 0D 01                  jmp         L$840 
7493                          L$836:
7493    36 83 3E 00 00 1E         cmp         word ptr ss:_global_open_files,0x001e 
7499    74 59                     je          L$838 
749B    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
749E    8A 44 24                  mov         al,byte ptr 0x24[si] 
74A1    A8 01                     test        al,0x01 
74A3    0F 84 7C FE               je          L$825 
74A7    A8 04                     test        al,0x04 
74A9    75 1B                     jne         L$837 
74AB    8B 56 76                  mov         dx,word ptr 0x76[bp] 
74AE    8D 84 CC 00               lea         ax,0xcc[si] 
74B2    1E                        push        ds 
74B3    8C D9                     mov         cx,ds 
74B5    50                        push        ax 
74B6    8D 9C 1D 01               lea         bx,0x11d[si] 
74BA    8B 46 74                  mov         ax,word ptr 0x74[bp] 
74BD    E8 00 00                  call        is_subpath_ 
74C0    85 C0                     test        ax,ax 
74C2    0F 84 5D FE               je          L$825 
74C6                          L$837:
74C6    FF 76 76                  push        word ptr 0x76[bp] 
74C9    8D 5E C8                  lea         bx,-0x38[bp] 
74CC    8B 56 7C                  mov         dx,word ptr 0x7c[bp] 
74CF    8C D1                     mov         cx,ss 
74D1    FF 76 74                  push        word ptr 0x74[bp] 
74D4    89 F0                     mov         ax,si 
74D6    0E                        push        cs 
74D7    E8 00 00                  call        append_path_ 
74DA    68 C0 01                  push        0x01c0 
74DD    FF 76 70                  push        word ptr 0x70[bp] 
74E0    16                        push        ss 
74E1    8D 56 C8                  lea         dx,-0x38[bp] 
74E4    52                        push        dx 
74E5    9A 00 00 00 00            call        open_ 
74EA    89 C1                     mov         cx,ax 
74EC    83 C4 08                  add         sp,0x0008 
74EF    3D FF FF                  cmp         ax,0xffff 
74F2    75 15                     jne         L$839 
74F4                          L$838:
74F4    9A 00 00 00 00            call        __get_errno_ptr_ 
74F9    89 C7                     mov         di,ax 
74FB    8E DA                     mov         ds,dx 
74FD    8B 05                     mov         ax,word ptr [di] 
74FF    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
7502    89 84 6E 01               mov         word ptr 0x16e[si],ax 
7506    E9 1A FE                  jmp         L$825 
7509                          L$839:
7509    8B 5E 6E                  mov         bx,word ptr 0x6e[bp] 
750C    8B 56 7C                  mov         dx,word ptr 0x7c[bp] 
750F    89 F0                     mov         ax,si 
7511    36 FF 06 00 00            inc         word ptr ss:_global_open_files 
7516    E8 00 00                  call        reset_fd_ 
7519    C5 5E 78                  lds         bx,dword ptr 0x78[bp] 
751C    89 4F 28                  mov         word ptr 0x28[bx],cx 
751F    80 4F 09 10               or          byte ptr 0x9[bx],0x10 
7523    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
7526    8B 44 08                  mov         ax,word ptr 0x8[si] 
7529    85 C0                     test        ax,ax 
752B    74 73                     je          L$840 
752D    89 C3                     mov         bx,ax 
752F    8C DA                     mov         dx,ds 
7531    31 C9                     xor         cx,cx 
7533    89 F0                     mov         ax,si 
7535    83 C3 03                  add         bx,0x0003 
7538    11 C9                     adc         cx,cx 
753A    E8 00 00                  call        memory_allowed_ 
753D    84 C0                     test        al,al 
753F    74 5F                     je          L$840 
7541    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
7544    8B 7C 14                  mov         di,word ptr 0x14[si] 
7547    8B 44 48                  mov         ax,word ptr 0x48[si] 
754A    C1 E7 02                  shl         di,0x02 
754D    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
7550    01 C7                     add         di,ax 
7552    8B 05                     mov         ax,word ptr [di] 
7554    8B 5D 02                  mov         bx,word ptr 0x2[di] 
7557    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
755A    8B 7E 78                  mov         di,word ptr 0x78[bp] 
755D    8B 54 08                  mov         dx,word ptr 0x8[si] 
7560    8E 5E 7A                  mov         ds,word ptr 0x7a[bp] 
7563    89 5D 02                  mov         word ptr 0x2[di],bx 
7566    89 FB                     mov         bx,di 
7568    01 D0                     add         ax,dx 
756A    89 07                     mov         word ptr [bx],ax 
756C    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
756F    8B 44 14                  mov         ax,word ptr 0x14[si] 
7572    8E 5E 7A                  mov         ds,word ptr 0x7a[bp] 
7575    89 47 04                  mov         word ptr 0x4[bx],ax 
7578    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
757B    8B 44 08                  mov         ax,word ptr 0x8[si] 
757E    8E 5E 7A                  mov         ds,word ptr 0x7a[bp] 
7581    31 C9                     xor         cx,cx 
7583    89 47 06                  mov         word ptr 0x6[bx],ax 
7586    BA 01 00                  mov         dx,0x0001 
7589    8B 47 28                  mov         ax,word ptr 0x28[bx] 
758C    31 FB                     xor         bx,di 
758E    9A 00 00 00 00            call        lseek_ 
7593    C5 5E 78                  lds         bx,dword ptr 0x78[bp] 
7596    8B 3D                     mov         di,word ptr [di] 
7598    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
759B    89 05                     mov         word ptr [di],ax 
759D    89 55 02                  mov         word ptr 0x2[di],dx 
75A0                          L$840:
75A0    C5 5E 78                  lds         bx,dword ptr 0x78[bp] 
75A3    8A 46 7E                  mov         al,byte ptr 0x7e[bp] 
75A6    88 47 0A                  mov         byte ptr 0xa[bx],al 
75A9    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
75AC    8B 46 6E                  mov         ax,word ptr 0x6e[bp] 
75AF    89 04                     mov         word ptr [si],ax 
75B1    8B 44 02                  mov         ax,word ptr 0x2[si] 
75B4    8E 5E 7A                  mov         ds,word ptr 0x7a[bp] 
75B7    09 47 08                  or          word ptr 0x8[bx],ax 
75BA    E9 76 E0                  jmp         L$619 
75BD                          vpu_fd_close_:
75BD    51                        push        cx 
75BE    56                        push        si 
75BF    57                        push        di 
75C0    C8 04 00 00               enter       0x0004,0x00 
75C4    89 C6                     mov         si,ax 
75C6    89 56 FC                  mov         word ptr -0x4[bp],dx 
75C9    89 D9                     mov         cx,bx 
75CB    8E DA                     mov         ds,dx 
75CD    C1 E3 02                  shl         bx,0x02 
75D0    C5 44 64                  lds         ax,dword ptr 0x64[si] 
75D3    01 C3                     add         bx,ax 
75D5    8B 47 02                  mov         ax,word ptr 0x2[bx] 
75D8    8B 3F                     mov         di,word ptr [bx] 
75DA    8E D8                     mov         ds,ax 
75DC    89 46 FE                  mov         word ptr -0x2[bp],ax 
75DF    8B 45 12                  mov         ax,word ptr 0x12[di] 
75E2    8B 55 10                  mov         dx,word ptr 0x10[di] 
75E5    85 C0                     test        ax,ax 
75E7    75 14                     jne         L$841 
75E9    85 D2                     test        dx,dx 
75EB    75 10                     jne         L$841 
75ED    8B 45 16                  mov         ax,word ptr 0x16[di] 
75F0    8B 55 14                  mov         dx,word ptr 0x14[di] 
75F3    85 C0                     test        ax,ax 
75F5    75 06                     jne         L$841 
75F7    85 D2                     test        dx,dx 
75F9    0F 84 51 01               je          L$853 
75FD                          L$841:
75FD    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7600    8B 45 16                  mov         ax,word ptr 0x16[di] 
7603    8B 55 14                  mov         dx,word ptr 0x14[di] 
7606    85 C0                     test        ax,ax 
7608    75 06                     jne         L$842 
760A    85 D2                     test        dx,dx 
760C    0F 84 94 00               je          L$847 
7610                          L$842:
7610    8B 45 1E                  mov         ax,word ptr 0x1e[di] 
7613    8B 55 1C                  mov         dx,word ptr 0x1c[di] 
7616    85 C0                     test        ax,ax 
7618    75 04                     jne         L$843 
761A    85 D2                     test        dx,dx 
761C    74 2F                     je          L$844 
761E                          L$843:
761E    89 D6                     mov         si,dx 
7620    8E D8                     mov         ds,ax 
7622    8B 44 1A                  mov         ax,word ptr 0x1a[si] 
7625    8B 54 18                  mov         dx,word ptr 0x18[si] 
7628    3B 46 FE                  cmp         ax,word ptr -0x2[bp] 
762B    75 20                     jne         L$844 
762D    39 FA                     cmp         dx,di 
762F    75 1C                     jne         L$844 
7631    8E 46 FE                  mov         es,word ptr -0x2[bp] 
7634    26 8B 45 14               mov         ax,word ptr es:0x14[di] 
7638    26 8B 55 16               mov         dx,word ptr es:0x16[di] 
763C    89 44 18                  mov         word ptr 0x18[si],ax 
763F    89 54 1A                  mov         word ptr 0x1a[si],dx 
7642    06                        push        es 
7643    1F                        pop         ds 
7644    8B 45 1C                  mov         ax,word ptr 0x1c[di] 
7647    8B 55 1E                  mov         dx,word ptr 0x1e[di] 
764A    E8 00 00                  call        fd_dup_sync_ 
764D                          L$844:
764D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7650    8B 45 1A                  mov         ax,word ptr 0x1a[di] 
7653    8B 55 18                  mov         dx,word ptr 0x18[di] 
7656    85 C0                     test        ax,ax 
7658    75 04                     jne         L$845 
765A    85 D2                     test        dx,dx 
765C    74 2F                     je          L$846 
765E                          L$845:
765E    89 D6                     mov         si,dx 
7660    8E D8                     mov         ds,ax 
7662    8B 44 1E                  mov         ax,word ptr 0x1e[si] 
7665    8B 54 1C                  mov         dx,word ptr 0x1c[si] 
7668    3B 46 FE                  cmp         ax,word ptr -0x2[bp] 
766B    75 20                     jne         L$846 
766D    39 FA                     cmp         dx,di 
766F    75 1C                     jne         L$846 
7671    8E 46 FE                  mov         es,word ptr -0x2[bp] 
7674    26 8B 45 14               mov         ax,word ptr es:0x14[di] 
7678    26 8B 55 16               mov         dx,word ptr es:0x16[di] 
767C    89 44 1C                  mov         word ptr 0x1c[si],ax 
767F    89 54 1E                  mov         word ptr 0x1e[si],dx 
7682    06                        push        es 
7683    1F                        pop         ds 
7684    8B 45 18                  mov         ax,word ptr 0x18[di] 
7687    8B 55 1A                  mov         dx,word ptr 0x1a[di] 
768A    E8 00 00                  call        fd_dup_sync_ 
768D                          L$846:
768D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7690    C5 75 14                  lds         si,dword ptr 0x14[di] 
7693    8E 46 FE                  mov         es,word ptr -0x2[bp] 
7696    26 8B 55 10               mov         dx,word ptr es:0x10[di] 
769A    26 8B 45 12               mov         ax,word ptr es:0x12[di] 
769E    89 54 10                  mov         word ptr 0x10[si],dx 
76A1    89 44 12                  mov         word ptr 0x12[si],ax 
76A4                          L$847:
76A4    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
76A7    8B 45 12                  mov         ax,word ptr 0x12[di] 
76AA    8B 55 10                  mov         dx,word ptr 0x10[di] 
76AD    85 C0                     test        ax,ax 
76AF    75 06                     jne         L$848 
76B1    85 D2                     test        dx,dx 
76B3    0F 84 61 01               je          L$862 
76B7                          L$848:
76B7    8B 45 1E                  mov         ax,word ptr 0x1e[di] 
76BA    8B 55 1C                  mov         dx,word ptr 0x1c[di] 
76BD    85 C0                     test        ax,ax 
76BF    75 04                     jne         L$849 
76C1    85 D2                     test        dx,dx 
76C3    74 2F                     je          L$850 
76C5                          L$849:
76C5    89 D6                     mov         si,dx 
76C7    8E D8                     mov         ds,ax 
76C9    8B 44 1A                  mov         ax,word ptr 0x1a[si] 
76CC    8B 54 18                  mov         dx,word ptr 0x18[si] 
76CF    3B 46 FE                  cmp         ax,word ptr -0x2[bp] 
76D2    75 20                     jne         L$850 
76D4    39 FA                     cmp         dx,di 
76D6    75 1C                     jne         L$850 
76D8    8E 46 FE                  mov         es,word ptr -0x2[bp] 
76DB    26 8B 45 10               mov         ax,word ptr es:0x10[di] 
76DF    26 8B 55 12               mov         dx,word ptr es:0x12[di] 
76E3    89 44 18                  mov         word ptr 0x18[si],ax 
76E6    89 54 1A                  mov         word ptr 0x1a[si],dx 
76E9    06                        push        es 
76EA    1F                        pop         ds 
76EB    8B 45 1C                  mov         ax,word ptr 0x1c[di] 
76EE    8B 55 1E                  mov         dx,word ptr 0x1e[di] 
76F1    E8 00 00                  call        fd_dup_sync_ 
76F4                          L$850:
76F4    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
76F7    8B 45 1A                  mov         ax,word ptr 0x1a[di] 
76FA    8B 55 18                  mov         dx,word ptr 0x18[di] 
76FD    85 C0                     test        ax,ax 
76FF    75 04                     jne         L$851 
7701    85 D2                     test        dx,dx 
7703    74 2F                     je          L$852 
7705                          L$851:
7705    89 D6                     mov         si,dx 
7707    8E D8                     mov         ds,ax 
7709    8B 44 1E                  mov         ax,word ptr 0x1e[si] 
770C    8B 54 1C                  mov         dx,word ptr 0x1c[si] 
770F    3B 46 FE                  cmp         ax,word ptr -0x2[bp] 
7712    75 20                     jne         L$852 
7714    39 FA                     cmp         dx,di 
7716    75 1C                     jne         L$852 
7718    8E 46 FE                  mov         es,word ptr -0x2[bp] 
771B    26 8B 45 10               mov         ax,word ptr es:0x10[di] 
771F    26 8B 55 12               mov         dx,word ptr es:0x12[di] 
7723    89 44 1C                  mov         word ptr 0x1c[si],ax 
7726    89 54 1E                  mov         word ptr 0x1e[si],dx 
7729    06                        push        es 
772A    1F                        pop         ds 
772B    8B 45 18                  mov         ax,word ptr 0x18[di] 
772E    8B 55 1A                  mov         dx,word ptr 0x1a[di] 
7731    E8 00 00                  call        fd_dup_sync_ 
7734                          L$852:
7734    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7737    C5 75 10                  lds         si,dword ptr 0x10[di] 
773A    8E 46 FE                  mov         es,word ptr -0x2[bp] 
773D    26 8B 45 14               mov         ax,word ptr es:0x14[di] 
7741    26 8B 55 16               mov         dx,word ptr es:0x16[di] 
7745    89 44 14                  mov         word ptr 0x14[si],ax 
7748    89 54 16                  mov         word ptr 0x16[si],dx 
774B    E9 CA 00                  jmp         L$862 
774E                          L$853:
774E    8A 45 0A                  mov         al,byte ptr 0xa[di] 
7751    84 C0                     test        al,al 
7753    75 28                     jne         L$855 
7755    36 FF 0E 00 00            dec         word ptr ss:_global_open_files 
775A    8B 45 28                  mov         ax,word ptr 0x28[di] 
775D    9A 00 00 00 00            call        close_ 
7762    85 C0                     test        ax,ax 
7764    0F 84 B0 00               je          L$862 
7768    9A 00 00 00 00            call        __get_errno_ptr_ 
776D    89 C3                     mov         bx,ax 
776F    8E DA                     mov         ds,dx 
7771    8B 07                     mov         ax,word ptr [bx] 
7773                          L$854:
7773    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
7776    89 84 6E 01               mov         word ptr 0x16e[si],ax 
777A    E9 9B 00                  jmp         L$862 
777D                          L$855:
777D    3C 09                     cmp         al,0x09 
777F    75 1D                     jne         L$856 
7781    8B 55 0E                  mov         dx,word ptr 0xe[di] 
7784    8B 45 0C                  mov         ax,word ptr 0xc[di] 
7787    9A 00 00 00 00            call        dev_close_ 
778C    85 C0                     test        ax,ax 
778E    0F 84 86 00               je          L$862 
7792    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
7795    89 CB                     mov         bx,cx 
7797    89 F0                     mov         ax,si 
7799    E8 00 00                  call        save_file_errno_ 
779C    EB D5                     jmp         L$854 
779E                          L$856:
779E    3C 04                     cmp         al,0x04 
77A0    77 0B                     ja          L$857 
77A2    FE C8                     dec         al 
77A4    30 E4                     xor         ah,ah 
77A6    9A 00 00 00 00            call        close_serialport_ 
77AB    EB 6B                     jmp         L$862 
77AD                          L$857:
77AD    3C 0A                     cmp         al,0x0a 
77AF    75 2F                     jne         L$859 
77B1    8B 45 1A                  mov         ax,word ptr 0x1a[di] 
77B4    8B 55 18                  mov         dx,word ptr 0x18[di] 
77B7    85 C0                     test        ax,ax 
77B9    75 04                     jne         L$858 
77BB    85 D2                     test        dx,dx 
77BD    74 59                     je          L$862 
77BF                          L$858:
77BF    89 D6                     mov         si,dx 
77C1    8E D8                     mov         ds,ax 
77C3    66 C7 44 1C 00 00 00 00
                                  mov         dword ptr 0x1c[si],0x00000000 
77CB    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
77CE    C5 75 18                  lds         si,dword ptr 0x18[di] 
77D1    80 4C 09 10               or          byte ptr 0x9[si],0x10 
77D5    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
77D8    8B 45 18                  mov         ax,word ptr 0x18[di] 
77DB    8B 55 1A                  mov         dx,word ptr 0x1a[di] 
77DE    EB 35                     jmp         L$861 
77E0                          L$859:
77E0    3C 0B                     cmp         al,0x0b 
77E2    75 34                     jne         L$862 
77E4    8B 45 20                  mov         ax,word ptr 0x20[di] 
77E7    8B 55 22                  mov         dx,word ptr 0x22[di] 
77EA    9A 00 00 00 00            call        free_ 
77EF    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
77F2    8B 45 1E                  mov         ax,word ptr 0x1e[di] 
77F5    8B 55 1C                  mov         dx,word ptr 0x1c[di] 
77F8    85 C0                     test        ax,ax 
77FA    75 04                     jne         L$860 
77FC    85 D2                     test        dx,dx 
77FE    74 18                     je          L$862 
7800                          L$860:
7800    89 D6                     mov         si,dx 
7802    8E D8                     mov         ds,ax 
7804    66 C7 44 18 00 00 00 00
                                  mov         dword ptr 0x18[si],0x00000000 
780C    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
780F    8B 45 1C                  mov         ax,word ptr 0x1c[di] 
7812    8B 55 1E                  mov         dx,word ptr 0x1e[di] 
7815                          L$861:
7815    E8 00 00                  call        fd_dup_sync_ 
7818                          L$862:
7818    B9 2C 00                  mov         cx,0x002c 
781B    8E 46 FE                  mov         es,word ptr -0x2[bp] 
781E    30 C0                     xor         al,al 
7820    57                        push        di 
7821    F3 AA                     rep stosb   
7823    5F                        pop         di 
7824    30 E4                     xor         ah,ah 
7826    E9 C9 A3                  jmp         L$272 
7829                          vpu_syscall_close_:
7829    53                        push        bx 
782A    51                        push        cx 
782B    56                        push        si 
782C    57                        push        di 
782D    89 C6                     mov         si,ax 
782F    89 D1                     mov         cx,dx 
7831    8E DA                     mov         ds,dx 
7833    8B 44 02                  mov         ax,word ptr 0x2[si] 
7836    3D 3C 00                  cmp         ax,0x003c 
7839    73 4E                     jae         L$864 
783B    89 C7                     mov         di,ax 
783D    8B 5C 64                  mov         bx,word ptr 0x64[si] 
7840    C1 E7 02                  shl         di,0x02 
7843    8E 5C 66                  mov         ds,word ptr 0x66[si] 
7846    01 DF                     add         di,bx 
7848    C5 1D                     lds         bx,dword ptr [di] 
784A    F6 47 2A 01               test        byte ptr 0x2a[bx],0x01 
784E    74 39                     je          L$864 
7850    BF 00 00                  mov         di,seg _diskio_in_progress 
7853    8E C7                     mov         es,di 
7855    26 80 3E 00 00 00         cmp         byte ptr es:_diskio_in_progress,0x00 
785B    74 1C                     je          L$863 
785D    80 7F 0A 0A               cmp         byte ptr 0xa[bx],0x0a 
7861    74 16                     je          L$863 
7863    80 7F 0A 0B               cmp         byte ptr 0xa[bx],0x0b 
7867    74 10                     je          L$863 
7869    8E DA                     mov         ds,dx 
786B    FF 4C 12                  dec         word ptr 0x12[si] 
786E    B8 03 00                  mov         ax,0x0003 
7871    80 8C 8B 01 02            or          byte ptr 0x18b[si],0x02 
7876    E9 89 21                  jmp         L$1047 
7879                          L$863:
7879    89 C3                     mov         bx,ax 
787B    89 CA                     mov         dx,cx 
787D    89 F0                     mov         ax,si 
787F    E8 00 00                  call        vpu_fd_close_ 
7882    8E D9                     mov         ds,cx 
7884    89 04                     mov         word ptr [si],ax 
7886    E9 F0 D0                  jmp         L$572 
7889                          L$864:
7889    8E D9                     mov         ds,cx 
788B    C7 04 FF FF               mov         word ptr [si],0xffff 
788F    E9 E7 D0                  jmp         L$572 
7892                          vpu_syscall_lseek_:
7892    53                        push        bx 
7893    51                        push        cx 
7894    56                        push        si 
7895    57                        push        di 
7896    C8 04 00 00               enter       0x0004,0x00 
789A    89 C7                     mov         di,ax 
789C    89 56 FC                  mov         word ptr -0x4[bp],dx 
789F    8E DA                     mov         ds,dx 
78A1    8B 45 06                  mov         ax,word ptr 0x6[di] 
78A4    89 C3                     mov         bx,ax 
78A6    8B 55 64                  mov         dx,word ptr 0x64[di] 
78A9    C1 E3 02                  shl         bx,0x02 
78AC    8E 5D 66                  mov         ds,word ptr 0x66[di] 
78AF    01 D3                     add         bx,dx 
78B1    8B 57 02                  mov         dx,word ptr 0x2[bx] 
78B4    8B 37                     mov         si,word ptr [bx] 
78B6    89 56 FE                  mov         word ptr -0x2[bp],dx 
78B9    3D 3C 00                  cmp         ax,0x003c 
78BC    0F 83 C5 DC               jae         L$617 
78C0    8E DA                     mov         ds,dx 
78C2    F6 44 2A 01               test        byte ptr 0x2a[si],0x01 
78C6    0F 84 BB DC               je          L$617 
78CA    80 7C 0A 00               cmp         byte ptr 0xa[si],0x00 
78CE    0F 85 B3 DC               jne         L$617 
78D2    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
78D5    8B 5D 04                  mov         bx,word ptr 0x4[di] 
78D8    83 FB 02                  cmp         bx,0x0002 
78DB    74 2E                     je          L$866 
78DD    83 FB 01                  cmp         bx,0x0001 
78E0    74 16                     je          L$865 
78E2    85 DB                     test        bx,bx 
78E4    75 3D                     jne         L$868 
78E6    8B 45 02                  mov         ax,word ptr 0x2[di] 
78E9    99                        cwd         
78EA    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
78ED    89 C3                     mov         bx,ax 
78EF    89 D1                     mov         cx,dx 
78F1    8B 44 28                  mov         ax,word ptr 0x28[si] 
78F4    31 D2                     xor         dx,dx 
78F6    EB 24                     jmp         L$867 
78F8                          L$865:
78F8    8B 45 02                  mov         ax,word ptr 0x2[di] 
78FB    99                        cwd         
78FC    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
78FF    89 C3                     mov         bx,ax 
7901    89 D1                     mov         cx,dx 
7903    BA 01 00                  mov         dx,0x0001 
7906    8B 44 28                  mov         ax,word ptr 0x28[si] 
7909    EB 11                     jmp         L$867 
790B                          L$866:
790B    8B 45 02                  mov         ax,word ptr 0x2[di] 
790E    99                        cwd         
790F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7912    89 C3                     mov         bx,ax 
7914    89 D1                     mov         cx,dx 
7916    BA 02 00                  mov         dx,0x0002 
7919    8B 44 28                  mov         ax,word ptr 0x28[si] 
791C                          L$867:
791C    9A 00 00 00 00            call        lseek_ 
7921    89 C1                     mov         cx,ax 
7923                          L$868:
7923    83 F9 FF                  cmp         cx,0xffff 
7926    75 12                     jne         L$869 
7928    9A 00 00 00 00            call        __get_errno_ptr_ 
792D    89 C3                     mov         bx,ax 
792F    8E DA                     mov         ds,dx 
7931    8B 07                     mov         ax,word ptr [bx] 
7933    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
7936    89 85 6E 01               mov         word ptr 0x16e[di],ax 
793A                          L$869:
793A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
793D    8B 54 02                  mov         dx,word ptr 0x2[si] 
7940    8B 04                     mov         ax,word ptr [si] 
7942    85 D2                     test        dx,dx 
7944    75 04                     jne         L$870 
7946    85 C0                     test        ax,ax 
7948    74 0A                     je          L$871 
794A                          L$870:
794A    89 C8                     mov         ax,cx 
794C    C5 1C                     lds         bx,dword ptr [si] 
794E    99                        cwd         
794F    89 07                     mov         word ptr [bx],ax 
7951    89 57 02                  mov         word ptr 0x2[bx],dx 
7954                          L$871:
7954    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
7957    89 F0                     mov         ax,si 
7959    E8 00 00                  call        fd_dup_sync_ 
795C    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
795F    89 0D                     mov         word ptr [di],cx 
7961    E9 21 DC                  jmp         L$617 
7964                          vpu_sync_dynsegments_:
7964    53                        push        bx 
7965    51                        push        cx 
7966    56                        push        si 
7967    57                        push        di 
7968    C8 08 00 00               enter       0x0008,0x00 
796C    89 C3                     mov         bx,ax 
796E    89 56 FE                  mov         word ptr -0x2[bp],dx 
7971    36 8B 16 00 00            mov         dx,word ptr ss:_vpu_count 
7976    89 D0                     mov         ax,dx 
7978    8E 46 FE                  mov         es,word ptr -0x2[bp] 
797B    C1 E0 02                  shl         ax,0x02 
797E                          L$872:
797E    4A                        dec         dx 
797F    2D 04 00                  sub         ax,0x0004 
7982    83 FA FF                  cmp         dx,0xffff 
7985    0F 84 AA 2D               je          L$1143 
7989    36 C5 3E 00 00            lds         di,dword ptr ss:_vpus 
798E    01 C7                     add         di,ax 
7990    8B 4D 02                  mov         cx,word ptr 0x2[di] 
7993    8B 35                     mov         si,word ptr [di] 
7995    8E D9                     mov         ds,cx 
7997    89 4E FC                  mov         word ptr -0x4[bp],cx 
799A    8B 4C 40                  mov         cx,word ptr 0x40[si] 
799D    89 4E F8                  mov         word ptr -0x8[bp],cx 
79A0    8B 4C 42                  mov         cx,word ptr 0x42[si] 
79A3    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
79A6    89 4E FA                  mov         word ptr -0x6[bp],cx 
79A9    8B 7F 42                  mov         di,word ptr 0x42[bx] 
79AC    8B 4F 40                  mov         cx,word ptr 0x40[bx] 
79AF    3B 7E FA                  cmp         di,word ptr -0x6[bp] 
79B2    75 CA                     jne         L$872 
79B4    3B 4E F8                  cmp         cx,word ptr -0x8[bp] 
79B7    75 C5                     jne         L$872 
79B9    8B 4E FC                  mov         cx,word ptr -0x4[bp] 
79BC    3B 4E FE                  cmp         cx,word ptr -0x2[bp] 
79BF    75 04                     jne         L$873 
79C1    39 DE                     cmp         si,bx 
79C3    74 B9                     je          L$872 
79C5                          L$873:
79C5    8B 7F 52                  mov         di,word ptr 0x52[bx] 
79C8    8E D9                     mov         ds,cx 
79CA    89 7C 52                  mov         word ptr 0x52[si],di 
79CD    36 C5 36 00 00            lds         si,dword ptr ss:_vpus 
79D2    01 C6                     add         si,ax 
79D4    C5 3C                     lds         di,dword ptr [si] 
79D6    26 8B 77 54               mov         si,word ptr es:0x54[bx] 
79DA    26 8B 4F 56               mov         cx,word ptr es:0x56[bx] 
79DE    89 75 54                  mov         word ptr 0x54[di],si 
79E1    89 4D 56                  mov         word ptr 0x56[di],cx 
79E4    36 C5 36 00 00            lds         si,dword ptr ss:_vpus 
79E9    01 C6                     add         si,ax 
79EB    C5 3C                     lds         di,dword ptr [si] 
79ED    26 8B 4F 50               mov         cx,word ptr es:0x50[bx] 
79F1    89 4D 50                  mov         word ptr 0x50[di],cx 
79F4    36 C5 3E 00 00            lds         di,dword ptr ss:_vpus 
79F9    01 C7                     add         di,ax 
79FB    C5 35                     lds         si,dword ptr [di] 
79FD    26 8B 4F 48               mov         cx,word ptr es:0x48[bx] 
7A01    26 8B 7F 4A               mov         di,word ptr es:0x4a[bx] 
7A05    89 4C 48                  mov         word ptr 0x48[si],cx 
7A08    89 7C 4A                  mov         word ptr 0x4a[si],di 
7A0B    E9 70 FF                  jmp         L$872 
7A0E                          vpu_allocate_new_segment_:
7A0E    51                        push        cx 
7A0F    56                        push        si 
7A10    57                        push        di 
7A11    C8 06 00 00               enter       0x0006,0x00 
7A15    89 C6                     mov         si,ax 
7A17    89 56 FE                  mov         word ptr -0x2[bp],dx 
7A1A    89 D9                     mov         cx,bx 
7A1C    8E DA                     mov         ds,dx 
7A1E    8B 7C 04                  mov         di,word ptr 0x4[si] 
7A21    BA 01 00                  mov         dx,0x0001 
7A24    89 F8                     mov         ax,di 
7A26    9A 00 00 00 00            call        calloc_ 
7A2B    89 46 FA                  mov         word ptr -0x6[bp],ax 
7A2E    89 56 FC                  mov         word ptr -0x4[bp],dx 
7A31    85 D2                     test        dx,dx 
7A33    75 0A                     jne         L$875 
7A35    85 C0                     test        ax,ax 
7A37    75 06                     jne         L$875 
7A39                          L$874:
7A39    B8 FF FF                  mov         ax,0xffff 
7A3C    E9 B3 A1                  jmp         L$272 
7A3F                          L$875:
7A3F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7A42    8B 44 52                  mov         ax,word ptr 0x52[si] 
7A45    89 C2                     mov         dx,ax 
7A47    42                        inc         dx 
7A48    89 54 52                  mov         word ptr 0x52[si],dx 
7A4B    85 C0                     test        ax,ax 
7A4D    75 2D                     jne         L$877 
7A4F    89 D0                     mov         ax,dx 
7A51    C1 E0 02                  shl         ax,0x02 
7A54    9A 00 00 00 00            call        malloc_ 
7A59    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7A5C    89 44 54                  mov         word ptr 0x54[si],ax 
7A5F    89 54 56                  mov         word ptr 0x56[si],dx 
7A62    8B 44 56                  mov         ax,word ptr 0x56[si] 
7A65    8B 54 54                  mov         dx,word ptr 0x54[si] 
7A68    85 C0                     test        ax,ax 
7A6A    75 31                     jne         L$879 
7A6C    85 D2                     test        dx,dx 
7A6E    75 2D                     jne         L$879 
7A70                          L$876:
7A70    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7A73    B8 FF FF                  mov         ax,0xffff 
7A76    FF 4C 52                  dec         word ptr 0x52[si] 
7A79    E9 76 A1                  jmp         L$272 
7A7C                          L$877:
7A7C    89 D3                     mov         bx,dx 
7A7E    8B 44 54                  mov         ax,word ptr 0x54[si] 
7A81    C1 E3 02                  shl         bx,0x02 
7A84    8B 54 56                  mov         dx,word ptr 0x56[si] 
7A87    9A 00 00 00 00            call        realloc_ 
7A8C    85 D2                     test        dx,dx 
7A8E    75 04                     jne         L$878 
7A90    85 C0                     test        ax,ax 
7A92    74 DC                     je          L$876 
7A94                          L$878:
7A94    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7A97    89 44 54                  mov         word ptr 0x54[si],ax 
7A9A    89 54 56                  mov         word ptr 0x56[si],dx 
7A9D                          L$879:
7A9D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7AA0    8B 5C 52                  mov         bx,word ptr 0x52[si] 
7AA3    8B 54 54                  mov         dx,word ptr 0x54[si] 
7AA6    C1 E3 02                  shl         bx,0x02 
7AA9    8E 5C 56                  mov         ds,word ptr 0x56[si] 
7AAC    01 D3                     add         bx,dx 
7AAE    89 4F FE                  mov         word ptr -0x2[bx],cx 
7AB1    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7AB4    8B 5C 52                  mov         bx,word ptr 0x52[si] 
7AB7    8B 54 54                  mov         dx,word ptr 0x54[si] 
7ABA    C1 E3 02                  shl         bx,0x02 
7ABD    8E 5C 56                  mov         ds,word ptr 0x56[si] 
7AC0    01 D3                     add         bx,dx 
7AC2    89 7F FC                  mov         word ptr -0x4[bx],di 
7AC5    89 CF                     mov         di,cx 
7AC7    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7ACA    47                        inc         di 
7ACB    3B 7C 50                  cmp         di,word ptr 0x50[si] 
7ACE    76 4A                     jbe         L$881 
7AD0    89 CB                     mov         bx,cx 
7AD2    8B 44 48                  mov         ax,word ptr 0x48[si] 
7AD5    C1 E3 02                  shl         bx,0x02 
7AD8    8B 54 4A                  mov         dx,word ptr 0x4a[si] 
7ADB    83 C3 04                  add         bx,0x0004 
7ADE    9A 00 00 00 00            call        realloc_ 
7AE3    85 D2                     test        dx,dx 
7AE5    75 27                     jne         L$880 
7AE7    85 C0                     test        ax,ax 
7AE9    75 23                     jne         L$880 
7AEB    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7AEE    FF 4C 52                  dec         word ptr 0x52[si] 
7AF1    8B 44 54                  mov         ax,word ptr 0x54[si] 
7AF4    8B 5C 52                  mov         bx,word ptr 0x52[si] 
7AF7    8B 54 56                  mov         dx,word ptr 0x56[si] 
7AFA    C1 E3 02                  shl         bx,0x02 
7AFD    9A 00 00 00 00            call        realloc_ 
7B02    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7B05    89 44 54                  mov         word ptr 0x54[si],ax 
7B08    89 54 56                  mov         word ptr 0x56[si],dx 
7B0B    E9 2B FF                  jmp         L$874 
7B0E                          L$880:
7B0E    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7B11    89 44 48                  mov         word ptr 0x48[si],ax 
7B14    89 54 4A                  mov         word ptr 0x4a[si],dx 
7B17    89 7C 50                  mov         word ptr 0x50[si],di 
7B1A                          L$881:
7B1A    89 CB                     mov         bx,cx 
7B1C    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7B1F    C1 E3 02                  shl         bx,0x02 
7B22    C5 44 48                  lds         ax,dword ptr 0x48[si] 
7B25    01 C3                     add         bx,ax 
7B27    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
7B2A    89 07                     mov         word ptr [bx],ax 
7B2C    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
7B2F    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
7B32    89 47 02                  mov         word ptr 0x2[bx],ax 
7B35    89 F0                     mov         ax,si 
7B37    E8 00 00                  call        vpu_sync_dynsegments_ 
7B3A    E9 B3 A0                  jmp         L$271 
7B3D                          vpu_segment_in_use_:
7B3D    51                        push        cx 
7B3E    56                        push        si 
7B3F    89 C6                     mov         si,ax 
7B41    8E DA                     mov         ds,dx 
7B43    89 DA                     mov         dx,bx 
7B45    3B 5C 4E                  cmp         bx,word ptr 0x4e[si] 
7B48    73 05                     jae         L$883 
7B4A                          L$882:
7B4A    B0 01                     mov         al,0x01 
7B4C    5E                        pop         si 
7B4D    59                        pop         cx 
7B4E    C3                        ret         
7B4F                          L$883:
7B4F    8B 44 52                  mov         ax,word ptr 0x52[si] 
7B52    89 C1                     mov         cx,ax 
7B54    C1 E1 02                  shl         cx,0x02 
7B57                          L$884:
7B57    48                        dec         ax 
7B58    83 E9 04                  sub         cx,0x0004 
7B5B    3D FF FF                  cmp         ax,0xffff 
7B5E    74 0D                     je          L$885 
7B60    C4 5C 54                  les         bx,dword ptr 0x54[si] 
7B63    01 CB                     add         bx,cx 
7B65    26 3B 57 02               cmp         dx,word ptr es:0x2[bx] 
7B69    75 EC                     jne         L$884 
7B6B    EB DD                     jmp         L$882 
7B6D                          L$885:
7B6D    30 C0                     xor         al,al 
7B6F    5E                        pop         si 
7B70    59                        pop         cx 
7B71    C3                        ret         
7B72                          vpu_syscall_mmap_:
7B72    53                        push        bx 
7B73    51                        push        cx 
7B74    56                        push        si 
7B75    57                        push        di 
7B76    C8 0A 00 00               enter       0x000a,0x00 
7B7A    89 C6                     mov         si,ax 
7B7C    89 56 FE                  mov         word ptr -0x2[bp],dx 
7B7F    8E DA                     mov         ds,dx 
7B81    8B 7C 02                  mov         di,word ptr 0x2[si] 
7B84    83 7C 04 00               cmp         word ptr 0x4[si],0x0000 
7B88    75 16                     jne         L$887 
7B8A    B8 71 07                  mov         ax,offset DGROUP:L$1530 
7B8D    8C D2                     mov         dx,ss 
7B8F    9A 00 00 00 00            call        putstr_ 
7B94                          L$886:
7B94    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7B97    31 C0                     xor         ax,ax 
7B99    C7 04 FF FF               mov         word ptr [si],0xffff 
7B9D    E9 61 1E                  jmp         L$1046 
7BA0                          L$887:
7BA0    89 FB                     mov         bx,di 
7BA2    E8 00 00                  call        vpu_segment_in_use_ 
7BA5    84 C0                     test        al,al 
7BA7    74 1C                     je          L$889 
7BA9    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7BAC    8B 7C 4E                  mov         di,word ptr 0x4e[si] 
7BAF                          L$888:
7BAF    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
7BB2    89 FB                     mov         bx,di 
7BB4    89 F0                     mov         ax,si 
7BB6    E8 00 00                  call        vpu_segment_in_use_ 
7BB9    84 C0                     test        al,al 
7BBB    74 08                     je          L$889 
7BBD    83 FF FF                  cmp         di,0xffff 
7BC0    74 D2                     je          L$886 
7BC2    47                        inc         di 
7BC3    EB EA                     jmp         L$888 
7BC5                          L$889:
7BC5    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
7BC8    89 FB                     mov         bx,di 
7BCA    89 F0                     mov         ax,si 
7BCC    E8 00 00                  call        vpu_allocate_new_segment_ 
7BCF    85 C0                     test        ax,ax 
7BD1    75 C1                     jne         L$886 
7BD3    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7BD6    8B 44 08                  mov         ax,word ptr 0x8[si] 
7BD9    85 C0                     test        ax,ax 
7BDB    0F 84 F1 00               je          L$893 
7BDF    C1 E0 02                  shl         ax,0x02 
7BE2    C5 5C 64                  lds         bx,dword ptr 0x64[si] 
7BE5    01 C3                     add         bx,ax 
7BE7    C5 07                     lds         ax,dword ptr [bx] 
7BE9    89 C3                     mov         bx,ax 
7BEB    89 46 FC                  mov         word ptr -0x4[bp],ax 
7BEE    F6 47 2A 01               test        byte ptr 0x2a[bx],0x01 
7BF2    0F 84 DA 00               je          L$893 
7BF6    80 7F 0A 00               cmp         byte ptr 0xa[bx],0x00 
7BFA    74 0B                     je          L$890 
7BFC    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7BFF    C7 84 6E 01 01 01         mov         word ptr 0x16e[si],0x0101 
7C05    EB 8D                     jmp         L$886 
7C07                          L$890:
7C07    89 FB                     mov         bx,di 
7C09    8E 46 FE                  mov         es,word ptr -0x2[bp] 
7C0C    C1 E3 02                  shl         bx,0x02 
7C0F    26 C4 54 48               les         dx,dword ptr es:0x48[si] 
7C13    01 D3                     add         bx,dx 
7C15    26 8B 07                  mov         ax,word ptr es:[bx] 
7C18    89 46 F8                  mov         word ptr -0x8[bp],ax 
7C1B    26 8B 47 02               mov         ax,word ptr es:0x2[bx] 
7C1F    8E 46 FE                  mov         es,word ptr -0x2[bp] 
7C22    89 46 FA                  mov         word ptr -0x6[bp],ax 
7C25    26 8B 44 0A               mov         ax,word ptr es:0xa[si] 
7C29    99                        cwd         
7C2A    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
7C2D    89 D1                     mov         cx,dx 
7C2F    8B 57 28                  mov         dx,word ptr 0x28[bx] 
7C32    89 56 F6                  mov         word ptr -0xa[bp],dx 
7C35    89 C3                     mov         bx,ax 
7C37    BA 01 00                  mov         dx,0x0001 
7C3A    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
7C3D    9A 00 00 00 00            call        lseek_ 
7C42    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7C45    8B 54 04                  mov         dx,word ptr 0x4[si] 
7C48    8B 44 08                  mov         ax,word ptr 0x8[si] 
7C4B    8B 5C 64                  mov         bx,word ptr 0x64[si] 
7C4E    C1 E0 02                  shl         ax,0x02 
7C51    8E 5C 66                  mov         ds,word ptr 0x66[si] 
7C54    01 C3                     add         bx,ax 
7C56    C5 07                     lds         ax,dword ptr [bx] 
7C58    89 C3                     mov         bx,ax 
7C5A    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
7C5D    8B 47 28                  mov         ax,word ptr 0x28[bx] 
7C60    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
7C63    9A 00 00 00 00            call        read_ 
7C68    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7C6B    8B 5C 08                  mov         bx,word ptr 0x8[si] 
7C6E    8B 44 64                  mov         ax,word ptr 0x64[si] 
7C71    C1 E3 02                  shl         bx,0x02 
7C74    8E 5C 66                  mov         ds,word ptr 0x66[si] 
7C77    01 C3                     add         bx,ax 
7C79    C5 0F                     lds         cx,dword ptr [bx] 
7C7B    89 CB                     mov         bx,cx 
7C7D    8B 47 02                  mov         ax,word ptr 0x2[bx] 
7C80    8B 17                     mov         dx,word ptr [bx] 
7C82    85 C0                     test        ax,ax 
7C84    75 04                     jne         L$891 
7C86    85 D2                     test        dx,dx 
7C88    74 2D                     je          L$892 
7C8A                          L$891:
7C8A    BA 01 00                  mov         dx,0x0001 
7C8D    8B 47 28                  mov         ax,word ptr 0x28[bx] 
7C90    31 CB                     xor         bx,cx 
7C92    31 C9                     xor         cx,cx 
7C94    9A 00 00 00 00            call        lseek_ 
7C99    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7C9C    8B 5C 08                  mov         bx,word ptr 0x8[si] 
7C9F    8B 4C 64                  mov         cx,word ptr 0x64[si] 
7CA2    C1 E3 02                  shl         bx,0x02 
7CA5    8E 5C 66                  mov         ds,word ptr 0x66[si] 
7CA8    01 CB                     add         bx,cx 
7CAA    C5 0F                     lds         cx,dword ptr [bx] 
7CAC    89 CB                     mov         bx,cx 
7CAE    C5 0F                     lds         cx,dword ptr [bx] 
7CB0    89 CB                     mov         bx,cx 
7CB2    89 07                     mov         word ptr [bx],ax 
7CB4    89 57 02                  mov         word ptr 0x2[bx],dx 
7CB7                          L$892:
7CB7    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7CBA    8B 44 08                  mov         ax,word ptr 0x8[si] 
7CBD    8B 5C 64                  mov         bx,word ptr 0x64[si] 
7CC0    C1 E0 02                  shl         ax,0x02 
7CC3    8E 5C 66                  mov         ds,word ptr 0x66[si] 
7CC6    01 C3                     add         bx,ax 
7CC8    8B 07                     mov         ax,word ptr [bx] 
7CCA    8B 57 02                  mov         dx,word ptr 0x2[bx] 
7CCD    E8 00 00                  call        fd_dup_sync_ 
7CD0                          L$893:
7CD0    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7CD3    31 C0                     xor         ax,ax 
7CD5    89 3C                     mov         word ptr [si],di 
7CD7    E9 27 1D                  jmp         L$1046 
7CDA                          vpu_free_dynamic_segment_:
7CDA    51                        push        cx 
7CDB    56                        push        si 
7CDC    57                        push        di 
7CDD    C8 02 00 00               enter       0x0002,0x00 
7CE1    89 C6                     mov         si,ax 
7CE3    89 56 FE                  mov         word ptr -0x2[bp],dx 
7CE6    89 D9                     mov         cx,bx 
7CE8    89 DF                     mov         di,bx 
7CEA    8E DA                     mov         ds,dx 
7CEC    C1 E7 02                  shl         di,0x02 
7CEF    C5 5C 54                  lds         bx,dword ptr 0x54[si] 
7CF2    01 FB                     add         bx,di 
7CF4    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
7CF7    8E DA                     mov         ds,dx 
7CF9    C1 E3 02                  shl         bx,0x02 
7CFC    C5 44 48                  lds         ax,dword ptr 0x48[si] 
7CFF    01 C3                     add         bx,ax 
7D01    8B 07                     mov         ax,word ptr [bx] 
7D03    8B 57 02                  mov         dx,word ptr 0x2[bx] 
7D06    9A 00 00 00 00            call        free_ 
7D0B    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7D0E    FF 4C 52                  dec         word ptr 0x52[si] 
7D11    8B 44 52                  mov         ax,word ptr 0x52[si] 
7D14    8B 5C 54                  mov         bx,word ptr 0x54[si] 
7D17    29 C8                     sub         ax,cx 
7D19    8B 54 56                  mov         dx,word ptr 0x56[si] 
7D1C    C1 E0 02                  shl         ax,0x02 
7D1F    8D 4D 04                  lea         cx,0x4[di] 
7D22    50                        push        ax 
7D23    89 F8                     mov         ax,di 
7D25    01 D9                     add         cx,bx 
7D27    01 D8                     add         ax,bx 
7D29    89 CB                     mov         bx,cx 
7D2B    89 D1                     mov         cx,dx 
7D2D    9A 00 00 00 00            call        memmove_ 
7D32    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7D35    8B 44 52                  mov         ax,word ptr 0x52[si] 
7D38    85 C0                     test        ax,ax 
7D3A    74 1B                     je          L$894 
7D3C    89 C3                     mov         bx,ax 
7D3E    8B 54 56                  mov         dx,word ptr 0x56[si] 
7D41    C1 E3 02                  shl         bx,0x02 
7D44    8B 44 54                  mov         ax,word ptr 0x54[si] 
7D47    9A 00 00 00 00            call        realloc_ 
7D4C    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7D4F    89 44 54                  mov         word ptr 0x54[si],ax 
7D52    89 54 56                  mov         word ptr 0x56[si],dx 
7D55    EB 16                     jmp         L$895 
7D57                          L$894:
7D57    8B 44 54                  mov         ax,word ptr 0x54[si] 
7D5A    8B 54 56                  mov         dx,word ptr 0x56[si] 
7D5D    9A 00 00 00 00            call        free_ 
7D62    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7D65    66 C7 44 54 00 00 00 00
                                  mov         dword ptr 0x54[si],0x00000000 
7D6D                          L$895:
7D6D    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
7D70    89 F0                     mov         ax,si 
7D72    E8 00 00                  call        vpu_sync_dynsegments_ 
7D75    E9 7A 9E                  jmp         L$272 
7D78                          vpu_syscall_munmap_:
7D78    53                        push        bx 
7D79    51                        push        cx 
7D7A    56                        push        si 
7D7B    57                        push        di 
7D7C    89 C6                     mov         si,ax 
7D7E    89 D1                     mov         cx,dx 
7D80    8E DA                     mov         ds,dx 
7D82    8B 44 14                  mov         ax,word ptr 0x14[si] 
7D85    8B 5C 52                  mov         bx,word ptr 0x52[si] 
7D88    3B 44 02                  cmp         ax,word ptr 0x2[si] 
7D8B    75 09                     jne         L$897 
7D8D    C7 04 FF FF               mov         word ptr [si],0xffff 
7D91                          L$896:
7D91    31 C0                     xor         ax,ax 
7D93    E9 6C 1C                  jmp         L$1047 
7D96                          L$897:
7D96    89 D8                     mov         ax,bx 
7D98    C1 E0 02                  shl         ax,0x02 
7D9B                          L$898:
7D9B    4B                        dec         bx 
7D9C    2D 04 00                  sub         ax,0x0004 
7D9F    83 FB FF                  cmp         bx,0xffff 
7DA2    74 23                     je          L$899 
7DA4    8E D9                     mov         ds,cx 
7DA6    C5 7C 54                  lds         di,dword ptr 0x54[si] 
7DA9    01 C7                     add         di,ax 
7DAB    8B 55 02                  mov         dx,word ptr 0x2[di] 
7DAE    8E D9                     mov         ds,cx 
7DB0    3B 54 02                  cmp         dx,word ptr 0x2[si] 
7DB3    75 E6                     jne         L$898 
7DB5    89 F0                     mov         ax,si 
7DB7    89 CA                     mov         dx,cx 
7DB9    E8 00 00                  call        vpu_free_dynamic_segment_ 
7DBC    8E D9                     mov         ds,cx 
7DBE    31 C0                     xor         ax,ax 
7DC0    C7 04 00 00               mov         word ptr [si],0x0000 
7DC4    E9 3B 1C                  jmp         L$1047 
7DC7                          L$899:
7DC7    8E D9                     mov         ds,cx 
7DC9    31 C0                     xor         ax,ax 
7DCB    89 1C                     mov         word ptr [si],bx 
7DCD    E9 32 1C                  jmp         L$1047 
7DD0                          vpu_syscall_exit_:
7DD0    53                        push        bx 
7DD1    51                        push        cx 
7DD2    56                        push        si 
7DD3    57                        push        di 
7DD4    C8 02 00 00               enter       0x0002,0x00 
7DD8    89 C6                     mov         si,ax 
7DDA    89 56 FE                  mov         word ptr -0x2[bp],dx 
7DDD    8E DA                     mov         ds,dx 
7DDF    8B 9C 74 01               mov         bx,word ptr 0x174[si] 
7DE3    8B 84 76 01               mov         ax,word ptr 0x176[si] 
7DE7    80 8C 8A 01 08            or          byte ptr 0x18a[si],0x08 
7DEC    85 C0                     test        ax,ax 
7DEE    75 04                     jne         L$900 
7DF0    85 DB                     test        bx,bx 
7DF2    74 54                     je          L$901 
7DF4                          L$900:
7DF4    89 DF                     mov         di,bx 
7DF6    8E D8                     mov         ds,ax 
7DF8    F6 85 8B 01 01            test        byte ptr 0x18b[di],0x01 
7DFD    75 49                     jne         L$901 
7DFF    8E C2                     mov         es,dx 
7E01    26 8B 84 72 01            mov         ax,word ptr es:0x172[si] 
7E06    85 C0                     test        ax,ax 
7E08    74 3E                     je          L$901 
7E0A    89 C1                     mov         cx,ax 
7E0C    8C DA                     mov         dx,ds 
7E0E    26 8B 9C 70 01            mov         bx,word ptr es:0x170[si] 
7E13    89 F8                     mov         ax,di 
7E15    41                        inc         cx 
7E16    E8 00 00                  call        segment_exists_ 
7E19    39 C8                     cmp         ax,cx 
7E1B    76 2B                     jbe         L$901 
7E1D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7E20    C5 9C 74 01               lds         bx,dword ptr 0x174[si] 
7E24    8E 46 FE                  mov         es,word ptr -0x2[bp] 
7E27    26 8B 84 70 01            mov         ax,word ptr es:0x170[si] 
7E2C    8B 4F 48                  mov         cx,word ptr 0x48[bx] 
7E2F    C1 E0 02                  shl         ax,0x02 
7E32    8E 5F 4A                  mov         ds,word ptr 0x4a[bx] 
7E35    89 CB                     mov         bx,cx 
7E37    01 C3                     add         bx,ax 
7E39    C5 0F                     lds         cx,dword ptr [bx] 
7E3B    26 8B 9C 72 01            mov         bx,word ptr es:0x172[si] 
7E40    01 CB                     add         bx,cx 
7E42    26 8B 44 02               mov         ax,word ptr es:0x2[si] 
7E46    89 07                     mov         word ptr [bx],ax 
7E48                          L$901:
7E48    B8 03 00                  mov         ax,0x0003 
7E4B    E9 B3 1B                  jmp         L$1046 
7E4E                          vpu_syscall_getargc_:
7E4E    53                        push        bx 
7E4F    89 C3                     mov         bx,ax 
7E51    8E DA                     mov         ds,dx 
7E53    8B 87 82 01               mov         ax,word ptr 0x182[bx] 
7E57                          L$902:
7E57    89 07                     mov         word ptr [bx],ax 
7E59                          L$903:
7E59    31 C0                     xor         ax,ax 
7E5B    5B                        pop         bx 
7E5C    CB                        retf        
7E5D                          vpu_syscall_getargv_:
7E5D    53                        push        bx 
7E5E    51                        push        cx 
7E5F    56                        push        si 
7E60    57                        push        di 
7E61    89 C3                     mov         bx,ax 
7E63    8E DA                     mov         ds,dx 
7E65    8B 4F 02                  mov         cx,word ptr 0x2[bx] 
7E68    3B 8F 82 01               cmp         cx,word ptr 0x182[bx] 
7E6C    0F 83 21 FF               jae         L$896 
7E70    89 CE                     mov         si,cx 
7E72    C1 E6 02                  shl         si,0x02 
7E75    C4 8F 84 01               les         cx,dword ptr 0x184[bx] 
7E79    01 CE                     add         si,cx 
7E7B    26 C4 3C                  les         di,dword ptr es:[si] 
7E7E    B9 FF FF                  mov         cx,0xffff 
7E81    33 C0                     xor         ax,ax 
7E83    F2 AE                     repne scasb 
7E85    F7 D1                     not         cx 
7E87    49                        dec         cx 
7E88    8B 47 04                  mov         ax,word ptr 0x4[bx] 
7E8B    39 C1                     cmp         cx,ax 
7E8D    0F 82 00 FF               jb          L$896 
7E91    8B 77 02                  mov         si,word ptr 0x2[bx] 
7E94    8B 8F 84 01               mov         cx,word ptr 0x184[bx] 
7E98    C1 E6 02                  shl         si,0x02 
7E9B    8E 87 86 01               mov         es,word ptr 0x186[bx] 
7E9F    01 CE                     add         si,cx 
7EA1    26 C4 3C                  les         di,dword ptr es:[si] 
7EA4    89 C6                     mov         si,ax 
7EA6    01 FE                     add         si,di 
7EA8    26 0F B6 0C               movzx       cx,byte ptr es:[si] 
7EAC    89 0F                     mov         word ptr [bx],cx 
7EAE    E9 E0 FE                  jmp         L$896 
7EB1                          vpu_syscall_spawn_:
7EB1    53                        push        bx 
7EB2    51                        push        cx 
7EB3    56                        push        si 
7EB4    57                        push        di 
7EB5    C8 0E 00 00               enter       0x000e,0x00 
7EB9    89 C6                     mov         si,ax 
7EBB    89 56 FE                  mov         word ptr -0x2[bp],dx 
7EBE    8E DA                     mov         ds,dx 
7EC0    8B 5C 14                  mov         bx,word ptr 0x14[si] 
7EC3    8B 44 48                  mov         ax,word ptr 0x48[si] 
7EC6    C1 E3 02                  shl         bx,0x02 
7EC9    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
7ECC    01 C3                     add         bx,ax 
7ECE    8B 07                     mov         ax,word ptr [bx] 
7ED0    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
7ED3    8E DA                     mov         ds,dx 
7ED5    89 5E FC                  mov         word ptr -0x4[bp],bx 
7ED8    8B 5C 04                  mov         bx,word ptr 0x4[si] 
7EDB    01 C3                     add         bx,ax 
7EDD    89 5E FA                  mov         word ptr -0x6[bp],bx 
7EE0    8B 5C 06                  mov         bx,word ptr 0x6[si] 
7EE3    01 C3                     add         bx,ax 
7EE5    89 5E F8                  mov         word ptr -0x8[bp],bx 
7EE8    8B 5C 02                  mov         bx,word ptr 0x2[si] 
7EEB    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
7EEE    01 C3                     add         bx,ax 
7EF0    89 56 F4                  mov         word ptr -0xc[bp],dx 
7EF3    89 5E F2                  mov         word ptr -0xe[bp],bx 
7EF6    F6 44 24 20               test        byte ptr 0x24[si],0x20 
7EFA    0F 84 B7 00               je          L$906 
7EFE    8B 7E FA                  mov         di,word ptr -0x6[bp] 
7F01    8E C2                     mov         es,dx 
7F03    B9 FF FF                  mov         cx,0xffff 
7F06    33 C0                     xor         ax,ax 
7F08    F2 AE                     repne scasb 
7F0A    F7 D1                     not         cx 
7F0C    49                        dec         cx 
7F0D    8B 7E F8                  mov         di,word ptr -0x8[bp] 
7F10    89 4E F6                  mov         word ptr -0xa[bp],cx 
7F13    B9 FF FF                  mov         cx,0xffff 
7F16    33 C0                     xor         ax,ax 
7F18    F2 AE                     repne scasb 
7F1A    F7 D1                     not         cx 
7F1C    49                        dec         cx 
7F1D    8C DA                     mov         dx,ds 
7F1F    89 CF                     mov         di,cx 
7F21    89 F0                     mov         ax,si 
7F23    8B 5C 02                  mov         bx,word ptr 0x2[si] 
7F26    31 C9                     xor         cx,cx 
7F28    83 C3 01                  add         bx,0x0001 
7F2B    11 C9                     adc         cx,cx 
7F2D    E8 00 00                  call        memory_allowed_ 
7F30    84 C0                     test        al,al 
7F32    74 33                     je          L$904 
7F34    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7F37    31 C0                     xor         ax,ax 
7F39    31 C9                     xor         cx,cx 
7F3B    8B 5C 04                  mov         bx,word ptr 0x4[si] 
7F3E    8C DA                     mov         dx,ds 
7F40    03 5E F6                  add         bx,word ptr -0xa[bp] 
7F43    11 C1                     adc         cx,ax 
7F45    89 F0                     mov         ax,si 
7F47    E8 00 00                  call        memory_allowed_ 
7F4A    84 C0                     test        al,al 
7F4C    74 19                     je          L$904 
7F4E    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7F51    31 C0                     xor         ax,ax 
7F53    31 C9                     xor         cx,cx 
7F55    8B 5C 06                  mov         bx,word ptr 0x6[si] 
7F58    8C DA                     mov         dx,ds 
7F5A    01 FB                     add         bx,di 
7F5C    11 C1                     adc         cx,ax 
7F5E    89 F0                     mov         ax,si 
7F60    E8 00 00                  call        memory_allowed_ 
7F63    84 C0                     test        al,al 
7F65    75 05                     jne         L$905 
7F67                          L$904:
7F67    31 C0                     xor         ax,ax 
7F69    E9 95 1A                  jmp         L$1046 
7F6C                          L$905:
7F6C    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
7F6F    89 F0                     mov         ax,si 
7F71    9A 00 00 00 00            call        vpu_cwd_ 
7F76    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7F79    0F B6 84 CC 00            movzx       ax,byte ptr 0xcc[si] 
7F7E    9A 00 00 00 00            call        chdrive_ 
7F83    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7F86    0F B6 44 24               movzx       ax,byte ptr 0x24[si] 
7F8A    50                        push        ax 
7F8B    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
7F8E    6A 00                     push        0x0000 
7F90    8B 4E FC                  mov         cx,word ptr -0x4[bp] 
7F93    FF 76 FC                  push        word ptr -0x4[bp] 
7F96    8C DA                     mov         dx,ds 
7F98    FF 76 F8                  push        word ptr -0x8[bp] 
7F9B    8D 84 CC 00               lea         ax,0xcc[si] 
7F9F    9A 00 00 00 00            call        run_program_ 
7FA4    89 C3                     mov         bx,ax 
7FA6    31 C0                     xor         ax,ax 
7FA8    9A 00 00 00 00            call        chdrive_ 
7FAD    85 D2                     test        dx,dx 
7FAF    75 10                     jne         L$907 
7FB1    85 DB                     test        bx,bx 
7FB3    75 0C                     jne         L$907 
7FB5                          L$906:
7FB5    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
7FB8    31 C0                     xor         ax,ax 
7FBA    C7 04 FF FF               mov         word ptr [si],0xffff 
7FBE    E9 40 1A                  jmp         L$1046 
7FC1                          L$907:
7FC1    8E DA                     mov         ds,dx 
7FC3    C5 7F 16                  lds         di,dword ptr 0x16[bx] 
7FC6    8B 85 88 01               mov         ax,word ptr 0x188[di] 
7FCA    C5 7E F2                  lds         di,dword ptr -0xe[bp] 
7FCD    89 05                     mov         word ptr [di],ax 
7FCF    8E DA                     mov         ds,dx 
7FD1    C5 7F 16                  lds         di,dword ptr 0x16[bx] 
7FD4    8E 46 FE                  mov         es,word ptr -0x2[bp] 
7FD7    26 8A 44 08               mov         al,byte ptr es:0x8[si] 
7FDB    88 45 24                  mov         byte ptr 0x24[di],al 
7FDE    06                        push        es 
7FDF    1F                        pop         ds 
7FE0    E9 18 1A                  jmp         L$1045 
7FE3                          vpu_fd_makedup_:
7FE3    51                        push        cx 
7FE4    56                        push        si 
7FE5    57                        push        di 
7FE6    C8 08 00 00               enter       0x0008,0x00 
7FEA    C4 76 0A                  les         si,dword ptr 0xa[bp] 
7FED    89 46 FC                  mov         word ptr -0x4[bp],ax 
7FF0    89 56 FE                  mov         word ptr -0x2[bp],dx 
7FF3    89 D8                     mov         ax,bx 
7FF5    8B 56 0E                  mov         dx,word ptr 0xe[bp] 
7FF8    26 8B 7C 64               mov         di,word ptr es:0x64[si] 
7FFC    C1 E2 02                  shl         dx,0x02 
7FFF    26 8E 5C 66               mov         ds,word ptr es:0x66[si] 
8003    01 D7                     add         di,dx 
8005    8B 55 02                  mov         dx,word ptr 0x2[di] 
8008    8B 1D                     mov         bx,word ptr [di] 
800A                          L$908:
800A    89 56 FA                  mov         word ptr -0x6[bp],dx 
800D    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
8010    8B 7F 12                  mov         di,word ptr 0x12[bx] 
8013    8B 57 10                  mov         dx,word ptr 0x10[bx] 
8016    85 FF                     test        di,di 
8018    75 04                     jne         L$909 
801A    85 D2                     test        dx,dx 
801C    74 09                     je          L$910 
801E                          L$909:
801E    89 D7                     mov         di,dx 
8020    8B 57 12                  mov         dx,word ptr 0x12[bx] 
8023    89 FB                     mov         bx,di 
8025    EB E3                     jmp         L$908 
8027                          L$910:
8027    C5 7E FC                  lds         di,dword ptr -0x4[bp] 
802A    C1 E0 02                  shl         ax,0x02 
802D    C5 55 64                  lds         dx,dword ptr 0x64[di] 
8030    89 D7                     mov         di,dx 
8032    01 C7                     add         di,ax 
8034    8B 15                     mov         dx,word ptr [di] 
8036    8B 7D 02                  mov         di,word ptr 0x2[di] 
8039    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
803C    89 57 10                  mov         word ptr 0x10[bx],dx 
803F    89 7F 12                  mov         word ptr 0x12[bx],di 
8042    8B 56 0E                  mov         dx,word ptr 0xe[bp] 
8045    26 8B 7C 64               mov         di,word ptr es:0x64[si] 
8049    C1 E2 02                  shl         dx,0x02 
804C    26 8E 5C 66               mov         ds,word ptr es:0x66[si] 
8050    89 FE                     mov         si,di 
8052    01 D6                     add         si,dx 
8054    8B 3C                     mov         di,word ptr [si] 
8056    8B 54 02                  mov         dx,word ptr 0x2[si] 
8059    C5 76 FC                  lds         si,dword ptr -0x4[bp] 
805C    89 7E F8                  mov         word ptr -0x8[bp],di 
805F    8B 7E FC                  mov         di,word ptr -0x4[bp] 
8062    8B 74 64                  mov         si,word ptr 0x64[si] 
8065    8E 5D 66                  mov         ds,word ptr 0x66[di] 
8068    01 C6                     add         si,ax 
806A    8B 3C                     mov         di,word ptr [si] 
806C    8B 74 02                  mov         si,word ptr 0x2[si] 
806F    B9 16 00                  mov         cx,0x0016 
8072    8E C6                     mov         es,si 
8074    8E DA                     mov         ds,dx 
8076    8B 76 F8                  mov         si,word ptr -0x8[bp] 
8079    F3 A5                     rep movsw   
807B    C5 76 FC                  lds         si,dword ptr -0x4[bp] 
807E    8B 7E FC                  mov         di,word ptr -0x4[bp] 
8081    8B 74 64                  mov         si,word ptr 0x64[si] 
8084    8E 5D 66                  mov         ds,word ptr 0x66[di] 
8087    01 C6                     add         si,ax 
8089    C5 3C                     lds         di,dword ptr [si] 
808B    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
808E    89 5D 14                  mov         word ptr 0x14[di],bx 
8091    8B 76 FC                  mov         si,word ptr -0x4[bp] 
8094    89 55 16                  mov         word ptr 0x16[di],dx 
8097    C5 5E FC                  lds         bx,dword ptr -0x4[bp] 
809A    8B 74 64                  mov         si,word ptr 0x64[si] 
809D    8E 5F 66                  mov         ds,word ptr 0x66[bx] 
80A0    01 C6                     add         si,ax 
80A2    C5 1C                     lds         bx,dword ptr [si] 
80A4    66 C7 47 10 00 00 00 00
                                  mov         dword ptr 0x10[bx],0x00000000 
80AC    C5 5E FC                  lds         bx,dword ptr -0x4[bp] 
80AF    8B 76 FC                  mov         si,word ptr -0x4[bp] 
80B2    8B 5F 64                  mov         bx,word ptr 0x64[bx] 
80B5    8E 5C 66                  mov         ds,word ptr 0x66[si] 
80B8    01 C3                     add         bx,ax 
80BA    C5 37                     lds         si,dword ptr [bx] 
80BC    66 C7 04 00 00 00 00      mov         dword ptr [si],0x00000000 
80C3    E9 DC E9                  jmp         L$751 
80C6                          copy_vpu_:
80C6    56                        push        si 
80C7    57                        push        di 
80C8    C8 02 00 00               enter       0x0002,0x00 
80CC    50                        push        ax 
80CD    52                        push        dx 
80CE    53                        push        bx 
80CF    51                        push        cx 
80D0    8E DA                     mov         ds,dx 
80D2    89 C3                     mov         bx,ax 
80D4    66 C7 47 40 00 00 00 00
                                  mov         dword ptr 0x40[bx],0x00000000 
80DC    66 C7 47 48 00 00 00 00
                                  mov         dword ptr 0x48[bx],0x00000000 
80E4    66 C7 47 5E 00 00 00 00
                                  mov         dword ptr 0x5e[bx],0x00000000 
80EC    C7 47 4E 00 00            mov         word ptr 0x4e[bx],0x0000 
80F1    C7 47 46 00 00            mov         word ptr 0x46[bx],0x0000 
80F6    66 C7 47 54 00 00 00 00
                                  mov         dword ptr 0x54[bx],0x00000000 
80FE    C7 47 52 00 00            mov         word ptr 0x52[bx],0x0000 
8103    66 C7 47 64 00 00 00 00
                                  mov         dword ptr 0x64[bx],0x00000000 
810B    66 C7 47 68 00 00 00 00
                                  mov         dword ptr 0x68[bx],0x00000000 
8113    66 C7 47 58 00 00 00 00
                                  mov         dword ptr 0x58[bx],0x00000000 
811B    66 C7 47 32 00 00 00 00
                                  mov         dword ptr 0x32[bx],0x00000000 
8123    8B 47 32                  mov         ax,word ptr 0x32[bx] 
8126    8B 57 34                  mov         dx,word ptr 0x34[bx] 
8129    89 47 36                  mov         word ptr 0x36[bx],ax 
812C    89 57 38                  mov         word ptr 0x38[bx],dx 
812F    89 57 30                  mov         word ptr 0x30[bx],dx 
8132    8B 47 36                  mov         ax,word ptr 0x36[bx] 
8135    89 47 2E                  mov         word ptr 0x2e[bx],ax 
8138    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
813B    8E D9                     mov         ds,cx 
813D    FF 77 62                  push        word ptr 0x62[bx] 
8140    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
8143    FF 77 4E                  push        word ptr 0x4e[bx] 
8146    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
8149    FF 77 4C                  push        word ptr 0x4c[bx] 
814C    8B 4F 44                  mov         cx,word ptr 0x44[bx] 
814F    FF 77 46                  push        word ptr 0x46[bx] 
8152    8B 5F 3A                  mov         bx,word ptr 0x3a[bx] 
8155    E8 00 00                  call        init_vpu_ 
8158    85 C0                     test        ax,ax 
815A    75 05                     jne         L$912 
815C                          L$911:
815C    30 C0                     xor         al,al 
815E    E9 6F 91                  jmp         L$160 
8161                          L$912:
8161    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
8164    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
8167    8B 47 18                  mov         ax,word ptr 0x18[bx] 
816A    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
816D    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
8170    89 47 18                  mov         word ptr 0x18[bx],ax 
8173    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
8176    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
8179    8B 47 1A                  mov         ax,word ptr 0x1a[bx] 
817C    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
817F    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
8182    89 47 1A                  mov         word ptr 0x1a[bx],ax 
8185    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
8188    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
818B    8B 47 16                  mov         ax,word ptr 0x16[bx] 
818E    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
8191    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
8194    89 47 16                  mov         word ptr 0x16[bx],ax 
8197    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
819A    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
819D    8B 76 F8                  mov         si,word ptr -0x8[bp] 
81A0    8B 47 2E                  mov         ax,word ptr 0x2e[bx] 
81A3    8B 54 38                  mov         dx,word ptr 0x38[si] 
81A6    8B 5F 30                  mov         bx,word ptr 0x30[bx] 
81A9    8B 4C 36                  mov         cx,word ptr 0x36[si] 
81AC    39 D3                     cmp         bx,dx 
81AE    75 16                     jne         L$913 
81B0    39 C8                     cmp         ax,cx 
81B2    75 12                     jne         L$913 
81B4    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
81B7    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
81BA    8B 57 36                  mov         dx,word ptr 0x36[bx] 
81BD    8B 47 38                  mov         ax,word ptr 0x38[bx] 
81C0    89 57 2E                  mov         word ptr 0x2e[bx],dx 
81C3    89 47 30                  mov         word ptr 0x30[bx],ax 
81C6                          L$913:
81C6    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
81C9    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
81CC    8B 7E FC                  mov         di,word ptr -0x4[bp] 
81CF    89 DE                     mov         si,bx 
81D1    8B 4F 3A                  mov         cx,word ptr 0x3a[bx] 
81D4    8B 47 34                  mov         ax,word ptr 0x34[bx] 
81D7    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
81DA    8B 74 32                  mov         si,word ptr 0x32[si] 
81DD    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
81E0    01 C9                     add         cx,cx 
81E2    8B 7D 32                  mov         di,word ptr 0x32[di] 
81E5    8E 47 34                  mov         es,word ptr 0x34[bx] 
81E8    8E D8                     mov         ds,ax 
81EA    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
81ED    57                        push        di 
81EE    F3 A4                     rep movsb   
81F0    5F                        pop         di 
81F1    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
81F4    8B 7E FC                  mov         di,word ptr -0x4[bp] 
81F7    89 DE                     mov         si,bx 
81F9    8B 4F 3A                  mov         cx,word ptr 0x3a[bx] 
81FC    8B 74 36                  mov         si,word ptr 0x36[si] 
81FF    8B 57 38                  mov         dx,word ptr 0x38[bx] 
8202    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
8205    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
8208    01 C9                     add         cx,cx 
820A    8B 7D 36                  mov         di,word ptr 0x36[di] 
820D    8E 47 38                  mov         es,word ptr 0x38[bx] 
8210    8E DA                     mov         ds,dx 
8212    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
8215    57                        push        di 
8216    F3 A4                     rep movsb   
8218    5F                        pop         di 
8219    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
821C    8B 47 46                  mov         ax,word ptr 0x46[bx] 
821F    89 C2                     mov         dx,ax 
8221    C1 E2 02                  shl         dx,0x02 
8224                          L$914:
8224    48                        dec         ax 
8225    83 EA 04                  sub         dx,0x0004 
8228    3D FF FF                  cmp         ax,0xffff 
822B    74 3D                     je          L$915 
822D    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
8230    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
8233    8B 76 F8                  mov         si,word ptr -0x8[bp] 
8236    8B 4F 44                  mov         cx,word ptr 0x44[bx] 
8239    8B 5F 40                  mov         bx,word ptr 0x40[bx] 
823C    8E 5C 42                  mov         ds,word ptr 0x42[si] 
823F    01 D3                     add         bx,dx 
8241    8B 37                     mov         si,word ptr [bx] 
8243    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
8246    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
8249    89 5E FE                  mov         word ptr -0x2[bp],bx 
824C    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
824F    8B 7E FC                  mov         di,word ptr -0x4[bp] 
8252    8B 5F 40                  mov         bx,word ptr 0x40[bx] 
8255    8E 5D 42                  mov         ds,word ptr 0x42[di] 
8258    01 D3                     add         bx,dx 
825A    8B 3F                     mov         di,word ptr [bx] 
825C    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
825F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
8262    8E C3                     mov         es,bx 
8264    57                        push        di 
8265    F3 A4                     rep movsb   
8267    5F                        pop         di 
8268    EB BA                     jmp         L$914 
826A                          L$915:
826A    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
826D    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
8270    8B 57 4E                  mov         dx,word ptr 0x4e[bx] 
8273    89 D0                     mov         ax,dx 
8275    C1 E0 02                  shl         ax,0x02 
8278                          L$916:
8278    4A                        dec         dx 
8279    2D 04 00                  sub         ax,0x0004 
827C    83 FA FF                  cmp         dx,0xffff 
827F    74 3D                     je          L$917 
8281    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
8284    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
8287    8B 76 F8                  mov         si,word ptr -0x8[bp] 
828A    8B 4F 4C                  mov         cx,word ptr 0x4c[bx] 
828D    8B 5F 48                  mov         bx,word ptr 0x48[bx] 
8290    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
8293    01 C3                     add         bx,ax 
8295    8B 37                     mov         si,word ptr [bx] 
8297    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
829A    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
829D    89 5E FE                  mov         word ptr -0x2[bp],bx 
82A0    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
82A3    8B 7E FC                  mov         di,word ptr -0x4[bp] 
82A6    8B 5F 48                  mov         bx,word ptr 0x48[bx] 
82A9    8E 5D 4A                  mov         ds,word ptr 0x4a[di] 
82AC    01 C3                     add         bx,ax 
82AE    8B 3F                     mov         di,word ptr [bx] 
82B0    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
82B3    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
82B6    8E C3                     mov         es,bx 
82B8    57                        push        di 
82B9    F3 A4                     rep movsb   
82BB    5F                        pop         di 
82BC    EB BA                     jmp         L$916 
82BE                          L$917:
82BE    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
82C1    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
82C4    8B 7E FC                  mov         di,word ptr -0x4[bp] 
82C7    89 DE                     mov         si,bx 
82C9    8B 4F 62                  mov         cx,word ptr 0x62[bx] 
82CC    8B 47 60                  mov         ax,word ptr 0x60[bx] 
82CF    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
82D2    8B 74 5E                  mov         si,word ptr 0x5e[si] 
82D5    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
82D8    C1 E1 02                  shl         cx,0x02 
82DB    8B 7D 5E                  mov         di,word ptr 0x5e[di] 
82DE    8E 47 60                  mov         es,word ptr 0x60[bx] 
82E1    8E D8                     mov         ds,ax 
82E3    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
82E6    57                        push        di 
82E7    F3 A4                     rep movsb   
82E9    5F                        pop         di 
82EA    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
82ED    8B 47 52                  mov         ax,word ptr 0x52[bx] 
82F0    85 C0                     test        ax,ax 
82F2    0F 84 53 01               je          L$922 
82F6    C1 E0 02                  shl         ax,0x02 
82F9    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
82FC    9A 00 00 00 00            call        malloc_ 
8301    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
8304    89 47 54                  mov         word ptr 0x54[bx],ax 
8307    89 57 56                  mov         word ptr 0x56[bx],dx 
830A    8B 47 56                  mov         ax,word ptr 0x56[bx] 
830D    8B 57 54                  mov         dx,word ptr 0x54[bx] 
8310    85 C0                     test        ax,ax 
8312    75 06                     jne         L$918 
8314    85 D2                     test        dx,dx 
8316    0F 84 42 FE               je          L$911 
831A                          L$918:
831A    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
831D    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
8320    8B 47 50                  mov         ax,word ptr 0x50[bx] 
8323    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
8326    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
8329    8B 76 FC                  mov         si,word ptr -0x4[bp] 
832C    89 47 50                  mov         word ptr 0x50[bx],ax 
832F    89 C3                     mov         bx,ax 
8331    8B 54 4A                  mov         dx,word ptr 0x4a[si] 
8334    C1 E3 02                  shl         bx,0x02 
8337    8B 44 48                  mov         ax,word ptr 0x48[si] 
833A    9A 00 00 00 00            call        realloc_ 
833F    85 D2                     test        dx,dx 
8341    75 06                     jne         L$919 
8343    85 C0                     test        ax,ax 
8345    0F 84 13 FE               je          L$911 
8349                          L$919:
8349    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
834C    89 F3                     mov         bx,si 
834E    89 47 48                  mov         word ptr 0x48[bx],ax 
8351    89 57 4A                  mov         word ptr 0x4a[bx],dx 
8354                          L$920:
8354    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
8357    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
835A    8B 47 52                  mov         ax,word ptr 0x52[bx] 
835D    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
8360    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
8363    3B 47 52                  cmp         ax,word ptr 0x52[bx] 
8366    0F 83 DF 00               jae         L$922 
836A    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
836D    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
8370    8B 76 F8                  mov         si,word ptr -0x8[bp] 
8373    8B 7E F8                  mov         di,word ptr -0x8[bp] 
8376    8B 5F 52                  mov         bx,word ptr 0x52[bx] 
8379    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
837C    C1 E3 02                  shl         bx,0x02 
837F    8B 74 54                  mov         si,word ptr 0x54[si] 
8382    8E 45 56                  mov         es,word ptr 0x56[di] 
8385    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
8388    8B 7E FC                  mov         di,word ptr -0x4[bp] 
838B    01 DE                     add         si,bx 
838D    C5 45 54                  lds         ax,dword ptr 0x54[di] 
8390    01 C3                     add         bx,ax 
8392    26 8B 14                  mov         dx,word ptr es:[si] 
8395    26 8B 44 02               mov         ax,word ptr es:0x2[si] 
8399    89 17                     mov         word ptr [bx],dx 
839B    89 47 02                  mov         word ptr 0x2[bx],ax 
839E    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
83A1    89 FB                     mov         bx,di 
83A3    89 FE                     mov         si,di 
83A5    8B 5F 52                  mov         bx,word ptr 0x52[bx] 
83A8    8B 54 54                  mov         dx,word ptr 0x54[si] 
83AB    C1 E3 02                  shl         bx,0x02 
83AE    8E 5C 56                  mov         ds,word ptr 0x56[si] 
83B1    01 D3                     add         bx,dx 
83B3    8B 07                     mov         ax,word ptr [bx] 
83B5    9A 00 00 00 00            call        malloc_ 
83BA    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
83BD    89 FB                     mov         bx,di 
83BF    8B 4F 52                  mov         cx,word ptr 0x52[bx] 
83C2    C1 E1 02                  shl         cx,0x02 
83C5    8B 5F 54                  mov         bx,word ptr 0x54[bx] 
83C8    8E 5C 56                  mov         ds,word ptr 0x56[si] 
83CB    01 CB                     add         bx,cx 
83CD    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
83D0    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
83D3    C1 E3 02                  shl         bx,0x02 
83D6    C5 4C 48                  lds         cx,dword ptr 0x48[si] 
83D9    01 CB                     add         bx,cx 
83DB    89 07                     mov         word ptr [bx],ax 
83DD    89 57 02                  mov         word ptr 0x2[bx],dx 
83E0    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
83E3    89 FB                     mov         bx,di 
83E5    8B 74 52                  mov         si,word ptr 0x52[si] 
83E8    8B 47 54                  mov         ax,word ptr 0x54[bx] 
83EB    C1 E6 02                  shl         si,0x02 
83EE    8E 45 56                  mov         es,word ptr 0x56[di] 
83F1    01 C6                     add         si,ax 
83F3    26 8B 44 02               mov         ax,word ptr es:0x2[si] 
83F7    8B 5F 48                  mov         bx,word ptr 0x48[bx] 
83FA    C1 E0 02                  shl         ax,0x02 
83FD    8E 5D 4A                  mov         ds,word ptr 0x4a[di] 
8400    01 C3                     add         bx,ax 
8402    8B 4F 02                  mov         cx,word ptr 0x2[bx] 
8405    8B 17                     mov         dx,word ptr [bx] 
8407    85 C9                     test        cx,cx 
8409    75 06                     jne         L$921 
840B    85 D2                     test        dx,dx 
840D    0F 84 4B FD               je          L$911 
8411                          L$921:
8411    26 8B 0C                  mov         cx,word ptr es:[si] 
8414    8E 46 F6                  mov         es,word ptr -0xa[bp] 
8417    8B 76 F8                  mov         si,word ptr -0x8[bp] 
841A    8B 7E F8                  mov         di,word ptr -0x8[bp] 
841D    26 8B 74 48               mov         si,word ptr es:0x48[si] 
8421    26 8E 45 4A               mov         es,word ptr es:0x4a[di] 
8425    01 C6                     add         si,ax 
8427    26 8B 14                  mov         dx,word ptr es:[si] 
842A    26 8B 7C 02               mov         di,word ptr es:0x2[si] 
842E    8B 07                     mov         ax,word ptr [bx] 
8430    89 D6                     mov         si,dx 
8432    8E 47 02                  mov         es,word ptr 0x2[bx] 
8435    8E DF                     mov         ds,di 
8437    89 C7                     mov         di,ax 
8439    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
843C    57                        push        di 
843D    F3 A4                     rep movsb   
843F    5F                        pop         di 
8440    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
8443    FF 47 52                  inc         word ptr 0x52[bx] 
8446    E9 0B FF                  jmp         L$920 
8449                          L$922:
8449    B9 3C 00                  mov         cx,0x003c 
844C    BE F0 00                  mov         si,0x00f0 
844F                          L$923:
844F    49                        dec         cx 
8450    83 EE 04                  sub         si,0x0004 
8453    83 F9 FF                  cmp         cx,0xffff 
8456    74 2D                     je          L$924 
8458    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
845B    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
845E    8B 7E F8                  mov         di,word ptr -0x8[bp] 
8461    8B 5F 64                  mov         bx,word ptr 0x64[bx] 
8464    8E 5D 66                  mov         ds,word ptr 0x66[di] 
8467    01 F3                     add         bx,si 
8469    C5 3F                     lds         di,dword ptr [bx] 
846B    F6 45 2A 01               test        byte ptr 0x2a[di],0x01 
846F    74 DE                     je          L$923 
8471    51                        push        cx 
8472    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
8475    FF 76 F6                  push        word ptr -0xa[bp] 
8478    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
847B    FF 76 F8                  push        word ptr -0x8[bp] 
847E    89 CB                     mov         bx,cx 
8480    E8 00 00                  call        vpu_fd_makedup_ 
8483    EB CA                     jmp         L$923 
8485                          L$924:
8485    B9 0A 00                  mov         cx,0x000a 
8488    BF 28 00                  mov         di,0x0028 
848B    8B 76 F8                  mov         si,word ptr -0x8[bp] 
848E                          L$925:
848E    49                        dec         cx 
848F    83 EF 04                  sub         di,0x0004 
8492    83 F9 FF                  cmp         cx,0xffff 
8495    74 2D                     je          L$927 
8497    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
849A    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
849D    8B 5F 68                  mov         bx,word ptr 0x68[bx] 
84A0    8E 5C 6A                  mov         ds,word ptr 0x6a[si] 
84A3    01 FB                     add         bx,di 
84A5    8B 47 02                  mov         ax,word ptr 0x2[bx] 
84A8    8B 17                     mov         dx,word ptr [bx] 
84AA    85 C0                     test        ax,ax 
84AC    75 04                     jne         L$926 
84AE    85 D2                     test        dx,dx 
84B0    74 DC                     je          L$925 
84B2                          L$926:
84B2    51                        push        cx 
84B3    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
84B6    FF 76 F6                  push        word ptr -0xa[bp] 
84B9    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
84BC    56                        push        si 
84BD    89 CB                     mov         bx,cx 
84BF    E8 00 00                  call        vpu_dd_makedup_ 
84C2    EB CA                     jmp         L$925 
84C4                          L$927:
84C4    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
84C7    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
84CA    8A 47 24                  mov         al,byte ptr 0x24[bx] 
84CD    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
84D0    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
84D3    88 47 24                  mov         byte ptr 0x24[bx],al 
84D6    E9 FA DA                  jmp         L$671 
84D9                          vpu_assign_child_:
84D9    56                        push        si 
84DA    57                        push        di 
84DB    C8 02 00 00               enter       0x0002,0x00 
84DF    89 C7                     mov         di,ax 
84E1    89 56 FE                  mov         word ptr -0x2[bp],dx 
84E4    89 DE                     mov         si,bx 
84E6    8E D9                     mov         ds,cx 
84E8    8B 84 7E 01               mov         ax,word ptr 0x17e[si] 
84EC    89 C2                     mov         dx,ax 
84EE    42                        inc         dx 
84EF    89 94 7E 01               mov         word ptr 0x17e[si],dx 
84F3    85 C0                     test        ax,ax 
84F5    75 22                     jne         L$928 
84F7    89 D0                     mov         ax,dx 
84F9    C1 E0 02                  shl         ax,0x02 
84FC    9A 00 00 00 00            call        malloc_ 
8501    8E D9                     mov         ds,cx 
8503    89 84 7A 01               mov         word ptr 0x17a[si],ax 
8507    89 94 7C 01               mov         word ptr 0x17c[si],dx 
850B    8B 84 7A 01               mov         ax,word ptr 0x17a[si] 
850F    85 D2                     test        dx,dx 
8511    75 35                     jne         L$931 
8513    85 C0                     test        ax,ax 
8515    74 1C                     je          L$929 
8517    EB 2F                     jmp         L$931 
8519                          L$928:
8519    89 D3                     mov         bx,dx 
851B    8B 84 7A 01               mov         ax,word ptr 0x17a[si] 
851F    C1 E3 02                  shl         bx,0x02 
8522    8B 94 7C 01               mov         dx,word ptr 0x17c[si] 
8526    9A 00 00 00 00            call        realloc_ 
852B    85 D2                     test        dx,dx 
852D    75 0F                     jne         L$930 
852F    85 C0                     test        ax,ax 
8531    75 0B                     jne         L$930 
8533                          L$929:
8533    8E D9                     mov         ds,cx 
8535    31 C0                     xor         ax,ax 
8537    FF 8C 7E 01               dec         word ptr 0x17e[si] 
853B    E9 92 98                  jmp         L$284 
853E                          L$930:
853E    8E D9                     mov         ds,cx 
8540    89 84 7A 01               mov         word ptr 0x17a[si],ax 
8544    89 94 7C 01               mov         word ptr 0x17c[si],dx 
8548                          L$931:
8548    8E D9                     mov         ds,cx 
854A    8B 9C 7E 01               mov         bx,word ptr 0x17e[si] 
854E    8B 84 7A 01               mov         ax,word ptr 0x17a[si] 
8552    C1 E3 02                  shl         bx,0x02 
8555    8E 9C 7C 01               mov         ds,word ptr 0x17c[si] 
8559    01 C3                     add         bx,ax 
855B    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
855E    89 7F FC                  mov         word ptr -0x4[bx],di 
8561    89 47 FE                  mov         word ptr -0x2[bx],ax 
8564    8E D8                     mov         ds,ax 
8566    89 B5 74 01               mov         word ptr 0x174[di],si 
856A    8B 46 08                  mov         ax,word ptr 0x8[bp] 
856D    89 8D 76 01               mov         word ptr 0x176[di],cx 
8571    89 85 78 01               mov         word ptr 0x178[di],ax 
8575    8B 46 0A                  mov         ax,word ptr 0xa[bp] 
8578    89 85 70 01               mov         word ptr 0x170[di],ax 
857C    8B 46 0C                  mov         ax,word ptr 0xc[bp] 
857F    89 85 72 01               mov         word ptr 0x172[di],ax 
8583    B8 01 00                  mov         ax,0x0001 
8586    E9 47 98                  jmp         L$284 
8589                          clone_vpu_:
8589    53                        push        bx 
858A    51                        push        cx 
858B    56                        push        si 
858C    57                        push        di 
858D    55                        push        bp 
858E    89 E5                     mov         bp,sp 
8590    50                        push        ax 
8591    89 D6                     mov         si,dx 
8593    E8 00 00                  call        spawn_new_vpu_ 
8596    89 C3                     mov         bx,ax 
8598    85 D2                     test        dx,dx 
859A    75 10                     jne         L$932 
859C    85 C0                     test        ax,ax 
859E    75 0C                     jne         L$932 
85A0    9A 00 00 00 00            call        nomemory_ 
85A5    31 C0                     xor         ax,ax 
85A7    31 D2                     xor         dx,dx 
85A9    E9 87 21                  jmp         L$1143 
85AC                          L$932:
85AC    B9 C8 00                  mov         cx,0x00c8 
85AF    8E DA                     mov         ds,dx 
85B1    89 DF                     mov         di,bx 
85B3    8B 87 88 01               mov         ax,word ptr 0x188[bx] 
85B7    8E C2                     mov         es,dx 
85B9    8E DE                     mov         ds,si 
85BB    8B 76 FE                  mov         si,word ptr -0x2[bp] 
85BE    F3 A5                     rep movsw   
85C0    8E DA                     mov         ds,dx 
85C2    66 C7 87 7A 01 00 00 00 00
                                  mov         dword ptr 0x17a[bx],0x00000000 
85CB    C7 87 7E 01 00 00         mov         word ptr 0x17e[bx],0x0000 
85D1    66 C7 87 74 01 00 00 00 00
                                  mov         dword ptr 0x174[bx],0x00000000 
85DA    89 87 88 01               mov         word ptr 0x188[bx],ax 
85DE    89 5F 2A                  mov         word ptr 0x2a[bx],bx 
85E1    89 57 2C                  mov         word ptr 0x2c[bx],dx 
85E4    80 A7 8A 01 FE            and         byte ptr 0x18a[bx],0xfe 
85E9    89 D8                     mov         ax,bx 
85EB    E9 45 21                  jmp         L$1143 
85EE                          vpu_syscall_fork_:
85EE    53                        push        bx 
85EF    51                        push        cx 
85F0    56                        push        si 
85F1    57                        push        di 
85F2    C8 08 00 00               enter       0x0008,0x00 
85F6    89 C6                     mov         si,ax 
85F8    89 56 F8                  mov         word ptr -0x8[bp],dx 
85FB    E8 00 00                  call        clone_vpu_ 
85FE    89 C7                     mov         di,ax 
8600    89 56 FE                  mov         word ptr -0x2[bp],dx 
8603    89 46 FA                  mov         word ptr -0x6[bp],ax 
8606    89 56 FC                  mov         word ptr -0x4[bp],dx 
8609    85 D2                     test        dx,dx 
860B    75 10                     jne         L$934 
860D    85 C0                     test        ax,ax 
860F    75 0C                     jne         L$934 
8611                          L$933:
8611    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
8614    31 C0                     xor         ax,ax 
8616    C7 04 FF FF               mov         word ptr [si],0xffff 
861A    E9 E4 13                  jmp         L$1046 
861D                          L$934:
861D    8B 4E F8                  mov         cx,word ptr -0x8[bp] 
8620    8E DA                     mov         ds,dx 
8622    89 F3                     mov         bx,si 
8624    80 A5 8A 01 FD            and         byte ptr 0x18a[di],0xfd 
8629    E8 00 00                  call        copy_vpu_ 
862C    84 C0                     test        al,al 
862E    74 1C                     je          L$935 
8630    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
8633    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
8636    FF 74 08                  push        word ptr 0x8[si] 
8639    89 F3                     mov         bx,si 
863B    FF 74 14                  push        word ptr 0x14[si] 
863E    89 F8                     mov         ax,di 
8640    FF 74 06                  push        word ptr 0x6[si] 
8643    8C D9                     mov         cx,ds 
8645    E8 00 00                  call        vpu_assign_child_ 
8648    85 C0                     test        ax,ax 
864A    75 10                     jne         L$936 
864C                          L$935:
864C    9A 00 00 00 00            call        nomemory_ 
8651    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
8654    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
8657    E8 00 00                  call        delete_vpu_ 
865A    EB B5                     jmp         L$933 
865C                          L$936:
865C    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
865F    8B 85 88 01               mov         ax,word ptr 0x188[di] 
8663    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
8666    89 04                     mov         word ptr [si],ax 
8668    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
866B    31 C0                     xor         ax,ax 
866D    C7 05 00 00               mov         word ptr [di],0x0000 
8671    E9 8D 13                  jmp         L$1046 
8674                          vpu_syscall_clone_:
8674    53                        push        bx 
8675    51                        push        cx 
8676    56                        push        si 
8677    57                        push        di 
8678    C8 08 00 00               enter       0x0008,0x00 
867C    89 C7                     mov         di,ax 
867E    89 56 FC                  mov         word ptr -0x4[bp],dx 
8681    E8 00 00                  call        clone_vpu_ 
8684    89 C6                     mov         si,ax 
8686    89 56 FE                  mov         word ptr -0x2[bp],dx 
8689    89 46 F8                  mov         word ptr -0x8[bp],ax 
868C    89 56 FA                  mov         word ptr -0x6[bp],dx 
868F    85 D2                     test        dx,dx 
8691    75 10                     jne         L$938 
8693    85 C0                     test        ax,ax 
8695    75 0C                     jne         L$938 
8697                          L$937:
8697    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
869A    31 C0                     xor         ax,ax 
869C    C7 05 FF FF               mov         word ptr [di],0xffff 
86A0    E9 5E 13                  jmp         L$1046 
86A3                          L$938:
86A3    8E DA                     mov         ds,dx 
86A5    BA 02 00                  mov         dx,0x0002 
86A8    8B 44 3A                  mov         ax,word ptr 0x3a[si] 
86AB    80 8C 8A 01 02            or          byte ptr 0x18a[si],0x02 
86B0    9A 00 00 00 00            call        calloc_ 
86B5    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
86B8    89 44 32                  mov         word ptr 0x32[si],ax 
86BB    89 54 34                  mov         word ptr 0x34[si],dx 
86BE    BA 02 00                  mov         dx,0x0002 
86C1    8B 44 3A                  mov         ax,word ptr 0x3a[si] 
86C4    9A 00 00 00 00            call        calloc_ 
86C9    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
86CC    89 44 36                  mov         word ptr 0x36[si],ax 
86CF    89 54 38                  mov         word ptr 0x38[si],dx 
86D2    8B 44 34                  mov         ax,word ptr 0x34[si] 
86D5    8B 54 32                  mov         dx,word ptr 0x32[si] 
86D8    85 C0                     test        ax,ax 
86DA    75 04                     jne         L$939 
86DC    85 D2                     test        dx,dx 
86DE    74 2A                     je          L$941 
86E0                          L$939:
86E0    8B 54 38                  mov         dx,word ptr 0x38[si] 
86E3    8B 44 36                  mov         ax,word ptr 0x36[si] 
86E6    85 D2                     test        dx,dx 
86E8    75 04                     jne         L$940 
86EA    85 C0                     test        ax,ax 
86EC    74 1C                     je          L$941 
86EE                          L$940:
86EE    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
86F1    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
86F4    FF 75 08                  push        word ptr 0x8[di] 
86F7    89 FB                     mov         bx,di 
86F9    FF 75 14                  push        word ptr 0x14[di] 
86FC    89 F0                     mov         ax,si 
86FE    FF 75 06                  push        word ptr 0x6[di] 
8701    8C D9                     mov         cx,ds 
8703    E8 00 00                  call        vpu_assign_child_ 
8706    85 C0                     test        ax,ax 
8708    75 11                     jne         L$942 
870A                          L$941:
870A    9A 00 00 00 00            call        nomemory_ 
870F    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
8712    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
8715    E8 00 00                  call        delete_vpu_ 
8718    E9 7C FF                  jmp         L$937 
871B                          L$942:
871B    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
871E    8B 4D 2E                  mov         cx,word ptr 0x2e[di] 
8721    8B 55 30                  mov         dx,word ptr 0x30[di] 
8724    8B 45 34                  mov         ax,word ptr 0x34[di] 
8727    8B 5D 32                  mov         bx,word ptr 0x32[di] 
872A    39 C2                     cmp         dx,ax 
872C    75 15                     jne         L$943 
872E    39 D9                     cmp         cx,bx 
8730    75 11                     jne         L$943 
8732    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
8735    8B 54 32                  mov         dx,word ptr 0x32[si] 
8738    8B 44 34                  mov         ax,word ptr 0x34[si] 
873B    89 54 2E                  mov         word ptr 0x2e[si],dx 
873E    89 44 30                  mov         word ptr 0x30[si],ax 
8741    EB 0F                     jmp         L$944 
8743                          L$943:
8743    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
8746    8B 44 36                  mov         ax,word ptr 0x36[si] 
8749    8B 54 38                  mov         dx,word ptr 0x38[si] 
874C    89 44 2E                  mov         word ptr 0x2e[si],ax 
874F    89 54 30                  mov         word ptr 0x30[si],dx 
8752                          L$944:
8752    C5 5E F8                  lds         bx,dword ptr -0x8[bp] 
8755    8B 47 3A                  mov         ax,word ptr 0x3a[bx] 
8758    48                        dec         ax 
8759    89 47 16                  mov         word ptr 0x16[bx],ax 
875C    89 47 1A                  mov         word ptr 0x1a[bx],ax 
875F    89 47 18                  mov         word ptr 0x18[bx],ax 
8762    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
8765    8B 45 02                  mov         ax,word ptr 0x2[di] 
8768    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
876B    89 47 10                  mov         word ptr 0x10[bx],ax 
876E    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
8771    8B 45 04                  mov         ax,word ptr 0x4[di] 
8774    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
8777    89 47 12                  mov         word ptr 0x12[bx],ax 
877A    8B 87 88 01               mov         ax,word ptr 0x188[bx] 
877E    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
8781    89 05                     mov         word ptr [di],ax 
8783    8B 45 0A                  mov         ax,word ptr 0xa[di] 
8786    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
8789    89 07                     mov         word ptr [bx],ax 
878B    E9 F7 CD                  jmp         L$617 
878E                          remove_fd_filepos_ptrs_:
878E    53                        push        bx 
878F    56                        push        si 
8790    57                        push        di 
8791    89 C3                     mov         bx,ax 
8793    8E DA                     mov         ds,dx 
8795    BA 3C 00                  mov         dx,0x003c 
8798    B8 F0 00                  mov         ax,0x00f0 
879B                          L$945:
879B    4A                        dec         dx 
879C    2D 04 00                  sub         ax,0x0004 
879F    83 FA FF                  cmp         dx,0xffff 
87A2    74 12                     je          L$946 
87A4    C4 7F 64                  les         di,dword ptr 0x64[bx] 
87A7    01 C7                     add         di,ax 
87A9    26 C4 35                  les         si,dword ptr es:[di] 
87AC    66 26 C7 04 00 00 00 00
                                  mov         dword ptr es:[si],0x00000000 
87B4    EB E5                     jmp         L$945 
87B6                          L$946:
87B6    5F                        pop         di 
87B7    5E                        pop         si 
87B8    5B                        pop         bx 
87B9    C3                        ret         
87BA                          vpu_kill_clones_:
87BA    53                        push        bx 
87BB    51                        push        cx 
87BC    56                        push        si 
87BD    57                        push        di 
87BE    C8 04 00 00               enter       0x0004,0x00 
87C2    89 C3                     mov         bx,ax 
87C4    89 56 FC                  mov         word ptr -0x4[bp],dx 
87C7    8E DA                     mov         ds,dx 
87C9    8B 8F 7E 01               mov         cx,word ptr 0x17e[bx] 
87CD    89 CE                     mov         si,cx 
87CF    C1 E6 02                  shl         si,0x02 
87D2    89 76 FE                  mov         word ptr -0x2[bp],si 
87D5                          L$947:
87D5    49                        dec         cx 
87D6    83 6E FE 04               sub         word ptr -0x2[bp],0x0004 
87DA    83 F9 FF                  cmp         cx,0xffff 
87DD    0F 84 52 1F               je          L$1143 
87E1    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
87E4    8B B7 7A 01               mov         si,word ptr 0x17a[bx] 
87E8    03 76 FE                  add         si,word ptr -0x2[bp] 
87EB    8E 9F 7C 01               mov         ds,word ptr 0x17c[bx] 
87EF    C5 3C                     lds         di,dword ptr [si] 
87F1    F6 85 8A 01 02            test        byte ptr 0x18a[di],0x02 
87F6    74 DD                     je          L$947 
87F8    89 F8                     mov         ax,di 
87FA    8C DA                     mov         dx,ds 
87FC    E8 00 00                  call        free_vpu_resources_ 
87FF    EB D4                     jmp         L$947 
8801                          vpu_syscall_exec_:
8801    53                        push        bx 
8802    51                        push        cx 
8803    56                        push        si 
8804    57                        push        di 
8805    C8 AC 00 00               enter       0x00ac,0x00 
8809    50                        push        ax 
880A    52                        push        dx 
880B    81 ED 80 00               sub         bp,0x0080 
880F    8E DA                     mov         ds,dx 
8811    89 C3                     mov         bx,ax 
8813    8B 47 14                  mov         ax,word ptr 0x14[bx] 
8816    8B 76 D2                  mov         si,word ptr -0x2e[bp] 
8819    C1 E0 02                  shl         ax,0x02 
881C    8B 5F 48                  mov         bx,word ptr 0x48[bx] 
881F    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
8822    01 C3                     add         bx,ax 
8824    8B 07                     mov         ax,word ptr [bx] 
8826    8B 57 02                  mov         dx,word ptr 0x2[bx] 
8829    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
882C    89 56 7C                  mov         word ptr 0x7c[bp],dx 
882F    89 F3                     mov         bx,si 
8831    89 56 7E                  mov         word ptr 0x7e[bp],dx 
8834    8B 57 02                  mov         dx,word ptr 0x2[bx] 
8837    01 C2                     add         dx,ax 
8839    89 56 7A                  mov         word ptr 0x7a[bp],dx 
883C    8B 56 7C                  mov         dx,word ptr 0x7c[bp] 
883F    8B 7E 7A                  mov         di,word ptr 0x7a[bp] 
8842    89 56 76                  mov         word ptr 0x76[bp],dx 
8845    8B 57 04                  mov         dx,word ptr 0x4[bx] 
8848    8E 46 7C                  mov         es,word ptr 0x7c[bp] 
884B    01 C2                     add         dx,ax 
884D    B9 FF FF                  mov         cx,0xffff 
8850    33 C0                     xor         ax,ax 
8852    F2 AE                     repne scasb 
8854    F7 D1                     not         cx 
8856    49                        dec         cx 
8857    89 56 78                  mov         word ptr 0x78[bp],dx 
885A    89 D7                     mov         di,dx 
885C    89 CE                     mov         si,cx 
885E    B9 FF FF                  mov         cx,0xffff 
8861    33 C0                     xor         ax,ax 
8863    F2 AE                     repne scasb 
8865    F7 D1                     not         cx 
8867    49                        dec         cx 
8868    8B 46 D2                  mov         ax,word ptr -0x2e[bp] 
886B    89 CF                     mov         di,cx 
886D    8C DA                     mov         dx,ds 
886F    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
8872    31 C9                     xor         cx,cx 
8874    01 F3                     add         bx,si 
8876    11 C9                     adc         cx,cx 
8878    E8 00 00                  call        memory_allowed_ 
887B    84 C0                     test        al,al 
887D    0F 84 B2 CD               je          L$619 
8881    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
8884    8B 5E D2                  mov         bx,word ptr -0x2e[bp] 
8887    8B 46 D2                  mov         ax,word ptr -0x2e[bp] 
888A    31 D2                     xor         dx,dx 
888C    8B 5F 04                  mov         bx,word ptr 0x4[bx] 
888F    31 C9                     xor         cx,cx 
8891    01 FB                     add         bx,di 
8893    11 D1                     adc         cx,dx 
8895    8C DA                     mov         dx,ds 
8897    E8 00 00                  call        memory_allowed_ 
889A    84 C0                     test        al,al 
889C    0F 84 93 CD               je          L$619 
88A0    85 F6                     test        si,si 
88A2    75 0F                     jne         L$949 
88A4                          L$948:
88A4    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
88A7    8B 5E D2                  mov         bx,word ptr -0x2e[bp] 
88AA    31 C0                     xor         ax,ax 
88AC    C7 07 FF FF               mov         word ptr [bx],0xffff 
88B0    E9 82 CD                  jmp         L$620 
88B3                          L$949:
88B3    B1 5C                     mov         cl,0x5c 
88B5    C5 76 7A                  lds         si,dword ptr 0x7a[bp] 
88B8    8C DA                     mov         dx,ds 
88BA                          L$950:
88BA    8A 04                     mov         al,byte ptr [si] 
88BC    3A C1                     cmp         al,cl 
88BE    74 09                     je          L$951 
88C0    46                        inc         si 
88C1    3C 00                     cmp         al,0x00 
88C3    75 F5                     jne         L$950 
88C5    2B F6                     sub         si,si 
88C7    2B D2                     sub         dx,dx 
88C9                          L$951:
88C9    85 D2                     test        dx,dx 
88CB    75 43                     jne         L$953 
88CD    85 F6                     test        si,si 
88CF    75 3F                     jne         L$953 
88D1    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
88D4    8B 5E D2                  mov         bx,word ptr -0x2e[bp] 
88D7    0F B6 87 CC 00            movzx       ax,byte ptr 0xcc[bx] 
88DC    8B 56 D0                  mov         dx,word ptr -0x30[bp] 
88DF    9A 00 00 00 00            call        chdrive_ 
88E4    89 D8                     mov         ax,bx 
88E6    9A 00 00 00 00            call        vpu_cwd_ 
88EB    BB 01 00                  mov         bx,0x0001 
88EE    8B 46 7A                  mov         ax,word ptr 0x7a[bp] 
88F1    8B 56 7C                  mov         dx,word ptr 0x7c[bp] 
88F4    9A 00 00 00 00            call        find_executable_ 
88F9    89 C3                     mov         bx,ax 
88FB    31 C0                     xor         ax,ax 
88FD    9A 00 00 00 00            call        chdrive_ 
8902    85 D2                     test        dx,dx 
8904    75 04                     jne         L$952 
8906    85 DB                     test        bx,bx 
8908    74 06                     je          L$953 
890A                          L$952:
890A    89 5E 7A                  mov         word ptr 0x7a[bp],bx 
890D    89 56 7E                  mov         word ptr 0x7e[bp],dx 
8910                          L$953:
8910    FF 76 7E                  push        word ptr 0x7e[bp] 
8913    8D 5E D4                  lea         bx,-0x2c[bp] 
8916    8B 46 D2                  mov         ax,word ptr -0x2e[bp] 
8919    8B 56 D0                  mov         dx,word ptr -0x30[bp] 
891C    FF 76 7A                  push        word ptr 0x7a[bp] 
891F    8C D1                     mov         cx,ss 
8921    0E                        push        cs 
8922    E8 00 00                  call        append_path_ 
8925    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
8928    8B 5E D2                  mov         bx,word ptr -0x2e[bp] 
892B    F6 47 24 04               test        byte ptr 0x24[bx],0x04 
892F    75 1B                     jne         L$954 
8931    8B 56 7E                  mov         dx,word ptr 0x7e[bp] 
8934    8D 87 CC 00               lea         ax,0xcc[bx] 
8938    1E                        push        ds 
8939    8C D9                     mov         cx,ds 
893B    50                        push        ax 
893C    81 C3 1D 01               add         bx,0x011d 
8940    8B 46 7A                  mov         ax,word ptr 0x7a[bp] 
8943    E8 00 00                  call        is_subpath_ 
8946    85 C0                     test        ax,ax 
8948    0F 84 58 FF               je          L$948 
894C                          L$954:
894C    BB 8D 07                  mov         bx,offset DGROUP:L$1531 
894F    8D 46 D4                  lea         ax,-0x2c[bp] 
8952    8C D1                     mov         cx,ss 
8954    8C D2                     mov         dx,ss 
8956    9A 00 00 00 00            call        fopen_ 
895B    85 D2                     test        dx,dx 
895D    75 06                     jne         L$955 
895F    85 C0                     test        ax,ax 
8961    0F 84 3F FF               je          L$948 
8965                          L$955:
8965    9A 00 00 00 00            call        fclose_ 
896A                          L$956:
896A    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
896D    8B 5E D2                  mov         bx,word ptr -0x2e[bp] 
8970    F6 87 8A 01 02            test        byte ptr 0x18a[bx],0x02 
8975    74 2D                     je          L$958 
8977    8D B7 CC 00               lea         si,0xcc[bx] 
897B    89 DF                     mov         di,bx 
897D    8B BD 74 01               mov         di,word ptr 0x174[di] 
8981    81 C7 CC 00               add         di,0x00cc 
8985    8E 87 76 01               mov         es,word ptr 0x176[bx] 
8989    57                        push        di 
898A                          L$957:
898A    AC                        lodsb       
898B    AA                        stosb       
898C    3C 00                     cmp         al,0x00 
898E    75 FA                     jne         L$957 
8990    5F                        pop         di 
8991    8B 76 D2                  mov         si,word ptr -0x2e[bp] 
8994    8B 9F 74 01               mov         bx,word ptr 0x174[bx] 
8998    8B 84 76 01               mov         ax,word ptr 0x176[si] 
899C    89 5E D2                  mov         word ptr -0x2e[bp],bx 
899F    89 46 D0                  mov         word ptr -0x30[bp],ax 
89A2    EB C6                     jmp         L$956 
89A4                          L$958:
89A4    89 D8                     mov         ax,bx 
89A6    8C DA                     mov         dx,ds 
89A8    E8 00 00                  call        vpu_kill_clones_ 
89AB    8B 56 D0                  mov         dx,word ptr -0x30[bp] 
89AE    89 D8                     mov         ax,bx 
89B0    8B 4E 76                  mov         cx,word ptr 0x76[bp] 
89B3    E8 00 00                  call        free_vpu_args_ 
89B6    FF 76 7E                  push        word ptr 0x7e[bp] 
89B9    8B 56 D0                  mov         dx,word ptr -0x30[bp] 
89BC    8D 87 82 01               lea         ax,0x182[bx] 
89C0    FF 76 7A                  push        word ptr 0x7a[bp] 
89C3    8B 5E 78                  mov         bx,word ptr 0x78[bp] 
89C6    9A 00 00 00 00            call        split_args_ 
89CB    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
89CE    8B 5E D2                  mov         bx,word ptr -0x2e[bp] 
89D1    89 87 84 01               mov         word ptr 0x184[bx],ax 
89D5    89 97 86 01               mov         word ptr 0x186[bx],dx 
89D9                          L$959:
89D9    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
89DC    8B 5E D2                  mov         bx,word ptr -0x2e[bp] 
89DF    83 7F 52 00               cmp         word ptr 0x52[bx],0x0000 
89E3    74 0C                     je          L$960 
89E5    8B 46 D2                  mov         ax,word ptr -0x2e[bp] 
89E8    8C DA                     mov         dx,ds 
89EA    31 DB                     xor         bx,bx 
89EC    E8 00 00                  call        vpu_free_dynamic_segment_ 
89EF    EB E8                     jmp         L$959 
89F1                          L$960:
89F1    8B 76 D2                  mov         si,word ptr -0x2e[bp] 
89F4                          L$961:
89F4    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
89F7    8B 5E D2                  mov         bx,word ptr -0x2e[bp] 
89FA    83 7F 4E 00               cmp         word ptr 0x4e[bx],0x0000 
89FE    74 1D                     je          L$962 
8A00    FF 4F 4E                  dec         word ptr 0x4e[bx] 
8A03    8B 5F 4E                  mov         bx,word ptr 0x4e[bx] 
8A06    8B 44 48                  mov         ax,word ptr 0x48[si] 
8A09    C1 E3 02                  shl         bx,0x02 
8A0C    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
8A0F    01 C3                     add         bx,ax 
8A11    8B 07                     mov         ax,word ptr [bx] 
8A13    8B 57 02                  mov         dx,word ptr 0x2[bx] 
8A16    9A 00 00 00 00            call        free_ 
8A1B    EB D7                     jmp         L$961 
8A1D                          L$962:
8A1D    8B 47 48                  mov         ax,word ptr 0x48[bx] 
8A20    8B 57 4A                  mov         dx,word ptr 0x4a[bx] 
8A23    9A 00 00 00 00            call        free_ 
8A28    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
8A2B    C7 47 48 00 00            mov         word ptr 0x48[bx],0x0000 
8A30    8B 47 58                  mov         ax,word ptr 0x58[bx] 
8A33    8B 57 5A                  mov         dx,word ptr 0x5a[bx] 
8A36    C7 47 4A 00 00            mov         word ptr 0x4a[bx],0x0000 
8A3B    9A 00 00 00 00            call        free_ 
8A40    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
8A43    C7 47 58 00 00            mov         word ptr 0x58[bx],0x0000 
8A48    8B 76 D2                  mov         si,word ptr -0x2e[bp] 
8A4B    C7 47 5A 00 00            mov         word ptr 0x5a[bx],0x0000 
8A50                          L$963:
8A50    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
8A53    8B 5E D2                  mov         bx,word ptr -0x2e[bp] 
8A56    83 7F 46 00               cmp         word ptr 0x46[bx],0x0000 
8A5A    74 1D                     je          L$964 
8A5C    FF 4F 46                  dec         word ptr 0x46[bx] 
8A5F    8B 47 46                  mov         ax,word ptr 0x46[bx] 
8A62    C1 E0 02                  shl         ax,0x02 
8A65    8B 5F 40                  mov         bx,word ptr 0x40[bx] 
8A68    8E 5C 42                  mov         ds,word ptr 0x42[si] 
8A6B    01 C3                     add         bx,ax 
8A6D    8B 07                     mov         ax,word ptr [bx] 
8A6F    8B 57 02                  mov         dx,word ptr 0x2[bx] 
8A72    9A 00 00 00 00            call        free_ 
8A77    EB D7                     jmp         L$963 
8A79                          L$964:
8A79    8B 47 40                  mov         ax,word ptr 0x40[bx] 
8A7C    8B 57 42                  mov         dx,word ptr 0x42[bx] 
8A7F    9A 00 00 00 00            call        free_ 
8A84    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
8A87    C7 47 40 00 00            mov         word ptr 0x40[bx],0x0000 
8A8C    8B 47 5E                  mov         ax,word ptr 0x5e[bx] 
8A8F    8B 57 60                  mov         dx,word ptr 0x60[bx] 
8A92    C7 47 42 00 00            mov         word ptr 0x42[bx],0x0000 
8A97    9A 00 00 00 00            call        free_ 
8A9C    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
8A9F    C7 47 5E 00 00            mov         word ptr 0x5e[bx],0x0000 
8AA4    8B 47 32                  mov         ax,word ptr 0x32[bx] 
8AA7    8B 57 34                  mov         dx,word ptr 0x34[bx] 
8AAA    C7 47 60 00 00            mov         word ptr 0x60[bx],0x0000 
8AAF    9A 00 00 00 00            call        free_ 
8AB4    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
8AB7    8B 47 36                  mov         ax,word ptr 0x36[bx] 
8ABA    8B 57 38                  mov         dx,word ptr 0x38[bx] 
8ABD    9A 00 00 00 00            call        free_ 
8AC2    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
8AC5    66 C7 47 36 00 00 00 00
                                  mov         dword ptr 0x36[bx],0x00000000 
8ACD    8B 57 36                  mov         dx,word ptr 0x36[bx] 
8AD0    8B 47 38                  mov         ax,word ptr 0x38[bx] 
8AD3    89 57 32                  mov         word ptr 0x32[bx],dx 
8AD6    8C D9                     mov         cx,ds 
8AD8    89 47 34                  mov         word ptr 0x34[bx],ax 
8ADB    8D 46 D4                  lea         ax,-0x2c[bp] 
8ADE    8C D2                     mov         dx,ss 
8AE0    E8 00 00                  call        load_program_ 
8AE3    85 C0                     test        ax,ax 
8AE5    74 15                     je          L$966 
8AE7    3D 01 00                  cmp         ax,0x0001 
8AEA    75 05                     jne         L$965 
8AEC    9A 00 00 00 00            call        nomemory_ 
8AF1                          L$965:
8AF1    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
8AF4    8B 5E D2                  mov         bx,word ptr -0x2e[bp] 
8AF7    80 8F 8A 01 08            or          byte ptr 0x18a[bx],0x08 
8AFC                          L$966:
8AFC    8B 46 D2                  mov         ax,word ptr -0x2e[bp] 
8AFF    8B 56 D0                  mov         dx,word ptr -0x30[bp] 
8B02    8B 76 D2                  mov         si,word ptr -0x2e[bp] 
8B05    8B 7E D2                  mov         di,word ptr -0x2e[bp] 
8B08    E8 00 00                  call        remove_fd_filepos_ptrs_ 
8B0B    8E 5E D0                  mov         ds,word ptr -0x30[bp] 
8B0E    81 C6 CC 00               add         si,0x00cc 
8B12    81 C7 1D 01               add         di,0x011d 
8B16    1E                        push        ds 
8B17    07                        pop         es 
8B18    57                        push        di 
8B19                          L$967:
8B19    AC                        lodsb       
8B1A    AA                        stosb       
8B1B    3C 00                     cmp         al,0x00 
8B1D    75 FA                     jne         L$967 
8B1F    5F                        pop         di 
8B20    8C DA                     mov         dx,ds 
8B22    8B 46 D2                  mov         ax,word ptr -0x2e[bp] 
8B25    E8 00 00                  call        reset_vpu_ 
8B28    E9 08 CB                  jmp         L$619 
8B2B                          vpu_syscall_gettime_:
8B2B    53                        push        bx 
8B2C    51                        push        cx 
8B2D    56                        push        si 
8B2E    C8 08 00 00               enter       0x0008,0x00 
8B32    89 C3                     mov         bx,ax 
8B34    89 D1                     mov         cx,dx 
8B36    8D 76 F8                  lea         si,-0x8[bp] 
8B39    36 A1 00 00               mov         ax,word ptr ss:_timezone 
8B3D    36 8B 16 02 00            mov         dx,word ptr ss:_timezone+0x2 
8B42    0E                        push        cs 
8B43    E8 00 00                  call        unixtime_ 
8B46    8E D9                     mov         ds,cx 
8B48    66 C7 07 00 00 00 00      mov         dword ptr [bx],0x00000000 
8B4F    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
8B52    89 47 04                  mov         word ptr 0x4[bx],ax 
8B55    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
8B58    89 47 06                  mov         word ptr 0x6[bx],ax 
8B5B    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
8B5E    89 47 08                  mov         word ptr 0x8[bx],ax 
8B61    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
8B64    89 47 0A                  mov         word ptr 0xa[bx],ax 
8B67    31 C0                     xor         ax,ax 
8B69    C9                        leave       
8B6A    E9 96 0E                  jmp         L$1048 
8B6D                          vpu_syscall_sound_:
8B6D    53                        push        bx 
8B6E    89 C3                     mov         bx,ax 
8B70    8E DA                     mov         ds,dx 
8B72    8B 47 02                  mov         ax,word ptr 0x2[bx] 
8B75    9A 00 00 00 00            call        sound_ 
8B7A    E9 DC F2                  jmp         L$903 
8B7D                          vpu_syscall_nosound_:
8B7D    9A 00 00 00 00            call        nosound_ 
8B82    31 C0                     xor         ax,ax 
8B84    CB                        retf        
8B85                          vpu_syscall_waitscrtrace_:
8B85    53                        push        bx 
8B86    51                        push        cx 
8B87    56                        push        si 
8B88    57                        push        di 
8B89    9A 00 00 00 00            call        vpu_has_active_window_ 
8B8E    84 C0                     test        al,al 
8B90    74 15                     je          L$970 
8B92    36 83 3E 00 00 FF         cmp         word ptr ss:_videodriver,0xffff 
8B98    75 0D                     jne         L$970 
8B9A    BA DA 03                  mov         dx,0x03da 
8B9D                          L$968:
8B9D    EC                        in          al,dx 
8B9E    A8 08                     test        al,0x08 
8BA0    75 FB                     jne         L$968 
8BA2                          L$969:
8BA2    EC                        in          al,dx 
8BA3    A8 08                     test        al,0x08 
8BA5    74 FB                     je          L$969 
8BA7                          L$970:
8BA7    B8 03 00                  mov         ax,0x0003 
8BAA    E9 55 0E                  jmp         L$1047 
8BAD                          vpu_syscall_sleep_:
8BAD    53                        push        bx 
8BAE    89 C3                     mov         bx,ax 
8BB0    8E DA                     mov         ds,dx 
8BB2    8B 47 08                  mov         ax,word ptr 0x8[bx] 
8BB5    80 8F 8A 01 20            or          byte ptr 0x18a[bx],0x20 
8BBA    09 87 8C 01               or          word ptr 0x18c[bx],ax 
8BBE    8B 47 06                  mov         ax,word ptr 0x6[bx] 
8BC1    09 87 8E 01               or          word ptr 0x18e[bx],ax 
8BC5    B8 03 00                  mov         ax,0x0003 
8BC8    5B                        pop         bx 
8BC9    CB                        retf        
8BCA                          pid_to_vpu_:
8BCA    53                        push        bx 
8BCB    51                        push        cx 
8BCC    56                        push        si 
8BCD    89 C1                     mov         cx,ax 
8BCF    36 A1 00 00               mov         ax,word ptr ss:_vpu_count 
8BD3    89 C2                     mov         dx,ax 
8BD5    C1 E2 02                  shl         dx,0x02 
8BD8                          L$971:
8BD8    48                        dec         ax 
8BD9    83 EA 04                  sub         dx,0x0004 
8BDC    3D FF FF                  cmp         ax,0xffff 
8BDF    74 13                     je          L$972 
8BE1    36 C5 1E 00 00            lds         bx,dword ptr ss:_vpus 
8BE6    01 D3                     add         bx,dx 
8BE8    C5 37                     lds         si,dword ptr [bx] 
8BEA    3B 8C 88 01               cmp         cx,word ptr 0x188[si] 
8BEE    75 E8                     jne         L$971 
8BF0    8C DA                     mov         dx,ds 
8BF2    EB 04                     jmp         L$973 
8BF4                          L$972:
8BF4    31 F6                     xor         si,si 
8BF6    31 D2                     xor         dx,dx 
8BF8                          L$973:
8BF8    89 F0                     mov         ax,si 
	     8BFB		; The label referred to here is an undefined location
8BFA    E9 51 7A                  jmp         0x0001064e 
8BFD                          vpu_syscall_sendsignal_:
8BFD    53                        push        bx 
8BFE    51                        push        cx 
8BFF    56                        push        si 
8C00    89 C6                     mov         si,ax 
8C02    89 D1                     mov         cx,dx 
8C04    8E DA                     mov         ds,dx 
8C06    F6 44 24 08               test        byte ptr 0x24[si],0x08 
8C0A    75 0B                     jne         L$975 
8C0C                          L$974:
8C0C    8E D9                     mov         ds,cx 
8C0E    31 C0                     xor         ax,ax 
8C10    C7 04 FF FF               mov         word ptr [si],0xffff 
8C14    E9 EC 0D                  jmp         L$1048 
8C17                          L$975:
8C17    8B 44 02                  mov         ax,word ptr 0x2[si] 
8C1A    85 C0                     test        ax,ax 
8C1C    75 0B                     jne         L$976 
8C1E    89 F0                     mov         ax,si 
8C20    8B 5C 04                  mov         bx,word ptr 0x4[si] 
8C23    0E                        push        cs 
8C24    E8 00 00                  call        send_vpu_signal_ 
8C27    EB 18                     jmp         L$978 
8C29                          L$976:
8C29    E8 00 00                  call        pid_to_vpu_ 
8C2C    85 D2                     test        dx,dx 
8C2E    75 04                     jne         L$977 
8C30    85 C0                     test        ax,ax 
8C32    74 D8                     je          L$974 
8C34                          L$977:
8C34    8E D9                     mov         ds,cx 
8C36    8B 5C 04                  mov         bx,word ptr 0x4[si] 
8C39    0E                        push        cs 
8C3A    E8 00 00                  call        send_vpu_signal_ 
8C3D    85 C0                     test        ax,ax 
8C3F    75 CB                     jne         L$974 
8C41                          L$978:
8C41    8E D9                     mov         ds,cx 
8C43    31 C0                     xor         ax,ax 
8C45    C7 04 00 00               mov         word ptr [si],0x0000 
8C49    E9 B7 0D                  jmp         L$1048 
8C4C                          vpu_syscall_procinfo_:
8C4C    53                        push        bx 
8C4D    51                        push        cx 
8C4E    56                        push        si 
8C4F    57                        push        di 
8C50    C8 0E 00 00               enter       0x000e,0x00 
8C54    89 C6                     mov         si,ax 
8C56    89 56 FE                  mov         word ptr -0x2[bp],dx 
8C59    36 A1 00 00               mov         ax,word ptr ss:_window_count 
8C5D    8E DA                     mov         ds,dx 
8C5F    8B 54 02                  mov         dx,word ptr 0x2[si] 
8C62    36 3B 16 00 00            cmp         dx,word ptr ss:_vpu_count 
8C67    72 07                     jb          L$979 
8C69    C7 04 00 00               mov         word ptr [si],0x0000 
8C6D    E9 15 C9                  jmp         L$617 
8C70                          L$979:
8C70    36 8B 1E 00 00            mov         bx,word ptr ss:_vpus 
8C75    C1 E2 02                  shl         dx,0x02 
8C78    36 8E 1E 02 00            mov         ds,word ptr ss:_vpus+0x2 
8C7D    01 D3                     add         bx,dx 
8C7F    C5 3F                     lds         di,dword ptr [bx] 
8C81    8B 95 88 01               mov         dx,word ptr 0x188[di] 
8C85    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
8C88    89 14                     mov         word ptr [si],dx 
8C8A    8B 54 02                  mov         dx,word ptr 0x2[si] 
8C8D    36 8B 3E 00 00            mov         di,word ptr ss:_vpus 
8C92    C1 E2 02                  shl         dx,0x02 
8C95    36 8E 1E 02 00            mov         ds,word ptr ss:_vpus+0x2 
8C9A    01 D7                     add         di,dx 
8C9C    C5 1D                     lds         bx,dword ptr [di] 
8C9E    F6 87 8B 01 01            test        byte ptr 0x18b[bx],0x01 
8CA3    74 0B                     je          L$980 
8CA5    C7 46 FA 0B 03            mov         word ptr -0x6[bp],offset DGROUP:L$1593 
8CAA    8C 56 FC                  mov         word ptr -0x4[bp],ss 
8CAD    E9 AF 00                  jmp         L$984 
8CB0                          L$980:
8CB0    83 BF 82 01 00            cmp         word ptr 0x182[bx],0x0000 
8CB5    74 0F                     je          L$981 
8CB7    C5 BF 84 01               lds         di,dword ptr 0x184[bx] 
8CBB    8B 05                     mov         ax,word ptr [di] 
8CBD    89 46 FA                  mov         word ptr -0x6[bp],ax 
8CC0    8B 45 02                  mov         ax,word ptr 0x2[di] 
8CC3    E9 96 00                  jmp         L$983 
8CC6                          L$981:
8CC6    89 C2                     mov         dx,ax 
8CC8    C1 E2 02                  shl         dx,0x02 
8CCB                          L$982:
8CCB    48                        dec         ax 
8CCC    83 EA 04                  sub         dx,0x0004 
8CCF    3D FF FF                  cmp         ax,0xffff 
8CD2    0F 84 89 00               je          L$984 
8CD6    36 C5 3E 00 00            lds         di,dword ptr ss:_windows 
8CDB    01 D7                     add         di,dx 
8CDD    C5 1D                     lds         bx,dword ptr [di] 
8CDF    8B 4F 36                  mov         cx,word ptr 0x36[bx] 
8CE2    89 4E F8                  mov         word ptr -0x8[bp],cx 
8CE5    8B 4F 38                  mov         cx,word ptr 0x38[bx] 
8CE8    81 F9 00 00               cmp         cx,seg vpuconsole_program_ 
8CEC    75 DD                     jne         L$982 
8CEE    81 7E F8 00 00            cmp         word ptr -0x8[bp],offset vpuconsole_program_ 
8CF3    75 D6                     jne         L$982 
8CF5    8B 7F 3A                  mov         di,word ptr 0x3a[bx] 
8CF8    8B 4F 3C                  mov         cx,word ptr 0x3c[bx] 
8CFB    8E 46 FE                  mov         es,word ptr -0x2[bp] 
8CFE    89 4E F6                  mov         word ptr -0xa[bp],cx 
8D01    26 8B 4C 02               mov         cx,word ptr es:0x2[si] 
8D05    C1 E1 02                  shl         cx,0x02 
8D08    89 4E F4                  mov         word ptr -0xc[bp],cx 
8D0B    36 8B 0E 00 00            mov         cx,word ptr ss:_vpus 
8D10    89 4E F8                  mov         word ptr -0x8[bp],cx 
8D13    36 8B 0E 02 00            mov         cx,word ptr ss:_vpus+0x2 
8D18    89 4E F2                  mov         word ptr -0xe[bp],cx 
8D1B    8B 4E F8                  mov         cx,word ptr -0x8[bp] 
8D1E    03 4E F4                  add         cx,word ptr -0xc[bp] 
8D21    8E 46 F6                  mov         es,word ptr -0xa[bp] 
8D24    89 4E F6                  mov         word ptr -0xa[bp],cx 
8D27    26 8B 4D 16               mov         cx,word ptr es:0x16[di] 
8D2B    89 4E F4                  mov         word ptr -0xc[bp],cx 
8D2E    26 8B 4D 18               mov         cx,word ptr es:0x18[di] 
8D32    8E 46 F2                  mov         es,word ptr -0xe[bp] 
8D35    8B 7E F6                  mov         di,word ptr -0xa[bp] 
8D38    89 4E F6                  mov         word ptr -0xa[bp],cx 
8D3B    26 8B 0D                  mov         cx,word ptr es:[di] 
8D3E    89 4E F8                  mov         word ptr -0x8[bp],cx 
8D41    26 8B 4D 02               mov         cx,word ptr es:0x2[di] 
8D45    3B 4E F6                  cmp         cx,word ptr -0xa[bp] 
8D48    75 81                     jne         L$982 
8D4A    8B 4E F4                  mov         cx,word ptr -0xc[bp] 
8D4D    3B 4E F8                  cmp         cx,word ptr -0x8[bp] 
8D50    0F 85 77 FF               jne         L$982 
8D54    8B 07                     mov         ax,word ptr [bx] 
8D56    89 46 FA                  mov         word ptr -0x6[bp],ax 
8D59    8B 47 02                  mov         ax,word ptr 0x2[bx] 
8D5C                          L$983:
8D5C    89 46 FC                  mov         word ptr -0x4[bp],ax 
8D5F                          L$984:
8D5F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
8D62    8B 7E FA                  mov         di,word ptr -0x6[bp] 
8D65    8B 5C 04                  mov         bx,word ptr 0x4[si] 
8D68    8E 46 FC                  mov         es,word ptr -0x4[bp] 
8D6B    31 D2                     xor         dx,dx 
8D6D    B9 FF FF                  mov         cx,0xffff 
8D70    33 C0                     xor         ax,ax 
8D72    F2 AE                     repne scasb 
8D74    F7 D1                     not         cx 
8D76    49                        dec         cx 
8D77    01 CB                     add         bx,cx 
8D79    89 D1                     mov         cx,dx 
8D7B    89 F0                     mov         ax,si 
8D7D    11 D1                     adc         cx,dx 
8D7F    8C DA                     mov         dx,ds 
8D81    E8 00 00                  call        memory_allowed_ 
8D84    84 C0                     test        al,al 
8D86    0F 84 FB C7               je          L$617 
8D8A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
8D8D    8B 44 14                  mov         ax,word ptr 0x14[si] 
8D90    8B 5C 48                  mov         bx,word ptr 0x48[si] 
8D93    C1 E0 02                  shl         ax,0x02 
8D96    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
8D99    01 C3                     add         bx,ax 
8D9B    C4 3F                     les         di,dword ptr [bx] 
8D9D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
8DA0    03 7C 04                  add         di,word ptr 0x4[si] 
8DA3    C5 76 FA                  lds         si,dword ptr -0x6[bp] 
8DA6    57                        push        di 
8DA7                          L$985:
8DA7    AC                        lodsb       
8DA8    AA                        stosb       
8DA9    3C 00                     cmp         al,0x00 
8DAB    75 FA                     jne         L$985 
8DAD    5F                        pop         di 
8DAE    E9 D4 C7                  jmp         L$617 
8DB1                          vpu_syscall_chdir_:
8DB1    53                        push        bx 
8DB2    51                        push        cx 
8DB3    56                        push        si 
8DB4    57                        push        di 
8DB5    C8 AA 00 00               enter       0x00aa,0x00 
8DB9    81 ED 80 00               sub         bp,0x0080 
8DBD    89 C6                     mov         si,ax 
8DBF    89 56 7E                  mov         word ptr 0x7e[bp],dx 
8DC2    8E DA                     mov         ds,dx 
8DC4    8B 5C 14                  mov         bx,word ptr 0x14[si] 
8DC7    8B 44 48                  mov         ax,word ptr 0x48[si] 
8DCA    C1 E3 02                  shl         bx,0x02 
8DCD    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
8DD0    01 C3                     add         bx,ax 
8DD2    8B 07                     mov         ax,word ptr [bx] 
8DD4    8B 57 02                  mov         dx,word ptr 0x2[bx] 
8DD7    8E 5E 7E                  mov         ds,word ptr 0x7e[bp] 
8DDA    89 56 7A                  mov         word ptr 0x7a[bp],dx 
8DDD    8B 5C 02                  mov         bx,word ptr 0x2[si] 
8DE0    89 56 7C                  mov         word ptr 0x7c[bp],dx 
8DE3    01 C3                     add         bx,ax 
8DE5    8E C2                     mov         es,dx 
8DE7    89 DF                     mov         di,bx 
8DE9    89 5E 78                  mov         word ptr 0x78[bp],bx 
8DEC    B9 FF FF                  mov         cx,0xffff 
8DEF    33 C0                     xor         ax,ax 
8DF1    F2 AE                     repne scasb 
8DF3    F7 D1                     not         cx 
8DF5    49                        dec         cx 
8DF6    8B 5C 02                  mov         bx,word ptr 0x2[si] 
8DF9    31 C0                     xor         ax,ax 
8DFB    01 CB                     add         bx,cx 
8DFD    89 C1                     mov         cx,ax 
8DFF    8C DA                     mov         dx,ds 
8E01    11 C1                     adc         cx,ax 
8E03    89 F0                     mov         ax,si 
8E05    E8 00 00                  call        memory_allowed_ 
8E08    84 C0                     test        al,al 
8E0A    75 05                     jne         L$986 
8E0C    30 E4                     xor         ah,ah 
8E0E    E9 24 C8                  jmp         L$620 
8E11                          L$986:
8E11    8E 5E 7E                  mov         ds,word ptr 0x7e[bp] 
8E14    8A 44 24                  mov         al,byte ptr 0x24[si] 
8E17    A8 01                     test        al,0x01 
8E19    74 35                     je          L$988 
8E1B    A8 04                     test        al,0x04 
8E1D    75 19                     jne         L$987 
8E1F    8B 56 7A                  mov         dx,word ptr 0x7a[bp] 
8E22    8D 84 CC 00               lea         ax,0xcc[si] 
8E26    1E                        push        ds 
8E27    8C D9                     mov         cx,ds 
8E29    50                        push        ax 
8E2A    8D 9C 1D 01               lea         bx,0x11d[si] 
8E2E    8B 46 78                  mov         ax,word ptr 0x78[bp] 
8E31    E8 00 00                  call        is_subpath_ 
8E34    85 C0                     test        ax,ax 
8E36    74 18                     je          L$988 
8E38                          L$987:
8E38    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
8E3B    8B 5E 78                  mov         bx,word ptr 0x78[bp] 
8E3E    80 7F 01 3A               cmp         byte ptr 0x1[bx],0x3a 
8E42    75 18                     jne         L$989 
8E44    0F B6 07                  movzx       ax,byte ptr [bx] 
8E47    9A 00 00 00 00            call        chdrive_ 
8E4C    85 C0                     test        ax,ax 
8E4E    74 24                     je          L$990 
8E50                          L$988:
8E50    8E 5E 7E                  mov         ds,word ptr 0x7e[bp] 
8E53    31 C0                     xor         ax,ax 
8E55    C7 04 FF FF               mov         word ptr [si],0xffff 
8E59    E9 D9 C7                  jmp         L$620 
8E5C                          L$989:
8E5C    8E 5E 7E                  mov         ds,word ptr 0x7e[bp] 
8E5F    80 BC CD 00 3A            cmp         byte ptr 0xcd[si],0x3a 
8E64    75 0E                     jne         L$990 
8E66    0F B6 84 CC 00            movzx       ax,byte ptr 0xcc[si] 
8E6B    9A 00 00 00 00            call        chdrive_ 
8E70    85 C0                     test        ax,ax 
8E72    75 DC                     jne         L$988 
8E74                          L$990:
8E74    FF 76 7C                  push        word ptr 0x7c[bp] 
8E77    8D 5E D6                  lea         bx,-0x2a[bp] 
8E7A    8B 56 7E                  mov         dx,word ptr 0x7e[bp] 
8E7D    8C D1                     mov         cx,ss 
8E7F    FF 76 78                  push        word ptr 0x78[bp] 
8E82    89 F0                     mov         ax,si 
8E84    0E                        push        cs 
8E85    E8 00 00                  call        append_path_ 
8E88    8D 46 D6                  lea         ax,-0x2a[bp] 
8E8B    8C D2                     mov         dx,ss 
8E8D    9A 00 00 00 00            call        chdir_ 
8E92    8E 5E 7E                  mov         ds,word ptr 0x7e[bp] 
8E95    BB 50 00                  mov         bx,0x0050 
8E98    8C DA                     mov         dx,ds 
8E9A    89 04                     mov         word ptr [si],ax 
8E9C    8D 84 CC 00               lea         ax,0xcc[si] 
8EA0    9A 00 00 00 00            call        getcwd_ 
8EA5    31 C0                     xor         ax,ax 
8EA7    BA 00 00                  mov         dx,seg _cwd 
8EAA    9A 00 00 00 00            call        chdrive_ 
8EAF    B8 00 00                  mov         ax,offset _cwd 
8EB2    9A 00 00 00 00            call        chdir_ 
8EB7    8B 56 7E                  mov         dx,word ptr 0x7e[bp] 
8EBA    89 F0                     mov         ax,si 
8EBC    9A 00 00 00 00            call        vpu_cwd_ 
8EC1    E9 6F C7                  jmp         L$619 
8EC4                          vpu_syscall_opendir_:
8EC4    53                        push        bx 
8EC5    51                        push        cx 
8EC6    56                        push        si 
8EC7    57                        push        di 
8EC8    C8 5C 00 00               enter       0x005c,0x00 
8ECC    89 C6                     mov         si,ax 
8ECE    89 56 FE                  mov         word ptr -0x2[bp],dx 
8ED1    8E DA                     mov         ds,dx 
8ED3    8B 44 14                  mov         ax,word ptr 0x14[si] 
8ED6    8B 5C 48                  mov         bx,word ptr 0x48[si] 
8ED9    C1 E0 02                  shl         ax,0x02 
8EDC    8E 44 4A                  mov         es,word ptr 0x4a[si] 
8EDF    01 C3                     add         bx,ax 
8EE1    26 C4 07                  les         ax,dword ptr es:[bx] 
8EE4    8B 5C 02                  mov         bx,word ptr 0x2[si] 
8EE7    01 C3                     add         bx,ax 
8EE9    89 DF                     mov         di,bx 
8EEB    89 5E FA                  mov         word ptr -0x6[bp],bx 
8EEE    B9 FF FF                  mov         cx,0xffff 
8EF1    33 C0                     xor         ax,ax 
8EF3    F2 AE                     repne scasb 
8EF5    F7 D1                     not         cx 
8EF7    49                        dec         cx 
8EF8    89 CF                     mov         di,cx 
8EFA    8B 5C 02                  mov         bx,word ptr 0x2[si] 
8EFD    31 C0                     xor         ax,ax 
8EFF    31 C9                     xor         cx,cx 
8F01    01 FB                     add         bx,di 
8F03    11 C1                     adc         cx,ax 
8F05    89 F0                     mov         ax,si 
8F07    8C 46 FC                  mov         word ptr -0x4[bp],es 
8F0A    E8 00 00                  call        memory_allowed_ 
8F0D    84 C0                     test        al,al 
8F0F    0F 84 5E CA               je          L$625 
8F13    83 FF 50                  cmp         di,0x0050 
8F16    0F 87 57 CA               ja          L$625 
8F1A    C5 5E FA                  lds         bx,dword ptr -0x6[bp] 
8F1D    80 3F 00                  cmp         byte ptr [bx],0x00 
8F20    75 0F                     jne         L$991 
8F22    89 F3                     mov         bx,si 
8F24    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
8F27    81 C3 CC 00               add         bx,0x00cc 
8F2B    89 46 FC                  mov         word ptr -0x4[bp],ax 
8F2E    89 5E FA                  mov         word ptr -0x6[bp],bx 
8F31                          L$991:
8F31    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
8F34    8A 44 24                  mov         al,byte ptr 0x24[si] 
8F37    A8 01                     test        al,0x01 
8F39    0F 84 34 CA               je          L$625 
8F3D    A8 04                     test        al,0x04 
8F3F    75 1B                     jne         L$992 
8F41    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
8F44    8D 84 CC 00               lea         ax,0xcc[si] 
8F48    1E                        push        ds 
8F49    8C D9                     mov         cx,ds 
8F4B    50                        push        ax 
8F4C    8D 9C 1D 01               lea         bx,0x11d[si] 
8F50    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
8F53    E8 00 00                  call        is_subpath_ 
8F56    85 C0                     test        ax,ax 
8F58    0F 84 15 CA               je          L$625 
8F5C                          L$992:
8F5C    66 FF 76 FA               push        dword ptr -0x6[bp] 
8F60    16                        push        ss 
8F61    68 90 07                  push        offset DGROUP:L$1532 
8F64    16                        push        ss 
8F65    8D 56 A4                  lea         dx,-0x5c[bp] 
8F68    52                        push        dx 
8F69    31 C9                     xor         cx,cx 
8F6B    9A 00 00 00 00            call        sprintf_ 
8F70    83 C4 0C                  add         sp,0x000c 
8F73    31 C0                     xor         ax,ax 
8F75                          L$993:
8F75    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
8F78    C5 5C 68                  lds         bx,dword ptr 0x68[si] 
8F7B    01 C3                     add         bx,ax 
8F7D    8B 57 02                  mov         dx,word ptr 0x2[bx] 
8F80    8B 3F                     mov         di,word ptr [bx] 
8F82    85 D2                     test        dx,dx 
8F84    75 04                     jne         L$994 
8F86    85 FF                     test        di,di 
8F88    74 0B                     je          L$995 
8F8A                          L$994:
8F8A    83 F9 0A                  cmp         cx,0x000a 
8F8D    73 06                     jae         L$995 
8F8F    05 04 00                  add         ax,0x0004 
8F92    41                        inc         cx 
8F93    EB E0                     jmp         L$993 
8F95                          L$995:
8F95    83 F9 0A                  cmp         cx,0x000a 
8F98    0F 83 D5 C9               jae         L$625 
8F9C    BA 36 00                  mov         dx,0x0036 
8F9F    B8 01 00                  mov         ax,0x0001 
8FA2    9A 00 00 00 00            call        calloc_ 
8FA7    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
8FAA    89 CF                     mov         di,cx 
8FAC    8B 5C 68                  mov         bx,word ptr 0x68[si] 
8FAF    C1 E7 02                  shl         di,0x02 
8FB2    8E 5C 6A                  mov         ds,word ptr 0x6a[si] 
8FB5    01 FB                     add         bx,di 
8FB7    89 07                     mov         word ptr [bx],ax 
8FB9    89 57 02                  mov         word ptr 0x2[bx],dx 
8FBC    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
8FBF    C5 5C 68                  lds         bx,dword ptr 0x68[si] 
8FC2    01 FB                     add         bx,di 
8FC4    8B 47 02                  mov         ax,word ptr 0x2[bx] 
8FC7    8B 17                     mov         dx,word ptr [bx] 
8FC9    85 C0                     test        ax,ax 
8FCB    75 0C                     jne         L$996 
8FCD    85 D2                     test        dx,dx 
8FCF    75 08                     jne         L$996 
8FD1    9A 00 00 00 00            call        nomemory_ 
8FD6    E9 98 C9                  jmp         L$625 
8FD9                          L$996:
8FD9    BB FF 00                  mov         bx,0x00ff 
8FDC    50                        push        ax 
8FDD    8D 46 A4                  lea         ax,-0x5c[bp] 
8FE0    52                        push        dx 
8FE1    8C D2                     mov         dx,ss 
8FE3    9A 00 00 00 00            call        _dos_findfirst_ 
8FE8    85 C0                     test        ax,ax 
8FEA    0F 84 14 07               je          L$1028 
8FEE    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
8FF1    C5 5C 68                  lds         bx,dword ptr 0x68[si] 
8FF4    01 FB                     add         bx,di 
8FF6    8B 07                     mov         ax,word ptr [bx] 
8FF8    8B 57 02                  mov         dx,word ptr 0x2[bx] 
8FFB    9A 00 00 00 00            call        free_ 
9000    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9003    C5 5C 68                  lds         bx,dword ptr 0x68[si] 
9006    01 FB                     add         bx,di 
9008    66 C7 07 00 00 00 00      mov         dword ptr [bx],0x00000000 
900F    E9 5F C9                  jmp         L$625 
9012                          vpu_syscall_readdir_:
9012    53                        push        bx 
9013    51                        push        cx 
9014    56                        push        si 
9015    57                        push        di 
9016    55                        push        bp 
9017    89 E5                     mov         bp,sp 
9019    50                        push        ax 
901A    52                        push        dx 
901B    8E DA                     mov         ds,dx 
901D    89 C3                     mov         bx,ax 
901F    8B 47 02                  mov         ax,word ptr 0x2[bx] 
9022    3D 0A 00                  cmp         ax,0x000a 
9025    0F 83 FF 00               jae         L$1000 
9029    8B 76 FE                  mov         si,word ptr -0x2[bp] 
902C    C1 E0 02                  shl         ax,0x02 
902F    8B 5F 68                  mov         bx,word ptr 0x68[bx] 
9032    8E 5C 6A                  mov         ds,word ptr 0x6a[si] 
9035    01 C3                     add         bx,ax 
9037    8B 47 02                  mov         ax,word ptr 0x2[bx] 
903A    8B 17                     mov         dx,word ptr [bx] 
903C    85 C0                     test        ax,ax 
903E    75 06                     jne         L$997 
9040    85 D2                     test        dx,dx 
9042    0F 84 E2 00               je          L$1000 
9046                          L$997:
9046    89 D6                     mov         si,dx 
9048    8E C0                     mov         es,ax 
904A    26 83 7C 2C 00            cmp         word ptr es:0x2c[si],0x0000 
904F    0F 85 D5 00               jne         L$1000 
9053    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
9056    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
9059    8D 7C 1E                  lea         di,0x1e[si] 
905C    31 D2                     xor         dx,dx 
905E    8B 5F 04                  mov         bx,word ptr 0x4[bx] 
9061    B9 FF FF                  mov         cx,0xffff 
9064    33 C0                     xor         ax,ax 
9066    F2 AE                     repne scasb 
9068    F7 D1                     not         cx 
906A    49                        dec         cx 
906B    01 CB                     add         bx,cx 
906D    89 D1                     mov         cx,dx 
906F    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
9072    11 D1                     adc         cx,dx 
9074    8C DA                     mov         dx,ds 
9076    E8 00 00                  call        memory_allowed_ 
9079    84 C0                     test        al,al 
907B    74 4B                     je          L$999 
907D    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
9080    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
9083    8B 76 FE                  mov         si,word ptr -0x2[bp] 
9086    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
9089    8B 44 68                  mov         ax,word ptr 0x68[si] 
908C    C1 E3 02                  shl         bx,0x02 
908F    8E 5C 6A                  mov         ds,word ptr 0x6a[si] 
9092    01 C3                     add         bx,ax 
9094    8B 37                     mov         si,word ptr [bx] 
9096    8B 57 02                  mov         dx,word ptr 0x2[bx] 
9099    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
909C    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
909F    8B 47 14                  mov         ax,word ptr 0x14[bx] 
90A2    8B 7E FE                  mov         di,word ptr -0x2[bp] 
90A5    C1 E0 02                  shl         ax,0x02 
90A8    8B 5F 48                  mov         bx,word ptr 0x48[bx] 
90AB    8E 5D 4A                  mov         ds,word ptr 0x4a[di] 
90AE    01 C3                     add         bx,ax 
90B0    C4 3F                     les         di,dword ptr [bx] 
90B2    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
90B5    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
90B8    83 C6 1E                  add         si,0x001e 
90BB    03 7F 04                  add         di,word ptr 0x4[bx] 
90BE    8E DA                     mov         ds,dx 
90C0    57                        push        di 
90C1                          L$998:
90C1    AC                        lodsb       
90C2    AA                        stosb       
90C3    3C 00                     cmp         al,0x00 
90C5    75 FA                     jne         L$998 
90C7    5F                        pop         di 
90C8                          L$999:
90C8    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
90CB    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
90CE    8B 76 FE                  mov         si,word ptr -0x2[bp] 
90D1    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
90D4    8B 44 68                  mov         ax,word ptr 0x68[si] 
90D7    C1 E3 02                  shl         bx,0x02 
90DA    8E 5C 6A                  mov         ds,word ptr 0x6a[si] 
90DD    01 C3                     add         bx,ax 
90DF    C5 37                     lds         si,dword ptr [bx] 
90E1    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
90E4    0F B6 44 15               movzx       ax,byte ptr 0x15[si] 
90E8    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
90EB    C7 07 00 00               mov         word ptr [bx],0x0000 
90EF    89 47 06                  mov         word ptr 0x6[bx],ax 
90F2    8B 76 FE                  mov         si,word ptr -0x2[bp] 
90F5    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
90F8    8B 44 68                  mov         ax,word ptr 0x68[si] 
90FB    C1 E3 02                  shl         bx,0x02 
90FE    8E 5C 6A                  mov         ds,word ptr 0x6a[si] 
9101    01 C3                     add         bx,ax 
9103    8B 07                     mov         ax,word ptr [bx] 
9105    8B 57 02                  mov         dx,word ptr 0x2[bx] 
9108    9A 00 00 00 00            call        _dos_findnext_ 
910D    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
9110    89 F3                     mov         bx,si 
9112    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
9115    8B 54 68                  mov         dx,word ptr 0x68[si] 
9118    C1 E3 02                  shl         bx,0x02 
911B    8E 5C 6A                  mov         ds,word ptr 0x6a[si] 
911E    01 D3                     add         bx,dx 
9120    C5 37                     lds         si,dword ptr [bx] 
9122    89 44 2C                  mov         word ptr 0x2c[si],ax 
9125    E9 5D C4                  jmp         L$617 
9128                          L$1000:
9128    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
912B    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
912E    C7 07 FF FF               mov         word ptr [bx],0xffff 
9132    E9 50 C4                  jmp         L$617 
9135                          vpu_dd_close_:
9135    51                        push        cx 
9136    56                        push        si 
9137    57                        push        di 
9138    C8 02 00 00               enter       0x0002,0x00 
913C    89 C6                     mov         si,ax 
913E    89 56 FE                  mov         word ptr -0x2[bp],dx 
9141    89 D9                     mov         cx,bx 
9143    89 DF                     mov         di,bx 
9145    8E DA                     mov         ds,dx 
9147    C1 E7 02                  shl         di,0x02 
914A    C5 44 68                  lds         ax,dword ptr 0x68[si] 
914D    01 C7                     add         di,ax 
914F    C5 1D                     lds         bx,dword ptr [di] 
9151    8B 47 30                  mov         ax,word ptr 0x30[bx] 
9154    8B 7F 2E                  mov         di,word ptr 0x2e[bx] 
9157    85 C0                     test        ax,ax 
9159    75 12                     jne         L$1001 
915B    85 FF                     test        di,di 
915D    75 0E                     jne         L$1001 
915F    8B 47 34                  mov         ax,word ptr 0x34[bx] 
9162    8B 7F 32                  mov         di,word ptr 0x32[bx] 
9165    85 C0                     test        ax,ax 
9167    75 04                     jne         L$1001 
9169    85 FF                     test        di,di 
916B    74 5C                     je          L$1005 
916D                          L$1001:
916D    89 CF                     mov         di,cx 
916F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9172    C1 E7 02                  shl         di,0x02 
9175    C5 44 68                  lds         ax,dword ptr 0x68[si] 
9178    01 C7                     add         di,ax 
917A    C5 1D                     lds         bx,dword ptr [di] 
917C    8B 47 30                  mov         ax,word ptr 0x30[bx] 
917F    8B 7F 2E                  mov         di,word ptr 0x2e[bx] 
9182    85 C0                     test        ax,ax 
9184    75 04                     jne         L$1002 
9186    85 FF                     test        di,di 
9188    74 10                     je          L$1003 
918A                          L$1002:
918A    8E C0                     mov         es,ax 
918C    8B 47 32                  mov         ax,word ptr 0x32[bx] 
918F    8B 5F 34                  mov         bx,word ptr 0x34[bx] 
9192    26 89 45 32               mov         word ptr es:0x32[di],ax 
9196    26 89 5D 34               mov         word ptr es:0x34[di],bx 
919A                          L$1003:
919A    89 CF                     mov         di,cx 
919C    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
919F    C1 E7 02                  shl         di,0x02 
91A2    C5 44 68                  lds         ax,dword ptr 0x68[si] 
91A5    01 C7                     add         di,ax 
91A7    C5 1D                     lds         bx,dword ptr [di] 
91A9    8B 47 34                  mov         ax,word ptr 0x34[bx] 
91AC    8B 7F 32                  mov         di,word ptr 0x32[bx] 
91AF    85 C0                     test        ax,ax 
91B1    75 04                     jne         L$1004 
91B3    85 FF                     test        di,di 
91B5    74 1B                     je          L$1006 
91B7                          L$1004:
91B7    8E C0                     mov         es,ax 
91B9    8B 47 2E                  mov         ax,word ptr 0x2e[bx] 
91BC    8B 5F 30                  mov         bx,word ptr 0x30[bx] 
91BF    26 89 45 2E               mov         word ptr es:0x2e[di],ax 
91C3    26 89 5D 30               mov         word ptr es:0x30[di],bx 
91C7    EB 09                     jmp         L$1006 
91C9                          L$1005:
91C9    89 D8                     mov         ax,bx 
91CB    8C DA                     mov         dx,ds 
91CD    9A 00 00 00 00            call        free_ 
91D2                          L$1006:
91D2    89 CB                     mov         bx,cx 
91D4    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
91D7    C1 E3 02                  shl         bx,0x02 
91DA    C5 44 68                  lds         ax,dword ptr 0x68[si] 
91DD    01 C3                     add         bx,ax 
91DF    66 C7 07 00 00 00 00      mov         dword ptr [bx],0x00000000 
91E6    E9 09 8A                  jmp         L$272 
91E9                          vpu_syscall_closedir_:
91E9    53                        push        bx 
91EA    56                        push        si 
91EB    89 C6                     mov         si,ax 
91ED    8E DA                     mov         ds,dx 
91EF    8B 44 02                  mov         ax,word ptr 0x2[si] 
91F2    3D 0A 00                  cmp         ax,0x000a 
91F5    73 21                     jae         L$1008 
91F7    89 C3                     mov         bx,ax 
91F9    C1 E3 02                  shl         bx,0x02 
91FC    C4 44 68                  les         ax,dword ptr 0x68[si] 
91FF    01 C3                     add         bx,ax 
9201    26 8B 07                  mov         ax,word ptr es:[bx] 
9204    26 8B 5F 02               mov         bx,word ptr es:0x2[bx] 
9208    85 DB                     test        bx,bx 
920A    75 04                     jne         L$1007 
920C    85 C0                     test        ax,ax 
920E    74 08                     je          L$1008 
9210                          L$1007:
9210    89 F0                     mov         ax,si 
9212    8B 5C 02                  mov         bx,word ptr 0x2[si] 
9215    E8 00 00                  call        vpu_dd_close_ 
9218                          L$1008:
9218    31 C0                     xor         ax,ax 
921A    5E                        pop         si 
921B    5B                        pop         bx 
921C    CB                        retf        
921D                          vpu_syscall_stat_:
921D    53                        push        bx 
921E    51                        push        cx 
921F    56                        push        si 
9220    57                        push        di 
9221    C8 44 00 00               enter       0x0044,0x00 
9225    89 C6                     mov         si,ax 
9227    89 56 FC                  mov         word ptr -0x4[bp],dx 
922A    8E DA                     mov         ds,dx 
922C    8B 5C 14                  mov         bx,word ptr 0x14[si] 
922F    8B 44 48                  mov         ax,word ptr 0x48[si] 
9232    C1 E3 02                  shl         bx,0x02 
9235    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
9238    01 C3                     add         bx,ax 
923A    8B 07                     mov         ax,word ptr [bx] 
923C    8B 57 02                  mov         dx,word ptr 0x2[bx] 
923F    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
9242    89 56 FA                  mov         word ptr -0x6[bp],dx 
9245    8B 54 04                  mov         dx,word ptr 0x4[si] 
9248    8B 5C 02                  mov         bx,word ptr 0x2[si] 
924B    01 C2                     add         dx,ax 
924D    01 C3                     add         bx,ax 
924F    89 56 F6                  mov         word ptr -0xa[bp],dx 
9252    89 5E F8                  mov         word ptr -0x8[bp],bx 
9255    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
9258    8B 7E F6                  mov         di,word ptr -0xa[bp] 
925B    8E C2                     mov         es,dx 
925D    89 56 F2                  mov         word ptr -0xe[bp],dx 
9260    B9 FF FF                  mov         cx,0xffff 
9263    33 C0                     xor         ax,ax 
9265    F2 AE                     repne scasb 
9267    F7 D1                     not         cx 
9269    49                        dec         cx 
926A    8B 5C 04                  mov         bx,word ptr 0x4[si] 
926D    31 C0                     xor         ax,ax 
926F    01 CB                     add         bx,cx 
9271    89 C1                     mov         cx,ax 
9273    8C DA                     mov         dx,ds 
9275    11 C1                     adc         cx,ax 
9277    89 F0                     mov         ax,si 
9279    C6 46 FE 00               mov         byte ptr -0x2[bp],0x00 
927D    E8 00 00                  call        memory_allowed_ 
9280    84 C0                     test        al,al 
9282    75 05                     jne         L$1009 
9284    30 E4                     xor         ah,ah 
9286    E9 78 07                  jmp         L$1046 
9289                          L$1009:
9289    8D 56 BC                  lea         dx,-0x44[bp] 
928C    BB FF 00                  mov         bx,0x00ff 
928F    16                        push        ss 
9290    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
9293    52                        push        dx 
9294    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
9297    9A 00 00 00 00            call        _dos_findfirst_ 
929C    85 C0                     test        ax,ax 
929E    74 0C                     je          L$1010 
92A0    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
92A3    31 C0                     xor         ax,ax 
92A5    C7 04 FF FF               mov         word ptr [si],0xffff 
92A9    E9 55 07                  jmp         L$1046 
92AC                          L$1010:
92AC    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
92AF    31 C9                     xor         cx,cx 
92B1    8C DA                     mov         dx,ds 
92B3    8B 5C 02                  mov         bx,word ptr 0x2[si] 
92B6    89 04                     mov         word ptr [si],ax 
92B8    89 F0                     mov         ax,si 
92BA    E8 00 00                  call        memory_allowed_ 
92BD    84 C0                     test        al,al 
92BF    74 0B                     je          L$1011 
92C1    8E 5E F2                  mov         ds,word ptr -0xe[bp] 
92C4    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
92C7    8A 46 D1                  mov         al,byte ptr -0x2f[bp] 
92CA    88 07                     mov         byte ptr [bx],al 
92CC                          L$1011:
92CC    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
92CF    FE 46 FE                  inc         byte ptr -0x2[bp] 
92D2    89 F0                     mov         ax,si 
92D4    0F B6 5E FE               movzx       bx,byte ptr -0x2[bp] 
92D8    8B 54 02                  mov         dx,word ptr 0x2[si] 
92DB    31 C9                     xor         cx,cx 
92DD    01 D3                     add         bx,dx 
92DF    8C DA                     mov         dx,ds 
92E1    11 C9                     adc         cx,cx 
92E3    83 C3 03                  add         bx,0x0003 
92E6    83 D1 00                  adc         cx,0x0000 
92E9    E8 00 00                  call        memory_allowed_ 
92EC    84 C0                     test        al,al 
92EE    74 15                     je          L$1012 
92F0    0F B6 5E FE               movzx       bx,byte ptr -0x2[bp] 
92F4    8E 5E F2                  mov         ds,word ptr -0xe[bp] 
92F7    03 5E F8                  add         bx,word ptr -0x8[bp] 
92FA    8B 46 D6                  mov         ax,word ptr -0x2a[bp] 
92FD    89 07                     mov         word ptr [bx],ax 
92FF    8B 46 D8                  mov         ax,word ptr -0x28[bp] 
9302    89 47 02                  mov         word ptr 0x2[bx],ax 
9305                          L$1012:
9305    8B 46 D4                  mov         ax,word ptr -0x2c[bp] 
9308    C1 E8 05                  shr         ax,0x05 
930B    25 0F 00                  and         ax,0x000f 
930E    89 46 F4                  mov         word ptr -0xc[bp],ax 
9311    8B 46 D4                  mov         ax,word ptr -0x2c[bp] 
9314    30 E4                     xor         ah,ah 
9316    24 1F                     and         al,0x1f 
9318    89 46 F0                  mov         word ptr -0x10[bp],ax 
931B    8B 46 D2                  mov         ax,word ptr -0x2e[bp] 
931E    C1 E8 0B                  shr         ax,0x0b 
9321    89 46 EC                  mov         word ptr -0x14[bp],ax 
9324    8B 46 D2                  mov         ax,word ptr -0x2e[bp] 
9327    8B 7E D4                  mov         di,word ptr -0x2c[bp] 
932A    C1 E8 05                  shr         ax,0x05 
932D    80 46 FE 04               add         byte ptr -0x2[bp],0x04 
9331    30 E4                     xor         ah,ah 
9333    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
9336    24 3F                     and         al,0x3f 
9338    C7 46 EA 00 00            mov         word ptr -0x16[bp],0x0000 
933D    89 46 E8                  mov         word ptr -0x18[bp],ax 
9340    8B 46 D2                  mov         ax,word ptr -0x2e[bp] 
9343    31 C9                     xor         cx,cx 
9345    30 E4                     xor         ah,ah 
9347    0F B6 5E FE               movzx       bx,byte ptr -0x2[bp] 
934B    24 1F                     and         al,0x1f 
934D    C1 EF 09                  shr         di,0x09 
9350    01 C0                     add         ax,ax 
9352    8C DA                     mov         dx,ds 
9354    89 46 EE                  mov         word ptr -0x12[bp],ax 
9357    8B 44 02                  mov         ax,word ptr 0x2[si] 
935A    81 C7 BC 07               add         di,0x07bc 
935E    01 C3                     add         bx,ax 
9360    13 4E EA                  adc         cx,word ptr -0x16[bp] 
9363    89 F0                     mov         ax,si 
9365    83 C3 07                  add         bx,0x0007 
9368    83 D1 00                  adc         cx,0x0000 
936B    E8 00 00                  call        memory_allowed_ 
936E    84 C0                     test        al,al 
9370    0F 84 11 C2               je          L$617 
9374    0F B6 46 EE               movzx       ax,byte ptr -0x12[bp] 
9378    0F B6 4E EC               movzx       cx,byte ptr -0x14[bp] 
937C    0F B6 5E F0               movzx       bx,byte ptr -0x10[bp] 
9380    0F B6 56 F4               movzx       dx,byte ptr -0xc[bp] 
9384    50                        push        ax 
9385    0F B6 46 E8               movzx       ax,byte ptr -0x18[bp] 
9389    0F B6 76 FE               movzx       si,byte ptr -0x2[bp] 
938D    50                        push        ax 
938E    89 F8                     mov         ax,di 
9390    03 76 F8                  add         si,word ptr -0x8[bp] 
9393    E8 00 00                  call        human2unixtime_ 
9396    8E 5E F2                  mov         ds,word ptr -0xe[bp] 
9399    66 C7 44 04 00 00 00 00
                                  mov         dword ptr 0x4[si],0x00000000 
93A1    89 54 02                  mov         word ptr 0x2[si],dx 
93A4    E9 DC C1                  jmp         L$616 
93A7                          vpu_syscall_setpriority_:
93A7    53                        push        bx 
93A8    51                        push        cx 
93A9    56                        push        si 
93AA    89 C3                     mov         bx,ax 
93AC    89 D1                     mov         cx,dx 
93AE    8E DA                     mov         ds,dx 
93B0    8B 47 02                  mov         ax,word ptr 0x2[bx] 
93B3    85 C0                     test        ax,ax 
93B5    75 09                     jne         L$1013 
93B7    8B 47 04                  mov         ax,word ptr 0x4[bx] 
93BA    89 47 22                  mov         word ptr 0x22[bx],ax 
93BD    E9 FF B5                  jmp         L$573 
93C0                          L$1013:
93C0    E8 00 00                  call        pid_to_vpu_ 
93C3    89 C6                     mov         si,ax 
93C5    85 D2                     test        dx,dx 
93C7    75 04                     jne         L$1014 
93C9    85 C0                     test        ax,ax 
93CB    74 13                     je          L$1015 
93CD                          L$1014:
93CD    8E D9                     mov         ds,cx 
93CF    8B 47 04                  mov         ax,word ptr 0x4[bx] 
93D2    8E DA                     mov         ds,dx 
93D4    89 44 22                  mov         word ptr 0x22[si],ax 
93D7    8E D9                     mov         ds,cx 
93D9    C7 07 00 00               mov         word ptr [bx],0x0000 
93DD    E9 DF B5                  jmp         L$573 
93E0                          L$1015:
93E0    8E D9                     mov         ds,cx 
93E2    C7 07 FF FF               mov         word ptr [bx],0xffff 
93E6    E9 D6 B5                  jmp         L$573 
93E9                          vpu_syscall_getpriority_:
93E9    53                        push        bx 
93EA    51                        push        cx 
93EB    56                        push        si 
93EC    89 C3                     mov         bx,ax 
93EE    89 D1                     mov         cx,dx 
93F0    8E DA                     mov         ds,dx 
93F2    8B 47 02                  mov         ax,word ptr 0x2[bx] 
93F5    85 C0                     test        ax,ax 
93F7    75 08                     jne         L$1017 
93F9    8B 47 22                  mov         ax,word ptr 0x22[bx] 
93FC                          L$1016:
93FC    89 07                     mov         word ptr [bx],ax 
93FE    E9 BE B5                  jmp         L$573 
9401                          L$1017:
9401    E8 00 00                  call        pid_to_vpu_ 
9404    89 C6                     mov         si,ax 
9406    85 D2                     test        dx,dx 
9408    75 04                     jne         L$1018 
940A    85 C0                     test        ax,ax 
940C    74 D2                     je          L$1015 
940E                          L$1018:
940E    8E DA                     mov         ds,dx 
9410    8B 44 22                  mov         ax,word ptr 0x22[si] 
9413    8E D9                     mov         ds,cx 
9415    EB E5                     jmp         L$1016 
9417                          vpu_syscall_loadmod_:
9417    53                        push        bx 
9418    51                        push        cx 
9419    56                        push        si 
941A    57                        push        di 
941B    C8 0A 00 00               enter       0x000a,0x00 
941F    89 C6                     mov         si,ax 
9421    89 56 FE                  mov         word ptr -0x2[bp],dx 
9424    8E DA                     mov         ds,dx 
9426    8B 5C 14                  mov         bx,word ptr 0x14[si] 
9429    8B 44 48                  mov         ax,word ptr 0x48[si] 
942C    C1 E3 02                  shl         bx,0x02 
942F    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
9432    01 C3                     add         bx,ax 
9434    8B 07                     mov         ax,word ptr [bx] 
9436    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
9439    8E DA                     mov         ds,dx 
943B    89 5E FC                  mov         word ptr -0x4[bp],bx 
943E    8B 5C 02                  mov         bx,word ptr 0x2[si] 
9441    01 C3                     add         bx,ax 
9443    89 5E F8                  mov         word ptr -0x8[bp],bx 
9446    8B 5C 04                  mov         bx,word ptr 0x4[si] 
9449    01 C3                     add         bx,ax 
944B    89 5E FA                  mov         word ptr -0x6[bp],bx 
944E    F6 44 24 20               test        byte ptr 0x24[si],0x20 
9452    75 07                     jne         L$1019 
9454    C7 04 FF FF               mov         word ptr [si],0xffff 
9458    E9 2A C1                  jmp         L$617 
945B                          L$1019:
945B    8B 7E F8                  mov         di,word ptr -0x8[bp] 
945E    8E 46 FC                  mov         es,word ptr -0x4[bp] 
9461    C7 46 F6 00 00            mov         word ptr -0xa[bp],0x0000 
9466    B9 FF FF                  mov         cx,0xffff 
9469    33 C0                     xor         ax,ax 
946B    F2 AE                     repne scasb 
946D    F7 D1                     not         cx 
946F    49                        dec         cx 
9470    8B 7E FA                  mov         di,word ptr -0x6[bp] 
9473    89 CB                     mov         bx,cx 
9475    B9 FF FF                  mov         cx,0xffff 
9478    33 C0                     xor         ax,ax 
947A    F2 AE                     repne scasb 
947C    F7 D1                     not         cx 
947E    49                        dec         cx 
947F    89 CF                     mov         di,cx 
9481    8B 44 02                  mov         ax,word ptr 0x2[si] 
9484    31 C9                     xor         cx,cx 
9486    01 C3                     add         bx,ax 
9488    13 4E F6                  adc         cx,word ptr -0xa[bp] 
948B    89 F0                     mov         ax,si 
948D    E8 00 00                  call        memory_allowed_ 
9490    84 C0                     test        al,al 
9492    0F 84 EF C0               je          L$617 
9496    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9499    31 C0                     xor         ax,ax 
949B    31 C9                     xor         cx,cx 
949D    8B 5C 04                  mov         bx,word ptr 0x4[si] 
94A0    8C DA                     mov         dx,ds 
94A2    01 FB                     add         bx,di 
94A4    11 C1                     adc         cx,ax 
94A6    89 F0                     mov         ax,si 
94A8    E8 00 00                  call        memory_allowed_ 
94AB    84 C0                     test        al,al 
94AD    0F 84 D4 C0               je          L$617 
94B1    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
94B4    8B 4E FC                  mov         cx,word ptr -0x4[bp] 
94B7    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
94BA    89 CA                     mov         dx,cx 
94BC    9A 00 00 00 00            call        load_driver_ 
94C1    E9 BC C0                  jmp         L$615 
94C4                          vpu_syscall_unloadmod_:
94C4    53                        push        bx 
94C5    51                        push        cx 
94C6    56                        push        si 
94C7    57                        push        di 
94C8    C8 06 00 00               enter       0x0006,0x00 
94CC    89 C6                     mov         si,ax 
94CE    89 56 FE                  mov         word ptr -0x2[bp],dx 
94D1    8E DA                     mov         ds,dx 
94D3    8B 44 14                  mov         ax,word ptr 0x14[si] 
94D6    8B 5C 48                  mov         bx,word ptr 0x48[si] 
94D9    C1 E0 02                  shl         ax,0x02 
94DC    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
94DF    01 C3                     add         bx,ax 
94E1    8B 07                     mov         ax,word ptr [bx] 
94E3    8B 57 02                  mov         dx,word ptr 0x2[bx] 
94E6    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
94E9    89 56 FC                  mov         word ptr -0x4[bp],dx 
94EC    8B 54 02                  mov         dx,word ptr 0x2[si] 
94EF    01 C2                     add         dx,ax 
94F1    8E 46 FC                  mov         es,word ptr -0x4[bp] 
94F4    89 D7                     mov         di,dx 
94F6    89 56 FA                  mov         word ptr -0x6[bp],dx 
94F9    B9 FF FF                  mov         cx,0xffff 
94FC    33 C0                     xor         ax,ax 
94FE    F2 AE                     repne scasb 
9500    F7 D1                     not         cx 
9502    49                        dec         cx 
9503    8B 5C 02                  mov         bx,word ptr 0x2[si] 
9506    31 C0                     xor         ax,ax 
9508    01 CB                     add         bx,cx 
950A    89 C1                     mov         cx,ax 
950C    8C DA                     mov         dx,ds 
950E    11 C1                     adc         cx,ax 
9510    89 F0                     mov         ax,si 
9512    E8 00 00                  call        memory_allowed_ 
9515    84 C0                     test        al,al 
9517    0F 84 6A C0               je          L$617 
951B    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
951E    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
9521    9A 00 00 00 00            call        unload_module_ 
9526    E9 57 C0                  jmp         L$615 
9529                          vpu_syscall_cmdmod_:
9529    53                        push        bx 
952A    51                        push        cx 
952B    56                        push        si 
952C    57                        push        di 
952D    C8 1A 00 00               enter       0x001a,0x00 
9531    89 C6                     mov         si,ax 
9533    89 56 FE                  mov         word ptr -0x2[bp],dx 
9536    8E DA                     mov         ds,dx 
9538    8B 44 14                  mov         ax,word ptr 0x14[si] 
953B    8B 7C 48                  mov         di,word ptr 0x48[si] 
953E    C1 E0 02                  shl         ax,0x02 
9541    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
9544    01 C7                     add         di,ax 
9546    8B 05                     mov         ax,word ptr [di] 
9548    8B 55 02                  mov         dx,word ptr 0x2[di] 
954B    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
954E    89 56 FC                  mov         word ptr -0x4[bp],dx 
9551    8B 54 02                  mov         dx,word ptr 0x2[si] 
9554    01 C2                     add         dx,ax 
9556    89 56 F8                  mov         word ptr -0x8[bp],dx 
9559    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
955C    89 56 F6                  mov         word ptr -0xa[bp],dx 
955F    8B 54 04                  mov         dx,word ptr 0x4[si] 
9562    01 C2                     add         dx,ax 
9564    C7 46 FA 00 00            mov         word ptr -0x6[bp],0x0000 
9569    89 56 F4                  mov         word ptr -0xc[bp],dx 
956C    F6 44 24 10               test        byte ptr 0x24[si],0x10 
9570    0F 84 BE 00               je          L$1022 
9574    8B 7E F8                  mov         di,word ptr -0x8[bp] 
9577    8E 46 FC                  mov         es,word ptr -0x4[bp] 
957A    B9 FF FF                  mov         cx,0xffff 
957D    33 C0                     xor         ax,ax 
957F    F2 AE                     repne scasb 
9581    F7 D1                     not         cx 
9583    49                        dec         cx 
9584    8B 7E F4                  mov         di,word ptr -0xc[bp] 
9587    89 CA                     mov         dx,cx 
9589    B9 FF FF                  mov         cx,0xffff 
958C    33 C0                     xor         ax,ax 
958E    F2 AE                     repne scasb 
9590    F7 D1                     not         cx 
9592    49                        dec         cx 
9593    89 CF                     mov         di,cx 
9595    8B 5C 02                  mov         bx,word ptr 0x2[si] 
9598    31 C0                     xor         ax,ax 
959A    31 C9                     xor         cx,cx 
959C    01 D3                     add         bx,dx 
959E    8C DA                     mov         dx,ds 
95A0    11 C1                     adc         cx,ax 
95A2    89 F0                     mov         ax,si 
95A4    E8 00 00                  call        memory_allowed_ 
95A7    84 C0                     test        al,al 
95A9    0F 84 D8 BF               je          L$617 
95AD    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
95B0    89 F0                     mov         ax,si 
95B2    31 C9                     xor         cx,cx 
95B4    8B 5C 04                  mov         bx,word ptr 0x4[si] 
95B7    8C DA                     mov         dx,ds 
95B9    01 FB                     add         bx,di 
95BB    11 C9                     adc         cx,cx 
95BD    E8 00 00                  call        memory_allowed_ 
95C0    84 C0                     test        al,al 
95C2    0F 84 BF BF               je          L$617 
95C6    6A 08                     push        0x0008 
95C8    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
95CB    8B 4E FC                  mov         cx,word ptr -0x4[bp] 
95CE    8D 46 E6                  lea         ax,-0x1a[bp] 
95D1    8C D2                     mov         dx,ss 
95D3    9A 00 00 00 00            call        strncpy_ 
95D8    8D 46 E6                  lea         ax,-0x1a[bp] 
95DB    8C D2                     mov         dx,ss 
95DD    C6 46 EE 00               mov         byte ptr -0x12[bp],0x00 
95E1    9A 00 00 00 00            call        driver_id_ 
95E6    89 C7                     mov         di,ax 
95E8    85 C0                     test        ax,ax 
95EA    7D 52                     jge         L$1023 
95EC    31 C7                     xor         di,ax 
95EE                          L$1020:
95EE    80 7B E6 61               cmp         byte ptr -0x1a[bp+di],0x61 
95F2    72 03                     jb          L$1021 
95F4    47                        inc         di 
95F5    EB F7                     jmp         L$1020 
95F7                          L$1021:
95F7    6A 10                     push        0x0010 
95F9    8D 46 E6                  lea         ax,-0x1a[bp] 
95FC    8D 5E F0                  lea         bx,-0x10[bp] 
95FF    8C D2                     mov         dx,ss 
9601    8C D1                     mov         cx,ss 
9603    01 F8                     add         ax,di 
9605    9A 00 00 00 00            call        strtoul_ 
960A    89 C1                     mov         cx,ax 
960C    89 46 FA                  mov         word ptr -0x6[bp],ax 
960F    8C D2                     mov         dx,ss 
9611    8D 46 E6                  lea         ax,-0x1a[bp] 
9614    C6 43 E6 00               mov         byte ptr -0x1a[bp+di],0x00 
9618    9A 00 00 00 00            call        driver_id_ 
961D    89 C7                     mov         di,ax 
961F    85 C0                     test        ax,ax 
9621    7C 0F                     jl          L$1022 
9623    6B D0 2E                  imul        dx,ax,0x002e 
9626    36 C5 1E 00 00            lds         bx,dword ptr ss:_drivers 
962B    01 D3                     add         bx,dx 
962D    3B 4F 06                  cmp         cx,word ptr 0x6[bx] 
9630    72 0C                     jb          L$1023 
9632                          L$1022:
9632    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9635    31 C0                     xor         ax,ax 
9637    C7 04 FF FF               mov         word ptr [si],0xffff 
963B    E9 C3 03                  jmp         L$1046 
963E                          L$1023:
963E    6B D7 2E                  imul        dx,di,0x002e 
9641    36 C5 1E 00 00            lds         bx,dword ptr ss:_drivers 
9646    01 D3                     add         bx,dx 
9648    31 C9                     xor         cx,cx 
964A    8B 5F 2C                  mov         bx,word ptr 0x2c[bx] 
964D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9650    8B 44 04                  mov         ax,word ptr 0x4[si] 
9653    8C DA                     mov         dx,ds 
9655    01 C3                     add         bx,ax 
9657    89 F0                     mov         ax,si 
9659    11 C9                     adc         cx,cx 
965B    E8 00 00                  call        memory_allowed_ 
965E    84 C0                     test        al,al 
9660    75 05                     jne         L$1024 
9662    30 E4                     xor         ah,ah 
9664    E9 9A 03                  jmp         L$1046 
9667                          L$1024:
9667    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
966A    8B 4E F6                  mov         cx,word ptr -0xa[bp] 
966D    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
9670    89 F8                     mov         ax,di 
9672    9A 00 00 00 00            call        dev_cmd_ 
9677    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
967A    89 04                     mov         word ptr [si],ax 
967C    3D FF FF                  cmp         ax,0xffff 
967F    0F 85 02 BF               jne         L$617 
9683    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
9686    89 F8                     mov         ax,di 
9688    9A 00 00 00 00            call        dev_geterror_ 
968D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9690    89 84 6E 01               mov         word ptr 0x16e[si],ax 
9694    E9 EE BE                  jmp         L$617 
9697                          vpu_syscall_dup_:
9697    53                        push        bx 
9698    51                        push        cx 
9699    56                        push        si 
969A    57                        push        di 
969B    C8 04 00 00               enter       0x0004,0x00 
969F    89 C6                     mov         si,ax 
96A1    89 56 FE                  mov         word ptr -0x2[bp],dx 
96A4    31 C9                     xor         cx,cx 
96A6    8E DA                     mov         ds,dx 
96A8    89 4E FC                  mov         word ptr -0x4[bp],cx 
96AB    8B 44 02                  mov         ax,word ptr 0x2[si] 
96AE                          L$1025:
96AE    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
96B1    8B 5C 64                  mov         bx,word ptr 0x64[si] 
96B4    03 5E FC                  add         bx,word ptr -0x4[bp] 
96B7    8E 5C 66                  mov         ds,word ptr 0x66[si] 
96BA    C5 3F                     lds         di,dword ptr [bx] 
96BC    F6 45 2A 01               test        byte ptr 0x2a[di],0x01 
96C0    74 0C                     je          L$1026 
96C2    83 F9 3C                  cmp         cx,0x003c 
96C5    73 07                     jae         L$1026 
96C7    83 46 FC 04               add         word ptr -0x4[bp],0x0004 
96CB    41                        inc         cx 
96CC    EB E0                     jmp         L$1025 
96CE                          L$1026:
96CE    83 F9 3C                  cmp         cx,0x003c 
96D1    0F 83 9C C2               jae         L$625 
96D5    3D 3C 00                  cmp         ax,0x003c 
96D8    0F 83 95 C2               jae         L$625 
96DC    89 C7                     mov         di,ax 
96DE    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
96E1    C1 E7 02                  shl         di,0x02 
96E4    C5 5C 64                  lds         bx,dword ptr 0x64[si] 
96E7    01 FB                     add         bx,di 
96E9    C5 3F                     lds         di,dword ptr [bx] 
96EB    F6 45 2A 01               test        byte ptr 0x2a[di],0x01 
96EF    0F 84 7E C2               je          L$625 
96F3    50                        push        ax 
96F4                          L$1027:
96F4    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
96F7    FF 76 FE                  push        word ptr -0x2[bp] 
96FA    89 CB                     mov         bx,cx 
96FC    56                        push        si 
96FD    89 F0                     mov         ax,si 
96FF    E8 00 00                  call        vpu_fd_makedup_ 
9702                          L$1028:
9702    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9705    89 0C                     mov         word ptr [si],cx 
9707    E9 7B BE                  jmp         L$617 
970A                          vpu_syscall_dup2_:
970A    53                        push        bx 
970B    51                        push        cx 
970C    56                        push        si 
970D    57                        push        di 
970E    C8 02 00 00               enter       0x0002,0x00 
9712    89 C6                     mov         si,ax 
9714    89 56 FE                  mov         word ptr -0x2[bp],dx 
9717    8E DA                     mov         ds,dx 
9719    8B 7C 02                  mov         di,word ptr 0x2[si] 
971C    8B 4C 04                  mov         cx,word ptr 0x4[si] 
971F    83 FF 3C                  cmp         di,0x003c 
9722    0F 83 4B C2               jae         L$625 
9726    83 F9 3C                  cmp         cx,0x003c 
9729    0F 83 44 C2               jae         L$625 
972D    89 FB                     mov         bx,di 
972F    8B 44 64                  mov         ax,word ptr 0x64[si] 
9732    C1 E3 02                  shl         bx,0x02 
9735    8E 5C 66                  mov         ds,word ptr 0x66[si] 
9738    01 C3                     add         bx,ax 
973A    C4 17                     les         dx,dword ptr [bx] 
973C    89 D3                     mov         bx,dx 
973E    26 F6 47 2A 01            test        byte ptr es:0x2a[bx],0x01 
9743    0F 84 2A C2               je          L$625 
9747    39 CF                     cmp         di,cx 
9749    75 0A                     jne         L$1029 
974B    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
974E    31 C0                     xor         ax,ax 
9750    89 0C                     mov         word ptr [si],cx 
9752    E9 AC 02                  jmp         L$1046 
9755                          L$1029:
9755    89 CB                     mov         bx,cx 
9757    C1 E3 02                  shl         bx,0x02 
975A    01 C3                     add         bx,ax 
975C    C5 07                     lds         ax,dword ptr [bx] 
975E    89 C3                     mov         bx,ax 
9760    F6 47 2A 01               test        byte ptr 0x2a[bx],0x01 
9764    74 0A                     je          L$1030 
9766    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
9769    89 CB                     mov         bx,cx 
976B    89 F0                     mov         ax,si 
976D    E8 00 00                  call        vpu_fd_close_ 
9770                          L$1030:
9770    57                        push        di 
9771    EB 81                     jmp         L$1027 
9773                          vpu_syscall_pipe_:
9773    53                        push        bx 
9774    51                        push        cx 
9775    56                        push        si 
9776    57                        push        di 
9777    C8 0C 00 00               enter       0x000c,0x00 
977B    89 C6                     mov         si,ax 
977D    89 56 FE                  mov         word ptr -0x2[bp],dx 
9780    31 FF                     xor         di,di 
9782    31 C0                     xor         ax,ax 
9784                          L$1031:
9784    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9787    C5 5C 64                  lds         bx,dword ptr 0x64[si] 
978A    01 C3                     add         bx,ax 
978C    C5 17                     lds         dx,dword ptr [bx] 
978E    89 D3                     mov         bx,dx 
9790    F6 47 2A 01               test        byte ptr 0x2a[bx],0x01 
9794    74 0B                     je          L$1032 
9796    83 FF 3C                  cmp         di,0x003c 
9799    73 06                     jae         L$1032 
979B    05 04 00                  add         ax,0x0004 
979E    47                        inc         di 
979F    EB E3                     jmp         L$1031 
97A1                          L$1032:
97A1    8D 4D 01                  lea         cx,0x1[di] 
97A4    89 C8                     mov         ax,cx 
97A6    C1 E0 02                  shl         ax,0x02 
97A9                          L$1033:
97A9    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
97AC    C5 5C 64                  lds         bx,dword ptr 0x64[si] 
97AF    01 C3                     add         bx,ax 
97B1    C5 17                     lds         dx,dword ptr [bx] 
97B3    89 D3                     mov         bx,dx 
97B5    F6 47 2A 01               test        byte ptr 0x2a[bx],0x01 
97B9    74 0B                     je          L$1034 
97BB    83 F9 3C                  cmp         cx,0x003c 
97BE    73 06                     jae         L$1034 
97C0    05 04 00                  add         ax,0x0004 
97C3    41                        inc         cx 
97C4    EB E3                     jmp         L$1033 
97C6                          L$1034:
97C6    83 F9 3C                  cmp         cx,0x003c 
97C9    73 16                     jae         L$1035 
97CB    B8 00 02                  mov         ax,0x0200 
97CE    9A 00 00 00 00            call        malloc_ 
97D3    89 46 FA                  mov         word ptr -0x6[bp],ax 
97D6    89 56 FC                  mov         word ptr -0x4[bp],dx 
97D9    85 D2                     test        dx,dx 
97DB    75 10                     jne         L$1036 
97DD    85 C0                     test        ax,ax 
97DF    75 0C                     jne         L$1036 
97E1                          L$1035:
97E1    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
97E4    31 C0                     xor         ax,ax 
97E6    C7 04 FF FF               mov         word ptr [si],0xffff 
97EA    E9 14 02                  jmp         L$1046 
97ED                          L$1036:
97ED    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
97F0    89 FB                     mov         bx,di 
97F2    89 F0                     mov         ax,si 
97F4    E8 00 00                  call        reset_fd_ 
97F7    89 F8                     mov         ax,di 
97F9    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
97FC    C1 E0 02                  shl         ax,0x02 
97FF    C5 5C 64                  lds         bx,dword ptr 0x64[si] 
9802    01 C3                     add         bx,ax 
9804    89 46 F4                  mov         word ptr -0xc[bp],ax 
9807    C5 17                     lds         dx,dword ptr [bx] 
9809    89 D3                     mov         bx,dx 
980B    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
980E    89 47 20                  mov         word ptr 0x20[bx],ax 
9811    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
9814    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
9817    89 47 22                  mov         word ptr 0x22[bx],ax 
981A    89 CB                     mov         bx,cx 
981C    89 F0                     mov         ax,si 
981E    E8 00 00                  call        reset_fd_ 
9821    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9824    8B 46 F4                  mov         ax,word ptr -0xc[bp] 
9827    8B 5C 64                  mov         bx,word ptr 0x64[si] 
982A    01 D8                     add         ax,bx 
982C    89 46 F6                  mov         word ptr -0xa[bp],ax 
982F    89 C8                     mov         ax,cx 
9831    C1 E0 02                  shl         ax,0x02 
9834    8E 5C 66                  mov         ds,word ptr 0x66[si] 
9837    01 C3                     add         bx,ax 
9839    1E                        push        ds 
983A    07                        pop         es 
983B    C5 17                     lds         dx,dword ptr [bx] 
983D    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
9840    89 56 F6                  mov         word ptr -0xa[bp],dx 
9843    26 8B 17                  mov         dx,word ptr es:[bx] 
9846    89 56 F8                  mov         word ptr -0x8[bp],dx 
9849    26 8B 57 02               mov         dx,word ptr es:0x2[bx] 
984D    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
9850    89 56 F6                  mov         word ptr -0xa[bp],dx 
9853    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
9856    89 57 18                  mov         word ptr 0x18[bx],dx 
9859    8B 56 F6                  mov         dx,word ptr -0xa[bp] 
985C    89 57 1A                  mov         word ptr 0x1a[bx],dx 
985F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9862    C5 5C 64                  lds         bx,dword ptr 0x64[si] 
9865    89 DA                     mov         dx,bx 
9867    1E                        push        ds 
9868    07                        pop         es 
9869    01 C2                     add         dx,ax 
986B    03 5E F4                  add         bx,word ptr -0xc[bp] 
986E    89 56 F6                  mov         word ptr -0xa[bp],dx 
9871    C5 17                     lds         dx,dword ptr [bx] 
9873    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
9876    89 56 F8                  mov         word ptr -0x8[bp],dx 
9879    26 8B 17                  mov         dx,word ptr es:[bx] 
987C    89 56 F6                  mov         word ptr -0xa[bp],dx 
987F    26 8B 57 02               mov         dx,word ptr es:0x2[bx] 
9883    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
9886    89 56 F8                  mov         word ptr -0x8[bp],dx 
9889    8B 56 F6                  mov         dx,word ptr -0xa[bp] 
988C    89 57 1C                  mov         word ptr 0x1c[bx],dx 
988F    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
9892    89 57 1E                  mov         word ptr 0x1e[bx],dx 
9895    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9898    C5 5C 64                  lds         bx,dword ptr 0x64[si] 
989B    01 C3                     add         bx,ax 
989D    C5 07                     lds         ax,dword ptr [bx] 
989F    89 C3                     mov         bx,ax 
98A1    C6 47 0A 0A               mov         byte ptr 0xa[bx],0x0a 
98A5    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
98A8    8B 5C 64                  mov         bx,word ptr 0x64[si] 
98AB    03 5E F4                  add         bx,word ptr -0xc[bp] 
98AE    8E 5C 66                  mov         ds,word ptr 0x66[si] 
98B1    C5 07                     lds         ax,dword ptr [bx] 
98B3    89 C3                     mov         bx,ax 
98B5    C6 47 0A 0B               mov         byte ptr 0xa[bx],0x0b 
98B9    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
98BC    C7 04 00 00               mov         word ptr [si],0x0000 
98C0    89 7C 02                  mov         word ptr 0x2[si],di 
98C3    31 C0                     xor         ax,ax 
98C5    89 4C 04                  mov         word ptr 0x4[si],cx 
98C8    E9 36 01                  jmp         L$1046 
98CB                          vpu_syscall_mkdir_:
98CB    53                        push        bx 
98CC    51                        push        cx 
98CD    56                        push        si 
98CE    57                        push        di 
98CF    C8 06 00 00               enter       0x0006,0x00 
98D3    89 C6                     mov         si,ax 
98D5    89 56 FE                  mov         word ptr -0x2[bp],dx 
98D8    8E DA                     mov         ds,dx 
98DA    8B 44 14                  mov         ax,word ptr 0x14[si] 
98DD    8B 5C 48                  mov         bx,word ptr 0x48[si] 
98E0    C1 E0 02                  shl         ax,0x02 
98E3    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
98E6    01 C3                     add         bx,ax 
98E8    8B 07                     mov         ax,word ptr [bx] 
98EA    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
98ED    8E DA                     mov         ds,dx 
98EF    89 5E FC                  mov         word ptr -0x4[bp],bx 
98F2    8B 5C 02                  mov         bx,word ptr 0x2[si] 
98F5    01 C3                     add         bx,ax 
98F7    8E 46 FC                  mov         es,word ptr -0x4[bp] 
98FA    89 DF                     mov         di,bx 
98FC    89 5E FA                  mov         word ptr -0x6[bp],bx 
98FF    B9 FF FF                  mov         cx,0xffff 
9902    33 C0                     xor         ax,ax 
9904    F2 AE                     repne scasb 
9906    F7 D1                     not         cx 
9908    49                        dec         cx 
9909    89 CF                     mov         di,cx 
990B    89 F0                     mov         ax,si 
990D    8B 5C 02                  mov         bx,word ptr 0x2[si] 
9910    47                        inc         di 
9911    31 C9                     xor         cx,cx 
9913    01 FB                     add         bx,di 
9915    11 C9                     adc         cx,cx 
9917    E8 00 00                  call        memory_allowed_ 
991A    84 C0                     test        al,al 
991C    75 05                     jne         L$1037 
991E    30 E4                     xor         ah,ah 
9920    E9 DE 00                  jmp         L$1046 
9923                          L$1037:
9923    83 FF 50                  cmp         di,0x0050 
9926    76 0C                     jbe         L$1038 
9928    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
992B    31 C0                     xor         ax,ax 
992D    C7 04 FF FF               mov         word ptr [si],0xffff 
9931    E9 CD 00                  jmp         L$1046 
9934                          L$1038:
9934    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
9937    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
993A    9A 00 00 00 00            call        mkdir_ 
993F    E9 3E BC                  jmp         L$615 
9942                          vpu_syscall_sendfd_:
9942    53                        push        bx 
9943    51                        push        cx 
9944    56                        push        si 
9945    57                        push        di 
9946    C8 04 00 00               enter       0x0004,0x00 
994A    89 C6                     mov         si,ax 
994C    89 56 FE                  mov         word ptr -0x2[bp],dx 
994F    8E DA                     mov         ds,dx 
9951    8B 44 02                  mov         ax,word ptr 0x2[si] 
9954    E8 00 00                  call        pid_to_vpu_ 
9957    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
995A    89 C1                     mov         cx,ax 
995C    89 C7                     mov         di,ax 
995E    89 56 FC                  mov         word ptr -0x4[bp],dx 
9961    8B 5C 04                  mov         bx,word ptr 0x4[si] 
9964    85 D2                     test        dx,dx 
9966    75 11                     jne         L$1040 
9968    85 C0                     test        ax,ax 
996A    75 0D                     jne         L$1040 
996C                          L$1039:
996C    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
996F    B8 03 00                  mov         ax,0x0003 
9972    C7 04 FF FF               mov         word ptr [si],0xffff 
9976    E9 88 00                  jmp         L$1046 
9979                          L$1040:
9979    C1 E3 02                  shl         bx,0x02 
997C    C5 44 64                  lds         ax,dword ptr 0x64[si] 
997F    01 C3                     add         bx,ax 
9981    C5 07                     lds         ax,dword ptr [bx] 
9983    89 C3                     mov         bx,ax 
9985    F6 47 2A 01               test        byte ptr 0x2a[bx],0x01 
9989    74 E1                     je          L$1039 
998B    8E DA                     mov         ds,dx 
998D    89 CB                     mov         bx,cx 
998F    81 7F 62 84 00            cmp         word ptr 0x62[bx],0x0084 
9994    72 D6                     jb          L$1039 
9996    C5 47 5E                  lds         ax,dword ptr 0x5e[bx] 
9999    89 C3                     mov         bx,ax 
999B    83 BF 12 02 00            cmp         word ptr 0x212[bx],0x0000 
99A0    74 CA                     je          L$1039 
99A2    31 C9                     xor         cx,cx 
99A4    31 C0                     xor         ax,ax 
99A6                          L$1041:
99A6    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
99A9    C5 5D 64                  lds         bx,dword ptr 0x64[di] 
99AC    01 C3                     add         bx,ax 
99AE    C5 17                     lds         dx,dword ptr [bx] 
99B0    89 D3                     mov         bx,dx 
99B2    F6 47 2A 01               test        byte ptr 0x2a[bx],0x01 
99B6    74 0B                     je          L$1042 
99B8    3D F0 00                  cmp         ax,0x00f0 
99BB    74 AF                     je          L$1039 
99BD    05 04 00                  add         ax,0x0004 
99C0    41                        inc         cx 
99C1    EB E3                     jmp         L$1041 
99C3                          L$1042:
99C3    BB 84 00                  mov         bx,0x0084 
99C6    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
99C9    89 F8                     mov         ax,di 
99CB    0E                        push        cs 
99CC    E8 00 00                  call        send_vpu_signal_ 
99CF    85 C0                     test        ax,ax 
99D1    74 0B                     je          L$1043 
99D3    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
99D6    FF 4C 12                  dec         word ptr 0x12[si] 
99D9    80 8C 8B 01 02            or          byte ptr 0x18b[si],0x02 
99DE                          L$1043:
99DE    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
99E1    FF 74 04                  push        word ptr 0x4[si] 
99E4    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
99E7    1E                        push        ds 
99E8    89 CB                     mov         bx,cx 
99EA    56                        push        si 
99EB    89 F8                     mov         ax,di 
99ED    E8 00 00                  call        vpu_fd_makedup_ 
99F0    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
99F3    C5 5D 58                  lds         bx,dword ptr 0x58[di] 
99F6    89 0F                     mov         word ptr [bx],cx 
99F8                          L$1044:
99F8    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
99FB                          L$1045:
99FB    31 C0                     xor         ax,ax 
99FD    C7 04 00 00               mov         word ptr [si],0x0000 
9A01                          L$1046:
9A01    C9                        leave       
9A02                          L$1047:
9A02    5F                        pop         di 
9A03                          L$1048:
9A03    5E                        pop         si 
9A04    59                        pop         cx 
9A05    5B                        pop         bx 
9A06    CB                        retf        
9A07                          vpu_syscall_sethwint_:
9A07    53                        push        bx 
9A08    51                        push        cx 
9A09    56                        push        si 
9A0A    57                        push        di 
9A0B    89 C6                     mov         si,ax 
9A0D    89 D7                     mov         di,dx 
9A0F    8E DA                     mov         ds,dx 
9A11    8B 5C 02                  mov         bx,word ptr 0x2[si] 
9A14    8B 4C 04                  mov         cx,word ptr 0x4[si] 
9A17    FF 74 06                  push        word ptr 0x6[si] 
9A1A    30 FF                     xor         bh,bh 
9A1C    E8 00 00                  call        set_vpu_hw_int_ 
9A1F    85 C0                     test        ax,ax 
9A21    75 09                     jne         L$1049 
9A23    8E DF                     mov         ds,di 
9A25    C7 04 FF FF               mov         word ptr [si],0xffff 
9A29    E9 65 E3                  jmp         L$896 
9A2C                          L$1049:
9A2C    8E DF                     mov         ds,di 
9A2E    C7 04 00 00               mov         word ptr [si],0x0000 
9A32    E9 5C E3                  jmp         L$896 
9A35                          vpu_syscall_unsethwint_:
9A35    53                        push        bx 
9A36    51                        push        cx 
9A37    56                        push        si 
9A38    57                        push        di 
9A39    C8 04 00 00               enter       0x0004,0x00 
9A3D    89 C6                     mov         si,ax 
9A3F    89 56 FE                  mov         word ptr -0x2[bp],dx 
9A42    8E DA                     mov         ds,dx 
9A44    8B 44 02                  mov         ax,word ptr 0x2[si] 
9A47    89 46 FC                  mov         word ptr -0x4[bp],ax 
9A4A    36 A1 00 00               mov         ax,word ptr ss:_vpu_hwint_count 
9A4E    89 C2                     mov         dx,ax 
9A50    36 8E 1E 02 00            mov         ds,word ptr ss:_vpu_hardware_int_table+0x2 
9A55    C1 E2 04                  shl         dx,0x04 
9A58                          L$1050:
9A58    48                        dec         ax 
9A59    83 EA 10                  sub         dx,0x0010 
9A5C    3D FF FF                  cmp         ax,0xffff 
9A5F    0F 84 1D BB               je          L$615 
9A63    36 8B 1E 00 00            mov         bx,word ptr ss:_vpu_hardware_int_table 
9A68    01 D3                     add         bx,dx 
9A6A    8B 4F 06                  mov         cx,word ptr 0x6[bx] 
9A6D    8B 7F 04                  mov         di,word ptr 0x4[bx] 
9A70    3B 4E FE                  cmp         cx,word ptr -0x2[bp] 
9A73    75 E3                     jne         L$1050 
9A75    39 F7                     cmp         di,si 
9A77    75 DF                     jne         L$1050 
9A79    0F B6 0F                  movzx       cx,byte ptr [bx] 
9A7C    3B 4E FC                  cmp         cx,word ptr -0x4[bp] 
9A7F    75 D7                     jne         L$1050 
9A81    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
9A84    89 F0                     mov         ax,si 
9A86    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
9A89    E8 00 00                  call        remove_vpu_hw_int_ 
9A8C    E9 69 FF                  jmp         L$1044 
9A8F                          vpu_syscall_geterrno_:
9A8F    53                        push        bx 
9A90    89 C3                     mov         bx,ax 
9A92    8E DA                     mov         ds,dx 
9A94    8B 87 6E 01               mov         ax,word ptr 0x16e[bx] 
9A98    E9 BC E3                  jmp         L$902 
9A9B                          vpu_syscall_seterrno_:
9A9B    53                        push        bx 
9A9C    89 C3                     mov         bx,ax 
9A9E    8E DA                     mov         ds,dx 
9AA0    8B 47 02                  mov         ax,word ptr 0x2[bx] 
9AA3    89 87 6E 01               mov         word ptr 0x16e[bx],ax 
9AA7    E9 AF E3                  jmp         L$903 
9AAA                          vpu_syscall_unlink_:
9AAA    53                        push        bx 
9AAB    51                        push        cx 
9AAC    56                        push        si 
9AAD    57                        push        di 
9AAE    C8 06 00 00               enter       0x0006,0x00 
9AB2    89 C6                     mov         si,ax 
9AB4    89 56 FE                  mov         word ptr -0x2[bp],dx 
9AB7    8E DA                     mov         ds,dx 
9AB9    8B 5C 14                  mov         bx,word ptr 0x14[si] 
9ABC    8B 44 48                  mov         ax,word ptr 0x48[si] 
9ABF    C1 E3 02                  shl         bx,0x02 
9AC2    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
9AC5    01 C3                     add         bx,ax 
9AC7    8B 07                     mov         ax,word ptr [bx] 
9AC9    8B 57 02                  mov         dx,word ptr 0x2[bx] 
9ACC    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9ACF    89 56 FC                  mov         word ptr -0x4[bp],dx 
9AD2    8B 54 02                  mov         dx,word ptr 0x2[si] 
9AD5    01 C2                     add         dx,ax 
9AD7    8B 5C 02                  mov         bx,word ptr 0x2[si] 
9ADA    89 56 FA                  mov         word ptr -0x6[bp],dx 
9ADD    C4 7E FA                  les         di,dword ptr -0x6[bp] 
9AE0    B9 FF FF                  mov         cx,0xffff 
9AE3    33 C0                     xor         ax,ax 
9AE5    F2 AE                     repne scasb 
9AE7    F7 D1                     not         cx 
9AE9    49                        dec         cx 
9AEA    31 D2                     xor         dx,dx 
9AEC    01 CB                     add         bx,cx 
9AEE    89 D1                     mov         cx,dx 
9AF0    89 F0                     mov         ax,si 
9AF2    11 D1                     adc         cx,dx 
9AF4    8C DA                     mov         dx,ds 
9AF6    E8 00 00                  call        memory_allowed_ 
9AF9    84 C0                     test        al,al 
9AFB    75 05                     jne         L$1051 
9AFD    30 E4                     xor         ah,ah 
9AFF    E9 FF FE                  jmp         L$1046 
9B02                          L$1051:
9B02    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
9B05    89 F0                     mov         ax,si 
9B07    9A 00 00 00 00            call        vpu_cwd_ 
9B0C    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
9B0F    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
9B12    9A 00 00 00 00            call        remove_ 
9B17                          L$1052:
9B17    85 C0                     test        ax,ax 
9B19    75 08                     jne         L$1053 
9B1B    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9B1E    89 04                     mov         word ptr [si],ax 
9B20    E9 DE FE                  jmp         L$1046 
9B23                          L$1053:
9B23    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9B26    C7 04 FF FF               mov         word ptr [si],0xffff 
9B2A    9A 00 00 00 00            call        __get_errno_ptr_ 
9B2F    89 C3                     mov         bx,ax 
9B31    8E DA                     mov         ds,dx 
9B33    8B 07                     mov         ax,word ptr [bx] 
9B35    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9B38    89 84 6E 01               mov         word ptr 0x16e[si],ax 
9B3C    E9 28 E4                  jmp         L$904 
9B3F                          vpu_syscall_rmdir_:
9B3F    53                        push        bx 
9B40    51                        push        cx 
9B41    56                        push        si 
9B42    57                        push        di 
9B43    C8 06 00 00               enter       0x0006,0x00 
9B47    89 C6                     mov         si,ax 
9B49    89 56 FE                  mov         word ptr -0x2[bp],dx 
9B4C    8E DA                     mov         ds,dx 
9B4E    8B 5C 14                  mov         bx,word ptr 0x14[si] 
9B51    8B 44 48                  mov         ax,word ptr 0x48[si] 
9B54    C1 E3 02                  shl         bx,0x02 
9B57    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
9B5A    01 C3                     add         bx,ax 
9B5C    8B 07                     mov         ax,word ptr [bx] 
9B5E    8B 57 02                  mov         dx,word ptr 0x2[bx] 
9B61    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9B64    89 56 FC                  mov         word ptr -0x4[bp],dx 
9B67    8B 54 02                  mov         dx,word ptr 0x2[si] 
9B6A    01 C2                     add         dx,ax 
9B6C    8B 5C 02                  mov         bx,word ptr 0x2[si] 
9B6F    89 56 FA                  mov         word ptr -0x6[bp],dx 
9B72    C4 7E FA                  les         di,dword ptr -0x6[bp] 
9B75    B9 FF FF                  mov         cx,0xffff 
9B78    33 C0                     xor         ax,ax 
9B7A    F2 AE                     repne scasb 
9B7C    F7 D1                     not         cx 
9B7E    49                        dec         cx 
9B7F    31 D2                     xor         dx,dx 
9B81    01 CB                     add         bx,cx 
9B83    89 D1                     mov         cx,dx 
9B85    89 F0                     mov         ax,si 
9B87    11 D1                     adc         cx,dx 
9B89    83 C3 01                  add         bx,0x0001 
9B8C    11 D1                     adc         cx,dx 
9B8E    8C DA                     mov         dx,ds 
9B90    E8 00 00                  call        memory_allowed_ 
9B93    84 C0                     test        al,al 
9B95    75 05                     jne         L$1054 
9B97    30 E4                     xor         ah,ah 
9B99    E9 65 FE                  jmp         L$1046 
9B9C                          L$1054:
9B9C    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
9B9F    89 F0                     mov         ax,si 
9BA1    9A 00 00 00 00            call        vpu_cwd_ 
9BA6    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
9BA9    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
9BAC    9A 00 00 00 00            call        rmdir_ 
9BB1    E9 63 FF                  jmp         L$1052 
9BB4                          vpu_syscall_setprivs_:
9BB4    53                        push        bx 
9BB5    51                        push        cx 
9BB6    56                        push        si 
9BB7    57                        push        di 
9BB8    89 C3                     mov         bx,ax 
9BBA    89 D7                     mov         di,dx 
9BBC    8E DA                     mov         ds,dx 
9BBE    8B 47 02                  mov         ax,word ptr 0x2[bx] 
9BC1    8B 4F 04                  mov         cx,word ptr 0x4[bx] 
9BC4    F6 47 24 80               test        byte ptr 0x24[bx],0x80 
9BC8    74 23                     je          L$1057 
9BCA    85 C0                     test        ax,ax 
9BCC    75 04                     jne         L$1055 
9BCE    8B 87 88 01               mov         ax,word ptr 0x188[bx] 
9BD2                          L$1055:
9BD2    E8 00 00                  call        pid_to_vpu_ 
9BD5    89 C6                     mov         si,ax 
9BD7    85 D2                     test        dx,dx 
9BD9    75 04                     jne         L$1056 
9BDB    85 C0                     test        ax,ax 
9BDD    74 0E                     je          L$1057 
9BDF                          L$1056:
9BDF    8E DA                     mov         ds,dx 
9BE1    88 4C 24                  mov         byte ptr 0x24[si],cl 
9BE4    8E DF                     mov         ds,di 
9BE6    C7 07 00 00               mov         word ptr [bx],0x0000 
9BEA    E9 A4 E1                  jmp         L$896 
9BED                          L$1057:
9BED    8E DF                     mov         ds,di 
9BEF    C7 07 FF FF               mov         word ptr [bx],0xffff 
9BF3    E9 9B E1                  jmp         L$896 
9BF6                          vpu_syscall_getkernelparm_:
9BF6    53                        push        bx 
9BF7    56                        push        si 
9BF8    57                        push        di 
9BF9    89 C3                     mov         bx,ax 
9BFB    8E DA                     mov         ds,dx 
9BFD    F6 47 24 04               test        byte ptr 0x24[bx],0x04 
9C01    74 1A                     je          L$1058 
9C03    8B 47 02                  mov         ax,word ptr 0x2[bx] 
9C06    3D 03 00                  cmp         ax,0x0003 
9C09    73 12                     jae         L$1058 
9C0B    89 C6                     mov         si,ax 
9C0D    C1 E6 02                  shl         si,0x02 
9C10    36 C4 BC 00 00            les         di,dword ptr ss:_kernel_parm[si] 
9C15    26 8B 35                  mov         si,word ptr es:[di] 
9C18    89 37                     mov         word ptr [bx],si 
9C1A    E9 9C AB                  jmp         L$564 
9C1D                          L$1058:
9C1D    C7 07 FF FF               mov         word ptr [bx],0xffff 
9C21    E9 95 AB                  jmp         L$564 
9C24                          vpu_syscall_setkernelparm_:
9C24    53                        push        bx 
9C25    56                        push        si 
9C26    57                        push        di 
9C27    89 C3                     mov         bx,ax 
9C29    8E DA                     mov         ds,dx 
9C2B    F6 47 24 20               test        byte ptr 0x24[bx],0x20 
9C2F    74 EC                     je          L$1058 
9C31    8B 47 02                  mov         ax,word ptr 0x2[bx] 
9C34    3D 03 00                  cmp         ax,0x0003 
9C37    73 E4                     jae         L$1058 
9C39    89 C6                     mov         si,ax 
9C3B    C1 E6 02                  shl         si,0x02 
9C3E    36 C4 BC 00 00            les         di,dword ptr ss:_kernel_parm[si] 
9C43    8B 77 04                  mov         si,word ptr 0x4[bx] 
9C46    26 89 35                  mov         word ptr es:[di],si 
9C49    C7 07 00 00               mov         word ptr [bx],0x0000 
9C4D    E9 69 AB                  jmp         L$564 
9C50                          vpu_syscall_getcwd_:
9C50    53                        push        bx 
9C51    51                        push        cx 
9C52    56                        push        si 
9C53    57                        push        di 
9C54    C8 06 00 00               enter       0x0006,0x00 
9C58    89 C6                     mov         si,ax 
9C5A    89 56 FE                  mov         word ptr -0x2[bp],dx 
9C5D    8E DA                     mov         ds,dx 
9C5F    8B 44 14                  mov         ax,word ptr 0x14[si] 
9C62    8B 5C 48                  mov         bx,word ptr 0x48[si] 
9C65    C1 E0 02                  shl         ax,0x02 
9C68    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
9C6B    01 C3                     add         bx,ax 
9C6D    31 C9                     xor         cx,cx 
9C6F    8B 3F                     mov         di,word ptr [bx] 
9C71    8B 47 02                  mov         ax,word ptr 0x2[bx] 
9C74    8E DA                     mov         ds,dx 
9C76    89 46 FC                  mov         word ptr -0x4[bp],ax 
9C79    8B 44 04                  mov         ax,word ptr 0x4[si] 
9C7C    8B 5C 02                  mov         bx,word ptr 0x2[si] 
9C7F    03 7C 02                  add         di,word ptr 0x2[si] 
9C82    89 46 FA                  mov         word ptr -0x6[bp],ax 
9C85    31 C0                     xor         ax,ax 
9C87    03 5E FA                  add         bx,word ptr -0x6[bp] 
9C8A    11 C1                     adc         cx,ax 
9C8C    89 F0                     mov         ax,si 
9C8E    E8 00 00                  call        memory_allowed_ 
9C91    84 C0                     test        al,al 
9C93    75 0C                     jne         L$1059 
9C95    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9C98    30 E4                     xor         ah,ah 
9C9A    C7 04 FF FF               mov         word ptr [si],0xffff 
9C9E    E9 60 FD                  jmp         L$1046 
9CA1                          L$1059:
9CA1    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9CA4    8E 46 FC                  mov         es,word ptr -0x4[bp] 
9CA7    89 F3                     mov         bx,si 
9CA9    31 C0                     xor         ax,ax 
9CAB                          L$1060:
9CAB    80 BF CC 00 00            cmp         byte ptr 0xcc[bx],0x00 
9CB0    0F 84 CC B8               je          L$615 
9CB4    3B 46 FA                  cmp         ax,word ptr -0x6[bp] 
9CB7    0F 83 C5 B8               jae         L$615 
9CBB    8A 8F CC 00               mov         cl,byte ptr 0xcc[bx] 
9CBF    43                        inc         bx 
9CC0    40                        inc         ax 
9CC1    26 88 0D                  mov         byte ptr es:[di],cl 
9CC4    47                        inc         di 
9CC5    EB E4                     jmp         L$1060 
9CC7                          vpu_syscall_powersave_:
9CC7    53                        push        bx 
9CC8    89 C3                     mov         bx,ax 
9CCA    8E DA                     mov         ds,dx 
9CCC    B8 03 00                  mov         ax,0x0003 
9CCF    80 8F 8B 01 02            or          byte ptr 0x18b[bx],0x02 
9CD4    5B                        pop         bx 
9CD5    CB                        retf        
9CD6                          vpu_syscall_getenv_:
9CD6    53                        push        bx 
9CD7    51                        push        cx 
9CD8    56                        push        si 
9CD9    57                        push        di 
9CDA    C8 06 00 00               enter       0x0006,0x00 
9CDE    89 C6                     mov         si,ax 
9CE0    89 56 FE                  mov         word ptr -0x2[bp],dx 
9CE3    8E DA                     mov         ds,dx 
9CE5    8B 44 02                  mov         ax,word ptr 0x2[si] 
9CE8    89 46 FA                  mov         word ptr -0x6[bp],ax 
9CEB    8B 44 06                  mov         ax,word ptr 0x6[si] 
9CEE    89 46 FC                  mov         word ptr -0x4[bp],ax 
9CF1    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
9CF4    8B 7C 04                  mov         di,word ptr 0x4[si] 
9CF7    3B 44 70                  cmp         ax,word ptr 0x70[si] 
9CFA    72 07                     jb          L$1061 
9CFC    C7 04 FF FF               mov         word ptr [si],0xffff 
9D00    E9 64 E2                  jmp         L$904 
9D03                          L$1061:
9D03    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
9D06    31 C0                     xor         ax,ax 
9D08    31 C9                     xor         cx,cx 
9D0A    01 FB                     add         bx,di 
9D0C    11 C1                     adc         cx,ax 
9D0E    89 F0                     mov         ax,si 
9D10    E8 00 00                  call        memory_allowed_ 
9D13    84 C0                     test        al,al 
9D15    0F 84 4E E2               je          L$904 
9D19    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
9D1C    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9D1F    C1 E3 02                  shl         bx,0x02 
9D22    C5 44 6C                  lds         ax,dword ptr 0x6c[si] 
9D25    01 C3                     add         bx,ax 
9D27    57                        push        di 
9D28    8B 3F                     mov         di,word ptr [bx] 
9D2A    8B 4F 02                  mov         cx,word ptr 0x2[bx] 
9D2D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9D30    8B 44 14                  mov         ax,word ptr 0x14[si] 
9D33    8B 54 48                  mov         dx,word ptr 0x48[si] 
9D36    C1 E0 02                  shl         ax,0x02 
9D39    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
9D3C    89 D6                     mov         si,dx 
9D3E    01 C6                     add         si,ax 
9D40    89 FB                     mov         bx,di 
9D42    8B 04                     mov         ax,word ptr [si] 
9D44    8B 54 02                  mov         dx,word ptr 0x2[si] 
9D47    03 46 FC                  add         ax,word ptr -0x4[bp] 
9D4A    9A 00 00 00 00            call        strncpy_ 
9D4F    E9 15 E2                  jmp         L$904 
9D52                          vpu_syscall_setenv_:
9D52    53                        push        bx 
9D53    51                        push        cx 
9D54    56                        push        si 
9D55    57                        push        di 
9D56    C8 10 00 00               enter       0x0010,0x00 
9D5A    89 C6                     mov         si,ax 
9D5C    89 56 FE                  mov         word ptr -0x2[bp],dx 
9D5F    8E DA                     mov         ds,dx 
9D61    8B 54 02                  mov         dx,word ptr 0x2[si] 
9D64    8B 44 04                  mov         ax,word ptr 0x4[si] 
9D67    8B 5C 14                  mov         bx,word ptr 0x14[si] 
9D6A    89 46 F8                  mov         word ptr -0x8[bp],ax 
9D6D    8B 44 06                  mov         ax,word ptr 0x6[si] 
9D70    C1 E3 02                  shl         bx,0x02 
9D73    89 46 FA                  mov         word ptr -0x6[bp],ax 
9D76    C5 44 48                  lds         ax,dword ptr 0x48[si] 
9D79    01 C3                     add         bx,ax 
9D7B    8B 07                     mov         ax,word ptr [bx] 
9D7D    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
9D80    89 5E FC                  mov         word ptr -0x4[bp],bx 
9D83    89 5E F4                  mov         word ptr -0xc[bp],bx 
9D86    89 C3                     mov         bx,ax 
9D88    01 D3                     add         bx,dx 
9D8A    89 5E F0                  mov         word ptr -0x10[bp],bx 
9D8D    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
9D90    8E 46 FC                  mov         es,word ptr -0x4[bp] 
9D93    89 5E F6                  mov         word ptr -0xa[bp],bx 
9D96    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
9D99    8B 7E F0                  mov         di,word ptr -0x10[bp] 
9D9C    01 C3                     add         bx,ax 
9D9E    B9 FF FF                  mov         cx,0xffff 
9DA1    33 C0                     xor         ax,ax 
9DA3    F2 AE                     repne scasb 
9DA5    F7 D1                     not         cx 
9DA7    49                        dec         cx 
9DA8    89 5E F2                  mov         word ptr -0xe[bp],bx 
9DAB    31 C0                     xor         ax,ax 
9DAD    31 DB                     xor         bx,bx 
9DAF    01 CA                     add         dx,cx 
9DB1    89 D9                     mov         cx,bx 
9DB3    11 D9                     adc         cx,bx 
9DB5    89 D3                     mov         bx,dx 
9DB7    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
9DBA    83 C3 01                  add         bx,0x0001 
9DBD    11 C1                     adc         cx,ax 
9DBF    89 F0                     mov         ax,si 
9DC1    E8 00 00                  call        memory_allowed_ 
9DC4    84 C0                     test        al,al 
9DC6    74 32                     je          L$1062 
9DC8    83 7E FA 02               cmp         word ptr -0x6[bp],0x0002 
9DCC    73 38                     jae         L$1063 
9DCE    8B 7E F2                  mov         di,word ptr -0xe[bp] 
9DD1    8E 46 FC                  mov         es,word ptr -0x4[bp] 
9DD4    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
9DD7    B9 FF FF                  mov         cx,0xffff 
9DDA    33 C0                     xor         ax,ax 
9DDC    F2 AE                     repne scasb 
9DDE    F7 D1                     not         cx 
9DE0    49                        dec         cx 
9DE1    31 C0                     xor         ax,ax 
9DE3    01 CB                     add         bx,cx 
9DE5    89 C1                     mov         cx,ax 
9DE7    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
9DEA    11 C1                     adc         cx,ax 
9DEC    83 C3 01                  add         bx,0x0001 
9DEF    11 C1                     adc         cx,ax 
9DF1    89 F0                     mov         ax,si 
9DF3    E8 00 00                  call        memory_allowed_ 
9DF6    84 C0                     test        al,al 
9DF8    75 0C                     jne         L$1063 
9DFA                          L$1062:
9DFA    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9DFD    31 C0                     xor         ax,ax 
9DFF    C7 04 FF FF               mov         word ptr [si],0xffff 
9E03    E9 FB FB                  jmp         L$1046 
9E06                          L$1063:
9E06    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
9E09    89 F0                     mov         ax,si 
9E0B    E8 00 00                  call        vpu_shares_envs_ 
9E0E    85 D2                     test        dx,dx 
9E10    75 04                     jne         L$1064 
9E12    85 C0                     test        ax,ax 
9E14    74 1A                     je          L$1065 
9E16                          L$1064:
9E16    89 C3                     mov         bx,ax 
9E18    89 D1                     mov         cx,dx 
9E1A    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
9E1D    89 F0                     mov         ax,si 
9E1F    E8 00 00                  call        vpu_copy_envs_ 
9E22    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
9E25    89 04                     mov         word ptr [si],ax 
9E27    85 C0                     test        ax,ax 
9E29    74 05                     je          L$1065 
9E2B    31 C0                     xor         ax,ax 
9E2D    E9 D1 FB                  jmp         L$1046 
9E30                          L$1065:
9E30    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
9E33    3D 02 00                  cmp         ax,0x0002 
9E36    75 11                     jne         L$1066 
9E38    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
9E3B    8B 4E F4                  mov         cx,word ptr -0xc[bp] 
9E3E    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
9E41    89 F0                     mov         ax,si 
9E43    E8 00 00                  call        vpu_unsetenv_ 
9E46    E9 AF FB                  jmp         L$1044 
9E49                          L$1066:
9E49    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
9E4C    50                        push        ax 
9E4D    8B 4E F4                  mov         cx,word ptr -0xc[bp] 
9E50    FF 76 F6                  push        word ptr -0xa[bp] 
9E53    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
9E56    FF 76 F2                  push        word ptr -0xe[bp] 
9E59    89 F0                     mov         ax,si 
9E5B    E8 00 00                  call        vpu_setenv_ 
9E5E    E9 97 FB                  jmp         L$1044 
9E61                          vpu_disk_busy_:
9E61    53                        push        bx 
9E62    89 C3                     mov         bx,ax 
9E64    8E DA                     mov         ds,dx 
9E66    8B 07                     mov         ax,word ptr [bx] 
9E68    3D 02 00                  cmp         ax,0x0002 
9E6B    74 28                     je          L$1069 
9E6D    3D 03 00                  cmp         ax,0x0003 
9E70    76 05                     jbe         L$1067 
9E72    3D 0C 00                  cmp         ax,0x000c 
9E75    76 1E                     jbe         L$1069 
9E77                          L$1067:
9E77    3D 0F 00                  cmp         ax,0x000f 
9E7A    74 19                     je          L$1069 
9E7C    3D 1B 00                  cmp         ax,0x001b 
9E7F    72 05                     jb          L$1068 
9E81    3D 1E 00                  cmp         ax,0x001e 
9E84    76 0F                     jbe         L$1069 
9E86                          L$1068:
9E86    3D 22 00                  cmp         ax,0x0022 
9E89    74 0A                     je          L$1069 
9E8B    3D 28 00                  cmp         ax,0x0028 
9E8E    74 05                     je          L$1069 
9E90    3D 29 00                  cmp         ax,0x0029 
9E93    75 1A                     jne         L$1070 
9E95                          L$1069:
9E95    B8 00 00                  mov         ax,seg _diskio_in_progress 
9E98    8E C0                     mov         es,ax 
9E9A    26 80 3E 00 00 00         cmp         byte ptr es:_diskio_in_progress,0x00 
9EA0    74 0D                     je          L$1070 
9EA2    FF 4F 12                  dec         word ptr 0x12[bx] 
9EA5    B8 01 00                  mov         ax,0x0001 
9EA8    80 8F 8B 01 02            or          byte ptr 0x18b[bx],0x02 
9EAD    5B                        pop         bx 
9EAE    C3                        ret         
9EAF                          L$1070:
9EAF    31 C0                     xor         ax,ax 
9EB1    5B                        pop         bx 
9EB2    C3                        ret         
9EB3                          vpu_instr_sys_:
9EB3    51                        push        cx 
9EB4    56                        push        si 
9EB5    89 C6                     mov         si,ax 
9EB7    89 D1                     mov         cx,dx 
9EB9    E8 00 00                  call        vpu_disk_busy_ 
9EBC    85 C0                     test        ax,ax 
9EBE    74 06                     je          L$1071 
9EC0    B8 03 00                  mov         ax,0x0003 
9EC3    5E                        pop         si 
9EC4    59                        pop         cx 
9EC5    CB                        retf        
9EC6                          L$1071:
9EC6    8E D9                     mov         ds,cx 
9EC8    8B 1C                     mov         bx,word ptr [si] 
9ECA    83 FB 32                  cmp         bx,0x0032 
9ECD    73 2D                     jae         L$1073 
9ECF    C1 E3 02                  shl         bx,0x02 
9ED2    36 8B 97 02 00            mov         dx,word ptr ss:_vpu_instr_syscall+0x2[bx] 
9ED7    36 8B 87 00 00            mov         ax,word ptr ss:_vpu_instr_syscall[bx] 
9EDC    85 D2                     test        dx,dx 
9EDE    75 04                     jne         L$1072 
9EE0    85 C0                     test        ax,ax 
9EE2    74 18                     je          L$1073 
9EE4                          L$1072:
9EE4    89 F0                     mov         ax,si 
9EE6    89 CA                     mov         dx,cx 
9EE8    80 8C 8A 01 01            or          byte ptr 0x18a[si],0x01 
9EED    36 FF 9F 00 00            call        dword ptr ss:_vpu_instr_syscall[bx] 
9EF2    8E D9                     mov         ds,cx 
9EF4    80 A4 8A 01 FE            and         byte ptr 0x18a[si],0xfe 
9EF9    5E                        pop         si 
9EFA    59                        pop         cx 
9EFB    CB                        retf        
9EFC                          L$1073:
9EFC    BB 0C 00                  mov         bx,0x000c 
9EFF    89 F0                     mov         ax,si 
9F01    89 CA                     mov         dx,cx 
9F03    0E                        push        cs 
9F04    E8 00 00                  call        send_vpu_signal_ 
9F07    85 C0                     test        ax,ax 
9F09    74 0B                     je          L$1074 
9F0B    BB 06 00                  mov         bx,0x0006 
9F0E    89 F0                     mov         ax,si 
9F10    89 CA                     mov         dx,cx 
9F12    0E                        push        cs 
9F13    E8 00 00                  call        send_vpu_signal_ 
9F16                          L$1074:
9F16    31 C0                     xor         ax,ax 
9F18    5E                        pop         si 
9F19    59                        pop         cx 
9F1A    CB                        retf        
9F1B                          process_is_stopped_:
9F1B    53                        push        bx 
9F1C    51                        push        cx 
9F1D    56                        push        si 
9F1E    57                        push        di 
9F1F    C8 08 00 00               enter       0x0008,0x00 
9F23    89 C7                     mov         di,ax 
9F25    89 D1                     mov         cx,dx 
9F27    8E DA                     mov         ds,dx 
9F29    F6 85 8A 01 20            test        byte ptr 0x18a[di],0x20 
	     9F30		; The label referred to here is an undefined location
9F2E    0F 84 E6 65               je          0x00010518 
9F32    8B 85 8E 01               mov         ax,word ptr 0x18e[di] 
9F36    0B 85 8C 01               or          ax,word ptr 0x18c[di] 
9F3A    74 38                     je          L$1076 
9F3C    8D 76 F8                  lea         si,-0x8[bp] 
9F3F    36 A1 00 00               mov         ax,word ptr ss:_timezone 
9F43    36 8B 16 02 00            mov         dx,word ptr ss:_timezone+0x2 
9F48    0E                        push        cs 
9F49    E8 00 00                  call        unixtime_ 
9F4C    8E D9                     mov         ds,cx 
9F4E    8B 85 8E 01               mov         ax,word ptr 0x18e[di] 
9F52    3B 46 FA                  cmp         ax,word ptr -0x6[bp] 
9F55    72 0B                     jb          L$1075 
9F57    75 1B                     jne         L$1076 
9F59    8B 85 8C 01               mov         ax,word ptr 0x18c[di] 
9F5D    3B 46 F8                  cmp         ax,word ptr -0x8[bp] 
9F60    77 12                     ja          L$1076 
9F62                          L$1075:
9F62    BB 19 00                  mov         bx,0x0019 
9F65    89 F8                     mov         ax,di 
9F67    89 CA                     mov         dx,cx 
9F69    0E                        push        cs 
9F6A    E8 00 00                  call        send_vpu_signal_ 
9F6D    89 F8                     mov         ax,di 
9F6F    89 CA                     mov         dx,cx 
9F71    E8 00 00                  call        process_vpu_signal_ 
9F74                          L$1076:
9F74    B8 FF FF                  mov         ax,0xffff 
9F77    E9 B9 07                  jmp         L$1143 

Routine Size: 13974 bytes,    Routine Base: vpu_main_TEXT + 68E4

9F7A                          all_proc_blocking_:
9F7A    53                        push        bx 
9F7B    51                        push        cx 
9F7C    52                        push        dx 
9F7D    56                        push        si 
9F7E    57                        push        di 
9F7F    36 8B 0E 00 00            mov         cx,word ptr ss:_vpu_count 
9F84    89 CF                     mov         di,cx 
9F86    C1 E7 02                  shl         di,0x02 
9F89                          L$1077:
9F89    49                        dec         cx 
9F8A    83 EF 04                  sub         di,0x0004 
9F8D    83 F9 FF                  cmp         cx,0xffff 
9F90    74 30                     je          L$1078 
9F92    36 C5 36 00 00            lds         si,dword ptr ss:_vpus 
9F97    01 FE                     add         si,di 
9F99    C5 1C                     lds         bx,dword ptr [si] 
9F9B    F6 87 8B 01 02            test        byte ptr 0x18b[bx],0x02 
9FA0    75 E7                     jne         L$1077 
9FA2    8A 87 8A 01               mov         al,byte ptr 0x18a[bx] 
9FA6    A8 08                     test        al,0x08 
9FA8    75 DF                     jne         L$1077 
9FAA    A8 40                     test        al,0x40 
9FAC    75 DB                     jne         L$1077 
9FAE    F6 87 8B 01 01            test        byte ptr 0x18b[bx],0x01 
9FB3    75 D4                     jne         L$1077 
9FB5    89 D8                     mov         ax,bx 
9FB7    8C DA                     mov         dx,ds 
9FB9    E8 00 00                  call        process_is_stopped_ 
9FBC    85 C0                     test        ax,ax 
9FBE    75 C9                     jne         L$1077 
9FC0    EB 03                     jmp         L$1079 
9FC2                          L$1078:
9FC2    B8 01 00                  mov         ax,0x0001 
9FC5                          L$1079:
9FC5    5F                        pop         di 
9FC6    E9 2B C1                  jmp         L$688 
9FC9                          vpu_console_instr_:
9FC9    56                        push        si 
9FCA    57                        push        di 
9FCB    C8 08 00 00               enter       0x0008,0x00 
9FCF    89 C6                     mov         si,ax 
9FD1    89 56 FC                  mov         word ptr -0x4[bp],dx 
9FD4    89 5E F8                  mov         word ptr -0x8[bp],bx 
9FD7    89 4E FA                  mov         word ptr -0x6[bp],cx 
9FDA    8E DA                     mov         ds,dx 
9FDC    8A 44 12                  mov         al,byte ptr 0x12[si] 
9FDF    BA 04 00                  mov         dx,0x0004 
9FE2    88 46 FE                  mov         byte ptr -0x2[bp],al 
9FE5    8B 44 46                  mov         ax,word ptr 0x46[si] 
9FE8    80 A4 8A 01 7F            and         byte ptr 0x18a[si],0x7f 
9FED    9A 00 00 00 00            call        calloc_ 
9FF2    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
9FF5    89 44 40                  mov         word ptr 0x40[si],ax 
9FF8    89 54 42                  mov         word ptr 0x42[si],dx 
9FFB    8B 44 42                  mov         ax,word ptr 0x42[si] 
9FFE    8B 54 40                  mov         dx,word ptr 0x40[si] 
A001    85 C0                     test        ax,ax 
A003    75 21                     jne         L$1080 
A005    85 D2                     test        dx,dx 
A007    75 1D                     jne         L$1080 
A009    B8 00 00                  mov         ax,offset _outofmemory 
A00C    BA 00 00                  mov         dx,seg _outofmemory 
A00F    9A 00 00 00 00            call        putstr_ 
A014    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
A017    8B 44 3C                  mov         ax,word ptr 0x3c[si] 
A01A    8B 54 3E                  mov         dx,word ptr 0x3e[si] 
A01D    89 44 40                  mov         word ptr 0x40[si],ax 
A020    89 54 42                  mov         word ptr 0x42[si],dx 
	     A024		; The label referred to here is an undefined location
A023    E9 AA 72                  jmp         0x000112d0 
A026                          L$1080:
A026    8B 44 10                  mov         ax,word ptr 0x10[si] 
A029    89 D3                     mov         bx,dx 
A02B    C1 E0 02                  shl         ax,0x02 
A02E    8E 5C 42                  mov         ds,word ptr 0x42[si] 
A031    01 C3                     add         bx,ax 
A033    8B 7E F8                  mov         di,word ptr -0x8[bp] 
A036    89 3F                     mov         word ptr [bx],di 
A038    89 4F 02                  mov         word ptr 0x2[bx],cx 
A03B    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
A03E    89 FB                     mov         bx,di 
A040    C7 44 12 01 00            mov         word ptr 0x12[si],0x0001 
A045    8E D9                     mov         ds,cx 
A047    0F B6 0F                  movzx       cx,byte ptr [bx] 
A04A    80 27 3F                  and         byte ptr [bx],0x3f 
A04D    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
A053    74 0B                     je          L$1081 
A055    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
A058    89 F0                     mov         ax,si 
A05A    0F B6 1F                  movzx       bx,byte ptr [bx] 
A05D    E8 00 00                  call        vpu_step_debuginfo_ 
A060                          L$1081:
A060    C5 7E F8                  lds         di,dword ptr -0x8[bp] 
A063    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
A066    0F B6 3D                  movzx       di,byte ptr [di] 
A069    89 CB                     mov         bx,cx 
A06B    C1 E7 02                  shl         di,0x02 
A06E    89 F0                     mov         ax,si 
A070    36 FF 9D 00 00            call        dword ptr ss:_instruction_func_ptr[di] 
A075    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
A078    8B 44 40                  mov         ax,word ptr 0x40[si] 
A07B    8B 54 42                  mov         dx,word ptr 0x42[si] 
A07E    9A 00 00 00 00            call        free_ 
A083    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
A086    8B 44 3C                  mov         ax,word ptr 0x3c[si] 
A089    8B 54 3E                  mov         dx,word ptr 0x3e[si] 
A08C    89 44 40                  mov         word ptr 0x40[si],ax 
A08F    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
A092    89 54 42                  mov         word ptr 0x42[si],dx 
A095    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
A098    80 3F 15                  cmp         byte ptr [bx],0x15 
A09B    75 17                     jne         L$1082 
A09D    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
A0A0    8B 5C 16                  mov         bx,word ptr 0x16[si] 
A0A3    8B 44 2E                  mov         ax,word ptr 0x2e[si] 
A0A6    01 DB                     add         bx,bx 
A0A8    8E 5C 30                  mov         ds,word ptr 0x30[si] 
A0AB    01 C3                     add         bx,ax 
A0AD    0F B6 56 FE               movzx       dx,byte ptr -0x2[bp] 
A0B1    89 57 04                  mov         word ptr 0x4[bx],dx 
A0B4                          L$1082:
A0B4    C5 5E F8                  lds         bx,dword ptr -0x8[bp] 
A0B7    8C D1                     mov         cx,ss 
A0B9    0F B6 07                  movzx       ax,byte ptr [bx] 
A0BC    BB 00 00                  mov         bx,offset _JUMP_INSTR 
A0BF    E8 00 00                  call        instr_in_array_ 
A0C2    84 C0                     test        al,al 
A0C4    75 0D                     jne         L$1083 
A0C6    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
A0C9    0F B6 46 FE               movzx       ax,byte ptr -0x2[bp] 
A0CD    89 44 12                  mov         word ptr 0x12[si],ax 
	     A0D1		; The label referred to here is an undefined location
A0D0    E9 FD 71                  jmp         0x000112d0 
A0D3                          L$1083:
A0D3    36 C5 3E 00 00            lds         di,dword ptr ss:_running_console 
A0D8    C5 5D 3A                  lds         bx,dword ptr 0x3a[di] 
A0DB    80 67 0E F3               and         byte ptr 0xe[bx],0xf3 
A0DF    80 4F 0E 08               or          byte ptr 0xe[bx],0x08 
A0E3    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
A0E6    80 A4 8A 01 3F            and         byte ptr 0x18a[si],0x3f 
A0EB    80 8C 8A 01 80            or          byte ptr 0x18a[si],0x80 
	     A0F1		; The label referred to here is an undefined location
A0F0    E9 DD 71                  jmp         0x000112d0 
A0F3                          vpu_child_has_mutex_:
A0F3    53                        push        bx 
A0F4    56                        push        si 
A0F5    57                        push        di 
A0F6    89 C3                     mov         bx,ax 
A0F8    8E DA                     mov         ds,dx 
A0FA    8B 87 7E 01               mov         ax,word ptr 0x17e[bx] 
A0FE    89 C2                     mov         dx,ax 
A100    C1 E2 02                  shl         dx,0x02 
A103                          L$1084:
A103    48                        dec         ax 
A104    83 EA 04                  sub         dx,0x0004 
A107    3D FF FF                  cmp         ax,0xffff 
A10A    0F 84 A8 E6               je          L$946 
A10E    C4 B7 7A 01               les         si,dword ptr 0x17a[bx] 
A112    01 D6                     add         si,dx 
A114    26 C4 3C                  les         di,dword ptr es:[si] 
A117    26 F6 85 8A 01 02         test        byte ptr es:0x18a[di],0x02 
A11D    74 E4                     je          L$1084 
A11F    26 F6 85 8A 01 04         test        byte ptr es:0x18a[di],0x04 
A125    74 DC                     je          L$1084 
A127    E9 8C E6                  jmp         L$946 
A12A                          vpu_is_exiting_:
A12A    53                        push        bx 
A12B    51                        push        cx 
A12C    89 C3                     mov         bx,ax 
A12E    89 D1                     mov         cx,dx 
A130    8E DA                     mov         ds,dx 
A132    F6 87 8A 01 08            test        byte ptr 0x18a[bx],0x08 
A137    74 31                     je          L$1087 
A139    B8 00 00                  mov         ax,seg _diskio_in_progress 
A13C    8E D8                     mov         ds,ax 
A13E    80 3E 00 00 00            cmp         byte ptr _diskio_in_progress,0x00 
A143    75 1F                     jne         L$1086 
A145    8E DA                     mov         ds,dx 
A147    F6 87 8B 01 01            test        byte ptr 0x18b[bx],0x01 
A14C    75 05                     jne         L$1085 
A14E    89 D8                     mov         ax,bx 
A150    E8 00 00                  call        free_vpu_resources_ 
A153                          L$1085:
A153    89 D8                     mov         ax,bx 
A155    89 CA                     mov         dx,cx 
A157    E8 00 00                  call        send_termination_signal_ 
A15A    85 C0                     test        ax,ax 
A15C    74 06                     je          L$1086 
A15E    B8 01 00                  mov         ax,0x0001 
A161    59                        pop         cx 
A162    5B                        pop         bx 
A163    C3                        ret         
A164                          L$1086:
A164    B8 02 00                  mov         ax,0x0002 
A167    59                        pop         cx 
A168    5B                        pop         bx 
A169    C3                        ret         
A16A                          L$1087:
A16A    31 C0                     xor         ax,ax 
A16C    59                        pop         cx 
A16D    5B                        pop         bx 
A16E    C3                        ret         
A16F                          vpu_turns_:
A16F    53                        push        bx 
A170    51                        push        cx 
A171    89 C3                     mov         bx,ax 
A173    8E DA                     mov         ds,dx 
A175    8B 4F 22                  mov         cx,word ptr 0x22[bx] 
A178    9A 00 00 00 00            call        vpu_has_active_window_ 
A17D    84 C0                     test        al,al 
A17F    74 03                     je          L$1088 
A181    C1 E1 02                  shl         cx,0x02 
A184                          L$1088:
A184    89 C8                     mov         ax,cx 
A186    59                        pop         cx 
A187    5B                        pop         bx 
A188    C3                        ret         
A189                          vpu_alive_:
A189    53                        push        bx 
A18A    51                        push        cx 
A18B    56                        push        si 
A18C    57                        push        di 
A18D    C8 02 00 00               enter       0x0002,0x00 
A191    89 C3                     mov         bx,ax 
A193    89 56 FE                  mov         word ptr -0x2[bp],dx 
A196    8E DA                     mov         ds,dx 
A198    8A 87 8A 01               mov         al,byte ptr 0x18a[bx] 
A19C    A8 08                     test        al,0x08 
A19E    75 0A                     jne         L$1090 
A1A0    A8 02                     test        al,0x02 
A1A2    75 06                     jne         L$1090 
A1A4                          L$1089:
A1A4    B8 01 00                  mov         ax,0x0001 
A1A7    E9 89 05                  jmp         L$1143 
A1AA                          L$1090:
A1AA    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
A1AD    8B 8F 7E 01               mov         cx,word ptr 0x17e[bx] 
A1B1    89 CF                     mov         di,cx 
A1B3    C1 E7 02                  shl         di,0x02 
A1B6                          L$1091:
A1B6    49                        dec         cx 
A1B7    83 EF 04                  sub         di,0x0004 
A1BA    83 F9 FF                  cmp         cx,0xffff 
	     A1BF		; The label referred to here is an undefined location
A1BD    0F 84 57 63               je          0x00010518 
A1C1    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
A1C4    C5 B7 7A 01               lds         si,dword ptr 0x17a[bx] 
A1C8    01 FE                     add         si,di 
A1CA    8B 04                     mov         ax,word ptr [si] 
A1CC    8B 54 02                  mov         dx,word ptr 0x2[si] 
A1CF    E8 00 00                  call        vpu_alive_ 
A1D2    85 C0                     test        ax,ax 
A1D4    74 E0                     je          L$1091 
A1D6    EB CC                     jmp         L$1089 
A1D8                          vpu_next_cr_:
A1D8    53                        push        bx 
A1D9    89 C3                     mov         bx,ax 
A1DB    8E DA                     mov         ds,dx 
A1DD    8B 87 80 01               mov         ax,word ptr 0x180[bx] 
A1E1    3B 87 7E 01               cmp         ax,word ptr 0x17e[bx] 
A1E5    77 0B                     ja          L$1092 
A1E7    F6 87 8A 01 08            test        byte ptr 0x18a[bx],0x08 
A1EC    74 0C                     je          L$1093 
A1EE    85 C0                     test        ax,ax 
A1F0    7D 08                     jge         L$1093 
A1F2                          L$1092:
A1F2    8B 87 7E 01               mov         ax,word ptr 0x17e[bx] 
A1F6    89 87 80 01               mov         word ptr 0x180[bx],ax 
A1FA                          L$1093:
A1FA    FF 8F 80 01               dec         word ptr 0x180[bx] 
A1FE    5B                        pop         bx 
A1FF    C3                        ret         
A200                          vpu_child_alive_:
A200    53                        push        bx 
A201    51                        push        cx 
A202    56                        push        si 
A203    57                        push        di 
A204    C8 02 00 00               enter       0x0002,0x00 
A208    89 C3                     mov         bx,ax 
A20A    89 56 FE                  mov         word ptr -0x2[bp],dx 
A20D    8E DA                     mov         ds,dx 
A20F    8B 8F 80 01               mov         cx,word ptr 0x180[bx] 
A213    89 CF                     mov         di,cx 
A215    C1 E7 02                  shl         di,0x02 
A218                          L$1094:
A218    85 C9                     test        cx,cx 
A21A    7C 1B                     jl          L$1095 
A21C    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
A21F    C5 B7 7A 01               lds         si,dword ptr 0x17a[bx] 
A223    01 FE                     add         si,di 
A225    8B 04                     mov         ax,word ptr [si] 
A227    8B 54 02                  mov         dx,word ptr 0x2[si] 
A22A    E8 00 00                  call        vpu_alive_ 
A22D    85 C0                     test        ax,ax 
A22F    75 06                     jne         L$1095 
A231    83 EF 04                  sub         di,0x0004 
A234    49                        dec         cx 
A235    EB E1                     jmp         L$1094 
A237                          L$1095:
A237    83 F9 FF                  cmp         cx,0xffff 
A23A    75 3A                     jne         L$1098 
A23C    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
A23F    8B 8F 7E 01               mov         cx,word ptr 0x17e[bx] 
A243    49                        dec         cx 
A244    89 CF                     mov         di,cx 
A246    C1 E7 02                  shl         di,0x02 
A249                          L$1096:
A249    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
A24C    3B 8F 80 01               cmp         cx,word ptr 0x180[bx] 
A250    7E 18                     jle         L$1097 
A252    C5 B7 7A 01               lds         si,dword ptr 0x17a[bx] 
A256    01 FE                     add         si,di 
A258    8B 04                     mov         ax,word ptr [si] 
A25A    8B 54 02                  mov         dx,word ptr 0x2[si] 
A25D    E8 00 00                  call        vpu_alive_ 
A260    85 C0                     test        ax,ax 
A262    75 06                     jne         L$1097 
A264    83 EF 04                  sub         di,0x0004 
A267    49                        dec         cx 
A268    EB DF                     jmp         L$1096 
A26A                          L$1097:
A26A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
A26D    3B 8F 80 01               cmp         cx,word ptr 0x180[bx] 
A271    75 03                     jne         L$1098 
A273    B9 FF FF                  mov         cx,0xffff 
A276                          L$1098:
A276    89 C8                     mov         ax,cx 
A278    E9 B8 04                  jmp         L$1143 
A27B                          next_vpu_:
A27B    53                        push        bx 
A27C    51                        push        cx 
A27D    56                        push        si 
A27E    89 C3                     mov         bx,ax 
A280    89 D6                     mov         si,dx 
A282    8E DA                     mov         ds,dx 
A284    F6 87 8A 01 04            test        byte ptr 0x18a[bx],0x04 
A289    74 08                     je          L$1099 
A28B    C7 87 80 01 FF FF         mov         word ptr 0x180[bx],0xffff 
A291    EB 17                     jmp         L$1101 
A293                          L$1099:
A293    E8 00 00                  call        vpu_child_has_mutex_ 
A296    3D FF FF                  cmp         ax,0xffff 
A299    74 08                     je          L$1100 
A29B    8E DE                     mov         ds,si 
A29D    89 87 80 01               mov         word ptr 0x180[bx],ax 
A2A1    EB 07                     jmp         L$1101 
A2A3                          L$1100:
A2A3    89 D8                     mov         ax,bx 
A2A5    89 F2                     mov         dx,si 
A2A7    E8 00 00                  call        vpu_next_cr_ 
A2AA                          L$1101:
A2AA    89 D8                     mov         ax,bx 
A2AC    89 F2                     mov         dx,si 
A2AE    E8 00 00                  call        vpu_is_exiting_ 
A2B1    89 C1                     mov         cx,ax 
A2B3    85 C0                     test        ax,ax 
A2B5    74 41                     je          L$1104 
A2B7    89 D8                     mov         ax,bx 
A2B9    89 F2                     mov         dx,si 
A2BB    E8 00 00                  call        vpu_child_alive_ 
A2BE    8E DE                     mov         ds,si 
A2C0    89 87 80 01               mov         word ptr 0x180[bx],ax 
A2C4    3D FF FF                  cmp         ax,0xffff 
A2C7    75 2F                     jne         L$1104 
A2C9    83 F9 02                  cmp         cx,0x0002 
A2CC    75 23                     jne         L$1103 
A2CE    8B 87 76 01               mov         ax,word ptr 0x176[bx] 
A2D2    8B 97 74 01               mov         dx,word ptr 0x174[bx] 
A2D6    85 C0                     test        ax,ax 
A2D8    75 04                     jne         L$1102 
A2DA    85 D2                     test        dx,dx 
A2DC    74 13                     je          L$1103 
A2DE                          L$1102:
A2DE    B8 00 00                  mov         ax,seg _diskio_in_progress 
A2E1    8E D8                     mov         ds,ax 
A2E3    80 3E 00 00 00            cmp         byte ptr _diskio_in_progress,0x00 
A2E8    75 07                     jne         L$1103 
A2EA    89 D8                     mov         ax,bx 
A2EC    89 F2                     mov         dx,si 
A2EE    E8 00 00                  call        delete_vpu_ 
A2F1                          L$1103:
A2F1    31 C0                     xor         ax,ax 
A2F3    31 D2                     xor         dx,dx 
	     A2F6		; The label referred to here is an undefined location
A2F5    E9 56 63                  jmp         0x0001064e 
A2F8                          L$1104:
A2F8    8E DE                     mov         ds,si 
A2FA    8B 87 80 01               mov         ax,word ptr 0x180[bx] 
A2FE    3D FF FF                  cmp         ax,0xffff 
A301    75 07                     jne         L$1105 
A303    89 D8                     mov         ax,bx 
A305    89 F2                     mov         dx,si 
	     A308		; The label referred to here is an undefined location
A307    E9 44 63                  jmp         0x0001064e 
A30A                          L$1105:
A30A    C1 E0 02                  shl         ax,0x02 
A30D    C5 97 7A 01               lds         dx,dword ptr 0x17a[bx] 
A311    89 D3                     mov         bx,dx 
A313    01 C3                     add         bx,ax 
A315    8B 07                     mov         ax,word ptr [bx] 
A317    8B 57 02                  mov         dx,word ptr 0x2[bx] 
	     A31B		; The label referred to here is an undefined location
A31A    E9 31 63                  jmp         0x0001064e 
A31D                          vpu_recursive_:
A31D    53                        push        bx 
A31E    51                        push        cx 
A31F    56                        push        si 
A320    C8 02 00 00               enter       0x0002,0x00 
A324    89 C3                     mov         bx,ax 
A326    89 D1                     mov         cx,dx 
A328    31 F6                     xor         si,si 
A32A    89 76 FE                  mov         word ptr -0x2[bp],si 
A32D                          L$1106:
A32D    89 D8                     mov         ax,bx 
A32F    89 CA                     mov         dx,cx 
A331    E8 00 00                  call        next_vpu_ 
A334    85 D2                     test        dx,dx 
A336    75 04                     jne         L$1107 
A338    85 C0                     test        ax,ax 
A33A    74 15                     je          L$1109 
A33C                          L$1107:
A33C    39 CA                     cmp         dx,cx 
A33E    75 06                     jne         L$1108 
A340    39 D8                     cmp         ax,bx 
	     A344		; The label referred to here is an undefined location
A342    0F 84 2D 7D               je          0x00012073 
A346                          L$1108:
A346    89 DE                     mov         si,bx 
A348    89 4E FE                  mov         word ptr -0x2[bp],cx 
A34B    89 C3                     mov         bx,ax 
A34D    89 D1                     mov         cx,dx 
A34F    EB DC                     jmp         L$1106 
A351                          L$1109:
A351    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
A354    89 F0                     mov         ax,si 
	     A357		; The label referred to here is an undefined location
A356    E9 1A 7D                  jmp         0x00012073 
A359                          vpu_step_debugoutput_:
A359    53                        push        bx 
A35A    51                        push        cx 
A35B    56                        push        si 
A35C    89 C6                     mov         si,ax 
A35E    89 D1                     mov         cx,dx 
A360    8E DA                     mov         ds,dx 
A362    8B 44 10                  mov         ax,word ptr 0x10[si] 
A365    8B 5C 40                  mov         bx,word ptr 0x40[si] 
A368    C1 E0 02                  shl         ax,0x02 
A36B    8E 5C 42                  mov         ds,word ptr 0x42[si] 
A36E    01 C3                     add         bx,ax 
A370    C5 17                     lds         dx,dword ptr [bx] 
A372    8E C1                     mov         es,cx 
A374    26 8B 5C 12               mov         bx,word ptr es:0x12[si] 
A378    01 D3                     add         bx,dx 
A37A    0F B6 07                  movzx       ax,byte ptr [bx] 
A37D    50                        push        ax 
A37E    8E D9                     mov         ds,cx 
A380    FF 74 12                  push        word ptr 0x12[si] 
A383    FF B4 88 01               push        word ptr 0x188[si] 
A387    16                        push        ss 
A388    68 97 07                  push        offset DGROUP:L$1533 
A38B    16                        push        ss 
A38C    68 00 00                  push        offset _message 
A38F    8C D2                     mov         dx,ss 
A391    9A 00 00 00 00            call        sprintf_ 
A396    83 C4 0E                  add         sp,0x000e 
A399    B8 00 00                  mov         ax,offset _message 
A39C    E8 00 00                  call        output_debug_info_ 
A39F    8E D9                     mov         ds,cx 
A3A1    8B 5C 10                  mov         bx,word ptr 0x10[si] 
A3A4    8B 44 40                  mov         ax,word ptr 0x40[si] 
A3A7    C1 E3 02                  shl         bx,0x02 
A3AA    8E 5C 42                  mov         ds,word ptr 0x42[si] 
A3AD    01 C3                     add         bx,ax 
A3AF    C5 07                     lds         ax,dword ptr [bx] 
A3B1    8E C1                     mov         es,cx 
A3B3    26 8B 5C 12               mov         bx,word ptr es:0x12[si] 
A3B7    01 C3                     add         bx,ax 
A3B9    8A 1F                     mov         bl,byte ptr [bx] 
A3BB    80 E3 3F                  and         bl,0x3f 
A3BE    0F B6 C3                  movzx       ax,bl 
A3C1    36 3B 06 00 00            cmp         ax,word ptr ss:_instruction_count 
	     A3C8		; The label referred to here is an undefined location
A3C6    0F 83 84 62               jae         0x0001064e 
A3CA    89 F0                     mov         ax,si 
A3CC    89 CA                     mov         dx,cx 
A3CE    30 FF                     xor         bh,bh 
A3D0    E8 00 00                  call        vpu_step_debuginfo_ 
	     A3D4		; The label referred to here is an undefined location
A3D3    E9 78 62                  jmp         0x0001064e 

Routine Size: 1116 bytes,    Routine Base: vpu_main_TEXT + 9F7A

A3D6                          vpu_run_:
A3D6    53                        push        bx 
A3D7    51                        push        cx 
A3D8    56                        push        si 
A3D9    57                        push        di 
A3DA    C8 0A 00 00               enter       0x000a,0x00 
A3DE    89 C6                     mov         si,ax 
A3E0    89 56 FC                  mov         word ptr -0x4[bp],dx 
A3E3    B8 00 00                  mov         ax,seg _clock_ticks 
A3E6    8E D8                     mov         ds,ax 
A3E8    A1 00 00                  mov         ax,word ptr _clock_ticks 
A3EB    C7 46 FA 00 00            mov         word ptr -0x6[bp],0x0000 
A3F0    89 46 F6                  mov         word ptr -0xa[bp],ax 
A3F3    31 C9                     xor         cx,cx 
A3F5                          L$1110:
A3F5    36 C5 1E 00 00            lds         bx,dword ptr ss:_running_console 
A3FA    C5 7F 3A                  lds         di,dword ptr 0x3a[bx] 
A3FD    F6 45 0E 80               test        byte ptr 0xe[di],0x80 
A401    74 05                     je          L$1112 
A403                          L$1111:
A403    B0 02                     mov         al,0x02 
A405    E9 F9 F5                  jmp         L$1046 
A408                          L$1112:
A408    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
A40B    F6 84 8B 01 04            test        byte ptr 0x18b[si],0x04 
A410    75 16                     jne         L$1113 
A412    89 F0                     mov         ax,si 
A414    8C DA                     mov         dx,ds 
A416    E8 00 00                  call        vpu_recursive_ 
A419    89 C3                     mov         bx,ax 
A41B    89 56 FE                  mov         word ptr -0x2[bp],dx 
A41E    85 D2                     test        dx,dx 
A420    75 31                     jne         L$1115 
A422    85 C0                     test        ax,ax 
A424    75 2D                     jne         L$1115 
A426    EB DB                     jmp         L$1111 
A428                          L$1113:
A428    89 F3                     mov         bx,si 
A42A    8C 5E FE                  mov         word ptr -0x2[bp],ds 
A42D    80 A4 8B 01 FB            and         byte ptr 0x18b[si],0xfb 
A432                          L$1114:
A432    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
A435    8B 87 80 01               mov         ax,word ptr 0x180[bx] 
A439    3D FF FF                  cmp         ax,0xffff 
A43C    74 15                     je          L$1115 
A43E    89 C7                     mov         di,ax 
A440    C1 E7 02                  shl         di,0x02 
A443    C5 87 7A 01               lds         ax,dword ptr 0x17a[bx] 
A447    01 C7                     add         di,ax 
A449    8B 45 02                  mov         ax,word ptr 0x2[di] 
A44C    8B 1D                     mov         bx,word ptr [di] 
A44E    89 46 FE                  mov         word ptr -0x2[bp],ax 
A451    EB DF                     jmp         L$1114 
A453                          L$1115:
A453    3B 4E FE                  cmp         cx,word ptr -0x2[bp] 
A456    75 07                     jne         L$1116 
A458    3B 5E FA                  cmp         bx,word ptr -0x6[bp] 
A45B    0F 84 7C 00               je          L$1121 
A45F                          L$1116:
A45F    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
A462    89 D8                     mov         ax,bx 
A464    E8 00 00                  call        process_is_stopped_ 
A467    85 C0                     test        ax,ax 
A469    75 60                     jne         L$1120 
A46B    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
A46E    F6 87 8A 01 01            test        byte ptr 0x18a[bx],0x01 
A473    75 56                     jne         L$1120 
A475    89 D8                     mov         ax,bx 
A477    8C DA                     mov         dx,ds 
A479    E8 00 00                  call        vpu_turns_ 
A47C    89 C7                     mov         di,ax 
A47E    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
A484    75 17                     jne         L$1118 
A486                          L$1117:
A486    4F                        dec         di 
A487    83 FF FF                  cmp         di,0xffff 
A48A    74 21                     je          L$1119 
A48C    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
A48F    89 D8                     mov         ax,bx 
A491    E8 00 00                  call        vpu_step_ 
A494    89 46 F8                  mov         word ptr -0x8[bp],ax 
A497    85 C0                     test        ax,ax 
A499    74 EB                     je          L$1117 
A49B    EB 10                     jmp         L$1119 
A49D                          L$1118:
A49D    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
A4A0    89 D8                     mov         ax,bx 
A4A2    E8 00 00                  call        vpu_step_debugoutput_ 
A4A5    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
A4A8    89 D8                     mov         ax,bx 
A4AA    E8 00 00                  call        vpu_step_ 
A4AD                          L$1119:
A4AD    83 7E F8 04               cmp         word ptr -0x8[bp],0x0004 
A4B1    74 28                     je          L$1121 
A4B3    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
A4B6    89 D8                     mov         ax,bx 
A4B8    E8 00 00                  call        vpu_getwindowkeys_ 
A4BB    85 C9                     test        cx,cx 
A4BD    75 0C                     jne         L$1120 
A4BF    83 7E FA 00               cmp         word ptr -0x6[bp],0x0000 
A4C3    75 06                     jne         L$1120 
A4C5    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
A4C8    89 5E FA                  mov         word ptr -0x6[bp],bx 
A4CB                          L$1120:
A4CB    B8 00 00                  mov         ax,seg _clock_ticks 
A4CE    8E D8                     mov         ds,ax 
A4D0    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
A4D3    3B 06 00 00               cmp         ax,word ptr _clock_ticks 
A4D7    0F 84 1A FF               je          L$1110 
A4DB                          L$1121:
A4DB    30 C0                     xor         al,al 
A4DD    E9 21 F5                  jmp         L$1046 
A4E0                          vpu_step_:
A4E0    53                        push        bx 
A4E1    51                        push        cx 
A4E2    56                        push        si 
A4E3    57                        push        di 
A4E4    89 C6                     mov         si,ax 
A4E6    89 D1                     mov         cx,dx 
A4E8    8E DA                     mov         ds,dx 
A4EA    83 7C 26 00               cmp         word ptr 0x26[si],0x0000 
A4EE    74 1E                     je          L$1124 
A4F0    F6 84 8B 01 02            test        byte ptr 0x18b[si],0x02 
A4F5    74 06                     je          L$1122 
A4F7    C7 84 6E 01 06 01         mov         word ptr 0x16e[si],0x0106 
A4FD                          L$1122:
A4FD    89 F0                     mov         ax,si 
A4FF    89 CA                     mov         dx,cx 
A501    E8 00 00                  call        process_vpu_signal_ 
A504    85 C0                     test        ax,ax 
A506    74 06                     je          L$1124 
A508                          L$1123:
A508    B8 03 00                  mov         ax,0x0003 
	     A50C		; The label referred to here is an undefined location
A50B    E9 3F 61                  jmp         0x0001064d 
A50E                          L$1124:
A50E    8E D9                     mov         ds,cx 
A510    80 A4 8B 01 FD            and         byte ptr 0x18b[si],0xfd 
A515    83 7C 28 00               cmp         word ptr 0x28[si],0x0000 
A519    74 30                     je          L$1125 
A51B    F6 84 8A 01 10            test        byte ptr 0x18a[si],0x10 
A520    75 29                     jne         L$1125 
A522    36 C5 1E 00 00            lds         bx,dword ptr ss:_running_console 
A527    C5 7F 3A                  lds         di,dword ptr 0x3a[bx] 
A52A    F6 45 0E 0C               test        byte ptr 0xe[di],0x0c 
A52E    74 1B                     je          L$1125 
A530    8E D9                     mov         ds,cx 
A532    8B 44 28                  mov         ax,word ptr 0x28[si] 
A535    3B 44 62                  cmp         ax,word ptr 0x62[si] 
A538    73 CE                     jae         L$1123 
A53A    89 F0                     mov         ax,si 
A53C    89 CA                     mov         dx,cx 
A53E    8B 5C 28                  mov         bx,word ptr 0x28[si] 
A541    80 A4 8A 01 BF            and         byte ptr 0x18a[si],0xbf 
A546    E8 00 00                  call        vpu_instr_hardint_ 
A549    EB BD                     jmp         L$1123 
A54B                          L$1125:
A54B    8E D9                     mov         ds,cx 
A54D    F6 84 8A 01 40            test        byte ptr 0x18a[si],0x40 
A552    74 1F                     je          L$1126 
A554    F6 84 8B 01 08            test        byte ptr 0x18b[si],0x08 
A559    74 AD                     je          L$1123 
A55B    81 A4 8A 01 BF F7         and         word ptr 0x18a[si],0xf7bf 
A561    F6 84 8B 01 10            test        byte ptr 0x18b[si],0x10 
A566    74 A0                     je          L$1123 
A568    B8 04 00                  mov         ax,0x0004 
A56B    80 A4 8B 01 EF            and         byte ptr 0x18b[si],0xef 
	     A571		; The label referred to here is an undefined location
A570    E9 DA 60                  jmp         0x0001064d 
A573                          L$1126:
A573    8B 44 12                  mov         ax,word ptr 0x12[si] 
A576    3B 44 44                  cmp         ax,word ptr 0x44[si] 
A579    72 2E                     jb          L$1127 
A57B    BB 0B 00                  mov         bx,0x000b 
A57E    89 F0                     mov         ax,si 
A580    89 CA                     mov         dx,cx 
A582    0E                        push        cs 
A583    E8 00 00                  call        send_vpu_signal_ 
A586    8E D9                     mov         ds,cx 
A588    FF B4 88 01               push        word ptr 0x188[si] 
A58C    16                        push        ss 
A58D    68 D8 07                  push        offset DGROUP:L$1534 
A590    16                        push        ss 
A591    68 00 00                  push        offset _message 
A594    8C D2                     mov         dx,ss 
A596    9A 00 00 00 00            call        sprintf_ 
A59B    83 C4 0A                  add         sp,0x000a 
A59E    B8 00 00                  mov         ax,offset _message 
A5A1    9A 00 00 00 00            call        putstr_ 
	     A5A7		; The label referred to here is an undefined location
A5A6    E9 A2 60                  jmp         0x0001064b 
A5A9                          L$1127:
A5A9    8B 44 10                  mov         ax,word ptr 0x10[si] 
A5AC    8B 5C 40                  mov         bx,word ptr 0x40[si] 
A5AF    C1 E0 02                  shl         ax,0x02 
A5B2    8E 5C 42                  mov         ds,word ptr 0x42[si] 
A5B5    8E C1                     mov         es,cx 
A5B7    01 C3                     add         bx,ax 
A5B9    26 8B 44 12               mov         ax,word ptr es:0x12[si] 
A5BD    89 C7                     mov         di,ax 
A5BF    47                        inc         di 
A5C0    26 89 7C 12               mov         word ptr es:0x12[si],di 
A5C4    C5 3F                     lds         di,dword ptr [bx] 
A5C6    89 FB                     mov         bx,di 
A5C8    01 C3                     add         bx,ax 
A5CA    0F B6 1F                  movzx       bx,byte ptr [bx] 
A5CD    89 DF                     mov         di,bx 
A5CF    83 E7 3F                  and         di,0x003f 
A5D2    36 3B 3E 00 00            cmp         di,word ptr ss:_instruction_count 
A5D7    73 0F                     jae         L$1128 
A5D9    C1 E7 02                  shl         di,0x02 
A5DC    89 F0                     mov         ax,si 
A5DE    89 CA                     mov         dx,cx 
A5E0    36 FF 9D 00 00            call        dword ptr ss:_instruction_func_ptr[di] 
	     A5E6		; The label referred to here is an undefined location
A5E5    E9 65 60                  jmp         0x0001064d 
A5E8                          L$1128:
A5E8    BB 04 00                  mov         bx,0x0004 
A5EB    89 F0                     mov         ax,si 
A5ED    89 CA                     mov         dx,cx 
A5EF    0E                        push        cs 
A5F0    E8 00 00                  call        send_vpu_signal_ 
	     A5F4		; The label referred to here is an undefined location
A5F3    E9 55 60                  jmp         0x0001064b 
A5F6                          save_asm_:
A5F6    53                        push        bx 
A5F7    51                        push        cx 
A5F8    56                        push        si 
A5F9    57                        push        di 
A5FA    C8 04 00 00               enter       0x0004,0x00 
A5FE    50                        push        ax 
A5FF    52                        push        dx 
A600    BB F7 07                  mov         bx,offset DGROUP:L$1535 
A603    8C D1                     mov         cx,ss 
A605    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
A60A    9A 00 00 00 00            call        fopen_ 
A60F    89 C3                     mov         bx,ax 
A611    89 D1                     mov         cx,dx 
A613    85 D2                     test        dx,dx 
A615    75 04                     jne         L$1129 
A617    85 C0                     test        ax,ax 
A619    74 30                     je          L$1133 
A61B                          L$1129:
A61B    36 A1 C9 04               mov         ax,word ptr ss:L$1595 
A61F    36 8B 36 C7 04            mov         si,word ptr ss:L$1594 
A624    85 C0                     test        ax,ax 
A626    75 06                     jne         L$1130 
A628    85 F6                     test        si,si 
A62A    0F 84 AF 00               je          L$1138 
A62E                          L$1130:
A62E    8B 7E FA                  mov         di,word ptr -0x6[bp] 
A631    8E 46 F8                  mov         es,word ptr -0x8[bp] 
A634    8E D8                     mov         ds,ax 
A636                          L$1131:
A636    AC                        lodsb       
A637    26 8A 25                  mov         ah,byte ptr es:[di] 
A63A    2A C4                     sub         al,ah 
A63C    75 05                     jne         L$1132 
A63E    47                        inc         di 
A63F    3A C4                     cmp         al,ah 
A641    75 F3                     jne         L$1131 
A643                          L$1132:
A643    18 E4                     sbb         ah,ah 
A645    85 C0                     test        ax,ax 
A647    0F 85 92 00               jne         L$1138 
A64B                          L$1133:
A64B    BB F9 07                  mov         bx,offset DGROUP:L$1536 
A64E    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
A651    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
A654    8C D1                     mov         cx,ss 
A656    9A 00 00 00 00            call        fopen_ 
A65B    89 C7                     mov         di,ax 
A65D    89 D6                     mov         si,dx 
A65F    85 D2                     test        dx,dx 
A661    75 0C                     jne         L$1134 
A663    85 C0                     test        ax,ax 
A665    75 08                     jne         L$1134 
A667    B8 00 00                  mov         ax,offset _error_while_opening 
A66A    8C D2                     mov         dx,ss 
A66C    E9 BF 00                  jmp         L$1142 
A66F                          L$1134:
A66F    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
A672    C1 E0 02                  shl         ax,0x02 
A675    89 46 FC                  mov         word ptr -0x4[bp],ax 
A678                          L$1135:
A678    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
A67D    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
A680    3B 47 04                  cmp         ax,word ptr 0x4[bx] 
A683    73 35                     jae         L$1137 
A685    85 C0                     test        ax,ax 
A687    74 0C                     je          L$1136 
A689    B8 0A 00                  mov         ax,0x000a 
A68C    89 FB                     mov         bx,di 
A68E    89 F1                     mov         cx,si 
A690    9A 00 00 00 00            call        fputc_ 
A695                          L$1136:
A695    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
A69A    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
A69D    C5 17                     lds         dx,dword ptr [bx] 
A69F    89 D3                     mov         bx,dx 
A6A1    FF 46 FE                  inc         word ptr -0x2[bp] 
A6A4    01 C3                     add         bx,ax 
A6A6    89 F1                     mov         cx,si 
A6A8    8B 07                     mov         ax,word ptr [bx] 
A6AA    8B 57 02                  mov         dx,word ptr 0x2[bx] 
A6AD    89 FB                     mov         bx,di 
A6AF    83 46 FC 04               add         word ptr -0x4[bp],0x0004 
A6B3    9A 00 00 00 00            call        fputs_ 
A6B8    EB BE                     jmp         L$1135 
A6BA                          L$1137:
A6BA    89 F8                     mov         ax,di 
A6BC    89 F2                     mov         dx,si 
A6BE    9A 00 00 00 00            call        fclose_ 
A6C3    36 A1 C7 04               mov         ax,word ptr ss:L$1594 
A6C7    36 8B 16 C9 04            mov         dx,word ptr ss:L$1595 
A6CC    9A 00 00 00 00            call        free_ 
A6D1    31 C0                     xor         ax,ax 
A6D3    36 A3 C7 04               mov         word ptr ss:L$1594,ax 
A6D7    36 A3 C9 04               mov         word ptr ss:L$1595,ax 
A6DB    EB 56                     jmp         L$1143 
A6DD                          L$1138:
A6DD    89 D8                     mov         ax,bx 
A6DF    89 CA                     mov         dx,cx 
A6E1    8B 7E FA                  mov         di,word ptr -0x6[bp] 
A6E4    9A 00 00 00 00            call        fclose_ 
A6E9    8E 46 F8                  mov         es,word ptr -0x8[bp] 
A6EC    B9 FF FF                  mov         cx,0xffff 
A6EF    33 C0                     xor         ax,ax 
A6F1    F2 AE                     repne scasb 
A6F3    F7 D1                     not         cx 
A6F5    49                        dec         cx 
A6F6    89 C8                     mov         ax,cx 
A6F8    40                        inc         ax 
A6F9    9A 00 00 00 00            call        malloc_ 
A6FE    89 C7                     mov         di,ax 
A700    36 A3 C7 04               mov         word ptr ss:L$1594,ax 
A704    36 89 16 C9 04            mov         word ptr ss:L$1595,dx 
A709    85 D2                     test        dx,dx 
A70B    75 0C                     jne         L$1139 
A70D    85 C0                     test        ax,ax 
A70F    75 08                     jne         L$1139 
A711    B8 00 00                  mov         ax,offset _outofmemory 
A714    BA 00 00                  mov         dx,seg _outofmemory 
A717    EB 15                     jmp         L$1142 
A719                          L$1139:
A719    8B 76 FA                  mov         si,word ptr -0x6[bp] 
A71C    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
A71F    8E C2                     mov         es,dx 
A721    57                        push        di 
A722                          L$1140:
A722    AC                        lodsb       
A723    AA                        stosb       
A724    3C 00                     cmp         al,0x00 
A726    75 FA                     jne         L$1140 
A728    5F                        pop         di 
A729    B8 FB 07                  mov         ax,offset DGROUP:L$1537 
A72C                          L$1141:
A72C    8C D2                     mov         dx,ss 
A72E                          L$1142:
A72E    9A 00 00 00 00            call        putstr_ 
A733                          L$1143:
A733    C9                        leave       
	     A735		; The label referred to here is an undefined location
A734    E9 16 5F                  jmp         0x0001064d 
A737                          load_asm_:
A737    53                        push        bx 
A738    51                        push        cx 
A739    56                        push        si 
A73A    57                        push        di 
A73B    C8 02 00 00               enter       0x0002,0x00 
A73F    BB F7 07                  mov         bx,offset DGROUP:L$1535 
A742    8C D1                     mov         cx,ss 
A744    9A 00 00 00 00            call        fopen_ 
A749    89 C1                     mov         cx,ax 
A74B    89 D6                     mov         si,dx 
A74D    85 D2                     test        dx,dx 
A74F    75 0B                     jne         L$1144 
A751    85 C0                     test        ax,ax 
A753    75 07                     jne         L$1144 
A755    B8 00 00                  mov         ax,offset _error_while_opening 
A758    8C D2                     mov         dx,ss 
A75A    EB 51                     jmp         L$1147 
A75C                          L$1144:
A75C    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
A761    83 7F 04 00               cmp         word ptr 0x4[bx],0x0000 
A765    74 20                     je          L$1145 
A767    FF 4F 04                  dec         word ptr 0x4[bx] 
A76A    8B 47 04                  mov         ax,word ptr 0x4[bx] 
A76D    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
A772    C1 E0 02                  shl         ax,0x02 
A775    C5 17                     lds         dx,dword ptr [bx] 
A777    89 D3                     mov         bx,dx 
A779    01 C3                     add         bx,ax 
A77B    8B 07                     mov         ax,word ptr [bx] 
A77D    8B 57 02                  mov         dx,word ptr 0x2[bx] 
A780    9A 00 00 00 00            call        free_ 
A785    EB D5                     jmp         L$1144 
A787                          L$1145:
A787    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
A78C    8B 7F 04                  mov         di,word ptr 0x4[bx] 
A78F    47                        inc         di 
A790    8B 07                     mov         ax,word ptr [bx] 
A792    C1 E7 02                  shl         di,0x02 
A795    8B 57 02                  mov         dx,word ptr 0x2[bx] 
A798    89 FB                     mov         bx,di 
A79A    9A 00 00 00 00            call        realloc_ 
A79F    85 D2                     test        dx,dx 
A7A1    75 12                     jne         L$1148 
A7A3    85 C0                     test        ax,ax 
A7A5    75 0E                     jne         L$1148 
A7A7                          L$1146:
A7A7    B8 00 00                  mov         ax,offset _outofmemory 
A7AA    BA 00 00                  mov         dx,seg _outofmemory 
A7AD                          L$1147:
A7AD    9A 00 00 00 00            call        putstr_ 
A7B2    E9 7E FF                  jmp         L$1143 
A7B5                          L$1148:
A7B5    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
A7BA    89 07                     mov         word ptr [bx],ax 
A7BC    89 57 02                  mov         word ptr 0x2[bx],dx 
A7BF    BA 01 00                  mov         dx,0x0001 
A7C2    B8 51 00                  mov         ax,0x0051 
A7C5    9A 00 00 00 00            call        calloc_ 
A7CA    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
A7CF    8B 7F 04                  mov         di,word ptr 0x4[bx] 
A7D2    C1 E7 02                  shl         di,0x02 
A7D5    89 7E FE                  mov         word ptr -0x2[bp],di 
A7D8    C5 3F                     lds         di,dword ptr [bx] 
A7DA    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
A7DD    01 FB                     add         bx,di 
A7DF    89 07                     mov         word ptr [bx],ax 
A7E1    89 57 02                  mov         word ptr 0x2[bx],dx 
A7E4    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
A7E9    8B 47 04                  mov         ax,word ptr 0x4[bx] 
A7EC    8B 17                     mov         dx,word ptr [bx] 
A7EE    C1 E0 02                  shl         ax,0x02 
A7F1    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
A7F4    89 D3                     mov         bx,dx 
A7F6    01 C3                     add         bx,ax 
A7F8    8B 57 02                  mov         dx,word ptr 0x2[bx] 
A7FB    8B 07                     mov         ax,word ptr [bx] 
A7FD    85 D2                     test        dx,dx 
A7FF    75 04                     jne         L$1149 
A801    85 C0                     test        ax,ax 
A803    74 A2                     je          L$1146 
A805                          L$1149:
A805    31 FF                     xor         di,di 
A807    EB 27                     jmp         L$1151 
A809                          L$1150:
A809    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
A80E    8B 47 04                  mov         ax,word ptr 0x4[bx] 
A811    C1 E0 02                  shl         ax,0x02 
A814    89 46 FE                  mov         word ptr -0x2[bp],ax 
A817    C5 07                     lds         ax,dword ptr [bx] 
A819    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
A81C    01 C3                     add         bx,ax 
A81E    89 7E FE                  mov         word ptr -0x2[bp],di 
A821    C5 07                     lds         ax,dword ptr [bx] 
A823    89 C3                     mov         bx,ax 
A825    47                        inc         di 
A826    03 5E FE                  add         bx,word ptr -0x2[bp] 
A829    88 17                     mov         byte ptr [bx],dl 
A82B    83 FF 4F                  cmp         di,0x004f 
A82E    73 15                     jae         L$1152 
A830                          L$1151:
A830    89 C8                     mov         ax,cx 
A832    89 F2                     mov         dx,si 
A834    9A 00 00 00 00            call        fgetc_ 
A839    89 C2                     mov         dx,ax 
A83B    3D 0A 00                  cmp         ax,0x000a 
A83E    74 05                     je          L$1152 
A840    3D FF FF                  cmp         ax,0xffff 
A843    75 C4                     jne         L$1150 
A845                          L$1152:
A845    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
A84A    FF 47 04                  inc         word ptr 0x4[bx] 
A84D    74 07                     je          L$1153 
A84F    83 FA FF                  cmp         dx,0xffff 
A852    0F 85 31 FF               jne         L$1145 
A856                          L$1153:
A856    89 C8                     mov         ax,cx 
A858    89 F2                     mov         dx,si 
A85A    9A 00 00 00 00            call        fclose_ 
A85F    E9 D1 FE                  jmp         L$1143 
A862                          push_history_:
A862    53                        push        bx 
A863    51                        push        cx 
A864    56                        push        si 
A865    57                        push        di 
A866    C8 0A 00 00               enter       0x000a,0x00 
A86A    89 C1                     mov         cx,ax 
A86C    8E DA                     mov         ds,dx 
A86E    BE 13 00                  mov         si,0x0013 
A871    C7 46 FC 40 06            mov         word ptr -0x4[bp],0x0640 
A876    BF F0 05                  mov         di,0x05f0 
A879                          L$1154:
A879    83 6E FC 50               sub         word ptr -0x4[bp],0x0050 
A87D    4E                        dec         si 
A87E    83 EF 50                  sub         di,0x0050 
A881    83 FE FF                  cmp         si,0xffff 
A884    74 48                     je          L$1156 
A886    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
A889    89 7E FA                  mov         word ptr -0x6[bp],di 
A88C    31 C0                     xor         ax,ax 
A88E    89 56 F8                  mov         word ptr -0x8[bp],dx 
A891                          L$1155:
A891    36 C4 16 00 00            les         dx,dword ptr ss:_history 
A896    89 D3                     mov         bx,dx 
A898    03 56 F8                  add         dx,word ptr -0x8[bp] 
A89B    03 5E FA                  add         bx,word ptr -0x6[bp] 
A89E    01 C2                     add         dx,ax 
A8A0    01 C3                     add         bx,ax 
A8A2    89 56 F6                  mov         word ptr -0xa[bp],dx 
A8A5    26 8A 17                  mov         dl,byte ptr es:[bx] 
A8A8    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
A8AB    26 88 17                  mov         byte ptr es:[bx],dl 
A8AE    36 8B 16 00 00            mov         dx,word ptr ss:_history 
A8B3    03 56 FA                  add         dx,word ptr -0x6[bp] 
A8B6    89 56 F6                  mov         word ptr -0xa[bp],dx 
A8B9    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
A8BC    89 C2                     mov         dx,ax 
A8BE    36 8E 06 02 00            mov         es,word ptr ss:_history+0x2 
A8C3    01 D3                     add         bx,dx 
A8C5    40                        inc         ax 
A8C6    26 80 3F 00               cmp         byte ptr es:[bx],0x00 
A8CA    75 C5                     jne         L$1155 
A8CC    EB AB                     jmp         L$1154 
A8CE                          L$1156:
A8CE    89 CB                     mov         bx,cx 
A8D0    8C 5E FE                  mov         word ptr -0x2[bp],ds 
A8D3    31 C0                     xor         ax,ax 
A8D5                          L$1157:
A8D5    36 8B 3E 00 00            mov         di,word ptr ss:_history 
A8DA    36 8B 36 02 00            mov         si,word ptr ss:_history+0x2 
A8DF    8E 46 FE                  mov         es,word ptr -0x2[bp] 
A8E2    89 76 F6                  mov         word ptr -0xa[bp],si 
A8E5    89 FE                     mov         si,di 
A8E7    26 8A 17                  mov         dl,byte ptr es:[bx] 
A8EA    8E 46 F6                  mov         es,word ptr -0xa[bp] 
A8ED    01 C6                     add         si,ax 
A8EF    26 88 14                  mov         byte ptr es:[si],dl 
A8F2    89 C6                     mov         si,ax 
A8F4    43                        inc         bx 
A8F5    01 CE                     add         si,cx 
A8F7    40                        inc         ax 
A8F8    80 3C 00                  cmp         byte ptr [si],0x00 
A8FB    75 D8                     jne         L$1157 
A8FD    E9 33 FE                  jmp         L$1143 
A900                          get_history_:
A900    52                        push        dx 
A901    56                        push        si 
A902    55                        push        bp 
A903    31 ED                     xor         bp,bp 
A905    89 DE                     mov         si,bx 
A907    6B D0 50                  imul        dx,ax,0x0050 
A90A    C5 9E 00 00               lds         bx,dword ptr _history[bp] 
A90E    01 D3                     add         bx,dx 
A910    80 3F 00                  cmp         byte ptr [bx],0x00 
A913    74 3A                     je          L$1159 
A915    89 F3                     mov         bx,si 
A917    8E C1                     mov         es,cx 
A919    31 C0                     xor         ax,ax 
A91B                          L$1158:
A91B    8B B6 00 00               mov         si,word ptr _history[bp] 
A91F    01 D6                     add         si,dx 
A921    8E 9E 02 00               mov         ds,word ptr _history+0x2[bp] 
A925    01 C6                     add         si,ax 
A927    8A 0C                     mov         cl,byte ptr [si] 
A929    26 88 0F                  mov         byte ptr es:[bx],cl 
A92C    8B B6 00 00               mov         si,word ptr _history[bp] 
A930    89 C1                     mov         cx,ax 
A932    43                        inc         bx 
A933    01 D6                     add         si,dx 
A935    8E 9E 02 00               mov         ds,word ptr _history+0x2[bp] 
A939    01 CE                     add         si,cx 
A93B    40                        inc         ax 
A93C    80 3C 00                  cmp         byte ptr [si],0x00 
A93F    75 DA                     jne         L$1158 
A941    C5 9E 00 00               lds         bx,dword ptr _cursor_col[bp] 
A945    48                        dec         ax 
A946    89 07                     mov         word ptr [bx],ax 
A948    C4 B6 00 00               les         si,dword ptr _cursor_col[bp] 
A94C    26 89 04                  mov         word ptr es:[si],ax 
A94F                          L$1159:
A94F    5D                        pop         bp 
A950    5E                        pop         si 
A951    5A                        pop         dx 
A952    C3                        ret         
A953                          getcommand_:
A953    56                        push        si 
A954    57                        push        di 
A955    C8 04 00 00               enter       0x0004,0x00 
A959    89 C6                     mov         si,ax 
A95B    89 56 FC                  mov         word ptr -0x4[bp],dx 
A95E    89 DF                     mov         di,bx 
A960    89 4E FE                  mov         word ptr -0x2[bp],cx 
A963    05 7C 00                  add         ax,0x007c 
A966    36 89 16 02 00            mov         word ptr ss:_history+0x2,dx 
A96B    36 A3 00 00               mov         word ptr ss:_history,ax 
A96F    8E DA                     mov         ds,dx 
A971    F6 44 0E 40               test        byte ptr 0xe[si],0x40 
A975    74 0F                     je          L$1160 
A977    8E D9                     mov         ds,cx 
A979    C6 05 00                  mov         byte ptr [di],0x00 
A97C    8E DA                     mov         ds,dx 
A97E    C6 44 7B 00               mov         byte ptr 0x7b[si],0x00 
A982    80 64 0E BF               and         byte ptr 0xe[si],0xbf 
A986                          L$1160:
A986    9A 00 00 00 00            call        vpuconsole_getch_ 
A98B    89 C1                     mov         cx,ax 
A98D    3D FF FF                  cmp         ax,0xffff 
A990    0F 84 C6 00               je          L$1167 
A994    3D 0D 00                  cmp         ax,0x000d 
A997    0F 84 63 01               je          L$1178 
A99B    85 C0                     test        ax,ax 
A99D    0F 85 DE 00               jne         L$1171 
A9A1    9A 00 00 00 00            call        vpuconsole_getch_ 
A9A6    3D 4D 00                  cmp         ax,0x004d 
A9A9    72 11                     jb          L$1161 
A9AB    76 67                     jbe         L$1165 
A9AD    3D 53 00                  cmp         ax,0x0053 
A9B0    0F 84 AF 00               je          L$1169 
A9B4    3D 50 00                  cmp         ax,0x0050 
A9B7    74 30                     je          L$1163 
A9B9    E9 6E 00                  jmp         L$1166 
A9BC                          L$1161:
A9BC    3D 4B 00                  cmp         ax,0x004b 
A9BF    74 42                     je          L$1164 
A9C1    3D 48 00                  cmp         ax,0x0048 
A9C4    0F 85 62 00               jne         L$1166 
A9C8    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
A9CB    8A 44 7B                  mov         al,byte ptr 0x7b[si] 
A9CE    3C 13                     cmp         al,0x13 
A9D0    0F 83 56 00               jae         L$1166 
A9D4    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
A9D7    0F B6 D0                  movzx       dx,al 
A9DA    FE C0                     inc         al 
A9DC    89 FB                     mov         bx,di 
A9DE    88 44 7B                  mov         byte ptr 0x7b[si],al 
A9E1    89 D0                     mov         ax,dx 
A9E3                          L$1162:
A9E3    E8 00 00                  call        get_history_ 
A9E6    E9 41 00                  jmp         L$1166 
A9E9                          L$1163:
A9E9    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
A9EC    80 7C 7B 01               cmp         byte ptr 0x7b[si],0x01 
A9F0    0F 86 36 00               jbe         L$1166 
A9F4    FE 4C 7B                  dec         byte ptr 0x7b[si] 
A9F7    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
A9FA    0F B6 44 7B               movzx       ax,byte ptr 0x7b[si] 
A9FE    89 FB                     mov         bx,di 
AA00    48                        dec         ax 
AA01    EB E0                     jmp         L$1162 
AA03                          L$1164:
AA03    36 C5 1E 00 00            lds         bx,dword ptr ss:_cursor_col 
AA08    83 3F 00                  cmp         word ptr [bx],0x0000 
AA0B    0F 84 1B 00               je          L$1166 
AA0F    FF 0F                     dec         word ptr [bx] 
AA11    E9 16 00                  jmp         L$1166 
AA14                          L$1165:
AA14    36 C5 1E 00 00            lds         bx,dword ptr ss:_cursor_col 
AA19    8E 46 FE                  mov         es,word ptr -0x2[bp] 
AA1C    8B 37                     mov         si,word ptr [bx] 
AA1E    01 FE                     add         si,di 
AA20    26 80 3C 00               cmp         byte ptr es:[si],0x00 
AA24    0F 84 02 00               je          L$1166 
AA28    FF 07                     inc         word ptr [bx] 
AA2A                          L$1166:
AA2A    36 C5 1E 00 00            lds         bx,dword ptr ss:_cursor_row 
AA2F    8B 07                     mov         ax,word ptr [bx] 
AA31    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
AA34    9A 00 00 00 00            call        clear_row_ 
AA39    36 C5 1E 00 00            lds         bx,dword ptr ss:_cursor_row 
AA3E    31 D2                     xor         dx,dx 
AA40    8B 07                     mov         ax,word ptr [bx] 
AA42    89 FB                     mov         bx,di 
AA44    E8 00 00                  call        mvprintw_ 
AA47    36 C5 1E 00 00            lds         bx,dword ptr ss:_cursor_col 
AA4C    8B 17                     mov         dx,word ptr [bx] 
AA4E    36 C5 1E 00 00            lds         bx,dword ptr ss:_cursor_row 
AA53    8B 07                     mov         ax,word ptr [bx] 
AA55    9A 00 00 00 00            call        move_ 
AA5A                          L$1167:
AA5A    31 C0                     xor         ax,ax 
AA5C    31 DB                     xor         bx,bx 
AA5E                          L$1168:
AA5E    89 DA                     mov         dx,bx 
	     AA61		; The label referred to here is an undefined location
AA60    E9 6D 68                  jmp         0x000112d0 
AA63                          L$1169:
AA63    36 C5 1E 00 00            lds         bx,dword ptr ss:_cursor_col 
AA68    8B 07                     mov         ax,word ptr [bx] 
AA6A    89 FB                     mov         bx,di 
AA6C    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
AA6F    01 C3                     add         bx,ax 
AA71                          L$1170:
AA71    80 3F 00                  cmp         byte ptr [bx],0x00 
AA74    74 B4                     je          L$1166 
AA76    8A 57 01                  mov         dl,byte ptr 0x1[bx] 
AA79    40                        inc         ax 
AA7A    88 17                     mov         byte ptr [bx],dl 
AA7C    43                        inc         bx 
AA7D    EB F2                     jmp         L$1170 
AA7F                          L$1171:
AA7F    3D 08 00                  cmp         ax,0x0008 
AA82    75 23                     jne         L$1173 
AA84    36 C5 36 00 00            lds         si,dword ptr ss:_cursor_col 
AA89    83 3C 00                  cmp         word ptr [si],0x0000 
AA8C    74 9C                     je          L$1166 
AA8E    FF 0C                     dec         word ptr [si] 
AA90    89 FB                     mov         bx,di 
AA92    8B 04                     mov         ax,word ptr [si] 
AA94    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
AA97    01 C3                     add         bx,ax 
AA99                          L$1172:
AA99    80 3F 00                  cmp         byte ptr [bx],0x00 
AA9C    74 8C                     je          L$1166 
AA9E    8A 57 01                  mov         dl,byte ptr 0x1[bx] 
AAA1    40                        inc         ax 
AAA2    88 17                     mov         byte ptr [bx],dl 
AAA4    43                        inc         bx 
AAA5    EB F2                     jmp         L$1172 
AAA7                          L$1173:
AAA7    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
AAAA    89 FB                     mov         bx,di 
AAAC    31 C0                     xor         ax,ax 
AAAE                          L$1174:
AAAE    80 3F 00                  cmp         byte ptr [bx],0x00 
AAB1    74 04                     je          L$1175 
AAB3    43                        inc         bx 
AAB4    40                        inc         ax 
AAB5    EB F7                     jmp         L$1174 
AAB7                          L$1175:
AAB7    3D 4F 00                  cmp         ax,0x004f 
AABA    0F 83 6C FF               jae         L$1166 
AABE    36 C5 1E 00 00            lds         bx,dword ptr ss:_cursor_col 
AAC3    83 3F 4F                  cmp         word ptr [bx],0x004f 
AAC6    0F 83 60 FF               jae         L$1166 
AACA    B8 4F 00                  mov         ax,0x004f 
AACD    8E 46 FE                  mov         es,word ptr -0x2[bp] 
AAD0    8D 75 4F                  lea         si,0x4f[di] 
AAD3                          L$1176:
AAD3    36 C5 1E 00 00            lds         bx,dword ptr ss:_cursor_col 
AAD8    3B 07                     cmp         ax,word ptr [bx] 
AADA    76 0F                     jbe         L$1177 
AADC    26 8A 54 FF               mov         dl,byte ptr es:-0x1[si] 
AAE0    05 FF FF                  add         ax,0xffff 
AAE3    26 88 14                  mov         byte ptr es:[si],dl 
AAE6    83 C6 FF                  add         si,0xffff 
AAE9    EB E8                     jmp         L$1176 
AAEB                          L$1177:
AAEB    8B 07                     mov         ax,word ptr [bx] 
AAED    89 C2                     mov         dx,ax 
AAEF    42                        inc         dx 
AAF0    89 17                     mov         word ptr [bx],dx 
AAF2    89 FB                     mov         bx,di 
AAF4    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
AAF7    01 C3                     add         bx,ax 
AAF9    88 0F                     mov         byte ptr [bx],cl 
AAFB    E9 2C FF                  jmp         L$1166 
AAFE                          L$1178:
AAFE    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
AB01    89 F8                     mov         ax,di 
AB03    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
AB06    E8 00 00                  call        push_history_ 
AB09    9A 00 00 00 00            call        inc_row_ 
AB0E    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
AB11    89 F8                     mov         ax,di 
AB13    80 4C 0E 40               or          byte ptr 0xe[si],0x40 
AB17    E9 44 FF                  jmp         L$1168 
AB1A                          show_variable_:
AB1A    53                        push        bx 
AB1B    51                        push        cx 
AB1C    56                        push        si 
AB1D    57                        push        di 
AB1E    C8 50 00 00               enter       0x0050,0x00 
AB22    89 C6                     mov         si,ax 
AB24    89 D1                     mov         cx,dx 
AB26    31 DB                     xor         bx,bx 
AB28    E8 00 00                  call        get_symbol_struct_ 
AB2B    89 C3                     mov         bx,ax 
AB2D    89 D7                     mov         di,dx 
AB2F    85 D2                     test        dx,dx 
AB31    75 1D                     jne         L$1179 
AB33    85 C0                     test        ax,ax 
AB35    75 19                     jne         L$1179 
AB37    51                        push        cx 
AB38    56                        push        si 
AB39    16                        push        ss 
AB3A    68 2A 08                  push        offset DGROUP:L$1538 
AB3D    16                        push        ss 
AB3E    8D 56 B0                  lea         dx,-0x50[bp] 
AB41    52                        push        dx 
AB42    9A 00 00 00 00            call        sprintf_ 
AB47    8D 46 B0                  lea         ax,-0x50[bp] 
AB4A    83 C4 0C                  add         sp,0x000c 
AB4D    E9 DC FB                  jmp         L$1141 
AB50                          L$1179:
AB50    8E DA                     mov         ds,dx 
AB52    0F B6 47 24               movzx       ax,byte ptr 0x24[bx] 
AB56    50                        push        ax 
AB57    FF 77 20                  push        word ptr 0x20[bx] 
AB5A    FF 77 22                  push        word ptr 0x22[bx] 
AB5D    16                        push        ss 
AB5E    68 3E 08                  push        offset DGROUP:L$1539 
AB61    16                        push        ss 
AB62    8D 56 B0                  lea         dx,-0x50[bp] 
AB65    52                        push        dx 
AB66    9A 00 00 00 00            call        sprintf_ 
AB6B    8E DF                     mov         ds,di 
AB6D    83 C4 0E                  add         sp,0x000e 
AB70    F6 47 24 04               test        byte ptr 0x24[bx],0x04 
AB74    75 2B                     jne         L$1180 
AB76    8B 47 22                  mov         ax,word ptr 0x22[bx] 
AB79    36 8B 36 00 00            mov         si,word ptr ss:_data 
AB7E    C1 E0 02                  shl         ax,0x02 
AB81    36 8E 1E 02 00            mov         ds,word ptr ss:_data+0x2 
AB86    01 C6                     add         si,ax 
AB88    C5 04                     lds         ax,dword ptr [si] 
AB8A    8E C7                     mov         es,di 
AB8C    26 8B 5F 20               mov         bx,word ptr es:0x20[bx] 
AB90    01 C3                     add         bx,ax 
AB92    0F B6 07                  movzx       ax,byte ptr [bx] 
AB95    50                        push        ax 
AB96    16                        push        ss 
AB97    8D 56 B0                  lea         dx,-0x50[bp] 
AB9A    52                        push        dx 
AB9B    16                        push        ss 
AB9C    68 74 08                  push        offset DGROUP:L$1540 
AB9F    EB 26                     jmp         L$1181 
ABA1                          L$1180:
ABA1    8B 77 22                  mov         si,word ptr 0x22[bx] 
ABA4    36 A1 00 00               mov         ax,word ptr ss:_data 
ABA8    C1 E6 02                  shl         si,0x02 
ABAB    36 8E 1E 02 00            mov         ds,word ptr ss:_data+0x2 
ABB0    01 C6                     add         si,ax 
ABB2    C5 04                     lds         ax,dword ptr [si] 
ABB4    8E C7                     mov         es,di 
ABB6    26 8B 5F 20               mov         bx,word ptr es:0x20[bx] 
ABBA    01 C3                     add         bx,ax 
ABBC    FF 37                     push        word ptr [bx] 
ABBE    16                        push        ss 
ABBF    8D 56 B0                  lea         dx,-0x50[bp] 
ABC2    52                        push        dx 
ABC3    16                        push        ss 
ABC4    68 7D 08                  push        offset DGROUP:L$1541 
ABC7                          L$1181:
ABC7    16                        push        ss 
ABC8    52                        push        dx 
ABC9    9A 00 00 00 00            call        sprintf_ 
ABCE    83 C4 0E                  add         sp,0x000e 
ABD1    8D 46 B0                  lea         ax,-0x50[bp] 
ABD4    E9 55 FB                  jmp         L$1141 
ABD7                          show_unsigned_data_:
ABD7    51                        push        cx 
ABD8    56                        push        si 
ABD9    57                        push        di 
ABDA    C8 52 00 00               enter       0x0052,0x00 
ABDE    89 C1                     mov         cx,ax 
ABE0    89 D6                     mov         si,dx 
ABE2    89 5E FE                  mov         word ptr -0x2[bp],bx 
ABE5    E8 00 00                  call        parse_number_ 
ABE8    89 C7                     mov         di,ax 
ABEA    89 F2                     mov         dx,si 
ABEC    89 C8                     mov         ax,cx 
ABEE    E8 00 00                  call        skip_word_ 
ABF1    E8 00 00                  call        skip_whitespaces_ 
ABF4    89 FB                     mov         bx,di 
ABF6    E8 00 00                  call        parse_number_ 
ABF9    C1 E3 02                  shl         bx,0x02 
ABFC    83 7E FE 00               cmp         word ptr -0x2[bp],0x0000 
AC00    74 19                     je          L$1182 
AC02    36 C5 16 00 00            lds         dx,dword ptr ss:_data 
AC07    01 D3                     add         bx,dx 
AC09    C5 0F                     lds         cx,dword ptr [bx] 
AC0B    89 CB                     mov         bx,cx 
AC0D    01 C3                     add         bx,ax 
AC0F    8B 17                     mov         dx,word ptr [bx] 
AC11    52                        push        dx 
AC12    52                        push        dx 
AC13    50                        push        ax 
AC14    57                        push        di 
AC15    16                        push        ss 
AC16    68 86 08                  push        offset DGROUP:L$1542 
AC19    EB 18                     jmp         L$1183 
AC1B                          L$1182:
AC1B    36 C5 16 00 00            lds         dx,dword ptr ss:_data 
AC20    01 D3                     add         bx,dx 
AC22    C5 0F                     lds         cx,dword ptr [bx] 
AC24    89 CB                     mov         bx,cx 
AC26    01 C3                     add         bx,ax 
AC28    0F B6 17                  movzx       dx,byte ptr [bx] 
AC2B    52                        push        dx 
AC2C    52                        push        dx 
AC2D    50                        push        ax 
AC2E    57                        push        di 
AC2F    16                        push        ss 
AC30    68 A5 08                  push        offset DGROUP:L$1543 
AC33                          L$1183:
AC33    16                        push        ss 
AC34    8D 56 AE                  lea         dx,-0x52[bp] 
AC37    52                        push        dx 
AC38    9A 00 00 00 00            call        sprintf_ 
AC3D    83 C4 10                  add         sp,0x0010 
AC40    8D 46 AE                  lea         ax,-0x52[bp] 
AC43    8C D2                     mov         dx,ss 
AC45    9A 00 00 00 00            call        putstr_ 
	     AC4B		; The label referred to here is an undefined location
AC4A    E9 A5 6F                  jmp         0x00011bf2 
AC4D                          list_symbols_:
AC4D    53                        push        bx 
AC4E    51                        push        cx 
AC4F    52                        push        dx 
AC50    C8 50 00 00               enter       0x0050,0x00 
AC54    36 8B 1E 00 00            mov         bx,word ptr ss:_symbol_count 
AC59    53                        push        bx 
AC5A    16                        push        ss 
AC5B    68 C4 08                  push        offset DGROUP:L$1544 
AC5E    16                        push        ss 
AC5F    8D 56 B0                  lea         dx,-0x50[bp] 
AC62    52                        push        dx 
AC63    9A 00 00 00 00            call        sprintf_ 
AC68    8D 46 B0                  lea         ax,-0x50[bp] 
AC6B    83 C4 0A                  add         sp,0x000a 
AC6E    8C D2                     mov         dx,ss 
AC70    9A 00 00 00 00            call        putstr_ 
AC75    6B CB 26                  imul        cx,bx,0x0026 
AC78                          L$1184:
AC78    4B                        dec         bx 
AC79    83 E9 26                  sub         cx,0x0026 
AC7C    83 FB FF                  cmp         bx,0xffff 
AC7F    74 38                     je          L$1185 
AC81    36 8B 16 02 00            mov         dx,word ptr ss:_symbols+0x2 
AC86    36 A1 00 00               mov         ax,word ptr ss:_symbols 
AC8A    52                        push        dx 
AC8B    01 C8                     add         ax,cx 
AC8D    50                        push        ax 
AC8E    16                        push        ss 
AC8F    68 CF 08                  push        offset DGROUP:L$1545 
AC92    16                        push        ss 
AC93    8D 56 B0                  lea         dx,-0x50[bp] 
AC96    52                        push        dx 
AC97    9A 00 00 00 00            call        sprintf_ 
AC9C    8D 46 B0                  lea         ax,-0x50[bp] 
AC9F    83 C4 0C                  add         sp,0x000c 
ACA2    8C D2                     mov         dx,ss 
ACA4    9A 00 00 00 00            call        putstr_ 
ACA9    36 A1 00 00               mov         ax,word ptr ss:_symbols 
ACAD    36 8B 16 02 00            mov         dx,word ptr ss:_symbols+0x2 
ACB2    01 C8                     add         ax,cx 
ACB4    E8 00 00                  call        show_variable_ 
ACB7    EB BF                     jmp         L$1184 
ACB9                          L$1185:
ACB9    C9                        leave       
ACBA    E9 2B C0                  jmp         L$769 
ACBD                          print_status_:
ACBD    53                        push        bx 
ACBE    51                        push        cx 
ACBF    C8 50 00 00               enter       0x0050,0x00 
ACC3    89 C3                     mov         bx,ax 
ACC5    89 D1                     mov         cx,dx 
ACC7    B8 D3 08                  mov         ax,offset DGROUP:L$1546 
ACCA    8C D2                     mov         dx,ss 
ACCC    9A 00 00 00 00            call        putstr_ 
ACD1    8E D9                     mov         ds,cx 
ACD3    66 FF 77 04               push        dword ptr 0x4[bx] 
ACD7    66 FF 37                  push        dword ptr [bx] 
ACDA    16                        push        ss 
ACDB    68 DE 08                  push        offset DGROUP:L$1547 
ACDE    16                        push        ss 
ACDF    8D 56 B0                  lea         dx,-0x50[bp] 
ACE2    52                        push        dx 
ACE3    9A 00 00 00 00            call        sprintf_ 
ACE8    8D 46 B0                  lea         ax,-0x50[bp] 
ACEB    83 C4 10                  add         sp,0x0010 
ACEE    8C D2                     mov         dx,ss 
ACF0    9A 00 00 00 00            call        putstr_ 
ACF5    8E D9                     mov         ds,cx 
ACF7    66 FF 77 0C               push        dword ptr 0xc[bx] 
ACFB    66 FF 77 08               push        dword ptr 0x8[bx] 
ACFF    16                        push        ss 
AD00    68 0D 09                  push        offset DGROUP:L$1548 
AD03    16                        push        ss 
AD04    8D 56 B0                  lea         dx,-0x50[bp] 
AD07    52                        push        dx 
AD08    9A 00 00 00 00            call        sprintf_ 
AD0D    8D 46 B0                  lea         ax,-0x50[bp] 
AD10    83 C4 10                  add         sp,0x0010 
AD13    8C D2                     mov         dx,ss 
AD15    9A 00 00 00 00            call        putstr_ 
AD1A    8E D9                     mov         ds,cx 
AD1C    66 FF 77 14               push        dword ptr 0x14[bx] 
AD20    66 FF 77 10               push        dword ptr 0x10[bx] 
AD24    16                        push        ss 
AD25    68 3C 09                  push        offset DGROUP:L$1549 
AD28    16                        push        ss 
AD29    8D 56 B0                  lea         dx,-0x50[bp] 
AD2C    52                        push        dx 
AD2D    9A 00 00 00 00            call        sprintf_ 
AD32    8D 46 B0                  lea         ax,-0x50[bp] 
AD35    83 C4 10                  add         sp,0x0010 
AD38    8C D2                     mov         dx,ss 
AD3A    9A 00 00 00 00            call        putstr_ 
AD3F    8E D9                     mov         ds,cx 
AD41    FF 77 1C                  push        word ptr 0x1c[bx] 
AD44    16                        push        ss 
AD45    68 6B 09                  push        offset DGROUP:L$1550 
AD48    16                        push        ss 
AD49    8D 46 B0                  lea         ax,-0x50[bp] 
AD4C    50                        push        ax 
AD4D    8C D2                     mov         dx,ss 
AD4F    9A 00 00 00 00            call        sprintf_ 
AD54    83 C4 0A                  add         sp,0x000a 
AD57    8D 46 B0                  lea         ax,-0x50[bp] 
AD5A    9A 00 00 00 00            call        putstr_ 
AD5F    8E D9                     mov         ds,cx 
AD61    FF 77 1E                  push        word ptr 0x1e[bx] 
AD64    16                        push        ss 
AD65    68 7B 09                  push        offset DGROUP:L$1551 
AD68    16                        push        ss 
AD69    8D 56 B0                  lea         dx,-0x50[bp] 
AD6C    52                        push        dx 
AD6D    9A 00 00 00 00            call        sprintf_ 
AD72    8D 46 B0                  lea         ax,-0x50[bp] 
AD75    83 C4 0A                  add         sp,0x000a 
AD78    8C D2                     mov         dx,ss 
AD7A    9A 00 00 00 00            call        putstr_ 
AD7F    8E D9                     mov         ds,cx 
AD81    8B 47 1E                  mov         ax,word ptr 0x1e[bx] 
AD84    C1 E8 03                  shr         ax,0x03 
AD87    25 01 00                  and         ax,0x0001 
AD8A    50                        push        ax 
AD8B    8B 47 1E                  mov         ax,word ptr 0x1e[bx] 
AD8E    C1 E8 02                  shr         ax,0x02 
AD91    30 E4                     xor         ah,ah 
AD93    24 01                     and         al,0x01 
AD95    50                        push        ax 
AD96    8B 47 1E                  mov         ax,word ptr 0x1e[bx] 
AD99    D1 E8                     shr         ax,0x01 
AD9B    30 E4                     xor         ah,ah 
AD9D    24 01                     and         al,0x01 
AD9F    50                        push        ax 
ADA0    8B 47 1E                  mov         ax,word ptr 0x1e[bx] 
ADA3    30 E4                     xor         ah,ah 
ADA5    24 01                     and         al,0x01 
ADA7    50                        push        ax 
ADA8    16                        push        ss 
ADA9    68 89 09                  push        offset DGROUP:L$1552 
ADAC    16                        push        ss 
ADAD    8D 56 B0                  lea         dx,-0x50[bp] 
ADB0    52                        push        dx 
ADB1    9A 00 00 00 00            call        sprintf_ 
ADB6    83 C4 10                  add         sp,0x0010 
ADB9    8D 46 B0                  lea         ax,-0x50[bp] 
ADBC    8C D2                     mov         dx,ss 
ADBE    9A 00 00 00 00            call        putstr_ 
ADC3    8E D9                     mov         ds,cx 
ADC5    8B 47 1E                  mov         ax,word ptr 0x1e[bx] 
ADC8    C1 E8 07                  shr         ax,0x07 
ADCB    30 E4                     xor         ah,ah 
ADCD    24 01                     and         al,0x01 
ADCF    50                        push        ax 
ADD0    8B 47 1E                  mov         ax,word ptr 0x1e[bx] 
ADD3    C1 E8 06                  shr         ax,0x06 
ADD6    30 E4                     xor         ah,ah 
ADD8    24 01                     and         al,0x01 
ADDA    50                        push        ax 
ADDB    8B 47 1E                  mov         ax,word ptr 0x1e[bx] 
ADDE    C1 E8 05                  shr         ax,0x05 
ADE1    30 E4                     xor         ah,ah 
ADE3    24 01                     and         al,0x01 
ADE5    50                        push        ax 
ADE6    8B 47 1E                  mov         ax,word ptr 0x1e[bx] 
ADE9    C1 E8 04                  shr         ax,0x04 
ADEC    30 E4                     xor         ah,ah 
ADEE    24 01                     and         al,0x01 
ADF0    50                        push        ax 
ADF1    16                        push        ss 
ADF2    68 BD 09                  push        offset DGROUP:L$1553 
ADF5    16                        push        ss 
ADF6    8D 56 B0                  lea         dx,-0x50[bp] 
ADF9    52                        push        dx 
ADFA    9A 00 00 00 00            call        sprintf_ 
ADFF    8D 46 B0                  lea         ax,-0x50[bp] 
AE02    83 C4 10                  add         sp,0x0010 
AE05    8C D2                     mov         dx,ss 
AE07    9A 00 00 00 00            call        putstr_ 
AE0C    C9                        leave       
AE0D    59                        pop         cx 
AE0E    5B                        pop         bx 
AE0F    C3                        ret         
AE10                          reset_vpu_:
AE10    53                        push        bx 
AE11    51                        push        cx 
AE12    56                        push        si 
AE13    57                        push        di 
AE14    89 C3                     mov         bx,ax 
AE16    8E C2                     mov         es,dx 
AE18    B8 08 00                  mov         ax,0x0008 
AE1B    8D 77 10                  lea         si,0x10[bx] 
AE1E    8E DA                     mov         ds,dx 
AE20                          L$1186:
AE20    48                        dec         ax 
AE21    83 C6 FE                  add         si,0xfffe 
AE24    3D FF FF                  cmp         ax,0xffff 
AE27    74 06                     je          L$1187 
AE29    C7 04 00 00               mov         word ptr [si],0x0000 
AE2D    EB F1                     jmp         L$1186 
AE2F                          L$1187:
AE2F    66 26 C7 47 10 00 00 00 00
                                  mov         dword ptr es:0x10[bx],0x00000000 
AE38    26 C7 47 14 00 00         mov         word ptr es:0x14[bx],0x0000 
AE3E    26 8B 77 3A               mov         si,word ptr es:0x3a[bx] 
AE42    26 8B 47 32               mov         ax,word ptr es:0x32[bx] 
AE46    26 C7 47 1C 00 00         mov         word ptr es:0x1c[bx],0x0000 
AE4C    4E                        dec         si 
AE4D    26 89 47 2E               mov         word ptr es:0x2e[bx],ax 
AE51    26 89 77 18               mov         word ptr es:0x18[bx],si 
AE55    26 89 77 1A               mov         word ptr es:0x1a[bx],si 
AE59    B9 04 00                  mov         cx,0x0004 
AE5C    26 89 77 16               mov         word ptr es:0x16[bx],si 
AE60    8D 7F 1E                  lea         di,0x1e[bx] 
AE63    26 8B 77 34               mov         si,word ptr es:0x34[bx] 
AE67    30 C0                     xor         al,al 
AE69    26 89 77 30               mov         word ptr es:0x30[bx],si 
AE6D    57                        push        di 
AE6E    F3 AA                     rep stosb   
AE70    5F                        pop         di 
	     AE72		; The label referred to here is an undefined location
AE71    E9 D9 57                  jmp         0x0001064d 
AE74                          list_stack_:
AE74    56                        push        si 
AE75    57                        push        di 
AE76    C8 04 00 00               enter       0x0004,0x00 
AE7A    89 C6                     mov         si,ax 
AE7C    89 56 FE                  mov         word ptr -0x2[bp],dx 
AE7F    8E D9                     mov         ds,cx 
AE81    8E C2                     mov         es,dx 
AE83    26 8B 4C 3A               mov         cx,word ptr es:0x3a[si] 
AE87    80 3F 00                  cmp         byte ptr [bx],0x00 
AE8A    75 07                     jne         L$1188 
AE8C    8E DA                     mov         ds,dx 
AE8E    8B 44 16                  mov         ax,word ptr 0x16[si] 
AE91    EB 08                     jmp         L$1189 
AE93                          L$1188:
AE93    8D 47 01                  lea         ax,0x1[bx] 
AE96    8C DA                     mov         dx,ds 
AE98    E8 00 00                  call        parse_number_ 
AE9B                          L$1189:
AE9B    89 46 FC                  mov         word ptr -0x4[bp],ax 
AE9E    89 CB                     mov         bx,cx 
AEA0    01 CB                     add         bx,cx 
AEA2                          L$1190:
AEA2    49                        dec         cx 
AEA3    4B                        dec         bx 
AEA4    4B                        dec         bx 
AEA5    3B 4E FC                  cmp         cx,word ptr -0x4[bp] 
	     AEAA		; The label referred to here is an undefined location
AEA8    0F 86 24 64               jbe         0x000112d0 
AEAC    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
AEAF    C5 7C 2E                  lds         di,dword ptr 0x2e[si] 
AEB2    01 DF                     add         di,bx 
AEB4    FF 35                     push        word ptr [di] 
AEB6    51                        push        cx 
AEB7    16                        push        ss 
AEB8    68 F3 09                  push        offset DGROUP:L$1554 
AEBB    16                        push        ss 
AEBC    68 00 00                  push        offset _message 
AEBF    8C D2                     mov         dx,ss 
AEC1    9A 00 00 00 00            call        sprintf_ 
AEC6    83 C4 0C                  add         sp,0x000c 
AEC9    B8 00 00                  mov         ax,offset _message 
AECC    9A 00 00 00 00            call        putstr_ 
AED1    EB CF                     jmp         L$1190 
AED3                          compile_asm_:
AED3    53                        push        bx 
AED4    51                        push        cx 
AED5    56                        push        si 
AED6    57                        push        di 
AED7    C8 6E 00 00               enter       0x006e,0x00 
AEDB    50                        push        ax 
AEDC    52                        push        dx 
AEDD    36 C6 06 00 00 00         mov         byte ptr ss:_pass,0x00 
AEE3                          L$1191:
AEE3    31 C0                     xor         ax,ax 
AEE5    8C D2                     mov         dx,ss 
AEE7    36 A3 00 00               mov         word ptr ss:_line_num,ax 
AEEB    36 A3 00 00               mov         word ptr ss:_codep_segment,ax 
AEEF    36 A3 00 00               mov         word ptr ss:_codep_offset,ax 
AEF3    B8 FE 09                  mov         ax,offset DGROUP:L$1555 
AEF6    9A 00 00 00 00            call        putstr_ 
AEFB                          L$1192:
AEFB    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
AF00    36 A1 00 00               mov         ax,word ptr ss:_line_num 
AF04    3B 47 04                  cmp         ax,word ptr 0x4[bx] 
AF07    0F 83 13 01               jae         L$1200 
AF0B    36 8B 1E 00 00            mov         bx,word ptr ss:_asm_content 
AF10    C1 E0 02                  shl         ax,0x02 
AF13    36 8E 1E 02 00            mov         ds,word ptr ss:_asm_content+0x2 
AF18                          L$1193:
AF18    C4 37                     les         si,dword ptr [bx] 
AF1A    01 C6                     add         si,ax 
AF1C    26 C4 3C                  les         di,dword ptr es:[si] 
AF1F    26 80 3D 00               cmp         byte ptr es:[di],0x00 
AF23    75 14                     jne         L$1194 
AF25    36 FF 06 00 00            inc         word ptr ss:_line_num 
AF2A    36 8B 16 00 00            mov         dx,word ptr ss:_line_num 
AF2F    05 04 00                  add         ax,0x0004 
AF32    3B 57 04                  cmp         dx,word ptr 0x4[bx] 
AF35    74 C4                     je          L$1192 
AF37    EB DF                     jmp         L$1193 
AF39                          L$1194:
AF39    36 A1 00 00               mov         ax,word ptr ss:_line_num 
AF3D    89 C2                     mov         dx,ax 
AF3F    40                        inc         ax 
AF40    36 A3 00 00               mov         word ptr ss:_line_num,ax 
AF44    C1 E2 02                  shl         dx,0x02 
AF47    C5 07                     lds         ax,dword ptr [bx] 
AF49    89 C3                     mov         bx,ax 
AF4B    01 D3                     add         bx,dx 
AF4D    8C D1                     mov         cx,ss 
AF4F    8B 07                     mov         ax,word ptr [bx] 
AF51    8B 57 02                  mov         dx,word ptr 0x2[bx] 
AF54    8D 5E FC                  lea         bx,-0x4[bp] 
AF57    E8 00 00                  call        start_instr_ 
AF5A    3D FF FF                  cmp         ax,0xffff 
AF5D    0F 84 B8 00               je          L$1199 
AF61    85 C0                     test        ax,ax 
AF63    75 96                     jne         L$1192 
AF65    C5 5E FC                  lds         bx,dword ptr -0x4[bp] 
AF68    0F B6 47 10               movzx       ax,byte ptr 0x10[bx] 
AF6C    50                        push        ax 
AF6D    16                        push        ss 
AF6E    68 0C 0A                  push        offset DGROUP:L$1556 
AF71    16                        push        ss 
AF72    8D 56 92                  lea         dx,-0x6e[bp] 
AF75    52                        push        dx 
AF76    9A 00 00 00 00            call        sprintf_ 
AF7B    83 C4 0A                  add         sp,0x000a 
AF7E    31 D2                     xor         dx,dx 
AF80                          L$1195:
AF80    C5 5E FC                  lds         bx,dword ptr -0x4[bp] 
AF83    0F B6 47 10               movzx       ax,byte ptr 0x10[bx] 
AF87    39 C2                     cmp         dx,ax 
AF89    73 6E                     jae         L$1197 
AF8B    8B 7E 90                  mov         di,word ptr -0x70[bp] 
AF8E    1E                        push        ds 
AF8F    07                        pop         es 
AF90    89 DE                     mov         si,bx 
AF92    8B 5E 90                  mov         bx,word ptr -0x70[bp] 
AF95    36 A1 00 00               mov         ax,word ptr ss:_codep_segment 
AF99    8E 5E 8E                  mov         ds,word ptr -0x72[bp] 
AF9C    C1 E0 02                  shl         ax,0x02 
AF9F    8B 5F 40                  mov         bx,word ptr 0x40[bx] 
AFA2    8E 5D 42                  mov         ds,word ptr 0x42[di] 
AFA5    01 C3                     add         bx,ax 
AFA7    36 A1 00 00               mov         ax,word ptr ss:_codep_offset 
AFAB    89 C1                     mov         cx,ax 
AFAD    41                        inc         cx 
AFAE    36 89 0E 00 00            mov         word ptr ss:_codep_offset,cx 
AFB3    C5 0F                     lds         cx,dword ptr [bx] 
AFB5    89 CB                     mov         bx,cx 
AFB7    01 D6                     add         si,dx 
AFB9    01 C3                     add         bx,ax 
AFBB    26 8A 04                  mov         al,byte ptr es:[si] 
AFBE    88 07                     mov         byte ptr [bx],al 
AFC0    C5 5E FC                  lds         bx,dword ptr -0x4[bp] 
AFC3    01 D3                     add         bx,dx 
AFC5    0F B6 07                  movzx       ax,byte ptr [bx] 
AFC8    50                        push        ax 
AFC9    16                        push        ss 
AFCA    68 32 0A                  push        offset DGROUP:L$1557 
AFCD    8D 5E F6                  lea         bx,-0xa[bp] 
AFD0    16                        push        ss 
AFD1    8D 7E 92                  lea         di,-0x6e[bp] 
AFD4    53                        push        bx 
AFD5    8D 76 F6                  lea         si,-0xa[bp] 
AFD8    9A 00 00 00 00            call        sprintf_ 
AFDD    83 C4 0A                  add         sp,0x000a 
AFE0    16                        push        ss 
AFE1    1F                        pop         ds 
AFE2    16                        push        ss 
AFE3    07                        pop         es 
AFE4    42                        inc         dx 
AFE5    57                        push        di 
AFE6    51                        push        cx 
AFE7    B9 FF FF                  mov         cx,0xffff 
AFEA    B0 00                     mov         al,0x00 
AFEC    F2 AE                     repne scasb 
AFEE    59                        pop         cx 
AFEF    4F                        dec         di 
AFF0                          L$1196:
AFF0    AC                        lodsb       
AFF1    AA                        stosb       
AFF2    3C 00                     cmp         al,0x00 
AFF4    75 FA                     jne         L$1196 
AFF6    5F                        pop         di 
AFF7    EB 87                     jmp         L$1195 
AFF9                          L$1197:
AFF9    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
AFFF    74 0A                     je          L$1198 
B001    8D 46 92                  lea         ax,-0x6e[bp] 
B004    8C D2                     mov         dx,ss 
B006    9A 00 00 00 00            call        putstr_ 
B00B                          L$1198:
B00B    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
B00E    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
B011    9A 00 00 00 00            call        free_ 
B016    E9 E2 FE                  jmp         L$1192 
B019                          L$1199:
B019    B0 01                     mov         al,0x01 
B01B    E9 15 F7                  jmp         L$1143 
B01E                          L$1200:
B01E    36 FE 06 00 00            inc         byte ptr ss:_pass 
B023    36 80 3E 00 00 01         cmp         byte ptr ss:_pass,0x01 
	     B02B		; The label referred to here is an undefined location
B029    0F 85 17 60               jne         0x00011044 
B02D    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
B033    0F 84 AC FE               je          L$1191 
B037    B8 3A 0A                  mov         ax,offset DGROUP:L$1558 
B03A    8C D2                     mov         dx,ss 
B03C    9A 00 00 00 00            call        putstr_ 
B041    E9 9F FE                  jmp         L$1191 

Routine Size: 3182 bytes,    Routine Base: vpu_main_TEXT + A3D6

B044                          vpu_run_program_:
B044    53                        push        bx 
B045    51                        push        cx 
B046    56                        push        si 
B047    57                        push        di 
B048    89 C3                     mov         bx,ax 
B04A    89 D1                     mov         cx,dx 
B04C    8E DA                     mov         ds,dx 
B04E    8B 47 22                  mov         ax,word ptr 0x22[bx] 
B051    8B 57 24                  mov         dx,word ptr 0x24[bx] 
B054    36 A3 00 00               mov         word ptr ss:_asm_content,ax 
B058    36 89 16 02 00            mov         word ptr ss:_asm_content+0x2,dx 
B05D    F6 47 0E 10               test        byte ptr 0xe[bx],0x10 
B061    75 29                     jne         L$1203 
B063    8B 47 16                  mov         ax,word ptr 0x16[bx] 
B066    8B 57 18                  mov         dx,word ptr 0x18[bx] 
B069    E8 00 00                  call        compile_asm_ 
B06C    84 C0                     test        al,al 
B06E    74 0C                     je          L$1202 
B070    B8 4F 0A                  mov         ax,offset DGROUP:L$1559 
B073    8C D2                     mov         dx,ss 
B075                          L$1201:
B075    9A 00 00 00 00            call        putstr_ 
B07A    EB 5C                     jmp         L$1207 
B07C                          L$1202:
B07C    B8 66 0A                  mov         ax,offset DGROUP:L$1560 
B07F    8E D9                     mov         ds,cx 
B081    8C D2                     mov         dx,ss 
B083    80 4F 0E 10               or          byte ptr 0xe[bx],0x10 
B087    9A 00 00 00 00            call        putstr_ 
B08C                          L$1203:
B08C    8E D9                     mov         ds,cx 
B08E    C5 77 16                  lds         si,dword ptr 0x16[bx] 
B091    F6 84 8A 01 40            test        byte ptr 0x18a[si],0x40 
B096    75 40                     jne         L$1207 
B098    89 F0                     mov         ax,si 
B09A    8C DA                     mov         dx,ds 
B09C    E8 00 00                  call        vpu_recursive_ 
B09F    89 C3                     mov         bx,ax 
B0A1    89 D1                     mov         cx,dx 
B0A3    89 C6                     mov         si,ax 
B0A5    89 D7                     mov         di,dx 
B0A7    85 D2                     test        dx,dx 
B0A9    75 04                     jne         L$1204 
B0AB    85 C0                     test        ax,ax 
B0AD    74 29                     je          L$1207 
B0AF                          L$1204:
B0AF    E8 00 00                  call        process_is_stopped_ 
B0B2    85 C0                     test        ax,ax 
B0B4    75 1D                     jne         L$1206 
B0B6    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
B0BC    74 07                     je          L$1205 
B0BE    89 D8                     mov         ax,bx 
B0C0    89 CA                     mov         dx,cx 
B0C2    E8 00 00                  call        vpu_step_debugoutput_ 
B0C5                          L$1205:
B0C5    89 F0                     mov         ax,si 
B0C7    89 FA                     mov         dx,di 
B0C9    E8 00 00                  call        vpu_step_ 
B0CC    89 F0                     mov         ax,si 
B0CE    89 FA                     mov         dx,di 
B0D0    E8 00 00                  call        vpu_getwindowkeys_ 
B0D3                          L$1206:
B0D3    30 C0                     xor         al,al 
B0D5    E9 2A E9                  jmp         L$1047 
B0D8                          L$1207:
B0D8    B0 01                     mov         al,0x01 
B0DA    E9 25 E9                  jmp         L$1047 
B0DD                          show_bytecode_:
B0DD    56                        push        si 
B0DE    57                        push        di 
B0DF    C8 42 00 00               enter       0x0042,0x00 
B0E3    89 C7                     mov         di,ax 
B0E5    89 56 F2                  mov         word ptr -0xe[bp],dx 
B0E8    89 DE                     mov         si,bx 
B0EA    89 4E FE                  mov         word ptr -0x2[bp],cx 
B0ED    E8 00 00                  call        parse_number_ 
B0F0    8B 56 F2                  mov         dx,word ptr -0xe[bp] 
B0F3    89 46 F0                  mov         word ptr -0x10[bp],ax 
B0F6    89 46 F8                  mov         word ptr -0x8[bp],ax 
B0F9    89 F8                     mov         ax,di 
B0FB    E8 00 00                  call        skip_word_ 
B0FE    E8 00 00                  call        skip_whitespaces_ 
B101    89 C1                     mov         cx,ax 
B103    89 D3                     mov         bx,dx 
B105    E8 00 00                  call        parse_number_ 
B108    89 C7                     mov         di,ax 
B10A    89 DA                     mov         dx,bx 
B10C    89 C8                     mov         ax,cx 
B10E    E8 00 00                  call        skip_word_ 
B111    E8 00 00                  call        skip_whitespaces_ 
B114    E8 00 00                  call        parse_number_ 
B117    89 46 F6                  mov         word ptr -0xa[bp],ax 
B11A    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
B11D    C1 E0 02                  shl         ax,0x02 
B120    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
B125    89 46 FA                  mov         word ptr -0x6[bp],ax 
B128                          L$1208:
B128    FF 4E F6                  dec         word ptr -0xa[bp] 
B12B    83 7E F6 FF               cmp         word ptr -0xa[bp],0xffff 
	     B131		; The label referred to here is an undefined location
B12F    0F 84 78 63               je          0x000114ab 
B133    80 7E 08 00               cmp         byte ptr 0x8[bp],0x00 
B137    74 18                     je          L$1209 
B139    BB 01 00                  mov         bx,0x0001 
B13C    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
B13F    89 FA                     mov         dx,di 
B141    E8 00 00                  call        get_addr_symbol_ 
B144    89 46 F4                  mov         word ptr -0xc[bp],ax 
B147    89 D3                     mov         bx,dx 
B149    85 D2                     test        dx,dx 
B14B    75 22                     jne         L$1210 
B14D    85 C0                     test        ax,ax 
B14F    75 1E                     jne         L$1210 
B151                          L$1209:
B151    80 7E 08 00               cmp         byte ptr 0x8[bp],0x00 
B155    75 37                     jne         L$1211 
B157    BB 02 00                  mov         bx,0x0002 
B15A    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
B15D    89 FA                     mov         dx,di 
B15F    E8 00 00                  call        get_addr_symbol_ 
B162    89 46 F4                  mov         word ptr -0xc[bp],ax 
B165    89 D3                     mov         bx,dx 
B167    85 D2                     test        dx,dx 
B169    75 04                     jne         L$1210 
B16B    85 C0                     test        ax,ax 
B16D    74 1F                     je          L$1211 
B16F                          L$1210:
B16F    53                        push        bx 
B170    FF 76 F4                  push        word ptr -0xc[bp] 
B173    16                        push        ss 
B174    68 CF 08                  push        offset DGROUP:L$1545 
B177    16                        push        ss 
B178    8D 56 BE                  lea         dx,-0x42[bp] 
B17B    52                        push        dx 
B17C    9A 00 00 00 00            call        sprintf_ 
B181    8D 46 BE                  lea         ax,-0x42[bp] 
B184    83 C4 0C                  add         sp,0x000c 
B187    8C D2                     mov         dx,ss 
B189    9A 00 00 00 00            call        putstr_ 
B18E                          L$1211:
B18E    80 7E 08 00               cmp         byte ptr 0x8[bp],0x00 
B192    74 6A                     je          L$1213 
B194    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
B197    8B 5C 48                  mov         bx,word ptr 0x48[si] 
B19A    03 5E FA                  add         bx,word ptr -0x6[bp] 
B19D    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
B1A0    8B 07                     mov         ax,word ptr [bx] 
B1A2    01 F8                     add         ax,di 
B1A4    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
B1A7    89 C3                     mov         bx,ax 
B1A9    80 3F 20                  cmp         byte ptr [bx],0x20 
B1AC    72 22                     jb          L$1212 
B1AE    80 3F 7E                  cmp         byte ptr [bx],0x7e 
B1B1    77 1D                     ja          L$1212 
B1B3    0F B6 07                  movzx       ax,byte ptr [bx] 
B1B6    50                        push        ax 
B1B7    50                        push        ax 
B1B8    57                        push        di 
B1B9    FF 76 F8                  push        word ptr -0x8[bp] 
B1BC    16                        push        ss 
B1BD    68 79 0A                  push        offset DGROUP:L$1561 
B1C0    16                        push        ss 
B1C1    8D 56 BE                  lea         dx,-0x42[bp] 
B1C4    52                        push        dx 
B1C5    9A 00 00 00 00            call        sprintf_ 
B1CA    83 C4 10                  add         sp,0x0010 
B1CD    E9 03 02                  jmp         L$1225 
B1D0                          L$1212:
B1D0    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
B1D3    8B 5C 48                  mov         bx,word ptr 0x48[si] 
B1D6    03 5E FA                  add         bx,word ptr -0x6[bp] 
B1D9    8E 5C 4A                  mov         ds,word ptr 0x4a[si] 
B1DC    C5 17                     lds         dx,dword ptr [bx] 
B1DE    89 D3                     mov         bx,dx 
B1E0    01 FB                     add         bx,di 
B1E2    0F B6 07                  movzx       ax,byte ptr [bx] 
B1E5    50                        push        ax 
B1E6    57                        push        di 
B1E7    FF 76 F8                  push        word ptr -0x8[bp] 
B1EA    16                        push        ss 
B1EB    68 91 0A                  push        offset DGROUP:L$1562 
B1EE    16                        push        ss 
B1EF    8D 56 BE                  lea         dx,-0x42[bp] 
B1F2    52                        push        dx 
B1F3    9A 00 00 00 00            call        sprintf_ 
B1F8    83 C4 0E                  add         sp,0x000e 
B1FB    E9 D5 01                  jmp         L$1225 
B1FE                          L$1213:
B1FE    83 7E FC 00               cmp         word ptr -0x4[bp],0x0000 
B202    0F 85 99 01               jne         L$1224 
B206    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
B209    8B 5C 40                  mov         bx,word ptr 0x40[si] 
B20C    03 5E FA                  add         bx,word ptr -0x6[bp] 
B20F    8E 5C 42                  mov         ds,word ptr 0x42[si] 
B212    8B 17                     mov         dx,word ptr [bx] 
B214    01 FA                     add         dx,di 
B216    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
B219    89 D3                     mov         bx,dx 
B21B    0F B6 07                  movzx       ax,byte ptr [bx] 
B21E    36 3B 06 00 00            cmp         ax,word ptr ss:_instruction_count 
B223    0F 83 78 01               jae         L$1224 
B227    0F B6 07                  movzx       ax,byte ptr [bx] 
B22A    89 C3                     mov         bx,ax 
B22C    C1 E3 02                  shl         bx,0x02 
B22F    66 36 FF B7 00 00         push        dword ptr ss:_INSTR[bx] 
B235    50                        push        ax 
B236    57                        push        di 
B237    FF 76 F8                  push        word ptr -0x8[bp] 
B23A    16                        push        ss 
B23B    68 A6 0A                  push        offset DGROUP:L$1563 
B23E    16                        push        ss 
B23F    8D 56 BE                  lea         dx,-0x42[bp] 
B242    52                        push        dx 
B243    9A 00 00 00 00            call        sprintf_ 
B248    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
B24B    8B 5C 40                  mov         bx,word ptr 0x40[si] 
B24E    03 5E FA                  add         bx,word ptr -0x6[bp] 
B251    8E 5C 42                  mov         ds,word ptr 0x42[si] 
B254    C5 17                     lds         dx,dword ptr [bx] 
B256    89 D3                     mov         bx,dx 
B258    8C D1                     mov         cx,ss 
B25A    01 FB                     add         bx,di 
B25C    83 C4 12                  add         sp,0x0012 
B25F    0F B6 07                  movzx       ax,byte ptr [bx] 
B262    BB 00 00                  mov         bx,offset _VINSTR 
B265    E8 00 00                  call        instr_in_array_ 
B268    84 C0                     test        al,al 
B26A    0F 85 65 01               jne         L$1225 
B26E    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
B271    8B 5C 40                  mov         bx,word ptr 0x40[si] 
B274    03 5E FA                  add         bx,word ptr -0x6[bp] 
B277    8E 5C 42                  mov         ds,word ptr 0x42[si] 
B27A    C5 07                     lds         ax,dword ptr [bx] 
B27C    89 C3                     mov         bx,ax 
B27E    01 FB                     add         bx,di 
B280    8C D1                     mov         cx,ss 
B282    0F B6 07                  movzx       ax,byte ptr [bx] 
B285    BB 00 00                  mov         bx,offset _SBYTE_INSTR 
B288    E8 00 00                  call        instr_in_array_ 
B28B    84 C0                     test        al,al 
B28D    74 08                     je          L$1214 
B28F    C7 46 FC 01 00            mov         word ptr -0x4[bp],0x0001 
B294    E9 3C 01                  jmp         L$1225 
B297                          L$1214:
B297    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
B29A    8B 5C 40                  mov         bx,word ptr 0x40[si] 
B29D    03 5E FA                  add         bx,word ptr -0x6[bp] 
B2A0    8E 5C 42                  mov         ds,word ptr 0x42[si] 
B2A3    C5 17                     lds         dx,dword ptr [bx] 
B2A5    89 D3                     mov         bx,dx 
B2A7    01 FB                     add         bx,di 
B2A9    8C D1                     mov         cx,ss 
B2AB    0F B6 07                  movzx       ax,byte ptr [bx] 
B2AE    BB 00 00                  mov         bx,offset _DBYTE_INSTR 
B2B1    E8 00 00                  call        instr_in_array_ 
B2B4    84 C0                     test        al,al 
B2B6    75 21                     jne         L$1215 
B2B8    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
B2BB    8B 5C 40                  mov         bx,word ptr 0x40[si] 
B2BE    03 5E FA                  add         bx,word ptr -0x6[bp] 
B2C1    8E 5C 42                  mov         ds,word ptr 0x42[si] 
B2C4    C5 07                     lds         ax,dword ptr [bx] 
B2C6    89 C3                     mov         bx,ax 
B2C8    01 FB                     add         bx,di 
B2CA    8C D1                     mov         cx,ss 
B2CC    0F B6 07                  movzx       ax,byte ptr [bx] 
B2CF    BB 00 00                  mov         bx,offset _SWORD_INSTR 
B2D2    E8 00 00                  call        instr_in_array_ 
B2D5    84 C0                     test        al,al 
B2D7    74 08                     je          L$1216 
B2D9                          L$1215:
B2D9    C7 46 FC 02 00            mov         word ptr -0x4[bp],0x0002 
B2DE    E9 F2 00                  jmp         L$1225 
B2E1                          L$1216:
B2E1    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
B2E4    8B 5C 40                  mov         bx,word ptr 0x40[si] 
B2E7    03 5E FA                  add         bx,word ptr -0x6[bp] 
B2EA    8E 5C 42                  mov         ds,word ptr 0x42[si] 
B2ED    C5 17                     lds         dx,dword ptr [bx] 
B2EF    89 D3                     mov         bx,dx 
B2F1    01 FB                     add         bx,di 
B2F3    8C D1                     mov         cx,ss 
B2F5    0F B6 07                  movzx       ax,byte ptr [bx] 
B2F8    BB 00 00                  mov         bx,offset _DWORD_INSTR 
B2FB    E8 00 00                  call        instr_in_array_ 
B2FE    84 C0                     test        al,al 
B300    75 18                     jne         L$1217 
B302    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
B305    8B 5C 40                  mov         bx,word ptr 0x40[si] 
B308    03 5E FA                  add         bx,word ptr -0x6[bp] 
B30B    8E 5C 42                  mov         ds,word ptr 0x42[si] 
B30E    C5 07                     lds         ax,dword ptr [bx] 
B310    89 C3                     mov         bx,ax 
B312    01 FB                     add         bx,di 
B314    8A 07                     mov         al,byte ptr [bx] 
B316    3C 15                     cmp         al,0x15 
B318    75 08                     jne         L$1218 
B31A                          L$1217:
B31A    C7 46 FC 04 00            mov         word ptr -0x4[bp],0x0004 
B31F    E9 B1 00                  jmp         L$1225 
B322                          L$1218:
B322    3C 02                     cmp         al,0x02 
B324    75 0E                     jne         L$1219 
B326    80 7F 01 00               cmp         byte ptr 0x1[bx],0x00 
B32A    75 EE                     jne         L$1217 
B32C    C7 46 FC 03 00            mov         word ptr -0x4[bp],0x0003 
B331    E9 9F 00                  jmp         L$1225 
B334                          L$1219:
B334    3C 01                     cmp         al,0x01 
B336    75 51                     jne         L$1223 
B338    C7 46 FC 03 00            mov         word ptr -0x4[bp],0x0003 
B33D    88 C5                     mov         ch,al 
B33F                          L$1220:
B33F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
B342    8B 5C 40                  mov         bx,word ptr 0x40[si] 
B345    03 5E FA                  add         bx,word ptr -0x6[bp] 
B348    8E 5C 42                  mov         ds,word ptr 0x42[si] 
B34B    C5 17                     lds         dx,dword ptr [bx] 
B34D    89 D3                     mov         bx,dx 
B34F    0F B6 C5                  movzx       ax,ch 
B352    01 FB                     add         bx,di 
B354    C1 E0 02                  shl         ax,0x02 
B357    0F B6 57 01               movzx       dx,byte ptr 0x1[bx] 
B35B    88 C1                     mov         cl,al 
B35D    89 D3                     mov         bx,dx 
B35F    D3 FB                     sar         bx,cl 
B361    83 E3 0F                  and         bx,0x000f 
B364    83 FB 0D                  cmp         bx,0x000d 
B367    74 14                     je          L$1221 
B369    83 FB 01                  cmp         bx,0x0001 
B36C    72 12                     jb          L$1222 
B36E    83 FB 03                  cmp         bx,0x0003 
B371    76 0A                     jbe         L$1221 
B373    83 FB 05                  cmp         bx,0x0005 
B376    72 08                     jb          L$1222 
B378    83 FB 07                  cmp         bx,0x0007 
B37B    77 03                     ja          L$1222 
B37D                          L$1221:
B37D    FF 46 FC                  inc         word ptr -0x4[bp] 
B380                          L$1222:
B380    FE CD                     dec         ch 
B382    80 FD FF                  cmp         ch,0xff 
B385    74 4C                     je          L$1225 
B387    EB B6                     jmp         L$1220 
B389                          L$1223:
B389    8C D1                     mov         cx,ss 
B38B    0F B6 07                  movzx       ax,byte ptr [bx] 
B38E    BB 00 00                  mov         bx,offset _TWORD_INSTR 
B391    E8 00 00                  call        instr_in_array_ 
B394    84 C0                     test        al,al 
B396    74 3B                     je          L$1225 
B398    C7 46 FC 06 00            mov         word ptr -0x4[bp],0x0006 
B39D    EB 34                     jmp         L$1225 
B39F                          L$1224:
B39F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
B3A2    8B 5C 40                  mov         bx,word ptr 0x40[si] 
B3A5    03 5E FA                  add         bx,word ptr -0x6[bp] 
B3A8    8E 5C 42                  mov         ds,word ptr 0x42[si] 
B3AB    C5 17                     lds         dx,dword ptr [bx] 
B3AD    89 D3                     mov         bx,dx 
B3AF    01 FB                     add         bx,di 
B3B1    0F B6 07                  movzx       ax,byte ptr [bx] 
B3B4    50                        push        ax 
B3B5    57                        push        di 
B3B6    FF 76 F8                  push        word ptr -0x8[bp] 
B3B9    16                        push        ss 
B3BA    68 91 0A                  push        offset DGROUP:L$1562 
B3BD    16                        push        ss 
B3BE    8D 56 BE                  lea         dx,-0x42[bp] 
B3C1    52                        push        dx 
B3C2    9A 00 00 00 00            call        sprintf_ 
B3C7    83 C4 0E                  add         sp,0x000e 
B3CA    83 7E FC 00               cmp         word ptr -0x4[bp],0x0000 
B3CE    74 03                     je          L$1225 
B3D0    FF 4E FC                  dec         word ptr -0x4[bp] 
B3D3                          L$1225:
B3D3    8D 46 BE                  lea         ax,-0x42[bp] 
B3D6    8C D2                     mov         dx,ss 
B3D8    47                        inc         di 
B3D9    9A 00 00 00 00            call        putstr_ 
B3DE    E9 47 FD                  jmp         L$1208 
B3E1                          toggle_debug_:
B3E1    53                        push        bx 
B3E2    51                        push        cx 
B3E3    55                        push        bp 
B3E4    31 ED                     xor         bp,bp 
B3E6    F6 96 00 00               not         byte ptr _debug[bp] 
B3EA    85 D2                     test        dx,dx 
B3EC    75 06                     jne         L$1226 
B3EE    85 C0                     test        ax,ax 
	     B3F2		; The label referred to here is an undefined location
B3F0    0F 84 D4 55               je          0x000109c8 
B3F4                          L$1226:
B3F4    80 BE 00 00 00            cmp         byte ptr _debug[bp],0x00 
B3F9    74 15                     je          L$1227 
B3FB    BB BE 0A                  mov         bx,offset DGROUP:L$1564 
B3FE    8C D1                     mov         cx,ss 
B400    9A 00 00 00 00            call        fopen_ 
B405    36 A3 00 00               mov         word ptr ss:_debugfp,ax 
B409    89 96 02 00               mov         word ptr _debugfp+0x2[bp],dx 
	     B40E		; The label referred to here is an undefined location
B40D    E9 B8 55                  jmp         0x000109c8 
B410                          L$1227:
B410    36 A1 00 00               mov         ax,word ptr ss:_debugfp 
B414    8B 96 02 00               mov         dx,word ptr _debugfp+0x2[bp] 
B418    9A 00 00 00 00            call        fclose_ 
B41D    31 C0                     xor         ax,ax 
B41F    36 A3 00 00               mov         word ptr ss:_debugfp,ax 
B423    36 A3 02 00               mov         word ptr ss:_debugfp+0x2,ax 
	     B428		; The label referred to here is an undefined location
B427    E9 9E 55                  jmp         0x000109c8 
B42A                          set_console_vpu_:
B42A    53                        push        bx 
B42B    56                        push        si 
B42C    36 C5 36 00 00            lds         si,dword ptr ss:_running_console 
B431    8B 5C 3A                  mov         bx,word ptr 0x3a[si] 
B434    8B 74 3C                  mov         si,word ptr 0x3c[si] 
B437    E8 00 00                  call        parse_number_ 
B43A    E8 00 00                  call        pid_to_vpu_ 
B43D    8E DE                     mov         ds,si 
B43F    89 47 16                  mov         word ptr 0x16[bx],ax 
B442    89 57 18                  mov         word ptr 0x18[bx],dx 
B445    8B 47 18                  mov         ax,word ptr 0x18[bx] 
B448    8B 57 16                  mov         dx,word ptr 0x16[bx] 
B44B    85 C0                     test        ax,ax 
B44D    75 18                     jne         L$1228 
B44F    85 D2                     test        dx,dx 
B451    75 14                     jne         L$1228 
B453    36 C5 36 00 00            lds         si,dword ptr ss:_running_console 
B458    C5 5C 3A                  lds         bx,dword ptr 0x3a[si] 
B45B    8B 57 1A                  mov         dx,word ptr 0x1a[bx] 
B45E    8B 47 1C                  mov         ax,word ptr 0x1c[bx] 
B461    89 57 16                  mov         word ptr 0x16[bx],dx 
B464    89 47 18                  mov         word ptr 0x18[bx],ax 
B467                          L$1228:
B467    5E                        pop         si 
B468    5B                        pop         bx 
B469    C3                        ret         
B46A                          command_handler_:
B46A    56                        push        si 
B46B    57                        push        di 
B46C    C8 0A 00 00               enter       0x000a,0x00 
B470    50                        push        ax 
B471    52                        push        dx 
B472    53                        push        bx 
B473    51                        push        cx 
B474    BE C1 0A                  mov         si,offset DGROUP:L$1565 
B477    89 C7                     mov         di,ax 
B479    8E C2                     mov         es,dx 
B47B    16                        push        ss 
B47C    1F                        pop         ds 
B47D                          L$1229:
B47D    AC                        lodsb       
B47E    26 8A 25                  mov         ah,byte ptr es:[di] 
B481    2A C4                     sub         al,ah 
B483    75 05                     jne         L$1230 
B485    47                        inc         di 
B486    3A C4                     cmp         al,ah 
B488    75 F3                     jne         L$1229 
B48A                          L$1230:
B48A    18 E4                     sbb         ah,ah 
B48C    85 C0                     test        ax,ax 
B48E    0F 84 B8 01               je          L$1251 
B492    8B 7E F4                  mov         di,word ptr -0xc[bp] 
B495    BE C6 0A                  mov         si,offset DGROUP:L$1566 
B498                          L$1231:
B498    AC                        lodsb       
B499    26 8A 25                  mov         ah,byte ptr es:[di] 
B49C    2A C4                     sub         al,ah 
B49E    75 05                     jne         L$1232 
B4A0    47                        inc         di 
B4A1    3A C4                     cmp         al,ah 
B4A3    75 F3                     jne         L$1231 
B4A5                          L$1232:
B4A5    18 E4                     sbb         ah,ah 
B4A7    85 C0                     test        ax,ax 
B4A9    75 24                     jne         L$1233 
B4AB    8E D9                     mov         ds,cx 
B4AD    FF B7 88 01               push        word ptr 0x188[bx] 
B4B1    16                        push        ss 
B4B2    BA F6 03                  mov         dx,offset DGROUP:L$1503 
B4B5    52                        push        dx 
B4B6    16                        push        ss 
B4B7    BA 00 00                  mov         dx,offset _message 
B4BA    52                        push        dx 
B4BB    9A 00 00 00 00            call        sprintf_ 
B4C0    83 C4 0A                  add         sp,0x000a 
B4C3    89 D0                     mov         ax,dx 
B4C5    8C D2                     mov         dx,ss 
B4C7    9A 00 00 00 00            call        putstr_ 
B4CC    E9 91 03                  jmp         L$1277 
B4CF                          L$1233:
B4CF    6A 03                     push        0x0003 
B4D1    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
B4D4    B8 C6 0A                  mov         ax,offset DGROUP:L$1566 
B4D7    89 D1                     mov         cx,dx 
B4D9    8C D2                     mov         dx,ss 
B4DB    9A 00 00 00 00            call        strncmp_ 
B4E0    85 C0                     test        ax,ax 
B4E2    75 0F                     jne         L$1234 
B4E4    8B 46 F4                  mov         ax,word ptr -0xc[bp] 
B4E7    8B 56 F2                  mov         dx,word ptr -0xe[bp] 
B4EA    05 04 00                  add         ax,0x0004 
B4ED    E8 00 00                  call        set_console_vpu_ 
B4F0    E9 6D 03                  jmp         L$1277 
B4F3                          L$1234:
B4F3    6A 05                     push        0x0005 
B4F5    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
B4F8    8B 4E F2                  mov         cx,word ptr -0xe[bp] 
B4FB    B8 CA 0A                  mov         ax,offset DGROUP:L$1567 
B4FE    8C D2                     mov         dx,ss 
B500    9A 00 00 00 00            call        strncmp_ 
B505    85 C0                     test        ax,ax 
B507    75 1E                     jne         L$1237 
B509    8E 5E F2                  mov         ds,word ptr -0xe[bp] 
B50C    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
B50F    8A 47 05                  mov         al,byte ptr 0x5[bx] 
B512    84 C0                     test        al,al 
B514    75 0A                     jne         L$1236 
B516    30 E4                     xor         ah,ah 
B518    31 D2                     xor         dx,dx 
B51A                          L$1235:
B51A    E8 00 00                  call        toggle_debug_ 
B51D    E9 40 03                  jmp         L$1277 
B520                          L$1236:
B520    8C DA                     mov         dx,ds 
B522    8D 47 06                  lea         ax,0x6[bx] 
B525    EB F3                     jmp         L$1235 
B527                          L$1237:
B527    6A 04                     push        0x0004 
B529    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
B52C    8B 4E F2                  mov         cx,word ptr -0xe[bp] 
B52F    B8 D0 0A                  mov         ax,offset DGROUP:L$1568 
B532    8C D2                     mov         dx,ss 
B534    9A 00 00 00 00            call        strncmp_ 
B539    85 C0                     test        ax,ax 
B53B    75 29                     jne         L$1240 
B53D    8B 7E F4                  mov         di,word ptr -0xc[bp] 
B540    8E 46 F2                  mov         es,word ptr -0xe[bp] 
B543    B9 FF FF                  mov         cx,0xffff 
B546    33 C0                     xor         ax,ax 
B548    F2 AE                     repne scasb 
B54A    F7 D1                     not         cx 
B54C    49                        dec         cx 
B54D    83 F9 05                  cmp         cx,0x0005 
B550    77 06                     ja          L$1239 
B552                          L$1238:
B552    B8 F2 04                  mov         ax,offset DGROUP:L$1597 
B555    E9 0B 03                  jmp         L$1278 
B558                          L$1239:
B558    8B 46 F4                  mov         ax,word ptr -0xc[bp] 
B55B    8C C2                     mov         dx,es 
B55D    05 05 00                  add         ax,0x0005 
B560    E8 00 00                  call        load_asm_ 
B563    E9 FA 02                  jmp         L$1277 
B566                          L$1240:
B566    6A 04                     push        0x0004 
B568    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
B56B    8B 4E F2                  mov         cx,word ptr -0xe[bp] 
B56E    B8 D5 0A                  mov         ax,offset DGROUP:L$1569 
B571    8C D2                     mov         dx,ss 
B573    9A 00 00 00 00            call        strncmp_ 
B578    85 C0                     test        ax,ax 
B57A    75 23                     jne         L$1241 
B57C    8B 7E F4                  mov         di,word ptr -0xc[bp] 
B57F    8E 46 F2                  mov         es,word ptr -0xe[bp] 
B582    B9 FF FF                  mov         cx,0xffff 
B585    33 C0                     xor         ax,ax 
B587    F2 AE                     repne scasb 
B589    F7 D1                     not         cx 
B58B    49                        dec         cx 
B58C    83 F9 05                  cmp         cx,0x0005 
B58F    76 C1                     jbe         L$1238 
B591    8B 46 F4                  mov         ax,word ptr -0xc[bp] 
B594    8C C2                     mov         dx,es 
B596    05 05 00                  add         ax,0x0005 
B599    E8 00 00                  call        save_asm_ 
B59C    E9 C1 02                  jmp         L$1277 
B59F                          L$1241:
B59F    6A 04                     push        0x0004 
B5A1    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
B5A4    8B 4E F2                  mov         cx,word ptr -0xe[bp] 
B5A7    B8 39 01                  mov         ax,offset DGROUP:L$1466 
B5AA    8C D2                     mov         dx,ss 
B5AC    9A 00 00 00 00            call        strncmp_ 
B5B1    85 C0                     test        ax,ax 
B5B3    75 16                     jne         L$1243 
B5B5                          L$1242:
B5B5    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
B5B8    8B 4E EE                  mov         cx,word ptr -0x12[bp] 
B5BB    50                        push        ax 
B5BC    8B 46 F4                  mov         ax,word ptr -0xc[bp] 
B5BF    8B 56 F2                  mov         dx,word ptr -0xe[bp] 
B5C2    05 05 00                  add         ax,0x0005 
B5C5    E8 00 00                  call        show_bytecode_ 
B5C8    E9 95 02                  jmp         L$1277 
B5CB                          L$1243:
B5CB    6A 04                     push        0x0004 
B5CD    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
B5D0    8B 4E F2                  mov         cx,word ptr -0xe[bp] 
B5D3    B8 3E 01                  mov         ax,offset DGROUP:L$1467 
B5D6    8C D2                     mov         dx,ss 
B5D8    9A 00 00 00 00            call        strncmp_ 
B5DD    85 C0                     test        ax,ax 
B5DF    75 05                     jne         L$1244 
B5E1    B8 01 00                  mov         ax,0x0001 
B5E4    EB CF                     jmp         L$1242 
B5E6                          L$1244:
B5E6    8B 7E F4                  mov         di,word ptr -0xc[bp] 
B5E9    8E 46 F2                  mov         es,word ptr -0xe[bp] 
B5EC    BE DA 0A                  mov         si,offset DGROUP:L$1570 
B5EF    16                        push        ss 
B5F0    1F                        pop         ds 
B5F1                          L$1245:
B5F1    AC                        lodsb       
B5F2    26 8A 25                  mov         ah,byte ptr es:[di] 
B5F5    2A C4                     sub         al,ah 
B5F7    75 05                     jne         L$1246 
B5F9    47                        inc         di 
B5FA    3A C4                     cmp         al,ah 
B5FC    75 F3                     jne         L$1245 
B5FE                          L$1246:
B5FE    18 E4                     sbb         ah,ah 
B600    85 C0                     test        ax,ax 
B602    75 05                     jne         L$1247 
B604    B8 02 00                  mov         ax,0x0002 
B607    EB 41                     jmp         L$1251 
B609                          L$1247:
B609    8B 7E F4                  mov         di,word ptr -0xc[bp] 
B60C    BE DF 0A                  mov         si,offset DGROUP:L$1571 
B60F                          L$1248:
B60F    AC                        lodsb       
B610    26 8A 25                  mov         ah,byte ptr es:[di] 
B613    2A C4                     sub         al,ah 
B615    75 05                     jne         L$1249 
B617    47                        inc         di 
B618    3A C4                     cmp         al,ah 
B61A    75 F3                     jne         L$1248 
B61C                          L$1249:
B61C    18 E4                     sbb         ah,ah 
B61E    85 C0                     test        ax,ax 
B620    75 2D                     jne         L$1252 
B622    8E 5E EE                  mov         ds,word ptr -0x12[bp] 
B625    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
B628    89 47 10                  mov         word ptr 0x10[bx],ax 
B62B    89 47 12                  mov         word ptr 0x12[bx],ax 
B62E    80 A7 8A 01 BF            and         byte ptr 0x18a[bx],0xbf 
B633    36 C5 36 00 00            lds         si,dword ptr ss:_running_console 
B638    C5 5C 3A                  lds         bx,dword ptr 0x3a[si] 
B63B    8B 47 1A                  mov         ax,word ptr 0x1a[bx] 
B63E    8B 57 1C                  mov         dx,word ptr 0x1c[bx] 
B641    89 47 16                  mov         word ptr 0x16[bx],ax 
B644    89 57 18                  mov         word ptr 0x18[bx],dx 
B647                          L$1250:
B647    B8 03 00                  mov         ax,0x0003 
B64A                          L$1251:
B64A    31 D2                     xor         dx,dx 
	     B64D		; The label referred to here is an undefined location
B64C    E9 81 5C                  jmp         0x000112d0 
B64F                          L$1252:
B64F    8B 7E F4                  mov         di,word ptr -0xc[bp] 
B652    BE E3 0A                  mov         si,offset DGROUP:L$1572 
B655                          L$1253:
B655    AC                        lodsb       
B656    26 8A 25                  mov         ah,byte ptr es:[di] 
B659    2A C4                     sub         al,ah 
B65B    75 05                     jne         L$1254 
B65D    47                        inc         di 
B65E    3A C4                     cmp         al,ah 
B660    75 F3                     jne         L$1253 
B662                          L$1254:
B662    18 E4                     sbb         ah,ah 
B664    85 C0                     test        ax,ax 
B666    75 21                     jne         L$1255 
B668    8E 5E EE                  mov         ds,word ptr -0x12[bp] 
B66B    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
B66E    80 A7 8A 01 BF            and         byte ptr 0x18a[bx],0xbf 
B673    36 C5 36 00 00            lds         si,dword ptr ss:_running_console 
B678    C5 5C 3A                  lds         bx,dword ptr 0x3a[si] 
B67B    8B 57 1A                  mov         dx,word ptr 0x1a[bx] 
B67E    8B 47 1C                  mov         ax,word ptr 0x1c[bx] 
B681    89 57 16                  mov         word ptr 0x16[bx],dx 
B684    89 47 18                  mov         word ptr 0x18[bx],ax 
B687    EB BE                     jmp         L$1250 
B689                          L$1255:
B689    8B 7E F4                  mov         di,word ptr -0xc[bp] 
B68C    BE EC 0A                  mov         si,offset DGROUP:L$1573 
B68F                          L$1256:
B68F    AC                        lodsb       
B690    26 8A 25                  mov         ah,byte ptr es:[di] 
B693    2A C4                     sub         al,ah 
B695    75 05                     jne         L$1257 
B697    47                        inc         di 
B698    3A C4                     cmp         al,ah 
B69A    75 F3                     jne         L$1256 
B69C                          L$1257:
B69C    18 E4                     sbb         ah,ah 
B69E    85 C0                     test        ax,ax 
B6A0    75 0F                     jne         L$1258 
B6A2    9A 00 00 00 00            call        clear_console_ 
B6A7    9A 00 00 00 00            call        refresh_ 
B6AC    B8 01 00                  mov         ax,0x0001 
B6AF    EB 99                     jmp         L$1251 
B6B1                          L$1258:
B6B1    8B 7E F4                  mov         di,word ptr -0xc[bp] 
B6B4    BE F1 0A                  mov         si,offset DGROUP:L$1574 
B6B7                          L$1259:
B6B7    AC                        lodsb       
B6B8    26 8A 25                  mov         ah,byte ptr es:[di] 
B6BB    2A C4                     sub         al,ah 
B6BD    75 05                     jne         L$1260 
B6BF    47                        inc         di 
B6C0    3A C4                     cmp         al,ah 
B6C2    75 F3                     jne         L$1259 
B6C4                          L$1260:
B6C4    18 E4                     sbb         ah,ah 
B6C6    85 C0                     test        ax,ax 
B6C8    75 06                     jne         L$1261 
B6CA    E8 00 00                  call        list_symbols_ 
B6CD    E9 90 01                  jmp         L$1277 
B6D0                          L$1261:
B6D0    8B 7E F4                  mov         di,word ptr -0xc[bp] 
B6D3    BE F7 0A                  mov         si,offset DGROUP:L$1575 
B6D6                          L$1262:
B6D6    AC                        lodsb       
B6D7    26 8A 25                  mov         ah,byte ptr es:[di] 
B6DA    2A C4                     sub         al,ah 
B6DC    75 05                     jne         L$1263 
B6DE    47                        inc         di 
B6DF    3A C4                     cmp         al,ah 
B6E1    75 F3                     jne         L$1262 
B6E3                          L$1263:
B6E3    18 E4                     sbb         ah,ah 
B6E5    85 C0                     test        ax,ax 
B6E7    75 0C                     jne         L$1264 
B6E9    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
B6EC    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
B6EF    E8 00 00                  call        print_status_ 
B6F2    E9 6B 01                  jmp         L$1277 
B6F5                          L$1264:
B6F5    8B 7E F4                  mov         di,word ptr -0xc[bp] 
B6F8    BE FE 0A                  mov         si,offset DGROUP:L$1576 
B6FB                          L$1265:
B6FB    AC                        lodsb       
B6FC    26 8A 25                  mov         ah,byte ptr es:[di] 
B6FF    2A C4                     sub         al,ah 
B701    75 05                     jne         L$1266 
B703    47                        inc         di 
B704    3A C4                     cmp         al,ah 
B706    75 F3                     jne         L$1265 
B708                          L$1266:
B708    18 E4                     sbb         ah,ah 
B70A    85 C0                     test        ax,ax 
B70C    75 0C                     jne         L$1267 
B70E    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
B711    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
B714    E8 00 00                  call        reset_vpu_ 
B717    E9 46 01                  jmp         L$1277 
B71A                          L$1267:
B71A    6A 05                     push        0x0005 
B71C    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
B71F    B8 33 01                  mov         ax,offset DGROUP:L$1465 
B722    8C C1                     mov         cx,es 
B724    8C D2                     mov         dx,ss 
B726    9A 00 00 00 00            call        strncmp_ 
B72B    85 C0                     test        ax,ax 
B72D    75 15                     jne         L$1268 
B72F    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
B732    8B 4E F2                  mov         cx,word ptr -0xe[bp] 
B735    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
B738    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
B73B    83 C3 05                  add         bx,0x0005 
B73E    E8 00 00                  call        list_stack_ 
B741    E9 1C 01                  jmp         L$1277 
B744                          L$1268:
B744    6A 07                     push        0x0007 
B746    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
B749    8B 4E F2                  mov         cx,word ptr -0xe[bp] 
B74C    B8 04 0B                  mov         ax,offset DGROUP:L$1577 
B74F    8C D2                     mov         dx,ss 
B751    8B 76 F4                  mov         si,word ptr -0xc[bp] 
B754    9A 00 00 00 00            call        strncmp_ 
B759    83 C6 08                  add         si,0x0008 
B75C    85 C0                     test        ax,ax 
B75E    75 0E                     jne         L$1270 
B760    BB 01 00                  mov         bx,0x0001 
B763    8B 56 F2                  mov         dx,word ptr -0xe[bp] 
B766    89 F0                     mov         ax,si 
B768                          L$1269:
B768    E8 00 00                  call        show_unsigned_data_ 
B76B    E9 F2 00                  jmp         L$1277 
B76E                          L$1270:
B76E    6A 07                     push        0x0007 
B770    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
B773    8B 4E F2                  mov         cx,word ptr -0xe[bp] 
B776    B8 0C 0B                  mov         ax,offset DGROUP:L$1578 
B779    8C D2                     mov         dx,ss 
B77B    9A 00 00 00 00            call        strncmp_ 
B780    85 C0                     test        ax,ax 
B782    75 09                     jne         L$1271 
B784    8B 56 F2                  mov         dx,word ptr -0xe[bp] 
B787    89 F0                     mov         ax,si 
B789    31 DB                     xor         bx,bx 
B78B    EB DB                     jmp         L$1269 
B78D                          L$1271:
B78D    8E 5E F2                  mov         ds,word ptr -0xe[bp] 
B790    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
B793    80 3F 24                  cmp         byte ptr [bx],0x24 
B796    75 0B                     jne         L$1272 
B798    8D 47 01                  lea         ax,0x1[bx] 
B79B    8C DA                     mov         dx,ds 
B79D    E8 00 00                  call        show_variable_ 
B7A0    E9 BD 00                  jmp         L$1277 
B7A3                          L$1272:
B7A3    8D 5E FC                  lea         bx,-0x4[bp] 
B7A6    8B 46 F4                  mov         ax,word ptr -0xc[bp] 
B7A9    8C D1                     mov         cx,ss 
B7AB    8C DA                     mov         dx,ds 
B7AD    E8 00 00                  call        start_instr_ 
B7B0    3D FF FF                  cmp         ax,0xffff 
B7B3    0F 84 A4 00               je          L$1276 
B7B7    85 C0                     test        ax,ax 
B7B9    0F 85 A3 00               jne         L$1277 
B7BD    C5 5E FC                  lds         bx,dword ptr -0x4[bp] 
B7C0    0F B6 47 10               movzx       ax,byte ptr 0x10[bx] 
B7C4    50                        push        ax 
B7C5    16                        push        ss 
B7C6    68 0C 0A                  push        offset DGROUP:L$1556 
B7C9    16                        push        ss 
B7CA    BF A9 00                  mov         di,offset DGROUP:L$1602 
B7CD    68 A9 00                  push        offset DGROUP:L$1602 
B7D0    31 D2                     xor         dx,dx 
B7D2    9A 00 00 00 00            call        sprintf_ 
B7D7    83 C4 0A                  add         sp,0x000a 
B7DA                          L$1273:
B7DA    C5 5E FC                  lds         bx,dword ptr -0x4[bp] 
B7DD    0F B6 47 10               movzx       ax,byte ptr 0x10[bx] 
B7E1    39 C2                     cmp         dx,ax 
B7E3    73 33                     jae         L$1275 
B7E5    01 D3                     add         bx,dx 
B7E7    0F B6 07                  movzx       ax,byte ptr [bx] 
B7EA    50                        push        ax 
B7EB    16                        push        ss 
B7EC    68 32 0A                  push        offset DGROUP:L$1557 
B7EF    16                        push        ss 
B7F0    8D 5E F6                  lea         bx,-0xa[bp] 
B7F3    53                        push        bx 
B7F4    8D 76 F6                  lea         si,-0xa[bp] 
B7F7    9A 00 00 00 00            call        sprintf_ 
B7FC    83 C4 0A                  add         sp,0x000a 
B7FF    16                        push        ss 
B800    1F                        pop         ds 
B801    16                        push        ss 
B802    07                        pop         es 
B803    42                        inc         dx 
B804    57                        push        di 
B805    51                        push        cx 
B806    B9 FF FF                  mov         cx,0xffff 
B809    B0 00                     mov         al,0x00 
B80B    F2 AE                     repne scasb 
B80D    59                        pop         cx 
B80E    4F                        dec         di 
B80F                          L$1274:
B80F    AC                        lodsb       
B810    AA                        stosb       
B811    3C 00                     cmp         al,0x00 
B813    75 FA                     jne         L$1274 
B815    5F                        pop         di 
B816    EB C2                     jmp         L$1273 
B818                          L$1275:
B818    B8 A9 00                  mov         ax,offset DGROUP:L$1602 
B81B    8C D2                     mov         dx,ss 
B81D    9A 00 00 00 00            call        putstr_ 
B822    16                        push        ss 
B823    68 14 0B                  push        offset DGROUP:L$1579 
B826    16                        push        ss 
B827    68 A9 00                  push        offset DGROUP:L$1602 
B82A    8C D2                     mov         dx,ss 
B82C    9A 00 00 00 00            call        sprintf_ 
B831    83 C4 08                  add         sp,0x0008 
B834    B8 A9 00                  mov         ax,offset DGROUP:L$1602 
B837    9A 00 00 00 00            call        putstr_ 
B83C    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
B83F    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
B842    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
B845    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
B848    E8 00 00                  call        vpu_console_instr_ 
B84B    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
B84E    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
B851    9A 00 00 00 00            call        free_ 
B856    B8 00 00                  mov         ax,offset _response_ready 
B859    EB 08                     jmp         L$1278 
B85B                          L$1276:
B85B    B8 D2 04                  mov         ax,offset DGROUP:L$1596 
B85E    EB 03                     jmp         L$1278 
B860                          L$1277:
B860    B8 00 00                  mov         ax,offset _response_ready 
B863                          L$1278:
B863    8C D2                     mov         dx,ss 
	     B866		; The label referred to here is an undefined location
B865    E9 68 5A                  jmp         0x000112d0 

Routine Size: 2084 bytes,    Routine Base: vpu_main_TEXT + B044

B868                          commandline_:
B868    53                        push        bx 
B869    51                        push        cx 
B86A    56                        push        si 
B86B    57                        push        di 
B86C    89 C6                     mov         si,ax 
B86E    89 D7                     mov         di,dx 
B870    8E DA                     mov         ds,dx 
B872    8D 5C 2A                  lea         bx,0x2a[si] 
B875    89 F9                     mov         cx,di 
B877    8B 44 22                  mov         ax,word ptr 0x22[si] 
B87A    8B 54 24                  mov         dx,word ptr 0x24[si] 
B87D    36 A3 00 00               mov         word ptr ss:_asm_content,ax 
B881    36 89 16 02 00            mov         word ptr ss:_asm_content+0x2,dx 
B886    89 F0                     mov         ax,si 
B888    89 FA                     mov         dx,di 
B88A    E8 00 00                  call        getcommand_ 
B88D    85 D2                     test        dx,dx 
B88F    75 06                     jne         L$1279 
B891    85 C0                     test        ax,ax 
B893    0F 84 41 F8               je          L$1207 
B897                          L$1279:
B897    8E DF                     mov         ds,di 
B899    8B 5C 16                  mov         bx,word ptr 0x16[si] 
B89C    8B 4C 18                  mov         cx,word ptr 0x18[si] 
B89F    E8 00 00                  call        command_handler_ 
B8A2    85 D2                     test        dx,dx 
B8A4    75 09                     jne         L$1280 
B8A6    85 C0                     test        ax,ax 
B8A8    75 05                     jne         L$1280 
B8AA    30 C0                     xor         al,al 
B8AC    E9 53 E1                  jmp         L$1047 
B8AF                          L$1280:
B8AF    85 D2                     test        dx,dx 
B8B1    75 12                     jne         L$1281 
B8B3    3D 01 00                  cmp         ax,0x0001 
B8B6    75 0D                     jne         L$1281 
B8B8    8E DF                     mov         ds,di 
B8BA    80 64 0E FC               and         byte ptr 0xe[si],0xfc 
B8BE    80 4C 0E 01               or          byte ptr 0xe[si],0x01 
B8C2    E9 13 F8                  jmp         L$1207 
B8C5                          L$1281:
B8C5    85 D2                     test        dx,dx 
B8C7    75 12                     jne         L$1282 
B8C9    3D 02 00                  cmp         ax,0x0002 
B8CC    75 0D                     jne         L$1282 
B8CE    8E DF                     mov         ds,di 
B8D0    80 64 0E F3               and         byte ptr 0xe[si],0xf3 
B8D4    80 4C 0E 04               or          byte ptr 0xe[si],0x04 
B8D8    E9 FD F7                  jmp         L$1207 
B8DB                          L$1282:
B8DB    85 D2                     test        dx,dx 
B8DD    0F 85 94 F7               jne         L$1201 
B8E1    3D 03 00                  cmp         ax,0x0003 
B8E4    0F 85 8D F7               jne         L$1201 
B8E8    8E DF                     mov         ds,di 
B8EA    80 64 0E F3               and         byte ptr 0xe[si],0xf3 
B8EE    80 4C 0E 08               or          byte ptr 0xe[si],0x08 
B8F2    E9 E3 F7                  jmp         L$1207 
B8F5                          list_code_:
B8F5    53                        push        bx 
B8F6    51                        push        cx 
B8F7    52                        push        dx 
B8F8    56                        push        si 
B8F9    57                        push        di 
B8FA    C8 02 00 00               enter       0x0002,0x00 
B8FE    50                        push        ax 
B8FF    36 0F B6 36 00 00         movzx       si,byte ptr ss:_SCR_ROWS 
B905    01 C6                     add         si,ax 
B907    9A 00 00 00 00            call        clear_console_ 
B90C    9A 00 00 00 00            call        refresh_ 
B911    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
B914    4E                        dec         si 
B915    4E                        dec         si 
B916    F7 D8                     neg         ax 
B918    89 F7                     mov         di,si 
B91A    01 C7                     add         di,ax 
B91C    89 F0                     mov         ax,si 
B91E    C1 E0 02                  shl         ax,0x02 
B921    89 46 FE                  mov         word ptr -0x2[bp],ax 
B924                          L$1283:
B924    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
B929    3B 77 04                  cmp         si,word ptr 0x4[bx] 
B92C    73 17                     jae         L$1284 
B92E    C5 07                     lds         ax,dword ptr [bx] 
B930    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
B933    01 C3                     add         bx,ax 
B935    31 D2                     xor         dx,dx 
B937    8B 07                     mov         ax,word ptr [bx] 
B939    8B 4F 02                  mov         cx,word ptr 0x2[bx] 
B93C    89 C3                     mov         bx,ax 
B93E    89 F8                     mov         ax,di 
B940    9A 00 00 00 00            call        print_text_ 
B945                          L$1284:
B945    83 6E FE 04               sub         word ptr -0x2[bp],0x0004 
B949    89 F0                     mov         ax,si 
B94B    4F                        dec         di 
B94C    4E                        dec         si 
B94D    3B 46 FC                  cmp         ax,word ptr -0x4[bp] 
B950    77 D2                     ja          L$1283 
B952                          L$1285:
B952    C9                        leave       
B953    5F                        pop         di 
B954    E9 90 B3                  jmp         L$768 
B957                          add_asm_row_:
B957    53                        push        bx 
B958    51                        push        cx 
B959    52                        push        dx 
B95A    56                        push        si 
B95B    57                        push        di 
B95C    C8 02 00 00               enter       0x0002,0x00 
B960    50                        push        ax 
B961    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
B966    8B 77 04                  mov         si,word ptr 0x4[bx] 
B969    89 F1                     mov         cx,si 
B96B    8D 44 01                  lea         ax,0x1[si] 
B96E    89 47 04                  mov         word ptr 0x4[bx],ax 
B971    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
B976    8B 7F 04                  mov         di,word ptr 0x4[bx] 
B979    8B 07                     mov         ax,word ptr [bx] 
B97B    C1 E7 02                  shl         di,0x02 
B97E    8B 57 02                  mov         dx,word ptr 0x2[bx] 
B981    89 FB                     mov         bx,di 
B983    9A 00 00 00 00            call        realloc_ 
B988    85 D2                     test        dx,dx 
B98A    75 09                     jne         L$1287 
B98C    85 C0                     test        ax,ax 
B98E    75 05                     jne         L$1287 
B990                          L$1286:
B990    BB 01 00                  mov         bx,0x0001 
B993    EB 5D                     jmp         L$1291 
B995                          L$1287:
B995    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
B99A    89 07                     mov         word ptr [bx],ax 
B99C    89 57 02                  mov         word ptr 0x2[bx],dx 
B99F    BA 01 00                  mov         dx,0x0001 
B9A2    B8 51 00                  mov         ax,0x0051 
B9A5    9A 00 00 00 00            call        calloc_ 
B9AA    89 46 FE                  mov         word ptr -0x2[bp],ax 
B9AD    89 D7                     mov         di,dx 
B9AF    85 D2                     test        dx,dx 
B9B1    75 04                     jne         L$1288 
B9B3    85 C0                     test        ax,ax 
B9B5    74 D9                     je          L$1286 
B9B7                          L$1288:
B9B7    89 F0                     mov         ax,si 
B9B9    C1 E0 02                  shl         ax,0x02 
B9BC                          L$1289:
B9BC    3B 4E FC                  cmp         cx,word ptr -0x4[bp] 
B9BF    76 1C                     jbe         L$1290 
B9C1    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
B9C6    C5 17                     lds         dx,dword ptr [bx] 
B9C8    89 D3                     mov         bx,dx 
B9CA    01 C3                     add         bx,ax 
B9CC    49                        dec         cx 
B9CD    8B 57 FC                  mov         dx,word ptr -0x4[bx] 
B9D0    8B 77 FE                  mov         si,word ptr -0x2[bx] 
B9D3    89 17                     mov         word ptr [bx],dx 
B9D5    2D 04 00                  sub         ax,0x0004 
B9D8    89 77 02                  mov         word ptr 0x2[bx],si 
B9DB    EB DF                     jmp         L$1289 
B9DD                          L$1290:
B9DD    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
B9E2    C5 17                     lds         dx,dword ptr [bx] 
B9E4    89 D3                     mov         bx,dx 
B9E6    01 C3                     add         bx,ax 
B9E8    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
B9EB    89 7F 02                  mov         word ptr 0x2[bx],di 
B9EE    89 07                     mov         word ptr [bx],ax 
B9F0    31 DB                     xor         bx,bx 
B9F2                          L$1291:
B9F2    89 D8                     mov         ax,bx 
B9F4    E9 5B FF                  jmp         L$1285 
B9F7                          delete_asm_row_:
B9F7    53                        push        bx 
B9F8    51                        push        cx 
B9F9    52                        push        dx 
B9FA    56                        push        si 
B9FB    55                        push        bp 
B9FC    31 ED                     xor         bp,bp 
B9FE    89 C1                     mov         cx,ax 
BA00    8B 9E 00 00               mov         bx,word ptr _asm_content[bp] 
BA04    89 C6                     mov         si,ax 
BA06    8E 9E 02 00               mov         ds,word ptr _asm_content+0x2[bp] 
BA0A    C1 E6 02                  shl         si,0x02 
BA0D    C5 07                     lds         ax,dword ptr [bx] 
BA0F    89 C3                     mov         bx,ax 
BA11    01 F3                     add         bx,si 
BA13    8B 07                     mov         ax,word ptr [bx] 
BA15    8B 57 02                  mov         dx,word ptr 0x2[bx] 
BA18    9A 00 00 00 00            call        free_ 
BA1D    8B 9E 00 00               mov         bx,word ptr _asm_content[bp] 
BA21    89 C8                     mov         ax,cx 
BA23    8E 9E 02 00               mov         ds,word ptr _asm_content+0x2[bp] 
BA27    89 F1                     mov         cx,si 
BA29    FF 4F 04                  dec         word ptr 0x4[bx] 
BA2C                          L$1292:
BA2C    C5 9E 00 00               lds         bx,dword ptr _asm_content[bp] 
BA30    3B 47 04                  cmp         ax,word ptr 0x4[bx] 
BA33    73 17                     jae         L$1293 
BA35    C5 17                     lds         dx,dword ptr [bx] 
BA37    89 D3                     mov         bx,dx 
BA39    01 CB                     add         bx,cx 
BA3B    40                        inc         ax 
BA3C    8B 57 04                  mov         dx,word ptr 0x4[bx] 
BA3F    8B 77 06                  mov         si,word ptr 0x6[bx] 
BA42    89 17                     mov         word ptr [bx],dx 
BA44    83 C1 04                  add         cx,0x0004 
BA47    89 77 02                  mov         word ptr 0x2[bx],si 
BA4A    EB E0                     jmp         L$1292 
BA4C                          L$1293:
BA4C    8B 47 04                  mov         ax,word ptr 0x4[bx] 
BA4F    8B 0F                     mov         cx,word ptr [bx] 
BA51    C1 E0 02                  shl         ax,0x02 
BA54    8B 57 02                  mov         dx,word ptr 0x2[bx] 
BA57    89 C3                     mov         bx,ax 
BA59    89 C8                     mov         ax,cx 
BA5B    9A 00 00 00 00            call        realloc_ 
BA60    C5 9E 00 00               lds         bx,dword ptr _asm_content[bp] 
BA64    89 07                     mov         word ptr [bx],ax 
BA66    89 57 02                  mov         word ptr 0x2[bx],dx 
BA69    E9 7A B2                  jmp         L$767 
BA6C                          code_editor_draw_screen_:
BA6C    51                        push        cx 
BA6D    56                        push        si 
BA6E    57                        push        di 
BA6F    C8 54 00 00               enter       0x0054,0x00 
BA73    89 C6                     mov         si,ax 
BA75    89 56 FE                  mov         word ptr -0x2[bp],dx 
BA78    89 DF                     mov         di,bx 
BA7A    36 C5 1E 00 00            lds         bx,dword ptr ss:_cursor_col 
BA7F    8B 17                     mov         dx,word ptr [bx] 
BA81    36 C5 1E 00 00            lds         bx,dword ptr ss:_cursor_row 
BA86    8B 07                     mov         ax,word ptr [bx] 
BA88    BB 01 00                  mov         bx,0x0001 
BA8B    9A 00 00 00 00            call        vpucon_caret_ 
BA90    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
BA93    29 F0                     sub         ax,si 
BA95    89 C6                     mov         si,ax 
BA97    9A 00 00 00 00            call        clear_row_ 
BA9C    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
BA9F    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
BAA4    C1 E0 02                  shl         ax,0x02 
BAA7    C5 17                     lds         dx,dword ptr [bx] 
BAA9    89 D3                     mov         bx,dx 
BAAB    01 C3                     add         bx,ax 
BAAD    31 D2                     xor         dx,dx 
BAAF    8B 07                     mov         ax,word ptr [bx] 
BAB1    8B 4F 02                  mov         cx,word ptr 0x2[bx] 
BAB4    89 C3                     mov         bx,ax 
BAB6    89 F0                     mov         ax,si 
BAB8    9A 00 00 00 00            call        print_text_ 
BABD    36 0F B6 06 00 00         movzx       ax,byte ptr ss:_SCR_ROWS 
BAC3    48                        dec         ax 
BAC4    9A 00 00 00 00            call        clear_row_ 
BAC9    57                        push        di 
BACA    FF 76 FE                  push        word ptr -0x2[bp] 
BACD    16                        push        ss 
BACE    68 2D 0B                  push        offset DGROUP:L$1580 
BAD1    8D 56 AC                  lea         dx,-0x54[bp] 
BAD4    16                        push        ss 
BAD5    8D 5E AC                  lea         bx,-0x54[bp] 
BAD8    52                        push        dx 
BAD9    8C D1                     mov         cx,ss 
BADB    9A 00 00 00 00            call        sprintf_ 
BAE0    36 0F B6 06 00 00         movzx       ax,byte ptr ss:_SCR_ROWS 
BAE6    83 C4 0C                  add         sp,0x000c 
BAE9    31 D2                     xor         dx,dx 
BAEB    48                        dec         ax 
BAEC    9A 00 00 00 00            call        print_text_ 
BAF1    89 FA                     mov         dx,di 
BAF3    89 F0                     mov         ax,si 
BAF5    9A 00 00 00 00            call        move_ 
	     BAFB		; The label referred to here is an undefined location
BAFA    E9 F5 60                  jmp         0x00011bf2 
BAFD    30 BD                                           DW	offset L$1396
BAFF    EF BB                                           DW	offset L$1391
BB01    0A BC                                           DW	offset L$1393
BB03    B4 BB                                           DW	offset L$1388
BB05    AB BB                                           DW	offset L$1387
BB07    B4 BB                                           DW	offset L$1388
BB09    C8 BB                                           DW	offset L$1389
BB0B    B4 BB                                           DW	offset L$1388
BB0D    D0 BB                                           DW	offset L$1390
BB0F    F8 BB                                           DW	offset L$1392
BB11    1D BC                                           DW	offset L$1394
BB13    B4 BB                                           DW	offset L$1388
BB15    40 BC                                           DW	offset L$1395

Routine Size: 687 bytes,    Routine Base: vpu_main_TEXT + B868

BB17                          code_editor_:
BB17    53                        push        bx 
BB18    51                        push        cx 
BB19    56                        push        si 
BB1A    57                        push        di 
BB1B    C8 1C 00 00               enter       0x001c,0x00 
BB1F    89 C6                     mov         si,ax 
BB21    89 56 FE                  mov         word ptr -0x2[bp],dx 
BB24    8E DA                     mov         ds,dx 
BB26    8B 44 08                  mov         ax,word ptr 0x8[si] 
BB29    8B 4C 0A                  mov         cx,word ptr 0xa[si] 
BB2C    8B 7C 0C                  mov         di,word ptr 0xc[si] 
BB2F    89 46 FC                  mov         word ptr -0x4[bp],ax 
BB32    8B 44 22                  mov         ax,word ptr 0x22[si] 
BB35    8B 54 24                  mov         dx,word ptr 0x24[si] 
BB38    36 A3 00 00               mov         word ptr ss:_asm_content,ax 
BB3C    36 89 16 02 00            mov         word ptr ss:_asm_content+0x2,dx 
BB41    8B 44 0E                  mov         ax,word ptr 0xe[si] 
BB44    25 03 00                  and         ax,0x0003 
BB47    3D 01 00                  cmp         ax,0x0001 
BB4A    75 1B                     jne         L$1294 
BB4C    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
BB4F    E8 00 00                  call        list_code_ 
BB52    89 FB                     mov         bx,di 
BB54    89 CA                     mov         dx,cx 
BB56    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
BB59    E8 00 00                  call        code_editor_draw_screen_ 
BB5C    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
BB5F    80 64 0E FC               and         byte ptr 0xe[si],0xfc 
BB63    80 4C 0E 02               or          byte ptr 0xe[si],0x02 
BB67                          L$1294:
BB67    9A 00 00 00 00            call        vpuconsole_getch_ 
BB6C    89 46 EA                  mov         word ptr -0x16[bp],ax 
BB6F    3D FF FF                  cmp         ax,0xffff 
BB72    0F 84 8B DE               je          L$1046 
BB76    89 CA                     mov         dx,cx 
BB78    4A                        dec         dx 
BB79    89 56 EE                  mov         word ptr -0x12[bp],dx 
BB7C    8D 55 FF                  lea         dx,-0x1[di] 
BB7F    89 56 F6                  mov         word ptr -0xa[bp],dx 
BB82    89 CA                     mov         dx,cx 
BB84    42                        inc         dx 
BB85    89 56 FA                  mov         word ptr -0x6[bp],dx 
BB88    89 CA                     mov         dx,cx 
BB8A    C1 E2 02                  shl         dx,0x02 
BB8D    85 C0                     test        ax,ax 
BB8F    0F 85 04 01               jne         L$1302 
BB93    9A 00 00 00 00            call        vpuconsole_getch_ 
BB98    89 C3                     mov         bx,ax 
BB9A    83 EB 47                  sub         bx,0x0047 
BB9D    83 FB 0C                  cmp         bx,0x000c 
BBA0    0F 87 10 00               ja          L$1295 
BBA4    01 DB                     add         bx,bx 
BBA6    2E FF A7 FD BA            jmp         word ptr cs:output_debug_info_-0x4503[bx] 
BBAB    85 FF                     test        di,di 
BBAD    0F 84 03 00               je          L$1295 
BBB1    8B 7E F6                  mov         di,word ptr -0xa[bp] 
BBB4                          L$1295:
BBB4    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
BBB7    80 64 0E EF               and         byte ptr 0xe[si],0xef 
BBBB    3B 4E FC                  cmp         cx,word ptr -0x4[bp] 
BBBE    0F 83 16 02               jae         L$1317 
BBC2    89 4E FC                  mov         word ptr -0x4[bp],cx 
BBC5    E9 35 02                  jmp         L$1319 
BBC8    83 FF 4F                  cmp         di,0x004f 
BBCB    73 E7                     jae         L$1295 
BBCD    47                        inc         di 
BBCE    EB E4                     jmp         L$1295 
BBD0    89 56 EC                  mov         word ptr -0x14[bp],dx 
BBD3    31 FF                     xor         di,di 
BBD5                          L$1296:
BBD5    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
BBDA    C5 07                     lds         ax,dword ptr [bx] 
BBDC    8B 5E EC                  mov         bx,word ptr -0x14[bp] 
BBDF    01 C3                     add         bx,ax 
BBE1    C5 07                     lds         ax,dword ptr [bx] 
BBE3    89 C3                     mov         bx,ax 
BBE5    01 FB                     add         bx,di 
BBE7    80 3F 00                  cmp         byte ptr [bx],0x00 
BBEA    74 C8                     je          L$1295 
BBEC    47                        inc         di 
BBED    EB E6                     jmp         L$1296 
BBEF    85 C9                     test        cx,cx 
BBF1    74 C1                     je          L$1295 
BBF3    8B 4E EE                  mov         cx,word ptr -0x12[bp] 
BBF6    EB BC                     jmp         L$1295 
BBF8    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
BBFD    8B 47 04                  mov         ax,word ptr 0x4[bx] 
BC00    48                        dec         ax 
BC01    39 C1                     cmp         cx,ax 
BC03    73 AF                     jae         L$1295 
BC05    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
BC08    EB AA                     jmp         L$1295 
BC0A    36 0F B6 06 00 00         movzx       ax,byte ptr ss:_SCR_ROWS 
BC10                          L$1297:
BC10    48                        dec         ax 
BC11    3D FF FF                  cmp         ax,0xffff 
BC14    74 9E                     je          L$1295 
BC16    85 C9                     test        cx,cx 
BC18    74 9A                     je          L$1295 
BC1A    49                        dec         cx 
BC1B    EB F3                     jmp         L$1297 
BC1D    36 0F B6 06 00 00         movzx       ax,byte ptr ss:_SCR_ROWS 
BC23    36 8E 1E 02 00            mov         ds,word ptr ss:_asm_content+0x2 
BC28                          L$1298:
BC28    48                        dec         ax 
BC29    3D FF FF                  cmp         ax,0xffff 
BC2C    74 86                     je          L$1295 
BC2E    36 8B 1E 00 00            mov         bx,word ptr ss:_asm_content 
BC33    8B 5F 04                  mov         bx,word ptr 0x4[bx] 
BC36    4B                        dec         bx 
BC37    39 D9                     cmp         cx,bx 
BC39    0F 83 77 FF               jae         L$1295 
BC3D    41                        inc         cx 
BC3E    EB E8                     jmp         L$1298 
BC40    89 F8                     mov         ax,di 
BC42    89 56 E8                  mov         word ptr -0x18[bp],dx 
BC45                          L$1299:
BC45    36 C4 1E 00 00            les         bx,dword ptr ss:_asm_content 
BC4A    89 5E F4                  mov         word ptr -0xc[bp],bx 
BC4D    26 C5 17                  lds         dx,dword ptr es:[bx] 
BC50    89 D3                     mov         bx,dx 
BC52    03 5E E8                  add         bx,word ptr -0x18[bp] 
BC55    8B 17                     mov         dx,word ptr [bx] 
BC57    89 56 F0                  mov         word ptr -0x10[bp],dx 
BC5A    8B 57 02                  mov         dx,word ptr 0x2[bx] 
BC5D    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
BC60    01 C3                     add         bx,ax 
BC62    8E DA                     mov         ds,dx 
BC64    80 3F 00                  cmp         byte ptr [bx],0x00 
BC67    74 08                     je          L$1300 
BC69    8A 57 01                  mov         dl,byte ptr 0x1[bx] 
BC6C    40                        inc         ax 
BC6D    88 17                     mov         byte ptr [bx],dl 
BC6F    EB D4                     jmp         L$1299 
BC71                          L$1300:
BC71    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
BC74    80 3F 00                  cmp         byte ptr [bx],0x00 
BC77    0F 85 39 FF               jne         L$1295 
BC7B    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
BC7E    26 8B 47 04               mov         ax,word ptr es:0x4[bx] 
BC82    48                        dec         ax 
BC83    39 C1                     cmp         cx,ax 
BC85    0F 83 2B FF               jae         L$1295 
BC89    89 C8                     mov         ax,cx 
BC8B    E8 00 00                  call        delete_asm_row_ 
BC8E    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
BC91                          L$1301:
BC91    E8 00 00                  call        list_code_ 
BC94    E9 1D FF                  jmp         L$1295 
BC97                          L$1302:
BC97    3D 1B 00                  cmp         ax,0x001b 
BC9A    74 0D                     je          L$1303 
BC9C    3D 0D 00                  cmp         ax,0x000d 
BC9F    74 73                     je          L$1307 
BCA1    3D 08 00                  cmp         ax,0x0008 
BCA4    74 17                     je          L$1304 
BCA6    E9 8C 00                  jmp         L$1310 
BCA9                          L$1303:
BCA9    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
BCAC    80 64 0E FC               and         byte ptr 0xe[si],0xfc 
BCB0    9A 00 00 00 00            call        clear_console_ 
BCB5    9A 00 00 00 00            call        refresh_ 
BCBA    E9 44 DD                  jmp         L$1046 
BCBD                          L$1304:
BCBD    85 FF                     test        di,di 
BCBF    74 29                     je          L$1306 
BCC1    8B 7E F6                  mov         di,word ptr -0xa[bp] 
BCC4    89 56 E6                  mov         word ptr -0x1a[bp],dx 
BCC7    89 F8                     mov         ax,di 
BCC9                          L$1305:
BCC9    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
BCCE    C5 17                     lds         dx,dword ptr [bx] 
BCD0    89 D3                     mov         bx,dx 
BCD2    03 5E E6                  add         bx,word ptr -0x1a[bp] 
BCD5    C5 17                     lds         dx,dword ptr [bx] 
BCD7    89 D3                     mov         bx,dx 
BCD9    01 C3                     add         bx,ax 
BCDB    80 3F 00                  cmp         byte ptr [bx],0x00 
BCDE    0F 84 D2 FE               je          L$1295 
BCE2    8A 57 01                  mov         dl,byte ptr 0x1[bx] 
BCE5    40                        inc         ax 
BCE6    88 17                     mov         byte ptr [bx],dl 
BCE8    EB DF                     jmp         L$1305 
BCEA                          L$1306:
BCEA    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
BCEF    C5 07                     lds         ax,dword ptr [bx] 
BCF1    89 C3                     mov         bx,ax 
BCF3    01 D3                     add         bx,dx 
BCF5    C5 07                     lds         ax,dword ptr [bx] 
BCF7    89 C3                     mov         bx,ax 
BCF9    80 3F 00                  cmp         byte ptr [bx],0x00 
BCFC    0F 85 B4 FE               jne         L$1295 
BD00    85 C9                     test        cx,cx 
BD02    0F 84 AE FE               je          L$1295 
BD06    89 C8                     mov         ax,cx 
BD08    E8 00 00                  call        delete_asm_row_ 
BD0B    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
BD0E    8B 4E EE                  mov         cx,word ptr -0x12[bp] 
BD11    E9 7D FF                  jmp         L$1301 
BD14                          L$1307:
BD14    85 FF                     test        di,di 
BD16    74 0A                     je          L$1308 
BD18    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
BD1B    89 C8                     mov         ax,cx 
BD1D    E8 00 00                  call        add_asm_row_ 
BD20    EB 08                     jmp         L$1309 
BD22                          L$1308:
BD22    89 C8                     mov         ax,cx 
BD24    E8 00 00                  call        add_asm_row_ 
BD27    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
BD2A                          L$1309:
BD2A    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
BD2D    E8 00 00                  call        list_code_ 
BD30    31 FF                     xor         di,di 
BD32    E9 7F FE                  jmp         L$1295 
BD35                          L$1310:
BD35    C7 46 F8 00 00            mov         word ptr -0x8[bp],0x0000 
BD3A                          L$1311:
BD3A    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
BD3F    C5 07                     lds         ax,dword ptr [bx] 
BD41    89 C3                     mov         bx,ax 
BD43    01 D3                     add         bx,dx 
BD45    C5 07                     lds         ax,dword ptr [bx] 
BD47    89 C3                     mov         bx,ax 
BD49    03 5E F8                  add         bx,word ptr -0x8[bp] 
BD4C    80 3F 00                  cmp         byte ptr [bx],0x00 
BD4F    74 05                     je          L$1312 
BD51    FF 46 F8                  inc         word ptr -0x8[bp] 
BD54    EB E4                     jmp         L$1311 
BD56                          L$1312:
BD56    83 7E F8 4F               cmp         word ptr -0x8[bp],0x004f 
BD5A    0F 83 56 FE               jae         L$1295 
BD5E    83 FF 4F                  cmp         di,0x004f 
BD61    0F 83 4F FE               jae         L$1295 
BD65    89 CA                     mov         dx,cx 
BD67    C1 E2 02                  shl         dx,0x02 
BD6A    B8 4F 00                  mov         ax,0x004f 
BD6D    89 56 F2                  mov         word ptr -0xe[bp],dx 
BD70                          L$1313:
BD70    39 F8                     cmp         ax,di 
BD72    76 1A                     jbe         L$1314 
BD74    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
BD79    C5 17                     lds         dx,dword ptr [bx] 
BD7B    8B 5E F2                  mov         bx,word ptr -0xe[bp] 
BD7E    01 D3                     add         bx,dx 
BD80    C5 17                     lds         dx,dword ptr [bx] 
BD82    89 D3                     mov         bx,dx 
BD84    01 C3                     add         bx,ax 
BD86    8A 57 FF                  mov         dl,byte ptr -0x1[bx] 
BD89    48                        dec         ax 
BD8A    88 17                     mov         byte ptr [bx],dl 
BD8C    EB E2                     jmp         L$1313 
BD8E                          L$1314:
BD8E    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
BD93    C5 07                     lds         ax,dword ptr [bx] 
BD95    8B 5E F2                  mov         bx,word ptr -0xe[bp] 
BD98    01 C3                     add         bx,ax 
BD9A    8B 17                     mov         dx,word ptr [bx] 
BD9C    89 F8                     mov         ax,di 
BD9E    47                        inc         di 
BD9F    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
BDA2    89 D3                     mov         bx,dx 
BDA4    89 CA                     mov         dx,cx 
BDA6    01 C3                     add         bx,ax 
BDA8    C1 E2 02                  shl         dx,0x02 
BDAB    8A 46 EA                  mov         al,byte ptr -0x16[bp] 
BDAE    89 56 E4                  mov         word ptr -0x1c[bp],dx 
BDB1    88 07                     mov         byte ptr [bx],al 
BDB3    31 C0                     xor         ax,ax 
BDB5                          L$1315:
BDB5    39 F8                     cmp         ax,di 
BDB7    0F 83 F9 FD               jae         L$1295 
BDBB    36 C5 1E 00 00            lds         bx,dword ptr ss:_asm_content 
BDC0    C5 17                     lds         dx,dword ptr [bx] 
BDC2    89 D3                     mov         bx,dx 
BDC4    03 5E E4                  add         bx,word ptr -0x1c[bp] 
BDC7    C5 17                     lds         dx,dword ptr [bx] 
BDC9    89 D3                     mov         bx,dx 
BDCB    01 C3                     add         bx,ax 
BDCD    80 3F 00                  cmp         byte ptr [bx],0x00 
BDD0    75 03                     jne         L$1316 
BDD2    C6 07 20                  mov         byte ptr [bx],0x20 
BDD5                          L$1316:
BDD5    40                        inc         ax 
BDD6    EB DD                     jmp         L$1315 
BDD8                          L$1317:
BDD8    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
BDDB    36 0F B6 06 00 00         movzx       ax,byte ptr ss:_SCR_ROWS 
BDE1    01 C2                     add         dx,ax 
BDE3    4A                        dec         dx 
BDE4    4A                        dec         dx 
BDE5    39 D1                     cmp         cx,dx 
BDE7    77 09                     ja          L$1318 
BDE9    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
BDEC    89 FB                     mov         bx,di 
BDEE    89 CA                     mov         dx,cx 
BDF0    EB 18                     jmp         L$1320 
BDF2                          L$1318:
BDF2    89 CA                     mov         dx,cx 
BDF4    29 C2                     sub         dx,ax 
BDF6    89 D0                     mov         ax,dx 
BDF8    40                        inc         ax 
BDF9    40                        inc         ax 
BDFA    89 46 FC                  mov         word ptr -0x4[bp],ax 
BDFD                          L$1319:
BDFD    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
BE00    E8 00 00                  call        list_code_ 
BE03    89 FB                     mov         bx,di 
BE05    89 CA                     mov         dx,cx 
BE07    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
BE0A                          L$1320:
BE0A    E8 00 00                  call        code_editor_draw_screen_ 
BE0D    C5 46 FC                  lds         ax,dword ptr -0x4[bp] 
BE10    89 44 08                  mov         word ptr 0x8[si],ax 
BE13    89 4C 0A                  mov         word ptr 0xa[si],cx 
BE16    89 7C 0C                  mov         word ptr 0xc[si],di 
BE19    E9 E5 DB                  jmp         L$1046 
BE1C                          fgetc_wnum_:
BE1C    53                        push        bx 
BE1D    51                        push        cx 
BE1E    56                        push        si 
BE1F    89 C1                     mov         cx,ax 
BE21    89 D3                     mov         bx,dx 
BE23    9A 00 00 00 00            call        fgetc_ 
BE28    89 C6                     mov         si,ax 
BE2A    89 DA                     mov         dx,bx 
BE2C    89 C8                     mov         ax,cx 
BE2E    9A 00 00 00 00            call        fgetc_ 
BE33    C1 E0 08                  shl         ax,0x08 
BE36    09 F0                     or          ax,si 
	     BE39		; The label referred to here is an undefined location
BE38    E9 13 48                  jmp         0x0001064e 
BE3B                          show_seg_info_:
BE3B    53                        push        bx 
BE3C    89 C3                     mov         bx,ax 
BE3E    8E DA                     mov         ds,dx 
BE40    FF 77 62                  push        word ptr 0x62[bx] 
BE43    FF 77 4C                  push        word ptr 0x4c[bx] 
BE46    FF 77 4E                  push        word ptr 0x4e[bx] 
BE49    FF 77 44                  push        word ptr 0x44[bx] 
BE4C    FF 77 46                  push        word ptr 0x46[bx] 
BE4F    FF 77 3A                  push        word ptr 0x3a[bx] 
BE52    16                        push        ss 
BE53    68 3E 0B                  push        offset DGROUP:L$1581 
BE56    16                        push        ss 
BE57    68 00 00                  push        offset _message 
BE5A    8C D2                     mov         dx,ss 
BE5C    9A 00 00 00 00            call        sprintf_ 
BE61    83 C4 14                  add         sp,0x0014 
BE64    B8 00 00                  mov         ax,offset _message 
BE67    9A 00 00 00 00            call        putstr_ 
BE6C    5B                        pop         bx 
BE6D    C3                        ret         
BE6E                          load_program_:
BE6E    56                        push        si 
BE6F    57                        push        di 
BE70    C8 2E 00 00               enter       0x002e,0x00 
BE74    50                        push        ax 
BE75    52                        push        dx 
BE76    53                        push        bx 
BE77    51                        push        cx 
BE78    B9 08 00                  mov         cx,0x0008 
BE7B    8D 7E E2                  lea         di,-0x1e[bp] 
BE7E    16                        push        ss 
BE7F    07                        pop         es 
BE80    16                        push        ss 
BE81    1F                        pop         ds 
BE82    BE 0A 05                  mov         si,offset DGROUP:L$1598 
BE85    F3 A5                     rep movsw   
BE87    B9 08 00                  mov         cx,0x0008 
BE8A    8D 7E D2                  lea         di,-0x2e[bp] 
BE8D    BE 1A 05                  mov         si,offset DGROUP:L$1599 
BE90    F3 A5                     rep movsw   
BE92    BB 8D 07                  mov         bx,offset DGROUP:L$1531 
BE95    8C D1                     mov         cx,ss 
BE97    9A 00 00 00 00            call        fopen_ 
BE9C    89 C3                     mov         bx,ax 
BE9E    89 D1                     mov         cx,dx 
BEA0    89 C7                     mov         di,ax 
BEA2    89 D6                     mov         si,dx 
BEA4    85 D2                     test        dx,dx 
BEA6    75 2A                     jne         L$1322 
BEA8    85 C0                     test        ax,ax 
BEAA    75 26                     jne         L$1322 
BEAC                          L$1321:
BEAC    FF 76 CE                  push        word ptr -0x32[bp] 
BEAF    FF 76 D0                  push        word ptr -0x30[bp] 
BEB2    16                        push        ss 
BEB3    68 A1 0B                  push        offset DGROUP:L$1582 
BEB6    16                        push        ss 
BEB7    68 00 00                  push        offset _message 
BEBA    8C D2                     mov         dx,ss 
BEBC    9A 00 00 00 00            call        sprintf_ 
BEC1    83 C4 0C                  add         sp,0x000c 
BEC4    B8 00 00                  mov         ax,offset _message 
BEC7    9A 00 00 00 00            call        putstr_ 
BECC    B8 02 00                  mov         ax,0x0002 
	     BED0		; The label referred to here is an undefined location
BECF    E9 FE 53                  jmp         0x000112d0 
BED2                          L$1322:
BED2    9A 00 00 00 00            call        fgetc_ 
BED7    89 46 F6                  mov         word ptr -0xa[bp],ax 
BEDA    3D FF FF                  cmp         ax,0xffff 
BEDD    0F 85 C0 00               jne         L$1336 
BEE1    89 D8                     mov         ax,bx 
BEE3    89 CA                     mov         dx,cx 
BEE5    9A 00 00 00 00            call        fclose_ 
BEEA    8D 46 D2                  lea         ax,-0x2e[bp] 
BEED    8C D2                     mov         dx,ss 
BEEF    9A 00 00 00 00            call        putstr_ 
BEF4    EB B6                     jmp         L$1321 
BEF6                          L$1323:
BEF6    89 F8                     mov         ax,di 
BEF8    89 F2                     mov         dx,si 
BEFA    8B 5E CC                  mov         bx,word ptr -0x34[bp] 
BEFD    9A 00 00 00 00            call        fgetc_ 
BF02    E9 D1 00                  jmp         L$1338 
BF05                          L$1324:
BF05    A8 40                     test        al,0x40 
BF07    74 3E                     je          L$1329 
BF09    A8 08                     test        al,0x08 
BF0B    74 09                     je          L$1325 
BF0D    89 F8                     mov         ax,di 
BF0F    89 F2                     mov         dx,si 
BF11    E8 00 00                  call        fgetc_wnum_ 
BF14    EB 09                     jmp         L$1326 
BF16                          L$1325:
BF16    89 F8                     mov         ax,di 
BF18    89 F2                     mov         dx,si 
BF1A    9A 00 00 00 00            call        fgetc_ 
BF1F                          L$1326:
BF1F    89 46 FA                  mov         word ptr -0x6[bp],ax 
BF22    F6 C1 02                  test        cl,0x02 
BF25    74 12                     je          L$1328 
BF27    89 F8                     mov         ax,di 
BF29    89 F2                     mov         dx,si 
BF2B    8B 5E CC                  mov         bx,word ptr -0x34[bp] 
BF2E    E8 00 00                  call        fgetc_wnum_ 
BF31                          L$1327:
BF31    8E 5E CA                  mov         ds,word ptr -0x36[bp] 
BF34    89 47 44                  mov         word ptr 0x44[bx],ax 
BF37    EB 68                     jmp         L$1336 
BF39                          L$1328:
BF39    89 F8                     mov         ax,di 
BF3B    89 F2                     mov         dx,si 
BF3D    8B 5E CC                  mov         bx,word ptr -0x34[bp] 
BF40    9A 00 00 00 00            call        fgetc_ 
BF45    EB EA                     jmp         L$1327 
BF47                          L$1329:
BF47    A8 20                     test        al,0x20 
BF49    74 3E                     je          L$1334 
BF4B    A8 08                     test        al,0x08 
BF4D    74 09                     je          L$1330 
BF4F    89 F8                     mov         ax,di 
BF51    89 F2                     mov         dx,si 
BF53    E8 00 00                  call        fgetc_wnum_ 
BF56    EB 09                     jmp         L$1331 
BF58                          L$1330:
BF58    89 F8                     mov         ax,di 
BF5A    89 F2                     mov         dx,si 
BF5C    9A 00 00 00 00            call        fgetc_ 
BF61                          L$1331:
BF61    89 46 F4                  mov         word ptr -0xc[bp],ax 
BF64    F6 C1 02                  test        cl,0x02 
BF67    74 12                     je          L$1333 
BF69    89 F8                     mov         ax,di 
BF6B    89 F2                     mov         dx,si 
BF6D    8B 5E CC                  mov         bx,word ptr -0x34[bp] 
BF70    E8 00 00                  call        fgetc_wnum_ 
BF73                          L$1332:
BF73    8E 5E CA                  mov         ds,word ptr -0x36[bp] 
BF76    89 47 4C                  mov         word ptr 0x4c[bx],ax 
BF79    EB 26                     jmp         L$1336 
BF7B                          L$1333:
BF7B    89 F8                     mov         ax,di 
BF7D    89 F2                     mov         dx,si 
BF7F    8B 5E CC                  mov         bx,word ptr -0x34[bp] 
BF82    9A 00 00 00 00            call        fgetc_ 
BF87    EB EA                     jmp         L$1332 
BF89                          L$1334:
BF89    A8 10                     test        al,0x10 
BF8B    74 14                     je          L$1336 
BF8D    A8 02                     test        al,0x02 
BF8F    74 4D                     je          L$1339 
BF91    89 F8                     mov         ax,di 
BF93    89 F2                     mov         dx,si 
BF95    8B 5E CC                  mov         bx,word ptr -0x34[bp] 
BF98    E8 00 00                  call        fgetc_wnum_ 
BF9B                          L$1335:
BF9B    8E 5E CA                  mov         ds,word ptr -0x36[bp] 
BF9E    89 47 62                  mov         word ptr 0x62[bx],ax 
BFA1                          L$1336:
BFA1    89 F8                     mov         ax,di 
BFA3    89 F2                     mov         dx,si 
BFA5    9A 00 00 00 00            call        ftell_ 
BFAA    85 D2                     test        dx,dx 
BFAC    7C 07                     jl          L$1337 
BFAE    75 3C                     jne         L$1340 
BFB0    3B 46 F6                  cmp         ax,word ptr -0xa[bp] 
BFB3    77 37                     ja          L$1340 
BFB5                          L$1337:
BFB5    89 F8                     mov         ax,di 
BFB7    89 F2                     mov         dx,si 
BFB9    9A 00 00 00 00            call        fgetc_ 
BFBE    88 C1                     mov         cl,al 
BFC0    A8 80                     test        al,0x80 
BFC2    0F 84 3F FF               je          L$1324 
BFC6    A8 02                     test        al,0x02 
BFC8    0F 84 2A FF               je          L$1323 
BFCC    89 F8                     mov         ax,di 
BFCE    89 F2                     mov         dx,si 
BFD0    8B 5E CC                  mov         bx,word ptr -0x34[bp] 
BFD3    E8 00 00                  call        fgetc_wnum_ 
BFD6                          L$1338:
BFD6    8E 5E CA                  mov         ds,word ptr -0x36[bp] 
BFD9    89 47 3A                  mov         word ptr 0x3a[bx],ax 
BFDC    EB C3                     jmp         L$1336 
BFDE                          L$1339:
BFDE    89 F8                     mov         ax,di 
BFE0    89 F2                     mov         dx,si 
BFE2    8B 5E CC                  mov         bx,word ptr -0x34[bp] 
BFE5    9A 00 00 00 00            call        fgetc_ 
BFEA    EB AF                     jmp         L$1335 
BFEC                          L$1340:
BFEC    8E 5E CA                  mov         ds,word ptr -0x36[bp] 
BFEF    8B 5E CC                  mov         bx,word ptr -0x34[bp] 
BFF2    FF 77 62                  push        word ptr 0x62[bx] 
BFF5    8B 46 CC                  mov         ax,word ptr -0x34[bp] 
BFF8    FF 76 F4                  push        word ptr -0xc[bp] 
BFFB    8C DA                     mov         dx,ds 
BFFD    FF 77 4C                  push        word ptr 0x4c[bx] 
C000    8B 4F 44                  mov         cx,word ptr 0x44[bx] 
C003    FF 76 FA                  push        word ptr -0x6[bp] 
C006    8B 5F 3A                  mov         bx,word ptr 0x3a[bx] 
C009    E8 00 00                  call        init_vpu_ 
C00C    85 C0                     test        ax,ax 
C00E    75 19                     jne         L$1341 
C010    89 F8                     mov         ax,di 
C012    89 F2                     mov         dx,si 
C014    9A 00 00 00 00            call        fclose_ 
C019    8D 46 E2                  lea         ax,-0x1e[bp] 
C01C    8C D2                     mov         dx,ss 
C01E    9A 00 00 00 00            call        putstr_ 
C023    B8 01 00                  mov         ax,0x0001 
	     C027		; The label referred to here is an undefined location
C026    E9 A7 52                  jmp         0x000112d0 
C029                          L$1341:
C029    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
C02F    74 09                     je          L$1342 
C031    8B 46 CC                  mov         ax,word ptr -0x34[bp] 
C034    8B 56 CA                  mov         dx,word ptr -0x36[bp] 
C037    E8 00 00                  call        show_seg_info_ 
C03A                          L$1342:
C03A    89 F8                     mov         ax,di 
C03C    89 F2                     mov         dx,si 
C03E    8B 5E CC                  mov         bx,word ptr -0x34[bp] 
C041    E8 00 00                  call        fgetc_wnum_ 
C044    8E 5E CA                  mov         ds,word ptr -0x36[bp] 
C047    89 C1                     mov         cx,ax 
C049    3B 47 4C                  cmp         ax,word ptr 0x4c[bx] 
C04C    76 19                     jbe         L$1343 
C04E    89 F8                     mov         ax,di 
C050    89 F2                     mov         dx,si 
C052    9A 00 00 00 00            call        fclose_ 
C057    8D 46 D2                  lea         ax,-0x2e[bp] 
C05A    8C D2                     mov         dx,ss 
C05C    9A 00 00 00 00            call        putstr_ 
C061    B8 03 00                  mov         ax,0x0003 
	     C065		; The label referred to here is an undefined location
C064    E9 69 52                  jmp         0x000112d0 
C067                          L$1343:
C067    C5 47 48                  lds         ax,dword ptr 0x48[bx] 
C06A    89 C3                     mov         bx,ax 
C06C    8B 1F                     mov         bx,word ptr [bx] 
C06E    89 5E FC                  mov         word ptr -0x4[bp],bx 
C071    89 C3                     mov         bx,ax 
C073    8B 47 02                  mov         ax,word ptr 0x2[bx] 
C076    89 46 F8                  mov         word ptr -0x8[bp],ax 
C079                          L$1344:
C079    49                        dec         cx 
C07A    83 F9 FF                  cmp         cx,0xffff 
C07D    74 16                     je          L$1345 
C07F    89 F8                     mov         ax,di 
C081    89 F2                     mov         dx,si 
C083    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
C086    9A 00 00 00 00            call        fgetc_ 
C08B    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
C08E    FF 46 FC                  inc         word ptr -0x4[bp] 
C091    88 07                     mov         byte ptr [bx],al 
C093    EB E4                     jmp         L$1344 
C095                          L$1345:
C095    89 F8                     mov         ax,di 
C097    89 F2                     mov         dx,si 
C099    8B 5E CC                  mov         bx,word ptr -0x34[bp] 
C09C    E8 00 00                  call        fgetc_wnum_ 
C09F    8E 5E CA                  mov         ds,word ptr -0x36[bp] 
C0A2    89 C1                     mov         cx,ax 
C0A4    3B 47 44                  cmp         ax,word ptr 0x44[bx] 
C0A7    76 19                     jbe         L$1346 
C0A9    89 F8                     mov         ax,di 
C0AB    89 F2                     mov         dx,si 
C0AD    9A 00 00 00 00            call        fclose_ 
C0B2    8D 46 D2                  lea         ax,-0x2e[bp] 
C0B5    8C D2                     mov         dx,ss 
C0B7    9A 00 00 00 00            call        putstr_ 
C0BC    B8 04 00                  mov         ax,0x0004 
	     C0C0		; The label referred to here is an undefined location
C0BF    E9 0E 52                  jmp         0x000112d0 
C0C2                          L$1346:
C0C2    C5 47 40                  lds         ax,dword ptr 0x40[bx] 
C0C5    89 C3                     mov         bx,ax 
C0C7    8B 1F                     mov         bx,word ptr [bx] 
C0C9    89 5E FE                  mov         word ptr -0x2[bp],bx 
C0CC    89 C3                     mov         bx,ax 
C0CE    8B 47 02                  mov         ax,word ptr 0x2[bx] 
C0D1    89 46 F2                  mov         word ptr -0xe[bp],ax 
C0D4                          L$1347:
C0D4    49                        dec         cx 
C0D5    83 F9 FF                  cmp         cx,0xffff 
C0D8    74 16                     je          L$1348 
C0DA    89 F8                     mov         ax,di 
C0DC    89 F2                     mov         dx,si 
C0DE    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
C0E1    9A 00 00 00 00            call        fgetc_ 
C0E6    8E 5E F2                  mov         ds,word ptr -0xe[bp] 
C0E9    FF 46 FE                  inc         word ptr -0x2[bp] 
C0EC    88 07                     mov         byte ptr [bx],al 
C0EE    EB E4                     jmp         L$1347 
C0F0                          L$1348:
C0F0    89 F8                     mov         ax,di 
C0F2    89 F2                     mov         dx,si 
C0F4    9A 00 00 00 00            call        fclose_ 
	     C0FA		; The label referred to here is an undefined location
C0F9    E9 D2 51                  jmp         0x000112ce 
C0FC                          init_stdio_:
C0FC    53                        push        bx 
C0FD    51                        push        cx 
C0FE    56                        push        si 
C0FF    57                        push        di 
C100    C8 02 00 00               enter       0x0002,0x00 
C104    89 C6                     mov         si,ax 
C106    89 D1                     mov         cx,dx 
C108    8E DA                     mov         ds,dx 
C10A    C5 7C 16                  lds         di,dword ptr 0x16[si] 
C10D    C5 5D 64                  lds         bx,dword ptr 0x64[di] 
C110    C4 3F                     les         di,dword ptr [bx] 
C112    26 C6 45 0A 0C            mov         byte ptr es:0xa[di],0x0c 
C117    26 8A 45 0A               mov         al,byte ptr es:0xa[di] 
C11B    C4 7F 04                  les         di,dword ptr 0x4[bx] 
C11E    26 88 45 0A               mov         byte ptr es:0xa[di],al 
C122    C4 7F 08                  les         di,dword ptr 0x8[bx] 
C125    26 88 45 0A               mov         byte ptr es:0xa[di],al 
C129    C4 47 08                  les         ax,dword ptr 0x8[bx] 
C12C    8B 57 06                  mov         dx,word ptr 0x6[bx] 
C12F    8B 7F 04                  mov         di,word ptr 0x4[bx] 
C132    89 56 FE                  mov         word ptr -0x2[bp],dx 
C135    C5 17                     lds         dx,dword ptr [bx] 
C137    89 D3                     mov         bx,dx 
C139    80 4F 2A 01               or          byte ptr 0x2a[bx],0x01 
C13D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
C140    80 65 2A FE               and         byte ptr 0x2a[di],0xfe 
C144    89 C3                     mov         bx,ax 
C146    80 4D 2A 01               or          byte ptr 0x2a[di],0x01 
C14A    26 80 67 2A FE            and         byte ptr es:0x2a[bx],0xfe 
C14F    26 80 4F 2A 01            or          byte ptr es:0x2a[bx],0x01 
C154    8E D9                     mov         ds,cx 
C156    8B 44 16                  mov         ax,word ptr 0x16[si] 
C159    8B 54 18                  mov         dx,word ptr 0x18[si] 
C15C    E8 00 00                  call        init_envs_ 
C15F    E9 D1 E5                  jmp         L$1143 
C162                          console_init_asm_:
C162    53                        push        bx 
C163    51                        push        cx 
C164    56                        push        si 
C165    57                        push        di 
C166    89 C3                     mov         bx,ax 
C168    89 D1                     mov         cx,dx 
C16A    BA 26 00                  mov         dx,0x0026 
C16D    B8 02 00                  mov         ax,0x0002 
C170    9A 00 00 00 00            call        calloc_ 
C175    8E D9                     mov         ds,cx 
C177    89 47 1E                  mov         word ptr 0x1e[bx],ax 
C17A    89 57 20                  mov         word ptr 0x20[bx],dx 
C17D    8B 47 20                  mov         ax,word ptr 0x20[bx] 
C180    8B 57 1E                  mov         dx,word ptr 0x1e[bx] 
C183    85 C0                     test        ax,ax 
C185    75 0A                     jne         L$1350 
C187    85 D2                     test        dx,dx 
C189    75 06                     jne         L$1350 
C18B                          L$1349:
C18B    B8 01 00                  mov         ax,0x0001 
	     C18F		; The label referred to here is an undefined location
C18E    E9 BC 44                  jmp         0x0001064d 
C191                          L$1350:
C191    BA 06 00                  mov         dx,0x0006 
C194    B8 01 00                  mov         ax,0x0001 
C197    9A 00 00 00 00            call        calloc_ 
C19C    8E D9                     mov         ds,cx 
C19E    89 47 22                  mov         word ptr 0x22[bx],ax 
C1A1    89 57 24                  mov         word ptr 0x24[bx],dx 
C1A4    8B 47 24                  mov         ax,word ptr 0x24[bx] 
C1A7    8B 57 22                  mov         dx,word ptr 0x22[bx] 
C1AA    85 C0                     test        ax,ax 
C1AC    75 04                     jne         L$1351 
C1AE    85 D2                     test        dx,dx 
C1B0    74 D9                     je          L$1349 
C1B2                          L$1351:
C1B2    89 D6                     mov         si,dx 
C1B4    8E D8                     mov         ds,ax 
C1B6    C7 44 04 01 00            mov         word ptr 0x4[si],0x0001 
C1BB    8E D9                     mov         ds,cx 
C1BD    C5 77 22                  lds         si,dword ptr 0x22[bx] 
C1C0    8B 44 04                  mov         ax,word ptr 0x4[si] 
C1C3    BA 04 00                  mov         dx,0x0004 
C1C6    40                        inc         ax 
C1C7    40                        inc         ax 
C1C8    9A 00 00 00 00            call        calloc_ 
C1CD    8E D9                     mov         ds,cx 
C1CF    C5 77 22                  lds         si,dword ptr 0x22[bx] 
C1D2    89 04                     mov         word ptr [si],ax 
C1D4    89 54 02                  mov         word ptr 0x2[si],dx 
C1D7    8E D9                     mov         ds,cx 
C1D9    C5 77 22                  lds         si,dword ptr 0x22[bx] 
C1DC    8B 44 02                  mov         ax,word ptr 0x2[si] 
C1DF    8B 14                     mov         dx,word ptr [si] 
C1E1    85 C0                     test        ax,ax 
C1E3    75 04                     jne         L$1352 
C1E5    85 D2                     test        dx,dx 
C1E7    74 A2                     je          L$1349 
C1E9                          L$1352:
C1E9    BA 01 00                  mov         dx,0x0001 
C1EC    B8 51 00                  mov         ax,0x0051 
C1EF    9A 00 00 00 00            call        calloc_ 
C1F4    8E D9                     mov         ds,cx 
C1F6    C5 7F 22                  lds         di,dword ptr 0x22[bx] 
C1F9    C5 35                     lds         si,dword ptr [di] 
C1FB    89 04                     mov         word ptr [si],ax 
C1FD    89 54 02                  mov         word ptr 0x2[si],dx 
C200    8E D9                     mov         ds,cx 
C202    C5 77 22                  lds         si,dword ptr 0x22[bx] 
C205    C5 1C                     lds         bx,dword ptr [si] 
C207    8B 57 02                  mov         dx,word ptr 0x2[bx] 
C20A    8B 07                     mov         ax,word ptr [bx] 
C20C    85 D2                     test        dx,dx 
	     C210		; The label referred to here is an undefined location
C20E    0F 85 39 44               jne         0x0001064b 
C212    85 C0                     test        ax,ax 
C214    0F 84 73 FF               je          L$1349 
	     C219		; The label referred to here is an undefined location
C218    E9 30 44                  jmp         0x0001064b 

Routine Size: 1796 bytes,    Routine Base: vpu_main_TEXT + BB17

C21B                          new_console_:
C21B    56                        push        si 
C21C    57                        push        di 
C21D    C8 20 00 00               enter       0x0020,0x00 
C221    50                        push        ax 
C222    52                        push        dx 
C223    53                        push        bx 
C224    51                        push        cx 
C225    B9 10 00                  mov         cx,0x0010 
C228    8D 7E E0                  lea         di,-0x20[bp] 
C22B    16                        push        ss 
C22C    07                        pop         es 
C22D    16                        push        ss 
C22E    1F                        pop         ds 
C22F    BE 2A 05                  mov         si,offset DGROUP:L$1600 
C232    8B 5E DE                  mov         bx,word ptr -0x22[bp] 
C235    F3 A5                     rep movsw   
C237    E8 00 00                  call        spawn_new_vpu_ 
C23A    8E 5E DC                  mov         ds,word ptr -0x24[bp] 
C23D    89 47 16                  mov         word ptr 0x16[bx],ax 
C240    89 57 18                  mov         word ptr 0x18[bx],dx 
C243    89 57 1C                  mov         word ptr 0x1c[bx],dx 
C246    8B 47 16                  mov         ax,word ptr 0x16[bx] 
C249    BA 01 00                  mov         dx,0x0001 
C24C    89 47 1A                  mov         word ptr 0x1a[bx],ax 
C24F    B8 20 00                  mov         ax,0x0020 
C252    9A 00 00 00 00            call        calloc_ 
C257    8E 5E DC                  mov         ds,word ptr -0x24[bp] 
C25A    89 87 C0 06               mov         word ptr 0x6c0[bx],ax 
C25E    89 97 C2 06               mov         word ptr 0x6c2[bx],dx 
C262    BA 01 00                  mov         dx,0x0001 
C265    B8 20 00                  mov         ax,0x0020 
C268    C7 87 C4 06 20 00         mov         word ptr 0x6c4[bx],0x0020 
C26E    9A 00 00 00 00            call        calloc_ 
C273    8E 5E DC                  mov         ds,word ptr -0x24[bp] 
C276    89 87 C8 06               mov         word ptr 0x6c8[bx],ax 
C27A    89 97 CA 06               mov         word ptr 0x6ca[bx],dx 
C27E    BA 01 00                  mov         dx,0x0001 
C281    B8 20 00                  mov         ax,0x0020 
C284    C7 87 CC 06 20 00         mov         word ptr 0x6cc[bx],0x0020 
C28A    9A 00 00 00 00            call        calloc_ 
C28F    8E 5E DC                  mov         ds,word ptr -0x24[bp] 
C292    C7 87 D4 06 20 00         mov         word ptr 0x6d4[bx],0x0020 
C298    89 87 D0 06               mov         word ptr 0x6d0[bx],ax 
C29C    89 97 D2 06               mov         word ptr 0x6d2[bx],dx 
C2A0    8B 47 18                  mov         ax,word ptr 0x18[bx] 
C2A3    8B 57 16                  mov         dx,word ptr 0x16[bx] 
C2A6    85 C0                     test        ax,ax 
C2A8    75 04                     jne         L$1353 
C2AA    85 D2                     test        dx,dx 
C2AC    74 30                     je          L$1356 
C2AE                          L$1353:
C2AE    8B 97 C2 06               mov         dx,word ptr 0x6c2[bx] 
C2B2    8B 87 C0 06               mov         ax,word ptr 0x6c0[bx] 
C2B6    85 D2                     test        dx,dx 
C2B8    75 04                     jne         L$1354 
C2BA    85 C0                     test        ax,ax 
C2BC    74 20                     je          L$1356 
C2BE                          L$1354:
C2BE    8B 97 CA 06               mov         dx,word ptr 0x6ca[bx] 
C2C2    8B 87 C8 06               mov         ax,word ptr 0x6c8[bx] 
C2C6    85 D2                     test        dx,dx 
C2C8    75 04                     jne         L$1355 
C2CA    85 C0                     test        ax,ax 
C2CC    74 10                     je          L$1356 
C2CE                          L$1355:
C2CE    8B 97 D2 06               mov         dx,word ptr 0x6d2[bx] 
C2D2    8B 87 D0 06               mov         ax,word ptr 0x6d0[bx] 
C2D6    85 D2                     test        dx,dx 
C2D8    75 64                     jne         L$1357 
C2DA    85 C0                     test        ax,ax 
C2DC    75 60                     jne         L$1357 
C2DE                          L$1356:
C2DE    8E 5E DC                  mov         ds,word ptr -0x24[bp] 
C2E1    8B 5E DE                  mov         bx,word ptr -0x22[bp] 
C2E4    8B 87 C0 06               mov         ax,word ptr 0x6c0[bx] 
C2E8    8B 97 C2 06               mov         dx,word ptr 0x6c2[bx] 
C2EC    9A 00 00 00 00            call        free_ 
C2F1    8E 5E DC                  mov         ds,word ptr -0x24[bp] 
C2F4    C7 87 C0 06 00 00         mov         word ptr 0x6c0[bx],0x0000 
C2FA    8B 87 C8 06               mov         ax,word ptr 0x6c8[bx] 
C2FE    8B 97 CA 06               mov         dx,word ptr 0x6ca[bx] 
C302    C7 87 C2 06 00 00         mov         word ptr 0x6c2[bx],0x0000 
C308    9A 00 00 00 00            call        free_ 
C30D    8E 5E DC                  mov         ds,word ptr -0x24[bp] 
C310    C7 87 C8 06 00 00         mov         word ptr 0x6c8[bx],0x0000 
C316    8B 87 D0 06               mov         ax,word ptr 0x6d0[bx] 
C31A    8B 97 D2 06               mov         dx,word ptr 0x6d2[bx] 
C31E    C7 87 CA 06 00 00         mov         word ptr 0x6ca[bx],0x0000 
C324    9A 00 00 00 00            call        free_ 
C329    8E 5E DC                  mov         ds,word ptr -0x24[bp] 
C32C    C7 87 D0 06 00 00         mov         word ptr 0x6d0[bx],0x0000 
C332    B8 01 00                  mov         ax,0x0001 
C335    C7 87 D2 06 00 00         mov         word ptr 0x6d2[bx],0x0000 
C33B    E9 D5 00                  jmp         L$1368 
C33E                          L$1357:
C33E    36 A0 00 00               mov         al,byte ptr ss:_VPUCON_LINES 
C342    88 87 BC 06               mov         byte ptr 0x6bc[bx],al 
C346    83 7E D8 00               cmp         word ptr -0x28[bp],0x0000 
C34A    75 56                     jne         L$1360 
C34C    83 7E DA 00               cmp         word ptr -0x26[bp],0x0000 
C350    75 50                     jne         L$1360 
C352    68 00 01                  push        0x0100 
C355    B9 00 08                  mov         cx,0x0800 
C358    6A 01                     push        0x0001 
C35A    8B 47 16                  mov         ax,word ptr 0x16[bx] 
C35D    68 00 10                  push        0x1000 
C360    8B 57 18                  mov         dx,word ptr 0x18[bx] 
C363    6A 01                     push        0x0001 
C365    BB 00 02                  mov         bx,0x0200 
C368    E8 00 00                  call        init_vpu_ 
C36B    85 C0                     test        ax,ax 
C36D    75 06                     jne         L$1359 
C36F                          L$1358:
C36F    B8 01 00                  mov         ax,0x0001 
C372    E9 9E 00                  jmp         L$1368 
C375                          L$1359:
C375    8E 5E DC                  mov         ds,word ptr -0x24[bp] 
C378    8B 5E DE                  mov         bx,word ptr -0x22[bp] 
C37B    8B 47 16                  mov         ax,word ptr 0x16[bx] 
C37E    8B 57 18                  mov         dx,word ptr 0x18[bx] 
C381    E8 00 00                  call        init_data_segs_ 
C384    85 C0                     test        ax,ax 
C386    74 E7                     je          L$1358 
C388    8E 5E DC                  mov         ds,word ptr -0x24[bp] 
C38B    8B 47 16                  mov         ax,word ptr 0x16[bx] 
C38E    8B 57 18                  mov         dx,word ptr 0x18[bx] 
C391    E8 00 00                  call        show_seg_info_ 
C394    8B 56 DC                  mov         dx,word ptr -0x24[bp] 
C397    89 D8                     mov         ax,bx 
C399    E8 00 00                  call        init_stdio_ 
C39C    85 C0                     test        ax,ax 
C39E    74 57                     je          L$1367 
C3A0    EB CD                     jmp         L$1358 
C3A2                          L$1360:
C3A2    8B 76 DE                  mov         si,word ptr -0x22[bp] 
C3A5    8B 46 DA                  mov         ax,word ptr -0x26[bp] 
C3A8    80 4F 0E 0C               or          byte ptr 0xe[bx],0x0c 
C3AC    8B 56 D8                  mov         dx,word ptr -0x28[bp] 
C3AF    8B 5F 16                  mov         bx,word ptr 0x16[bx] 
C3B2    8B 4C 18                  mov         cx,word ptr 0x18[si] 
C3B5    E8 00 00                  call        load_program_ 
C3B8    3D 02 00                  cmp         ax,0x0002 
C3BB    72 0E                     jb          L$1361 
C3BD    76 1D                     jbe         L$1364 
C3BF    3D 04 00                  cmp         ax,0x0004 
C3C2    74 1D                     je          L$1365 
C3C4    3D 03 00                  cmp         ax,0x0003 
C3C7    74 09                     je          L$1362 
C3C9    EB 1B                     jmp         L$1366 
C3CB                          L$1361:
C3CB    3D 01 00                  cmp         ax,0x0001 
C3CE    74 43                     je          L$1368 
C3D0    EB 14                     jmp         L$1366 
C3D2                          L$1362:
C3D2    B8 B0 0B                  mov         ax,offset DGROUP:L$1583 
C3D5                          L$1363:
C3D5    8C D2                     mov         dx,ss 
C3D7    9A 00 00 00 00            call        putstr_ 
C3DC                          L$1364:
C3DC    B8 02 00                  mov         ax,0x0002 
C3DF    EB 32                     jmp         L$1368 
C3E1                          L$1365:
C3E1    B8 C8 0B                  mov         ax,offset DGROUP:L$1584 
C3E4    EB EF                     jmp         L$1363 
C3E6                          L$1366:
C3E6    8B 46 DE                  mov         ax,word ptr -0x22[bp] 
C3E9    8B 56 DC                  mov         dx,word ptr -0x24[bp] 
C3EC    E8 00 00                  call        init_stdio_ 
C3EF    85 C0                     test        ax,ax 
C3F1    0F 85 7A FF               jne         L$1358 
C3F5    EB 1C                     jmp         L$1368 
C3F7                          L$1367:
C3F7    8D 46 E0                  lea         ax,-0x20[bp] 
C3FA    8C D2                     mov         dx,ss 
C3FC    9A 00 00 00 00            call        putstr_ 
C401    B8 00 00                  mov         ax,offset _response_ready 
C404    8C D2                     mov         dx,ss 
C406    9A 00 00 00 00            call        putstr_ 
C40B    8B 56 DC                  mov         dx,word ptr -0x24[bp] 
C40E    89 D8                     mov         ax,bx 
C410    E8 00 00                  call        console_init_asm_ 
C413                          L$1368:
C413    C9                        leave       
C414    5F                        pop         di 
C415    5E                        pop         si 
C416    CB                        retf        
C417                          core_debug_:
C417    53                        push        bx 
C418    51                        push        cx 
C419    56                        push        si 
C41A    89 C3                     mov         bx,ax 
C41C    89 D1                     mov         cx,dx 
C41E    36 80 3E 00 00 00         cmp         byte ptr ss:_debug,0x00 
C424    75 06                     jne         L$1370 
C426                          L$1369:
C426    B8 01 00                  mov         ax,0x0001 
	     C42A		; The label referred to here is an undefined location
C429    E9 22 42                  jmp         0x0001064e 
C42C                          L$1370:
C42C    E8 00 00                  call        console_init_asm_ 
C42F    85 C0                     test        ax,ax 
C431    75 F3                     jne         L$1369 
C433    8E D9                     mov         ds,cx 
C435    80 67 0E F3               and         byte ptr 0xe[bx],0xf3 
C439    C5 77 16                  lds         si,dword ptr 0x16[bx] 
C43C    C7 44 26 81 00            mov         word ptr 0x26[si],0x0081 
C441    8E D9                     mov         ds,cx 
C443    8B 47 16                  mov         ax,word ptr 0x16[bx] 
C446    8B 57 18                  mov         dx,word ptr 0x18[bx] 
C449    E8 00 00                  call        process_vpu_signal_ 
C44C    31 C0                     xor         ax,ax 
	     C44F		; The label referred to here is an undefined location
C44E    E9 FD 41                  jmp         0x0001064e 

Routine Size: 566 bytes,    Routine Base: vpu_main_TEXT + C21B

C451                          delete_console_:
C451    53                        push        bx 
C452    51                        push        cx 
C453    56                        push        si 
C454    89 C3                     mov         bx,ax 
C456    89 D1                     mov         cx,dx 
C458    8E DA                     mov         ds,dx 
C45A    8B 47 1A                  mov         ax,word ptr 0x1a[bx] 
C45D    8B 57 1C                  mov         dx,word ptr 0x1c[bx] 
C460    E8 00 00                  call        delete_vpu_ 
C463    8E D9                     mov         ds,cx 
C465    8B 47 0E                  mov         ax,word ptr 0xe[bx] 
C468    25 0C 00                  and         ax,0x000c 
C46B    3D 0C 00                  cmp         ax,0x000c 
C46E    73 69                     jae         L$1374 
C470    8B 57 24                  mov         dx,word ptr 0x24[bx] 
C473    8B 47 22                  mov         ax,word ptr 0x22[bx] 
C476    85 D2                     test        dx,dx 
C478    75 04                     jne         L$1371 
C47A    85 C0                     test        ax,ax 
C47C    74 4E                     je          L$1373 
C47E                          L$1371:
C47E    8E D9                     mov         ds,cx 
C480    C5 77 22                  lds         si,dword ptr 0x22[bx] 
C483    8B 44 04                  mov         ax,word ptr 0x4[si] 
C486    89 C2                     mov         dx,ax 
C488    4A                        dec         dx 
C489    89 54 04                  mov         word ptr 0x4[si],dx 
C48C    85 C0                     test        ax,ax 
C48E    74 20                     je          L$1372 
C490    8E D9                     mov         ds,cx 
C492    C5 77 22                  lds         si,dword ptr 0x22[bx] 
C495    8B 44 04                  mov         ax,word ptr 0x4[si] 
C498    8B 14                     mov         dx,word ptr [si] 
C49A    C1 E0 02                  shl         ax,0x02 
C49D    8E 5C 02                  mov         ds,word ptr 0x2[si] 
C4A0    89 D6                     mov         si,dx 
C4A2    01 C6                     add         si,ax 
C4A4    8B 04                     mov         ax,word ptr [si] 
C4A6    8B 54 02                  mov         dx,word ptr 0x2[si] 
C4A9    9A 00 00 00 00            call        free_ 
C4AE    EB CE                     jmp         L$1371 
C4B0                          L$1372:
C4B0    8E D9                     mov         ds,cx 
C4B2    C5 77 22                  lds         si,dword ptr 0x22[bx] 
C4B5    8B 04                     mov         ax,word ptr [si] 
C4B7    8B 54 02                  mov         dx,word ptr 0x2[si] 
C4BA    9A 00 00 00 00            call        free_ 
C4BF    8E D9                     mov         ds,cx 
C4C1    8B 47 22                  mov         ax,word ptr 0x22[bx] 
C4C4    8B 57 24                  mov         dx,word ptr 0x24[bx] 
C4C7    9A 00 00 00 00            call        free_ 
C4CC                          L$1373:
C4CC    8E D9                     mov         ds,cx 
C4CE    8B 47 1E                  mov         ax,word ptr 0x1e[bx] 
C4D1    8B 57 20                  mov         dx,word ptr 0x20[bx] 
C4D4    9A 00 00 00 00            call        free_ 
C4D9                          L$1374:
C4D9    8E D9                     mov         ds,cx 
C4DB    8B 87 C0 06               mov         ax,word ptr 0x6c0[bx] 
C4DF    8B 97 C2 06               mov         dx,word ptr 0x6c2[bx] 
C4E3    9A 00 00 00 00            call        free_ 
C4E8    8E D9                     mov         ds,cx 
C4EA    8B 87 D0 06               mov         ax,word ptr 0x6d0[bx] 
C4EE    8B 97 D2 06               mov         dx,word ptr 0x6d2[bx] 
C4F2    9A 00 00 00 00            call        free_ 
C4F7    8E D9                     mov         ds,cx 
C4F9    8B 87 C8 06               mov         ax,word ptr 0x6c8[bx] 
C4FD    8B 97 CA 06               mov         dx,word ptr 0x6ca[bx] 
C501    9A 00 00 00 00            call        free_ 
C506    31 C0                     xor         ax,ax 
C508    36 A3 00 00               mov         word ptr ss:_running_console,ax 
C50C    36 A3 02 00               mov         word ptr ss:_running_console+0x2,ax 
C510    E9 F0 D4                  jmp         L$1048 

Routine Size: 194 bytes,    Routine Base: vpu_main_TEXT + C451

No disassembly errors

Segment: CONST WORD USE16 00000BE0 bytes
0000                          L$1397:
0000    62 79 74 65 00                                  byte.
0005                          L$1398:
0005    77 6F 72 64 00                                  word.
000A                          L$1399:
000A    73 74 72 00                                     str.
000E                          L$1400:
000E    77 61 69 74 00                                  wait.
0013                          L$1401:
0013    6D 6F 76 00                                     mov.
0017                          L$1402:
0017    6A 6D 70 00                                     jmp.
001B                          L$1403:
001B    69 6E 63 00                                     inc.
001F                          L$1404:
001F    64 65 63 00                                     dec.
0023                          L$1405:
0023    63 6D 70 00                                     cmp.
0027                          L$1406:
0027    6A 65 00                                        je.
002A                          L$1407:
002A    70 75 73 68 00                                  push.
002F                          L$1408:
002F    70 6F 70 00                                     pop.
0033                          L$1409:
0033    61 64 64 00                                     add.
0037                          L$1410:
0037    73 75 62 00                                     sub.
003B                          L$1411:
003B    64 73 65 67 00                                  dseg.
0040                          L$1412:
0040    6D 75 6C 00                                     mul.
0044                          L$1413:
0044    64 69 76 00                                     div.
0048                          L$1414:
0048    70 72 69 6E 74 75 69 6E 74 00                   printuint.
0052                          L$1415:
0052    61 6E 64 00                                     and.
0056                          L$1416:
0056    6F 72 00                                        or.
0059                          L$1417:
0059    78 6F 72 00                                     xor.
005D                          L$1418:
005D    69 6E 76 00                                     inv.
0061                          L$1419:
0061    73 68 6C 00                                     shl.
0065                          L$1420:
0065    73 68 72 00                                     shr.
0069                          L$1421:
0069    63 61 6C 6C 00                                  call.
006E                          L$1422:
006E    72 65 74 00                                     ret.
0072                          L$1423:
0072    69 6E 74 00                                     int.
0076                          L$1424:
0076    69 72 65 74 00                                  iret.
007B                          L$1425:
007B    73 65 74 69 6E 74 00                            setint.
0082                          L$1426:
0082    6A 6E 65 00                                     jne.
0086                          L$1427:
0086    6A 67 00                                        jg.
0089                          L$1428:
0089    6A 67 65 00                                     jge.
008D                          L$1429:
008D    6A 6C 65 00                                     jle.
0091                          L$1430:
0091    6A 63 7A 00                                     jcz.
0095                          L$1431:
0095    6A 6C 00                                        jl.
0098                          L$1432:
0098    70 72 69 6E 74 73 74 72 00                      printstr.
00A1                          L$1433:
00A1    6A 66 73 00                                     jfs.
00A5                          L$1434:
00A5    6A 66 6E 73 00                                  jfns.
00AA                          L$1435:
00AA    6D 65 6D 63 70 79 00                            memcpy.
00B1                          L$1436:
00B1    69 6E 00                                        in.
00B4                          L$1437:
00B4    6F 75 74 00                                     out.
00B8                          L$1438:
00B8    6D 65 6D 73 65 74 00                            memset.
00BF                          L$1439:
00BF    7A 66 6C 61 67 73 00                            zflags.
00C6                          L$1440:
00C6    70 72 69 6E 74 73 69 6E 74 00                   printsint.
00D0                          L$1441:
00D0    69 64 69 76 00                                  idiv.
00D5                          L$1442:
00D5    73 63 6F 6E 76 77 00                            sconvw.
00DC                          L$1443:
00DC    73 63 6F 6E 76 62 00                            sconvb.
00E3                          L$1444:
00E3    67 65 74 73 74 72 00                            getstr.
00EA                          L$1445:
00EA    73 79 73 00                                     sys.
00EE                          L$1446:
00EE    73 63 72 00                                     scr.
00F2                          L$1447:
00F2    70 73 74 61 63 6B 00                            pstack.
00F9                          L$1448:
00F9    73 73 74 61 63 6B 00                            sstack.
0100                          L$1449:
0100    6E 6F 70 00                                     nop.
0104                          L$1450:
0104    74 65 73 74 00                                  test.
0109                          L$1451:
0109    6D 65 6D 63 68 72 00                            memchr.
0110                          L$1452:
0110    6D 65 6D 63 6D 70 00                            memcmp.
0117                          L$1453:
0117    63 73 00                                        cs.
011A                          L$1454:
011A    69 70 00                                        ip.
011D                          L$1455:
011D    64 73 00                                        ds.
0120                          L$1456:
0120    73 70 00                                        sp.
0123                          L$1457:
0123    61 00                                           a.
0125                          L$1458:
0125    62 00                                           b.
0127                          L$1459:
0127    63 00                                           c.
0129                          L$1460:
0129    64 00                                           d.
012B                          L$1461:
012B    65 00                                           e.
012D                          L$1462:
012D    66 00                                           f.
012F                          L$1463:
012F    67 00                                           g.
0131                          L$1464:
0131    68 00                                           h.
0133                          L$1465:
0133    73 74 61 63 6B 00                               stack.
0139                          L$1466:
0139    63 6F 64 65 00                                  code.
013E                          L$1467:
013E    64 61 74 61 00                                  data.
0143                          L$1468:
0143    69 6E 74 65 72 72 75 70 74 73 00                interrupts.
014E                          L$1469:
014E    25 73 0A 00                                     %s..
0152                          L$1470:
0152    44 61 74 61 20 73 65 67 6D 65 6E 74 20 66 75 6C Data segment ful
0162    6C 21 00                                        l!.
0165                          L$1471:
0165    25 73 25 75 00                                  %s%u.
016A                          L$1472:
016A    44 65 66 69 6E 65 64 20 73 74 72 69 6E 67 20 63 Defined string c
017A    6F 6E 74 65 6E 74 73 3A 20 25 73 00             ontents: %s.
0186                          L$1473:
0186    25 73 20 30 78 25 2E 34 58 00                   %s 0x%.4X.
0190                          L$1474:
0190    41 72 72 61 79 20 62 65 67 69 6E 73 20 69 6E 20 Array begins in 
01A0    6F 66 66 73 65 74 20 25 75 00                   offset %u.
01AA                          L$1475:
01AA    55 6E 6B 6E 6F 77 6E 20 69 6E 73 74 72 75 63 74 Unknown instruct
01BA    69 6F 6E 20 69 6E 20 6C 69 6E 65 20 25 75 3A 20 ion in line %u: 
01CA    25 73 0A 00                                     %s..
01CE                          L$1476:
01CE    49 6E 73 74 72 75 63 74 69 6F 6E 20 25 73 20 6F Instruction %s o
01DE    6E 20 6C 69 6E 65 20 25 75 0A 00                n line %u..
01E9                          L$1477:
01E9    73 69 67 6E 65 64 00                            signed.
01F0                          L$1478:
01F0    46 6F 75 6E 64 20 73 79 6D 62 6F 6C 3A 20 25 73 Found symbol: %s
0200    20 61 64 64 72 65 73 73 20 30 78 25 2E 32 58 00  address 0x%.2X.
0210                          L$1479:
0210    55 6E 64 65 66 69 6E 65 64 20 73 79 6D 62 6F 6C Undefined symbol
0220    20 25 73 20 69 6E 20 6C 69 6E 65 20 25 75 00     %s in line %u.
022F                          L$1480:
022F    44 65 66 69 6E 65 64 20 73 79 6D 62 6F 6C 20 25 Defined symbol %
023F    73 2C 20 74 79 70 65 20 30 78 25 2E 32 58 2C 20 s, type 0x%.2X, 
024F    6F 6E 20 6C 69 6E 65 20 25 75 00                on line %u.
025A                          L$1481:
025A    4C 61 62 65 6C 20 25 73 20 6F 6E 20 6C 69 6E 65 Label %s on line
026A    20 25 75 20 61 6C 72 65 61 64 79 20 64 65 66 69  %u already defi
027A    6E 65 64 2C 20 73 6B 69 70 70 69 6E 67 2E 2E 2E ned, skipping...
028A    00                                              .
028B                          L$1482:
028B    44 65 66 69 6E 65 64 20 6C 61 62 65 6C 20 25 73 Defined label %s
029B    20 2D 20 6C 69 6E 65 20 25 75 00                 - line %u.
02A6                          L$1483:
02A6    25 63 78 00                                     %cx.
02AA                          L$1484:
02AA    25 63 68 00                                     %ch.
02AE                          L$1485:
02AE    25 63 6C 00                                     %cl.
02B2                          L$1486:
02B2    25 73 20 25 73 00                               %s %s.
02B8                          L$1487:
02B8    25 73 2C 20 6F 70 65 72 61 6E 64 20 25 75 20 72 %s, operand %u r
02C8    65 67 69 73 74 65 72 00                         egister.
02D0                          L$1488:
02D0    25 73 25 73 00                                  %s%s.
02D5                          L$1489:
02D5    72 65 67 69 73 74 65 72 00                      register.
02DE                          L$1490:
02DE    25 73 25 73 25 73 00                            %s%s%s.
02E5                          L$1491:
02E5    20 74 6F 20 64 65 72 65 66 65 72 65 6E 63 65 00  to dereference.
02F5                          L$1492:
02F5    69 6D 6D 65 64 69 61 74 65 20 6E 75 6D 62 65 72 immediate number
0305    00                                              .
0306                          L$1493:
0306    25 73 2C 20 6F 70 65 72 61 6E 64 20 25 75 20 74 %s, operand %u t
0316    79 70 65 3A 20 00                               ype: .
031C                          L$1494:
031C    25 73 20 30 78 25 2E 32 58 00                   %s 0x%.2X.
0326                          L$1495:
0326    49 6E 73 74 72 75 63 74 69 6F 6E 3A 20 25 73 00 Instruction: %s.
0336                          L$1496:
0336    25 73 2C 20 6F 70 65 72 61 6E 64 20 25 75 3A 20 %s, operand %u: 
0346    30 78 25 2E 32 58 00                            0x%.2X.
034D                          L$1497:
034D    25 73 2C 20 6F 70 65 72 61 6E 64 20 25 75 3A 20 %s, operand %u: 
035D    30 78 25 2E 34 58 00                            0x%.4X.
0364                          L$1498:
0364    20 20 4A 55 4D 50 20 74 6F 20 73 65 67 6D 65 6E   JUMP to segmen
0374    74 20 30 78 25 2E 34 58 20 61 64 64 72 65 73 73 t 0x%.4X address
0384    20 30 78 25 2E 34 58 0A 00                       0x%.4X..
038D                          L$1499:
038D    53 74 72 69 6E 67 20 69 73 20 69 6E 20 61 64 64 String is in add
039D    72 65 73 73 20 30 78 25 2E 32 58 00             ress 0x%.2X.
03A9                          L$1500:
03A9    20 20 50 6F 69 6E 74 65 72 20 76 61 6C 75 65 20   Pointer value 
03B9    69 73 20 74 6F 6F 20 62 69 67 21 00             is too big!.
03C5                          L$1501:
03C5    4E 65 77 20 75 6E 73 69 67 6E 65 64 20 76 61 6C New unsigned val
03D5    75 65 20 69 73 20 25 75 00                      ue is %u.
03DE                          L$1502:
03DE    44 61 74 61 20 73 65 67 6D 65 6E 74 20 69 73 20 Data segment is 
03EE    6E 6F 77 20 25 75 0A 00                         now %u..
03F6                          L$1503:
03F6    25 75 00                                        %u.
03F9                          L$1504:
03F9    25 69 00                                        %i.
03FC                          L$1505:
03FC    20 20 43 41 4C 4C 20 46 52 4F 4D 20 73 65 67 6D   CALL FROM segm
040C    65 6E 74 20 30 78 25 2E 34 58 20 61 64 64 72 65 ent 0x%.4X addre
041C    73 73 20 30 78 25 2E 34 58 20 2D 3E 20 00       ss 0x%.4X -> .
042A                          L$1506:
042A    73 65 67 6D 65 6E 74 20 30 78 25 2E 34 58 20 00 segment 0x%.4X .
043A                          L$1507:
043A    6F 66 66 73 65 74 20 30 78 25 2E 34 58 00       offset 0x%.4X.
0448                          L$1508:
0448    20 20 52 45 54 20 74 6F 20 73 65 67 6D 65 6E 74   RET to segment
0458    20 30 78 25 2E 34 58 20 6F 66 66 73 65 74 20 30  0x%.4X offset 0
0468    78 25 2E 34 58 00                               x%.4X.
046E                          L$1509:
046E    20 20 48 61 72 64 77 61 72 65 20 74 72 69 67 67   Hardware trigg
047E    65 72 69 6E 67 20 69 6E 74 65 72 72 75 70 74 20 ering interrupt 
048E    25 75 2C 20 00                                  %u, .
0493                          L$1510:
0493    49 6E 76 61 6C 69 64 20 69 6E 74 65 72 72 75 70 Invalid interrup
04A3    74 20 76 65 63 74 6F 72 21 00                   t vector!.
04AD                          L$1511:
04AD    4A 75 6D 70 69 6E 67 20 74 6F 20 73 65 67 6D 65 Jumping to segme
04BD    6E 74 20 30 78 25 2E 34 58 20 6F 66 66 73 65 74 nt 0x%.4X offset
04CD    20 30 78 25 2E 34 58 0A 00                       0x%.4X..
04D6                          L$1512:
04D6    50 72 6F 67 72 61 6D 20 74 72 69 65 64 20 74 6F Program tried to
04E6    20 74 72 69 67 67 65 72 20 69 6E 74 65 72 72 75  trigger interru
04F6    70 74 20 25 75 20 62 75 74 20 69 6E 74 65 72 72 pt %u but interr
0506    75 70 74 20 74 61 62 6C 65 20 69 73 20 6F 6E 6C upt table is onl
0516    79 20 25 75 20 6C 6F 6E 67 21 0A 00             y %u long!..
0522                          L$1513:
0522    6A 75 6D 70 69 6E 67 20 74 6F 20 73 65 67 6D 65 jumping to segme
0532    6E 74 20 30 78 25 2E 34 58 20 6F 66 66 73 65 74 nt 0x%.4X offset
0542    20 30 78 25 2E 34 58 0A 00                       0x%.4X..
054B                          L$1514:
054B    52 65 74 75 72 6E 69 6E 67 20 74 6F 20 73 65 67 Returning to seg
055B    6D 65 6E 74 20 30 78 25 2E 34 58 20 6F 66 66 73 ment 0x%.4X offs
056B    65 74 20 30 78 25 2E 34 58 0A 00                et 0x%.4X..
0576                          L$1515:
0576    50 72 6F 67 72 61 6D 20 74 72 69 65 64 20 74 6F Program tried to
0586    20 73 65 74 20 69 6E 74 65 72 72 75 70 74 20 76  set interrupt v
0596    65 63 74 6F 72 20 25 75 20 62 75 74 20 69 6E 74 ector %u but int
05A6    65 72 72 75 70 74 20 74 61 62 6C 65 20 69 73 20 errupt table is 
05B6    6F 6E 6C 79 20 25 75 20 6C 6F 6E 67 21 0A 00    only %u long!..
05C5                          L$1516:
05C5    53 65 74 74 69 6E 67 20 69 6E 74 65 72 72 75 70 Setting interrup
05D5    74 20 25 75 20 74 6F 20 73 65 67 6D 65 6E 74 20 t %u to segment 
05E5    30 78 25 2E 34 58 20 6F 66 66 73 65 74 20 30 78 0x%.4X offset 0x
05F5    25 2E 34 58 0A 00                               %.4X..
05FB                          L$1517:
05FB    49 6E 73 74 72 75 63 74 69 6F 6E 3A 20 4D 45 4D Instruction: MEM
060B    43 50 59 20 25 75 20 62 79 74 65 73 2C 20 25 2E CPY %u bytes, %.
061B    34 58 3A 25 2E 34 58 20 3D 3E 20 25 2E 34 58 3A 4X:%.4X => %.4X:
062B    25 2E 34 58 00                                  %.4X.
0630                          L$1518:
0630    20 20 49 6E 73 74 72 75 63 74 69 6F 6E 3A 20 4D   Instruction: M
0640    45 4D 53 45 54 20 25 75 20 62 79 74 65 73 2C 20 EMSET %u bytes, 
0650    64 6C 20 3D 3E 20 25 2E 34 58 3A 25 2E 34 58 00 dl => %.4X:%.4X.
0660                          L$1519:
0660    20 20 49 6E 73 74 72 75 63 74 69 6F 6E 3A 20 4D   Instruction: M
0670    45 4D 43 48 52 20 25 75 20 62 79 74 65 73 2C 20 EMCHR %u bytes, 
0680    25 2E 34 58 3A 25 2E 34 58 00                   %.4X:%.4X.
068A                          L$1520:
068A    20 20 49 6E 73 74 72 75 63 74 69 6F 6E 3A 20 4D   Instruction: M
069A    45 4D 43 4D 50 20 25 75 20 62 79 74 65 73 2C 20 EMCMP %u bytes, 
06AA    25 2E 34 58 3A 25 2E 34 58 20 3C 3E 20 25 2E 34 %.4X:%.4X <> %.4
06BA    58 3A 25 2E 34 58 00                            X:%.4X.
06C1                          L$1521:
06C1    50 72 6F 67 72 61 6D 20 74 72 69 65 64 20 74 6F Program tried to
06D1    20 72 65 61 64 20 75 6E 61 6C 6C 6F 63 61 74 65  read unallocate
06E1    64 20 70 6F 72 74 20 25 75 21 0A 00             d port %u!..
06ED                          L$1522:
06ED    50 72 6F 67 72 61 6D 20 74 72 69 65 64 20 74 6F Program tried to
06FD    20 77 72 69 74 65 20 74 6F 20 75 6E 61 6C 6C 6F  write to unallo
070D    63 61 74 65 64 20 70 6F 72 74 20 25 75 21 0A 00 cated port %u!..
071D                          L$1523:
071D    53 69 67 6E 61 6C 20 25 75 20 74 6F 20 70 72 6F Signal %u to pro
072D    63 65 73 73 20 25 75 00                         cess %u.
0735                          L$1524:
0735    47 75 72 75 20 6D 65 64 69 74 61 74 69 6F 6E 3A Guru meditation:
0745    20 25 75 2C 20 30 78 25 2E 34 58 3A 30 78 25 2E  %u, 0x%.4X:0x%.
0755    34 58 2C 20 25 75 21 00                         4X, %u!.
075D                          L$1525:
075D    25 73 3D 25 73 00                               %s=%s.
0763                          L$1526:
0763    5C 00                                           \.
0765                          L$1527:
0765    43 4F 4D 00                                     COM.
0769                          L$1528:
0769    4C 50 54 00                                     LPT.
076D                          L$1529:
076D    43 4F 4E 00                                     CON.
0771                          L$1530:
0771    43 61 6E 6E 6F 74 20 61 6C 6C 6F 63 61 74 65 20 Cannot allocate 
0781    7A 65 72 6F 20 62 79 74 65 73 21 00             zero bytes!.
078D                          L$1531:
078D    72 62 00                                        rb.
0790                          L$1532:
0790    25 73 5C 2A 2E 2A 00                            %s\*.*.
0797                          L$1533:
0797    50 49 44 3A 20 25 75 2C 20 49 6E 73 74 72 75 63 PID: %u, Instruc
07A7    74 69 6F 6E 20 70 6F 69 6E 74 65 72 3A 20 30 78 tion pointer: 0x
07B7    25 2E 34 58 2C 20 49 6E 73 74 72 75 63 74 69 6F %.4X, Instructio
07C7    6E 20 6F 70 63 6F 64 65 3A 20 30 78 25 2E 32 58 n opcode: 0x%.2X
07D7    00                                              .
07D8                          L$1534:
07D8    50 49 44 20 25 75 3A 20 43 6F 64 65 20 6F 66 66 PID %u: Code off
07E8    73 65 74 20 76 69 6F 6C 61 74 69 6F 6E 21 00    set violation!.
07F7                          L$1535:
07F7    72 00                                           r.
07F9                          L$1536:
07F9    77 00                                           w.
07FB                          L$1537:
07FB    46 69 6C 65 20 65 78 69 73 74 73 21 20 52 65 70 File exists! Rep
080B    65 61 74 20 73 61 76 65 20 63 6F 6D 6D 61 6E 64 eat save command
081B    20 74 6F 20 6F 76 65 72 77 72 69 74 65 2E 00     to overwrite..
082A                          L$1538:
082A    55 6E 64 65 66 69 6E 65 64 20 73 79 6D 62 6F 6C Undefined symbol
083A    20 25 73 00                                      %s.
083E                          L$1539:
083E    53 65 67 6D 65 6E 74 3A 20 30 78 25 2E 34 58 2C Segment: 0x%.4X,
084E    20 41 64 64 72 65 73 73 3A 20 30 78 25 2E 34 58  Address: 0x%.4X
085E    2C 20 54 79 70 65 3A 20 30 78 25 58 2C 20 56 61 , Type: 0x%X, Va
086E    6C 75 65 3A 20 00                               lue: .
0874                          L$1540:
0874    25 73 30 78 25 2E 32 58 00                      %s0x%.2X.
087D                          L$1541:
087D    25 73 30 78 25 2E 34 58 00                      %s0x%.4X.
0886                          L$1542:
0886    25 2E 34 58 3A 25 2E 34 58 20 44 65 63 3A 20 25 %.4X:%.4X Dec: %
0896    75 2C 20 68 65 78 3A 20 30 78 25 2E 34 58 00    u, hex: 0x%.4X.
08A5                          L$1543:
08A5    25 2E 34 58 3A 25 2E 34 58 20 44 65 63 3A 20 25 %.4X:%.4X Dec: %
08B5    75 2C 20 68 65 78 3A 20 30 78 25 2E 32 58 00    u, hex: 0x%.2X.
08C4                          L$1544:
08C4    25 75 20 73 79 6D 62 6F 6C 73 00                %u symbols.
08CF                          L$1545:
08CF    25 73 3A 00                                     %s:.
08D3                          L$1546:
08D3    52 65 67 69 73 74 65 72 73 3A 00                Registers:.
08DE                          L$1547:
08DE    41 58 3A 20 30 78 25 2E 34 58 2C 20 42 58 3A 20 AX: 0x%.4X, BX: 
08EE    30 78 25 2E 34 58 2C 20 43 58 3A 20 30 78 25 2E 0x%.4X, CX: 0x%.
08FE    34 58 2C 20 44 58 3A 20 30 78 25 2E 34 58 00    4X, DX: 0x%.4X.
090D                          L$1548:
090D    45 58 3A 20 30 78 25 2E 34 58 2C 20 46 58 3A 20 EX: 0x%.4X, FX: 
091D    30 78 25 2E 34 58 2C 20 47 58 3A 20 30 78 25 2E 0x%.4X, GX: 0x%.
092D    34 58 2C 20 48 58 3A 20 30 78 25 2E 34 58 00    4X, HX: 0x%.4X.
093C                          L$1549:
093C    43 53 3A 20 30 78 25 2E 34 58 2C 20 49 50 3A 20 CS: 0x%.4X, IP: 
094C    30 78 25 2E 34 58 2C 20 44 53 3A 20 30 78 25 2E 0x%.4X, DS: 0x%.
095C    34 58 2C 20 53 50 3A 20 30 78 25 2E 34 58 00    4X, SP: 0x%.4X.
096B                          L$1550:
096B    43 6F 6D 70 61 72 65 20 72 65 67 3A 20 25 69 00 Compare reg: %i.
097B                          L$1551:
097B    46 6C 61 67 73 3A 20 30 78 25 2E 32 58 00       Flags: 0x%.2X.
0989                          L$1552:
0989    20 20 20 20 20 20 20 28 44 53 45 47 56 3A 20 25        (DSEGV: %
0999    75 2C 20 44 41 54 41 56 3A 20 25 75 2C 20 43 53 u, DATAV: %u, CS
09A9    45 47 56 3A 20 25 75 2C 20 43 4F 44 45 56 3A 20 EGV: %u, CODEV: 
09B9    25 75 2C 00                                     %u,.
09BD                          L$1553:
09BD    20 20 20 20 20 20 20 53 54 41 43 4B 56 3A 20 25        STACKV: %
09CD    75 2C 20 4F 56 45 52 46 4C 4F 57 3A 20 25 75 2C u, OVERFLOW: %u,
09DD    20 53 49 47 4E 3A 20 25 75 2C 20 43 41 52 52 59  SIGN: %u, CARRY
09ED    3A 20 25 75 29 00                               : %u).
09F3                          L$1554:
09F3    25 75 3A 20 30 78 25 2E 34 58 00                %u: 0x%.4X.
09FE                          L$1555:
09FE    41 73 73 65 6D 62 6C 69 6E 67 2E 2E 2E 00       Assembling....
0A0C                          L$1556:
0A0C    47 65 6E 65 72 61 74 65 64 20 25 75 20 62 79 74 Generated %u byt
0A1C    65 73 20 6C 6F 6E 67 20 69 6E 73 74 72 75 63 74 es long instruct
0A2C    69 6F 6E 3A 20 00                               ion: .
0A32                          L$1557:
0A32    30 78 25 2E 32 58 20 00                         0x%.2X .
0A3A                          L$1558:
0A3A    46 69 72 73 74 20 70 61 73 73 20 63 6F 6D 70 6C First pass compl
0A4A    65 74 65 21 00                                  ete!.
0A4F                          L$1559:
0A4F    45 72 72 6F 72 20 77 68 69 6C 65 20 61 73 73 65 Error while asse
0A5F    6D 62 6C 69 6E 67 00                            mbling.
0A66                          L$1560:
0A66    52 75 6E 6E 69 6E 67 20 70 72 6F 67 72 61 6D 2E Running program.
0A76    2E 2E 00                                        ...
0A79                          L$1561:
0A79    30 78 25 2E 34 58 3A 30 78 25 2E 34 58 20 30 78 0x%.4X:0x%.4X 0x
0A89    25 2E 32 58 20 25 63 00                         %.2X %c.
0A91                          L$1562:
0A91    30 78 25 2E 34 58 3A 30 78 25 2E 34 58 20 30 78 0x%.4X:0x%.4X 0x
0AA1    25 2E 32 58 00                                  %.2X.
0AA6                          L$1563:
0AA6    30 78 25 2E 34 58 3A 30 78 25 2E 34 58 20 30 78 0x%.4X:0x%.4X 0x
0AB6    25 2E 32 58 20 25 73 00                         %.2X %s.
0ABE                          L$1564:
0ABE    77 74 00                                        wt.
0AC1                          L$1565:
0AC1    65 78 69 74 00                                  exit.
0AC6                          L$1566:
0AC6    70 69 64 00                                     pid.
0ACA                          L$1567:
0ACA    64 65 62 75 67 00                               debug.
0AD0                          L$1568:
0AD0    6C 6F 61 64 00                                  load.
0AD5                          L$1569:
0AD5    73 61 76 65 00                                  save.
0ADA                          L$1570:
0ADA    73 74 65 70 00                                  step.
0ADF                          L$1571:
0ADF    72 75 6E 00                                     run.
0AE3                          L$1572:
0AE3    63 6F 6E 74 69 6E 75 65 00                      continue.
0AEC                          L$1573:
0AEC    65 64 69 74 00                                  edit.
0AF1                          L$1574:
0AF1    6C 73 73 79 6D 00                               lssym.
0AF7                          L$1575:
0AF7    73 74 61 74 75 73 00                            status.
0AFE                          L$1576:
0AFE    72 65 73 65 74 00                               reset.
0B04                          L$1577:
0B04    6D 65 6D 77 6F 72 64 00                         memword.
0B0C                          L$1578:
0B0C    6D 65 6D 62 79 74 65 00                         membyte.
0B14                          L$1579:
0B14    45 78 65 63 75 74 69 6E 67 20 69 6E 73 74 72 75 Executing instru
0B24    63 74 69 6F 6E 2E 2E 2E 00                      ction....
0B2D                          L$1580:
0B2D    72 6F 77 3A 20 25 75 2C 20 63 6F 6C 3A 20 25 75 row: %u, col: %u
0B3D    00                                              .
0B3E                          L$1581:
0B3E    53 74 61 63 6B 20 73 69 7A 65 3A 20 25 75 2C 20 Stack size: %u, 
0B4E    43 6F 64 65 20 73 65 67 6D 65 6E 74 73 3A 20 25 Code segments: %
0B5E    75 2C 20 43 6F 64 65 20 73 69 7A 65 3A 20 25 75 u, Code size: %u
0B6E    2C 20 44 61 74 61 20 73 65 67 6D 65 6E 74 73 3A , Data segments:
0B7E    20 25 75 2C 20 44 61 74 61 20 73 69 7A 65 3A 20  %u, Data size: 
0B8E    25 75 2C 20 49 6E 74 65 72 72 75 70 74 73 3A 20 %u, Interrupts: 
0B9E    25 75 00                                        %u.
0BA1                          L$1582:
0BA1    43 61 6E 6E 6F 74 20 6C 6F 61 64 20 25 73 00    Cannot load %s.
0BB0                          L$1583:
0BB0    54 6F 6F 20 73 6D 61 6C 6C 20 64 61 74 61 20 73 Too small data s
0BC0    65 67 6D 65 6E 74 21 00                         egment!.
0BC8                          L$1584:
0BC8    54 6F 6F 20 73 6D 61 6C 6C 20 63 6F 64 65 20 73 Too small code s
0BD8    65 67 6D 65 6E 74 21 00                         egment!.

Segment: CONST2 WORD USE16 00000002 bytes
0000                          _instruction_count:
0000    36 00                                           6.

Segment: _DATA WORD USE16 0000054A bytes
0000                          _debugfp:
0000    00 00 00 00                                     ....
0004                          _debug:
0004    00                                              .
0005                          _console:
0005    01 00                                           ..
0007                          _symbol_count:
0007    00 00                                           ..
0009                          _data_auto_len:
0009    00                                              .
000A                          _code_auto_len:
000A    00                                              .
000B                          _datap_segment:
000B    00 00                                           ..
000D                          _datap_offset:
000D    00 00                                           ..
000F                          _codep_offset:
000F    00 00                                           ..
0011                          _codep_segment:
0011    00 00                                           ..
0013                          _line_num:
0013    00 00                                           ..
0015                          _pass:
0015    00                                              .
0016                          _data_count:
0016    01 00                                           ..
0018                          _data_types:
0018    00 00 00 00                                     DD	DGROUP:L$1397
001C    05 00 00 00                                     DD	DGROUP:L$1398
0020    0A 00 00 00                                     DD	DGROUP:L$1399
0024                          _syntaxerror:
0024    53 79 6E 74 61 78 20 65 72 72 6F 72 20 69 6E 20 Syntax error in 
0034    6C 69 6E 65 20 00                               line .
003A                          _DEFAULT_PRIVS:
003A    FF FF                                           ..
003C                          _stackoverflowerror:
003C    53 74 61 63 6B 20 6F 76 65 72 66 6C 6F 77 21 00 Stack overflow!.
004C                          _stackunderflowerror:
004C    53 74 61 63 6B 20 75 6E 64 65 72 66 6C 6F 77 21 Stack underflow!
005C    00                                              .
005D                          _segfaulterror:
005D    53 65 67 6D 65 6E 74 61 74 69 6F 6E 20 76 69 6F Segmentation vio
006D    6C 61 74 69 6F 6E 21 00                         lation!.
0075                          _vpu_count:
0075    00 00                                           ..
0077                          _pid_counter:
0077    00 00                                           ..
0079                          _INSTR:
0079    0E 00 00 00                                     DD	DGROUP:L$1400
007D    13 00 00 00                                     DD	DGROUP:L$1401
0081    17 00 00 00                                     DD	DGROUP:L$1402
0085    1B 00 00 00                                     DD	DGROUP:L$1403
0089    1F 00 00 00                                     DD	DGROUP:L$1404
008D    23 00 00 00                                     DD	DGROUP:L$1405
0091    27 00 00 00                                     DD	DGROUP:L$1406
0095    2A 00 00 00                                     DD	DGROUP:L$1407
0099    2F 00 00 00                                     DD	DGROUP:L$1408
009D    33 00 00 00                                     DD	DGROUP:L$1409
00A1    37 00 00 00                                     DD	DGROUP:L$1410
00A5    3B 00 00 00                                     DD	DGROUP:L$1411
00A9    40 00 00 00                                     DD	DGROUP:L$1412
00AD    44 00 00 00                                     DD	DGROUP:L$1413
00B1    48 00 00 00                                     DD	DGROUP:L$1414
00B5    52 00 00 00                                     DD	DGROUP:L$1415
00B9    56 00 00 00                                     DD	DGROUP:L$1416
00BD    59 00 00 00                                     DD	DGROUP:L$1417
00C1    5D 00 00 00                                     DD	DGROUP:L$1418
00C5    61 00 00 00                                     DD	DGROUP:L$1419
00C9    65 00 00 00                                     DD	DGROUP:L$1420
00CD    69 00 00 00                                     DD	DGROUP:L$1421
00D1    6E 00 00 00                                     DD	DGROUP:L$1422
00D5    72 00 00 00                                     DD	DGROUP:L$1423
00D9    76 00 00 00                                     DD	DGROUP:L$1424
00DD    7B 00 00 00                                     DD	DGROUP:L$1425
00E1    82 00 00 00                                     DD	DGROUP:L$1426
00E5    86 00 00 00                                     DD	DGROUP:L$1427
00E9    89 00 00 00                                     DD	DGROUP:L$1428
00ED    8D 00 00 00                                     DD	DGROUP:L$1429
00F1    91 00 00 00                                     DD	DGROUP:L$1430
00F5    95 00 00 00                                     DD	DGROUP:L$1431
00F9    98 00 00 00                                     DD	DGROUP:L$1432
00FD    A1 00 00 00                                     DD	DGROUP:L$1433
0101    A5 00 00 00                                     DD	DGROUP:L$1434
0105    AA 00 00 00                                     DD	DGROUP:L$1435
0109    B1 00 00 00                                     DD	DGROUP:L$1436
010D    B4 00 00 00                                     DD	DGROUP:L$1437
0111    B8 00 00 00                                     DD	DGROUP:L$1438
0115    BF 00 00 00                                     DD	DGROUP:L$1439
0119    C6 00 00 00                                     DD	DGROUP:L$1440
011D    D0 00 00 00                                     DD	DGROUP:L$1441
0121    D5 00 00 00                                     DD	DGROUP:L$1442
0125    DC 00 00 00                                     DD	DGROUP:L$1443
0129    E3 00 00 00                                     DD	DGROUP:L$1444
012D    EA 00 00 00                                     DD	DGROUP:L$1445
0131    EE 00 00 00                                     DD	DGROUP:L$1446
0135    F2 00 00 00                                     DD	DGROUP:L$1447
0139    F9 00 00 00                                     DD	DGROUP:L$1448
013D    00 01 00 00                                     DD	DGROUP:L$1449
0141    04 01 00 00                                     DD	DGROUP:L$1450
0145    09 01 00 00                                     DD	DGROUP:L$1451
0149    10 01 00 00                                     DD	DGROUP:L$1452
014D    00 00 00 00                                     ....
0151                          _VINSTR:
0151    00 16 18 23 26 27 2D 2E 2F 30 31 33 34 00       ...#&'-./0134.
015F                          _SBYTE_INSTR:
015F    03 04 07 08 0E 12 20 28 24 25 0B 00             ...... ($%..
016B                          _SWORD_INSTR:
016B    06 17 1A 1B 1C 1D 1E 1F 00                      .........
0174                          _DBYTE_INSTR:
0174    09 0A 0C 0D 0F 10 11 13 14 05 29 2A 2B 2C 32 00 ..........)*+,2.
0184                          _OPERIMM_INSTR:
0184    09 0A 0C 0D 0F 10 11 13 14 05 29 32 00          ..........)2.
0191                          _DWORD_INSTR:
0191    21 22 00                                        !".
0194                          _TWORD_INSTR:
0194    19 00                                           ..
0196                          _WREG_INSTR:
0196    07 08 20 2C 00                                  .. ,.
019B                          _BYTEINT_INSTR:
019B    24 25 00                                        $%.
019E                          _JUMP_INSTR:
019E    15 02 21 22 06 1A 1B 1C 1D 1E 1F 00             ..!"........
01AA                          _siregs:
01AA    17 01 00 00                                     DD	DGROUP:L$1453
01AE    1A 01 00 00                                     DD	DGROUP:L$1454
01B2    1D 01 00 00                                     DD	DGROUP:L$1455
01B6    20 01 00 00                                     DD	DGROUP:L$1456
01BA                          _regs:
01BA    23 01 00 00                                     DD	DGROUP:L$1457
01BE    25 01 00 00                                     DD	DGROUP:L$1458
01C2    27 01 00 00                                     DD	DGROUP:L$1459
01C6    29 01 00 00                                     DD	DGROUP:L$1460
01CA    2B 01 00 00                                     DD	DGROUP:L$1461
01CE    2D 01 00 00                                     DD	DGROUP:L$1462
01D2    2F 01 00 00                                     DD	DGROUP:L$1463
01D6    31 01 00 00                                     DD	DGROUP:L$1464
01DA                          _header_keywords:
01DA    33 01 00 00                                     DD	DGROUP:L$1465
01DE    39 01 00 00                                     DD	DGROUP:L$1466
01E2    3E 01 00 00                                     DD	DGROUP:L$1467
01E6    43 01 00 00                                     DD	DGROUP:L$1468
01EA                          L$1585:
01EA    31 36 2D 62 69 74 20 00                         16-bit .
01F2                          L$1586:
01F2    38 2D 62 69 74 20 00                            8-bit .
01F9                          L$1587:
01F9    70 6F 69 6E 74 65 72 00                         pointer.
0201                          L$1588:
0201    1F 1C 1F 1E 1F 1E 1F 1F 1E 1F 1E 1F             ............
020D                          L$1589:
020D    43 6F 6E 64 69 74 69 6F 6E 20 73 61 74 69 73 66 Condition satisf
021D    69 65 64 2C 20 70 65 72 66 6F 72 6D 69 6E 67 20 ied, performing 
022D    6A 75 6D 70 00                                  jump.
0232                          L$1590:
0232    43 6F 6E 64 69 74 69 6F 6E 20 6E 6F 74 20 73 61 Condition not sa
0242    74 69 73 66 69 65 64 00                         tisfied.
024A                          _nowindowerror:
024A    4E 6F 20 73 75 63 68 20 77 69 6E 64 6F 77 21 00 No such window!.
025A                          L$1591:
025A    06 0F 10 11 12 13 00                            .......
0261                          _vpu_instr_scrcall:
0261    00 00 00 00                                     DD	vpu_scrcall_createwindow_
0265    00 00 00 00                                     DD	vpu_scrcall_fullscreen_
0269    00 00 00 00                                     DD	vpu_scrcall_update_
026D    00 00 00 00                                     DD	vpu_scrcall_clear_
0271    00 00 00 00                                     DD	vpu_scrcall_text_
0275    00 00 00 00                                     DD	vpu_scrcall_putpixel_
0279    00 00 00 00                                     DD	vpu_scrcall_memset_
027D    00 00 00 00                                     DD	vpu_scrcall_memcpy_
0281    00 00 00 00                                     DD	vpu_scrcall_button_
0285    00 00 00 00                                     DD	vpu_scrcall_textbox_
0289    00 00 00 00                                     DD	vpu_scrcall_list_
028D    00 00 00 00                                     DD	vpu_scrcall_scrollbar_
0291    00 00 00 00                                     DD	vpu_scrcall_icon_
0295    00 00 00 00                                     DD	vpu_scrcall_circle_
0299    00 00 00 00                                     DD	vpu_scrcall_line_
029D    00 00 00 00                                     DD	vpu_scrcall_rectangle_
02A1    00 00 00 00                                     DD	vpu_scrcall_mltext_
02A5    00 00 00 00                                     DD	vpu_scrcall_updatemltext_
02A9    00 00 00 00                                     DD	vpu_scrcall_temptext_
02AD    00 00 00 00                                     DD	vpu_scrcall_textbox_update_
02B1    00 00 00 00                                     DD	vpu_scrcall_dialog_
02B5    00 00 00 00                                     DD	vpu_scrcall_xpm2img_
02B9    00 00 00 00                                     DD	vpu_scrcall_delelement_
02BD    00 00 00 00                                     DD	vpu_scrcall_resize_element_
02C1    00 00 00 00                                     DD	vpu_scrcall_move_element_
02C5    00 00 00 00                                     DD	vpu_scrcall_checkbox_
02C9    00 00 00 00                                     DD	vpu_scrcall_getselectc_
02CD    00 00 00 00                                     DD	vpu_scrcall_setselectc_
02D1    00 00 00 00                                     DD	vpu_scrcall_radiobutton_
02D5    00 00 00 00                                     DD	vpu_scrcall_textbuff_
02D9    00 00 00 00                                     DD	vpu_scrcall_setelementmaxcount_
02DD    00 00 00 00                                     DD	vpu_scrcall_drawelement_
02E1    00 00 00 00                                     DD	vpu_scrcall_setfont_
02E5    00 00 00 00                                     DD	vpu_scrcall_getwindowsize_
02E9                          L$1592:
02E9    00                                              .
02EA                          _vpu_hardware_int_table:
02EA    00 00 00 00                                     ....
02EE                          _vpu_hwint_count:
02EE    00 00                                           ..
02F0                          _kernel_parm:
02F0    00 00 00 00                                     DD	_DEFAULT_PRIVS
02F4    00 00 00 00                                     DD	_starttime_high
02F8    00 00 00 00                                     DD	_starttime_low
02FC                          _global_open_files:
02FC    00 00                                           ..
02FE                          _modfs:
02FE    44 45 56 3A 5C 00                               DEV:\.
0304                          _stdin_endchars:
0304    0A 04 00                                        ...
0307                          _timezone:
0307    00 00 00 00                                     ....
030B                          L$1593:
030B    5A 6F 6D 62 69 65 00                            Zombie.
0312                          _vpu_instr_syscall:
0312    00 00 00 00                                     DD	vpu_syscall_read_
0316    00 00 00 00                                     DD	vpu_syscall_write_
031A    00 00 00 00                                     DD	vpu_syscall_open_
031E    00 00 00 00                                     DD	vpu_syscall_close_
0322    00 00 00 00                                     DD	vpu_syscall_chdir_
0326    00 00 00 00                                     DD	vpu_syscall_opendir_
032A    00 00 00 00                                     DD	vpu_syscall_readdir_
032E    00 00 00 00                                     DD	vpu_syscall_closedir_
0332    00 00 00 00                                     DD	vpu_syscall_lseek_
0336    00 00 00 00                                     DD	vpu_syscall_mmap_
033A    00 00 00 00                                     DD	vpu_syscall_stat_
033E    00 00 00 00                                     DD	vpu_syscall_munmap_
0342    00 00 00 00                                     DD	vpu_syscall_exit_
0346    00 00 00 00                                     DD	vpu_syscall_getargc_
034A    00 00 00 00                                     DD	vpu_syscall_getargv_
034E    00 00 00 00                                     DD	vpu_syscall_spawn_
0352    00 00 00 00                                     DD	vpu_syscall_clone_
0356    00 00 00 00                                     DD	vpu_syscall_fork_
035A    00 00 00 00                                     DD	vpu_syscall_gettime_
035E    00 00 00 00                                     DD	vpu_syscall_sound_
0362    00 00 00 00                                     DD	vpu_syscall_nosound_
0366    00 00 00 00                                     DD	vpu_syscall_waitscrtrace_
036A    00 00 00 00                                     DD	vpu_syscall_sleep_
036E    00 00 00 00                                     DD	vpu_syscall_sendsignal_
0372    00 00 00 00                                     DD	vpu_syscall_procinfo_
0376    00 00 00 00                                     DD	vpu_syscall_getpriority_
037A    00 00 00 00                                     DD	vpu_syscall_setpriority_
037E    00 00 00 00                                     DD	vpu_syscall_fsync_
0382    00 00 00 00                                     DD	vpu_syscall_loadmod_
0386    00 00 00 00                                     DD	vpu_syscall_cmdmod_
038A    00 00 00 00                                     DD	vpu_syscall_exec_
038E    00 00 00 00                                     DD	vpu_syscall_dup_
0392    00 00 00 00                                     DD	vpu_syscall_dup2_
0396    00 00 00 00                                     DD	vpu_syscall_pipe_
039A    00 00 00 00                                     DD	vpu_syscall_mkdir_
039E    00 00 00 00                                     DD	vpu_syscall_sendfd_
03A2    00 00 00 00                                     DD	vpu_syscall_sethwint_
03A6    00 00 00 00                                     DD	vpu_syscall_unsethwint_
03AA    00 00 00 00                                     DD	vpu_syscall_geterrno_
03AE    00 00 00 00                                     DD	vpu_syscall_seterrno_
03B2    00 00 00 00                                     DD	vpu_syscall_unlink_
03B6    00 00 00 00                                     DD	vpu_syscall_rmdir_
03BA    00 00 00 00                                     DD	vpu_syscall_setprivs_
03BE    00 00 00 00                                     DD	vpu_syscall_getkernelparm_
03C2    00 00 00 00                                     DD	vpu_syscall_setkernelparm_
03C6    00 00 00 00                                     DD	vpu_syscall_getcwd_
03CA    00 00 00 00                                     DD	vpu_syscall_powersave_
03CE    00 00 00 00                                     DD	vpu_syscall_unloadmod_
03D2    00 00 00 00                                     DD	vpu_syscall_getenv_
03D6    00 00 00 00                                     DD	vpu_syscall_setenv_
03DA                          _instruction_func_ptr:
03DA    00 00 00 00                                     DD	vpu_instr_wait_
03DE    00 00 00 00                                     DD	vpu_instr_mov_
03E2    00 00 00 00                                     DD	vpu_instr_jump_
03E6    00 00 00 00                                     DD	vpu_instr_inc_
03EA    00 00 00 00                                     DD	vpu_instr_dec_
03EE    00 00 00 00                                     DD	vpu_instr_cmp_
03F2    00 00 00 00                                     DD	vpu_instr_je_
03F6    00 00 00 00                                     DD	vpu_instr_push_
03FA    00 00 00 00                                     DD	vpu_instr_pop_
03FE    00 00 00 00                                     DD	vpu_instr_add_
0402    00 00 00 00                                     DD	vpu_instr_sub_
0406    00 00 00 00                                     DD	vpu_instr_dseg_
040A    00 00 00 00                                     DD	vpu_instr_mul_
040E    00 00 00 00                                     DD	vpu_instr_div_
0412    00 00 00 00                                     DD	vpu_instr_printuint_
0416    00 00 00 00                                     DD	vpu_instr_and_
041A    00 00 00 00                                     DD	vpu_instr_or_
041E    00 00 00 00                                     DD	vpu_instr_xor_
0422    00 00 00 00                                     DD	vpu_instr_inv_
0426    00 00 00 00                                     DD	vpu_instr_shl_
042A    00 00 00 00                                     DD	vpu_instr_shr_
042E    00 00 00 00                                     DD	vpu_instr_call_
0432    00 00 00 00                                     DD	vpu_instr_ret_
0436    00 00 00 00                                     DD	vpu_instr_int_
043A    00 00 00 00                                     DD	vpu_instr_iret_
043E    00 00 00 00                                     DD	vpu_instr_setint_
0442    00 00 00 00                                     DD	vpu_instr_jne_
0446    00 00 00 00                                     DD	vpu_instr_jg_
044A    00 00 00 00                                     DD	vpu_instr_jge_
044E    00 00 00 00                                     DD	vpu_instr_jle_
0452    00 00 00 00                                     DD	vpu_instr_jcz_
0456    00 00 00 00                                     DD	vpu_instr_jl_
045A    00 00 00 00                                     DD	vpu_instr_printstr_
045E    00 00 00 00                                     DD	vpu_instr_jfs_
0462    00 00 00 00                                     DD	vpu_instr_jfns_
0466    00 00 00 00                                     DD	vpu_instr_memcpy_
046A    00 00 00 00                                     DD	vpu_instr_in_
046E    00 00 00 00                                     DD	vpu_instr_out_
0472    00 00 00 00                                     DD	vpu_instr_memset_
0476    00 00 00 00                                     DD	vpu_instr_zeroflags_
047A    00 00 00 00                                     DD	vpu_instr_printsint_
047E    00 00 00 00                                     DD	vpu_instr_idiv_
0482    00 00 00 00                                     DD	vpu_instr_sconvw_
0486    00 00 00 00                                     DD	vpu_instr_sconvb_
048A    00 00 00 00                                     DD	vpu_instr_getstr_
048E    00 00 00 00                                     DD	vpu_instr_sys_
0492    00 00 00 00                                     DD	vpu_instr_scr_
0496    00 00 00 00                                     DD	vpu_select_primary_stack_
049A    00 00 00 00                                     DD	vpu_select_secondary_stack_
049E    00 00 00 00                                     DD	vpu_instr_nop_
04A2    00 00 00 00                                     DD	vpu_instr_test_
04A6    00 00 00 00                                     DD	vpu_instr_memchr_
04AA    00 00 00 00                                     DD	vpu_instr_memcmp_
04AE                          _error_while_opening:
04AE    45 72 72 6F 72 20 77 68 69 6C 65 20 6F 70 65 6E Error while open
04BE    69 6E 67 20 66 69 6C 65 00                      ing file.
04C7                          L$1594:
04C7    00 00                                           ..
04C9                          L$1595:
04C9    00 00                                           ..
04CB                          _response_ready:
04CB    52 65 61 64 79 2E 00                            Ready..
04D2                          L$1596:
04D2    55 6E 6B 6E 6F 77 6E 20 63 6F 6D 6D 61 6E 64 20 Unknown command 
04E2    6F 72 20 69 6E 73 74 72 75 63 74 69 6F 6E 2E 00 or instruction..
04F2                          L$1597:
04F2    4E 6F 20 66 69 6C 65 20 6E 61 6D 65 20 73 70 65 No file name spe
0502    63 69 66 69 65 64 2E 00                         cified..
050A                          L$1598:
050A    56 50 55 20 69 6E 69 74 20 65 72 72 6F 72 2E 00 VPU init error..
051A                          L$1599:
051A    49 6E 76 61 6C 69 64 20 68 65 61 64 65 72 2E 00 Invalid header..
052A                          L$1600:
052A    56 69 72 74 75 61 6C 20 43 50 55 20 43 6F 6E 73 Virtual CPU Cons
053A    6F 6C 65 20 76 2E 20 30 2E 39 20 62 65 74 61 00 ole v. 0.9 beta.

Segment: _BSS WORD USE16 0000010D bytes
0000                          _history:
0004                          _asm_content:
0008                          _vpus:
000C                          _data:
0010                          _symbols:
0014                          _message:
0078                          _smessage:
007C                          _hexstr:
0082                          _starttime_high:
0084                          _starttime_low:
0086                          _data_allocated:
0088                          _SCR_ROWS:
0089                          L$1601:
00A9                          L$1602:

BSS Size: 269 bytes

Segment: _TEXT WORD USE16 00000000 bytes

Routine Size: 0 bytes,    Routine Base: _TEXT + 0000

No disassembly errors

