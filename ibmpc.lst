Module: D:\LEETSRC\490\ibmpc.c
GROUP: 'DGROUP' CONST,CONST2,_DATA,_BSS

Segment: ibmpc_TEXT BYTE USE16 000018CE bytes
0000                          reset_int24_:
0000    53                        push        bx 
0001    51                        push        cx 
0002    B8 24 00                  mov         ax,0x0024 
0005    36 8B 1E 00 00            mov         bx,word ptr ss:_prev_int_24 
000A    36 8B 0E 02 00            mov         cx,word ptr ss:_prev_int_24+0x2 
000F                          L$1:
000F    9A 00 00 00 00            call        _dos_setvect_ 
0014    59                        pop         cx 
0015    5B                        pop         bx 
0016    CB                        retf        
0017                          int24handler_:
0017    60                        pusha       
0018    1E                        push        ds 
0019    06                        push        es 
001A    0F A0                     push        fs 
001C    0F A8                     push        gs 
001E    89 E5                     mov         bp,sp 
0020    83 EC 06                  sub         sp,0x0006 
0023    FC                        cld         
0024    88 86 FE FF               mov         byte ptr -0x2[bp],al 
0028    88 A6 FC FF               mov         byte ptr -0x4[bp],ah 
002C    89 BE FA FF               mov         word ptr -0x6[bp],di 
0030    C1 66 FA 08               shl         word ptr -0x6[bp],0x08 
0034    C1 6E FA 08               shr         word ptr -0x6[bp],0x08 
0038    F6 46 FC 80               test        byte ptr -0x4[bp],0x80 
003C    74 49                     je          L$2 
003E    0F B6 5E FC               movzx       bx,byte ptr -0x4[bp] 
0042    D1 FB                     sar         bx,0x01 
0044    30 FF                     xor         bh,bh 
0046    B8 00 00                  mov         ax,DGROUP:CONST 
0049    80 E3 03                  and         bl,0x03 
004C    8E D8                     mov         ds,ax 
004E    C1 E3 02                  shl         bx,0x02 
0051    66 FF B7 00 00            push        dword ptr _error3[bx] 
0056    8A 5E FC                  mov         bl,byte ptr -0x4[bp] 
0059    80 E3 01                  and         bl,0x01 
005C    30 FF                     xor         bh,bh 
005E    C1 E3 02                  shl         bx,0x02 
0061    66 FF B7 00 00            push        dword ptr _error2[bx] 
0066    50                        push        ax 
0067    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
006A    68 00 00                  push        offset _error1 
006D    C1 E3 02                  shl         bx,0x02 
0070    66 FF B7 00 00            push        dword ptr _dierror[bx] 
0075    50                        push        ax 
0076    68 E6 00                  push        offset DGROUP:L$218 
0079    50                        push        ax 
007A    68 00 00                  push        offset _errormsg 
007D    9A 00 00 00 00            call        sprintf_ 
0082    83 C4 18                  add         sp,0x0018 
0085    EB 4C                     jmp         L$3 
0087                          L$2:
0087    0F B6 5E FE               movzx       bx,byte ptr -0x2[bp] 
008B    53                        push        bx 
008C    0F B6 5E FC               movzx       bx,byte ptr -0x4[bp] 
0090    D1 FB                     sar         bx,0x01 
0092    30 FF                     xor         bh,bh 
0094    B8 00 00                  mov         ax,DGROUP:CONST 
0097    80 E3 03                  and         bl,0x03 
009A    8E D8                     mov         ds,ax 
009C    C1 E3 02                  shl         bx,0x02 
009F    66 FF B7 00 00            push        dword ptr _error3[bx] 
00A4    8A 5E FC                  mov         bl,byte ptr -0x4[bp] 
00A7    80 E3 01                  and         bl,0x01 
00AA    30 FF                     xor         bh,bh 
00AC    C1 E3 02                  shl         bx,0x02 
00AF    66 FF B7 00 00            push        dword ptr _error2[bx] 
00B4    50                        push        ax 
00B5    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
00B8    68 00 00                  push        offset _error1 
00BB    C1 E3 02                  shl         bx,0x02 
00BE    66 FF B7 00 00            push        dword ptr _dierror[bx] 
00C3    50                        push        ax 
00C4    68 F3 00                  push        offset DGROUP:L$219 
00C7    50                        push        ax 
00C8    68 00 00                  push        offset _errormsg 
00CB    9A 00 00 00 00            call        sprintf_ 
00D0    83 C4 1A                  add         sp,0x001a 
00D3                          L$3:
00D3    B8 00 00                  mov         ax,offset _errormsg 
00D6    BA 00 00                  mov         dx,seg _errormsg 
00D9    9A 00 00 00 00            call        log_error_ 
00DE    9A 00 00 00 00            call        show_error_console_ 
00E3    C6 46 16 03               mov         byte ptr 0x16[bp],0x03 
00E7    89 EC                     mov         sp,bp 
00E9                          L$4:
00E9    0F A9                     pop         gs 
00EB    0F A1                     pop         fs 
00ED    07                        pop         es 
00EE    1F                        pop         ds 
00EF    61                        popa        
00F0    CF                        iret        

Routine Size: 241 bytes,    Routine Base: ibmpc_TEXT + 0000

00F1                          set_int24_:
00F1    53                        push        bx 
00F2    51                        push        cx 
00F3    52                        push        dx 
00F4    B8 24 00                  mov         ax,0x0024 
00F7    BB 00 00                  mov         bx,offset int24handler_ 
00FA    B9 00 00                  mov         cx,seg int24handler_ 
00FD    9A 00 00 00 00            call        _dos_getvect_ 
0102    36 A3 00 00               mov         word ptr ss:_prev_int_24,ax 
0106    B8 24 00                  mov         ax,0x0024 
0109    36 89 16 02 00            mov         word ptr ss:_prev_int_24+0x2,dx 
010E    9A 00 00 00 00            call        _dos_setvect_ 
0113    E9 52 0E                  jmp         L$115 

Routine Size: 37 bytes,    Routine Base: ibmpc_TEXT + 00F1

0116                          hide_mouse_if_in_box_:
0116    56                        push        si 
0117    57                        push        di 
0118    89 DE                     mov         si,bx 
011A    89 CF                     mov         di,cx 
011C    36 8B 0E 02 00            mov         cx,word ptr ss:_mouse+0x2 
0121    36 8B 1E 00 00            mov         bx,word ptr ss:_mouse 
0126    85 C9                     test        cx,cx 
0128    75 04                     jne         L$5 
012A    85 DB                     test        bx,bx 
012C    74 2D                     je          L$6 
012E                          L$5:
012E    8E D9                     mov         ds,cx 
0130    F6 47 04 04               test        byte ptr 0x4[bx],0x04 
0134    75 25                     jne         L$6 
0136    8B 0F                     mov         cx,word ptr [bx] 
0138    83 C1 08                  add         cx,0x0008 
013B    39 C8                     cmp         ax,cx 
013D    7F 1C                     jg          L$6 
013F    8B 4F 02                  mov         cx,word ptr 0x2[bx] 
0142    83 C1 0C                  add         cx,0x000c 
0145    39 CA                     cmp         dx,cx 
0147    7F 12                     jg          L$6 
0149    01 F0                     add         ax,si 
014B    3B 07                     cmp         ax,word ptr [bx] 
014D    76 0C                     jbe         L$6 
014F    01 FA                     add         dx,di 
0151    3B 57 02                  cmp         dx,word ptr 0x2[bx] 
0154    76 05                     jbe         L$6 
0156    9A 00 00 00 00            call        hide_mouse_cursor_ 
015B                          L$6:
015B    5F                        pop         di 
015C    5E                        pop         si 
015D    CB                        retf        

Routine Size: 72 bytes,    Routine Base: ibmpc_TEXT + 0116

015E                          fill_screen_:
015E    52                        push        dx 
015F    89 C2                     mov         dx,ax 
0161    9A 00 00 00 00            call        hide_mouse_cursor_ 
0166    16                        push        ss 
0167    07                        pop         es 
0168    89 D0                     mov         ax,dx 
016A    26 FF 1E 00 00            call        dword ptr es:_fill_screen_color 
016F    5A                        pop         dx 
0170    CB                        retf        

Routine Size: 19 bytes,    Routine Base: ibmpc_TEXT + 015E

0171                          scrmemcpy_:
0171    56                        push        si 
0172    57                        push        di 
0173    55                        push        bp 
0174    89 E5                     mov         bp,sp 
0176    50                        push        ax 
0177    52                        push        dx 
0178    89 CA                     mov         dx,cx 
017A    8B 7E 0C                  mov         di,word ptr 0xc[bp] 
017D    8B 76 0A                  mov         si,word ptr 0xa[bp] 
0180    16                        push        ss 
0181    07                        pop         es 
0182    89 D9                     mov         cx,bx 
0184    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
0187    26 FF 1E 00 00            call        dword ptr es:_video_memcpy 
018C    C9                        leave       
018D    5F                        pop         di 
018E    5E                        pop         si 
018F    CA 04 00                  retf        0x0004 

Routine Size: 33 bytes,    Routine Base: ibmpc_TEXT + 0171

0192                          put_pixel_13h_:
0192    52                        push        dx 
0193    89 DA                     mov         dx,bx 
0195    C1 E2 08                  shl         dx,0x08 
0198    C1 E3 06                  shl         bx,0x06 
019B    01 DA                     add         dx,bx 
019D    36 8B 1E 00 00            mov         bx,word ptr ss:_VGA 
01A2    01 D0                     add         ax,dx 
01A4    36 8E 1E 02 00            mov         ds,word ptr ss:_VGA+0x2 
01A9    01 C3                     add         bx,ax 
01AB    88 0F                     mov         byte ptr [bx],cl 
01AD    5A                        pop         dx 
01AE    CB                        retf        

Routine Size: 29 bytes,    Routine Base: ibmpc_TEXT + 0192

01AF                          put_pixel_cga_:
01AF    52                        push        dx 
01B0    56                        push        si 
01B1    57                        push        di 
01B2    89 C2                     mov         dx,ax 
01B4    89 CE                     mov         si,cx 
01B6    89 D8                     mov         ax,bx 
01B8    89 D1                     mov         cx,dx 
01BA    BB 80 00                  mov         bx,0x0080 
01BD    80 E1 07                  and         cl,0x07 
01C0    D3 FB                     sar         bx,cl 
01C2    89 D9                     mov         cx,bx 
01C4    89 C3                     mov         bx,ax 
01C6    D1 EB                     shr         bx,0x01 
01C8    89 DF                     mov         di,bx 
01CA    C1 E7 06                  shl         di,0x06 
01CD    C1 E3 04                  shl         bx,0x04 
01D0    C1 EA 03                  shr         dx,0x03 
01D3    01 FB                     add         bx,di 
01D5    01 DA                     add         dx,bx 
01D7    36 C5 1E 00 00            lds         bx,dword ptr ss:_VGA 
01DC    01 D3                     add         bx,dx 
01DE    A8 01                     test        al,0x01 
01E0    74 03                     je          L$7 
01E2    80 C7 20                  add         bh,0x20 
01E5                          L$7:
01E5    85 F6                     test        si,si 
01E7    75 08                     jne         L$8 
01E9    88 C8                     mov         al,cl 
01EB    F6 D0                     not         al 
01ED    20 07                     and         byte ptr [bx],al 
01EF    EB 02                     jmp         L$9 
01F1                          L$8:
01F1    08 0F                     or          byte ptr [bx],cl 
01F3                          L$9:
01F3    5F                        pop         di 
01F4    5E                        pop         si 
01F5    5A                        pop         dx 
01F6    CB                        retf        

Routine Size: 72 bytes,    Routine Base: ibmpc_TEXT + 01AF

01F7                          put_pixel_ega2_:
01F7    52                        push        dx 
01F8    89 CA                     mov         dx,cx 
01FA    89 D9                     mov         cx,bx 
01FC    C1 E1 06                  shl         cx,0x06 
01FF    C1 E3 04                  shl         bx,0x04 
0202    01 D9                     add         cx,bx 
0204    89 C3                     mov         bx,ax 
0206    C1 EB 03                  shr         bx,0x03 
0209    01 CB                     add         bx,cx 
020B    36 8B 0E 00 00            mov         cx,word ptr ss:_VGA 
0210    01 CB                     add         bx,cx 
0212    88 C1                     mov         cl,al 
0214    B8 80 00                  mov         ax,0x0080 
0217    80 E1 07                  and         cl,0x07 
021A    36 8E 1E 02 00            mov         ds,word ptr ss:_VGA+0x2 
021F    D3 F8                     sar         ax,cl 
0221    85 D2                     test        dx,dx 
0223    74 04                     je          L$10 
0225    08 07                     or          byte ptr [bx],al 
0227    5A                        pop         dx 
0228    CB                        retf        
0229                          L$10:
0229    F6 D0                     not         al 
022B    20 07                     and         byte ptr [bx],al 
022D    5A                        pop         dx 
022E    CB                        retf        

Routine Size: 56 bytes,    Routine Base: ibmpc_TEXT + 01F7

022F                          put_pixel_ega4_:
022F    52                        push        dx 
0230    56                        push        si 
0231    55                        push        bp 
0232    89 E5                     mov         bp,sp 
0234    51                        push        cx 
0235    89 D9                     mov         cx,bx 
0237    C1 E1 06                  shl         cx,0x06 
023A    C1 E3 04                  shl         bx,0x04 
023D    01 D9                     add         cx,bx 
023F    89 C3                     mov         bx,ax 
0241    C1 EB 03                  shr         bx,0x03 
0244    01 D9                     add         cx,bx 
0246    36 8B 1E 00 00            mov         bx,word ptr ss:_VGA 
024B    01 CB                     add         bx,cx 
024D    88 C1                     mov         cl,al 
024F    B8 80 00                  mov         ax,0x0080 
0252    80 E1 07                  and         cl,0x07 
0255    D3 F8                     sar         ax,cl 
0257    36 8B 36 02 00            mov         si,word ptr ss:_VGA+0x2 
025C    89 C1                     mov         cx,ax 
025E    36 83 3E 00 00 00         cmp         word ptr ss:_ega4_lastoperation,0x0000 
0264    74 1B                     je          L$11 
0266    B8 05 00                  mov         ax,0x0005 
0269    BA CE 03                  mov         dx,0x03ce 
026C    EE                        out         dx,al 
026D    B8 02 00                  mov         ax,0x0002 
0270    BA CF 03                  mov         dx,0x03cf 
0273    EE                        out         dx,al 
0274    B8 08 00                  mov         ax,0x0008 
0277    BA CE 03                  mov         dx,0x03ce 
027A    EE                        out         dx,al 
027B    31 C0                     xor         ax,ax 
027D    36 A3 00 00               mov         word ptr ss:_ega4_lastoperation,ax 
0281                          L$11:
0281    BA CF 03                  mov         dx,0x03cf 
0284    0F B6 C1                  movzx       ax,cl 
0287    EE                        out         dx,al 
0288    8E DE                     mov         ds,si 
028A    8A 07                     mov         al,byte ptr [bx] 
028C    8E DE                     mov         ds,si 
028E    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0291    88 07                     mov         byte ptr [bx],al 
0293    C9                        leave       
0294    5E                        pop         si 
0295    5A                        pop         dx 
0296    CB                        retf        

Routine Size: 104 bytes,    Routine Base: ibmpc_TEXT + 022F

0297                          put_pixel_raw_:
0297    51                        push        cx 
0298    89 D9                     mov         cx,bx 
029A    36 3B 06 00 00            cmp         ax,word ptr ss:__RES_X 
029F    73 10                     jae         L$12 
02A1    36 3B 16 00 00            cmp         dx,word ptr ss:__RES_Y 
02A6    73 09                     jae         L$12 
02A8    16                        push        ss 
02A9    07                        pop         es 
02AA    89 D3                     mov         bx,dx 
02AC    26 FF 1E 00 00            call        dword ptr es:_put_pixel_screen 
02B1                          L$12:
02B1    59                        pop         cx 
02B2    CB                        retf        

Routine Size: 28 bytes,    Routine Base: ibmpc_TEXT + 0297

02B3                          get_pixel_raw_:
02B3    53                        push        bx 
02B4    51                        push        cx 
02B5    89 C1                     mov         cx,ax 
02B7    16                        push        ss 
02B8    07                        pop         es 
02B9    89 D3                     mov         bx,dx 
02BB    26 FF 1E 00 00            call        dword ptr es:_get_pixel_screen 
02C0    59                        pop         cx 
02C1    5B                        pop         bx 
02C2    CB                        retf        

Routine Size: 16 bytes,    Routine Base: ibmpc_TEXT + 02B3

02C3                          put_pixel_:
02C3    51                        push        cx 
02C4    56                        push        si 
02C5    57                        push        di 
02C6    C8 02 00 00               enter       0x0002,0x00 
02CA    89 C7                     mov         di,ax 
02CC    89 D6                     mov         si,dx 
02CE    89 5E FE                  mov         word ptr -0x2[bp],bx 
02D1    36 80 3E 00 00 00         cmp         byte ptr ss:_tty,0x00 
02D7    75 61                     jne         L$15 
02D9    36 3B 06 00 00            cmp         ax,word ptr ss:__RES_X 
02DE    73 5A                     jae         L$15 
02E0    36 3B 16 00 00            cmp         dx,word ptr ss:__RES_Y 
02E5    73 53                     jae         L$15 
02E7    36 A1 02 00               mov         ax,word ptr ss:_draw_window_box+0x2 
02EB    36 8B 16 00 00            mov         dx,word ptr ss:_draw_window_box 
02F0    85 C0                     test        ax,ax 
02F2    75 15                     jne         L$13 
02F4    85 D2                     test        dx,dx 
02F6    75 11                     jne         L$13 
02F8    36 A1 02 00               mov         ax,word ptr ss:_running_window+0x2 
02FC    36 8B 16 00 00            mov         dx,word ptr ss:_running_window 
0301    85 C0                     test        ax,ax 
0303    75 04                     jne         L$13 
0305    85 D2                     test        dx,dx 
0307    74 16                     je          L$14 
0309                          L$13:
0309    36 A1 00 00               mov         ax,word ptr ss:_running_window 
030D    36 8B 16 02 00            mov         dx,word ptr ss:_running_window+0x2 
0312    89 F1                     mov         cx,si 
0314    89 FB                     mov         bx,di 
0316    9A 00 00 00 00            call        windowpos_visible_ 
031B    84 C0                     test        al,al 
031D    74 1B                     je          L$15 
031F                          L$14:
031F    B9 01 00                  mov         cx,0x0001 
0322    89 F2                     mov         dx,si 
0324    89 F8                     mov         ax,di 
0326    89 CB                     mov         bx,cx 
0328    0E                        push        cs 
0329    E8 00 00                  call        hide_mouse_if_in_box_ 
032C    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
032F    16                        push        ss 
0330    07                        pop         es 
0331    89 F3                     mov         bx,si 
0333    89 F8                     mov         ax,di 
0335    26 FF 1E 00 00            call        dword ptr es:_put_pixel_screen 
033A                          L$15:
033A    C9                        leave       
033B    5F                        pop         di 
033C    5E                        pop         si 
033D    59                        pop         cx 
033E    CB                        retf        

Routine Size: 124 bytes,    Routine Base: ibmpc_TEXT + 02C3

033F                          put_pixel_shadow_:
033F    56                        push        si 
0340    57                        push        di 
0341    C8 02 00 00               enter       0x0002,0x00 
0345    89 C6                     mov         si,ax 
0347    89 D7                     mov         di,dx 
0349    89 5E FE                  mov         word ptr -0x2[bp],bx 
034C    89 CB                     mov         bx,cx 
034E    42                        inc         dx 
034F    40                        inc         ax 
0350    0E                        push        cs 
0351    E8 00 00                  call        put_pixel_ 
0354    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
0357    89 FA                     mov         dx,di 
0359    89 F0                     mov         ax,si 
035B    0E                        push        cs 
035C    E8 00 00                  call        put_pixel_ 
035F                          L$16:
035F    C9                        leave       
0360    5F                        pop         di 
0361    5E                        pop         si 
0362    CB                        retf        

Routine Size: 36 bytes,    Routine Base: ibmpc_TEXT + 033F

0363                          get_pixel_ega4_:
0363    51                        push        cx 
0364    52                        push        dx 
0365    56                        push        si 
0366    57                        push        di 
0367    36 8B 36 00 00            mov         si,word ptr ss:_VGA 
036C    89 DA                     mov         dx,bx 
036E    36 8B 3E 02 00            mov         di,word ptr ss:_VGA+0x2 
0373    C1 E2 06                  shl         dx,0x06 
0376    C1 E3 04                  shl         bx,0x04 
0379    88 C1                     mov         cl,al 
037B    01 DA                     add         dx,bx 
037D    89 C3                     mov         bx,ax 
037F    80 E1 07                  and         cl,0x07 
0382    C1 EB 03                  shr         bx,0x03 
0385    B8 80 00                  mov         ax,0x0080 
0388    01 D3                     add         bx,dx 
038A    D3 F8                     sar         ax,cl 
038C    01 DE                     add         si,bx 
038E    88 C7                     mov         bh,al 
0390    B9 04 00                  mov         cx,0x0004 
0393    30 DB                     xor         bl,bl 
0395    36 83 3E 00 00 00         cmp         word ptr ss:_ega4_lastoperation,0x0000 
039B    75 0D                     jne         L$17 
039D    BA CE 03                  mov         dx,0x03ce 
03A0    89 C8                     mov         ax,cx 
03A2    EE                        out         dx,al 
03A3    36 C7 06 00 00 01 00      mov         word ptr ss:_ega4_lastoperation,0x0001 
03AA                          L$17:
03AA    49                        dec         cx 
03AB    83 F9 FF                  cmp         cx,0xffff 
03AE    74 1A                     je          L$18 
03B0    BA CF 03                  mov         dx,0x03cf 
03B3    0F B6 C1                  movzx       ax,cl 
03B6    EE                        out         dx,al 
03B7    00 DB                     add         bl,bl 
03B9    8E DF                     mov         ds,di 
03BB    0F B6 D7                  movzx       dx,bh 
03BE    0F B6 04                  movzx       ax,byte ptr [si] 
03C1    85 D0                     test        ax,dx 
03C3    74 E5                     je          L$17 
03C5    80 CB 01                  or          bl,0x01 
03C8    EB E0                     jmp         L$17 
03CA                          L$18:
03CA    0F B6 C3                  movzx       ax,bl 
03CD    5F                        pop         di 
03CE    5E                        pop         si 
03CF    5A                        pop         dx 
03D0    59                        pop         cx 
03D1    CB                        retf        

Routine Size: 111 bytes,    Routine Base: ibmpc_TEXT + 0363

03D2                          get_pixel_cga_:
03D2    51                        push        cx 
03D3    52                        push        dx 
03D4    C8 02 00 00               enter       0x0002,0x00 
03D8    89 C1                     mov         cx,ax 
03DA    BA 80 00                  mov         dx,0x0080 
03DD    80 E1 07                  and         cl,0x07 
03E0    D3 FA                     sar         dx,cl 
03E2    88 56 FE                  mov         byte ptr -0x2[bp],dl 
03E5    89 C2                     mov         dx,ax 
03E7    89 D8                     mov         ax,bx 
03E9    D1 E8                     shr         ax,0x01 
03EB    89 C1                     mov         cx,ax 
03ED    C1 E1 04                  shl         cx,0x04 
03F0    C1 E0 06                  shl         ax,0x06 
03F3    C1 EA 03                  shr         dx,0x03 
03F6    01 C8                     add         ax,cx 
03F8    F6 C3 01                  test        bl,0x01 
03FB    74 03                     je          L$19 
03FD    80 C4 20                  add         ah,0x20 
0400                          L$19:
0400    36 8B 1E 00 00            mov         bx,word ptr ss:_VGA 
0405    01 D0                     add         ax,dx 
0407    36 8E 1E 02 00            mov         ds,word ptr ss:_VGA+0x2 
040C    01 C3                     add         bx,ax 
040E    0F B6 56 FE               movzx       dx,byte ptr -0x2[bp] 
0412    0F B6 07                  movzx       ax,byte ptr [bx] 
0415    85 D0                     test        ax,dx 
0417    0F 95 C0                  setne       al 
041A    30 E4                     xor         ah,ah 
041C    C9                        leave       
041D    5A                        pop         dx 
041E    59                        pop         cx 
041F    CB                        retf        

Routine Size: 78 bytes,    Routine Base: ibmpc_TEXT + 03D2

0420                          get_pixel_13h_:
0420    52                        push        dx 
0421    89 DA                     mov         dx,bx 
0423    C1 E2 08                  shl         dx,0x08 
0426    C1 E3 06                  shl         bx,0x06 
0429    01 DA                     add         dx,bx 
042B    36 8B 1E 00 00            mov         bx,word ptr ss:_VGA 
0430    01 D0                     add         ax,dx 
0432    36 8E 1E 02 00            mov         ds,word ptr ss:_VGA+0x2 
0437    01 C3                     add         bx,ax 
0439    0F B6 07                  movzx       ax,byte ptr [bx] 
043C    5A                        pop         dx 
043D    CB                        retf        

Routine Size: 30 bytes,    Routine Base: ibmpc_TEXT + 0420

043E                          get_pixel_ega2_:
043E    51                        push        cx 
043F    52                        push        dx 
0440    89 DA                     mov         dx,bx 
0442    C1 E2 06                  shl         dx,0x06 
0445    C1 E3 04                  shl         bx,0x04 
0448    88 C1                     mov         cl,al 
044A    01 D3                     add         bx,dx 
044C    89 C2                     mov         dx,ax 
044E    80 E1 07                  and         cl,0x07 
0451    C1 EA 03                  shr         dx,0x03 
0454    30 C0                     xor         al,al 
0456    01 DA                     add         dx,bx 
0458    36 C5 1E 00 00            lds         bx,dword ptr ss:_VGA 
045D    01 D3                     add         bx,dx 
045F    BA 80 00                  mov         dx,0x0080 
0462    0F B6 1F                  movzx       bx,byte ptr [bx] 
0465    D3 FA                     sar         dx,cl 
0467    30 F6                     xor         dh,dh 
0469    85 D3                     test        bx,dx 
046B    74 02                     je          L$20 
046D    B0 01                     mov         al,0x01 
046F                          L$20:
046F    30 E4                     xor         ah,ah 
0471    5A                        pop         dx 
0472    59                        pop         cx 
0473    CB                        retf        

Routine Size: 54 bytes,    Routine Base: ibmpc_TEXT + 043E

0474                          get_pixel_:
0474    53                        push        bx 
0475    51                        push        cx 
0476    56                        push        si 
0477    57                        push        di 
0478    89 C6                     mov         si,ax 
047A    89 D7                     mov         di,dx 
047C    B9 01 00                  mov         cx,0x0001 
047F    89 CB                     mov         bx,cx 
0481    0E                        push        cs 
0482    E8 00 00                  call        hide_mouse_if_in_box_ 
0485    16                        push        ss 
0486    07                        pop         es 
0487    89 FB                     mov         bx,di 
0489    89 F0                     mov         ax,si 
048B    26 FF 1E 00 00            call        dword ptr es:_get_pixel_screen 
0490    5F                        pop         di 
0491    5E                        pop         si 
0492    59                        pop         cx 
0493                          L$21:
0493    5B                        pop         bx 
0494    CB                        retf        

Routine Size: 33 bytes,    Routine Base: ibmpc_TEXT + 0474

0495                          draw_move_borders_:
0495    56                        push        si 
0496    57                        push        di 
0497    C8 14 00 00               enter       0x0014,0x00 
049B    89 C6                     mov         si,ax 
049D    89 56 FE                  mov         word ptr -0x2[bp],dx 
04A0    89 5E FC                  mov         word ptr -0x4[bp],bx 
04A3    89 CF                     mov         di,cx 
04A5    31 C9                     xor         cx,cx 
04A7    36 89 0E 00 00            mov         word ptr ss:_running_window,cx 
04AC    36 89 0E 02 00            mov         word ptr ss:_running_window+0x2,cx 
04B1    80 7E 0A 02               cmp         byte ptr 0xa[bp],0x02 
04B5    75 23                     jne         L$23 
04B7    36 8B 16 60 00            mov         dx,word ptr ss:L$221 
04BC    36 A1 5E 00               mov         ax,word ptr ss:L$220 
04C0    85 D2                     test        dx,dx 
04C2    75 04                     jne         L$22 
04C4    85 C0                     test        ax,ax 
04C6    74 12                     je          L$23 
04C8                          L$22:
04C8    9A 00 00 00 00            call        free_ 
04CD    36 89 0E 5E 00            mov         word ptr ss:L$220,cx 
04D2    36 89 0E 60 00            mov         word ptr ss:L$221,cx 
04D7    E9 06 01                  jmp         L$34 
04DA                          L$23:
04DA    80 7E 0A 00               cmp         byte ptr 0xa[bp],0x00 
04DE    0F 85 04 01               jne         L$35 
04E2                          L$24:
04E2    89 F8                     mov         ax,di 
04E4    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
04E7    01 F8                     add         ax,di 
04E9    01 D2                     add         dx,dx 
04EB    05 04 00                  add         ax,0x0004 
04EE    83 C2 04                  add         dx,0x0004 
04F1    01 D0                     add         ax,dx 
04F3    40                        inc         ax 
04F4    9A 00 00 00 00            call        malloc_ 
04F9    36 A3 5E 00               mov         word ptr ss:L$220,ax 
04FD    36 89 16 60 00            mov         word ptr ss:L$221,dx 
0502    85 D2                     test        dx,dx 
0504    75 06                     jne         L$25 
0506    85 C0                     test        ax,ax 
0508    0F 84 DA 00               je          L$35 
050C                          L$25:
050C    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
050F    40                        inc         ax 
0510    40                        inc         ax 
0511    89 46 FA                  mov         word ptr -0x6[bp],ax 
0514                          L$26:
0514    FF 4E FA                  dec         word ptr -0x6[bp] 
0517    83 7E FA FF               cmp         word ptr -0x6[bp],0xffff 
051B    74 1A                     je          L$27 
051D    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
0520    8D 44 FF                  lea         ax,-0x1[si] 
0523    4A                        dec         dx 
0524    03 46 FA                  add         ax,word ptr -0x6[bp] 
0527    0E                        push        cs 
0528    E8 00 00                  call        get_pixel_ 
052B    36 C5 1E 5E 00            lds         bx,dword ptr ss:L$220 
0530    01 CB                     add         bx,cx 
0532    41                        inc         cx 
0533    88 07                     mov         byte ptr [bx],al 
0535    EB DD                     jmp         L$26 
0537                          L$27:
0537    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
053A    40                        inc         ax 
053B    40                        inc         ax 
053C    89 46 EE                  mov         word ptr -0x12[bp],ax 
053F                          L$28:
053F    FF 4E EE                  dec         word ptr -0x12[bp] 
0542    83 7E EE FF               cmp         word ptr -0x12[bp],0xffff 
0546    74 1B                     je          L$29 
0548    8D 44 FF                  lea         ax,-0x1[si] 
054B    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
054E    03 46 EE                  add         ax,word ptr -0x12[bp] 
0551    01 FA                     add         dx,di 
0553    0E                        push        cs 
0554    E8 00 00                  call        get_pixel_ 
0557    36 C5 1E 5E 00            lds         bx,dword ptr ss:L$220 
055C    01 CB                     add         bx,cx 
055E    41                        inc         cx 
055F    88 07                     mov         byte ptr [bx],al 
0561    EB DC                     jmp         L$28 
0563                          L$29:
0563    8D 45 02                  lea         ax,0x2[di] 
0566    89 46 F2                  mov         word ptr -0xe[bp],ax 
0569                          L$30:
0569    FF 4E F2                  dec         word ptr -0xe[bp] 
056C    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
056F    3D FF FF                  cmp         ax,0xffff 
0572    74 19                     je          L$31 
0574    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
0577    4A                        dec         dx 
0578    01 C2                     add         dx,ax 
057A    8D 44 FF                  lea         ax,-0x1[si] 
057D    0E                        push        cs 
057E    E8 00 00                  call        get_pixel_ 
0581    36 C5 1E 5E 00            lds         bx,dword ptr ss:L$220 
0586    01 CB                     add         bx,cx 
0588    41                        inc         cx 
0589    88 07                     mov         byte ptr [bx],al 
058B    EB DC                     jmp         L$30 
058D                          L$31:
058D    8D 45 03                  lea         ax,0x3[di] 
0590    89 46 EC                  mov         word ptr -0x14[bp],ax 
0593                          L$32:
0593    FF 4E EC                  dec         word ptr -0x14[bp] 
0596    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
0599    3D FF FF                  cmp         ax,0xffff 
059C    74 1B                     je          L$33 
059E    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
05A1    4A                        dec         dx 
05A2    01 C2                     add         dx,ax 
05A4    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
05A7    01 F0                     add         ax,si 
05A9    0E                        push        cs 
05AA    E8 00 00                  call        get_pixel_ 
05AD    36 C5 1E 5E 00            lds         bx,dword ptr ss:L$220 
05B2    01 CB                     add         bx,cx 
05B4    41                        inc         cx 
05B5    88 07                     mov         byte ptr [bx],al 
05B7    EB DA                     jmp         L$32 
05B9                          L$33:
05B9    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
05BC    6A 00                     push        0x0000 
05BE    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
05C1    36 89 36 83 00            mov         word ptr ss:L$222,si 
05C6    36 A3 85 00               mov         word ptr ss:L$223,ax 
05CA    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
05CD    89 F9                     mov         cx,di 
05CF    36 A3 87 00               mov         word ptr ss:L$224,ax 
05D3    89 C3                     mov         bx,ax 
05D5    89 F0                     mov         ax,si 
05D7    36 89 3E 89 00            mov         word ptr ss:L$225,di 
05DC    0E                        push        cs 
05DD    E8 00 00                  call        draw_borders_ 
05E0                          L$34:
05E0    C9                        leave       
05E1    5F                        pop         di 
05E2    5E                        pop         si 
05E3    CA 02 00                  retf        0x0002 
05E6                          L$35:
05E6    36 A1 60 00               mov         ax,word ptr ss:L$221 
05EA    36 8B 16 5E 00            mov         dx,word ptr ss:L$220 
05EF    85 C0                     test        ax,ax 
05F1    75 04                     jne         L$36 
05F3    85 D2                     test        dx,dx 
05F5    74 E9                     je          L$34 
05F7                          L$36:
05F7    36 A1 87 00               mov         ax,word ptr ss:L$224 
05FB    40                        inc         ax 
05FC    40                        inc         ax 
05FD    89 46 F4                  mov         word ptr -0xc[bp],ax 
0600                          L$37:
0600    FF 4E F4                  dec         word ptr -0xc[bp] 
0603    83 7E F4 FF               cmp         word ptr -0xc[bp],0xffff 
0607    74 1F                     je          L$38 
0609    36 C5 1E 5E 00            lds         bx,dword ptr ss:L$220 
060E    01 CB                     add         bx,cx 
0610    36 8B 16 85 00            mov         dx,word ptr ss:L$223 
0615    36 A1 83 00               mov         ax,word ptr ss:L$222 
0619    41                        inc         cx 
061A    48                        dec         ax 
061B    0F B6 1F                  movzx       bx,byte ptr [bx] 
061E    03 46 F4                  add         ax,word ptr -0xc[bp] 
0621    4A                        dec         dx 
0622    0E                        push        cs 
0623    E8 00 00                  call        put_pixel_ 
0626    EB D8                     jmp         L$37 
0628                          L$38:
0628    36 A1 87 00               mov         ax,word ptr ss:L$224 
062C    40                        inc         ax 
062D    40                        inc         ax 
062E    89 46 F8                  mov         word ptr -0x8[bp],ax 
0631                          L$39:
0631    FF 4E F8                  dec         word ptr -0x8[bp] 
0634    83 7E F8 FF               cmp         word ptr -0x8[bp],0xffff 
0638    74 23                     je          L$40 
063A    36 C5 1E 5E 00            lds         bx,dword ptr ss:L$220 
063F    01 CB                     add         bx,cx 
0641    36 8B 16 85 00            mov         dx,word ptr ss:L$223 
0646    36 A1 83 00               mov         ax,word ptr ss:L$222 
064A    0F B6 1F                  movzx       bx,byte ptr [bx] 
064D    48                        dec         ax 
064E    36 03 16 89 00            add         dx,word ptr ss:L$225 
0653    03 46 F8                  add         ax,word ptr -0x8[bp] 
0656    41                        inc         cx 
0657    0E                        push        cs 
0658    E8 00 00                  call        put_pixel_ 
065B    EB D4                     jmp         L$39 
065D                          L$40:
065D    36 A1 89 00               mov         ax,word ptr ss:L$225 
0661    40                        inc         ax 
0662    40                        inc         ax 
0663    89 46 F6                  mov         word ptr -0xa[bp],ax 
0666                          L$41:
0666    FF 4E F6                  dec         word ptr -0xa[bp] 
0669    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
066C    3D FF FF                  cmp         ax,0xffff 
066F    74 1E                     je          L$42 
0671    36 C5 1E 5E 00            lds         bx,dword ptr ss:L$220 
0676    36 8B 16 85 00            mov         dx,word ptr ss:L$223 
067B    4A                        dec         dx 
067C    01 CB                     add         bx,cx 
067E    01 C2                     add         dx,ax 
0680    36 A1 83 00               mov         ax,word ptr ss:L$222 
0684    0F B6 1F                  movzx       bx,byte ptr [bx] 
0687    48                        dec         ax 
0688    41                        inc         cx 
0689    0E                        push        cs 
068A    E8 00 00                  call        put_pixel_ 
068D    EB D7                     jmp         L$41 
068F                          L$42:
068F    36 A1 89 00               mov         ax,word ptr ss:L$225 
0693    05 03 00                  add         ax,0x0003 
0696    89 46 F0                  mov         word ptr -0x10[bp],ax 
0699                          L$43:
0699    FF 4E F0                  dec         word ptr -0x10[bp] 
069C    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
069F    3D FF FF                  cmp         ax,0xffff 
06A2    74 22                     je          L$44 
06A4    36 C5 1E 5E 00            lds         bx,dword ptr ss:L$220 
06A9    36 8B 16 85 00            mov         dx,word ptr ss:L$223 
06AE    4A                        dec         dx 
06AF    01 CB                     add         bx,cx 
06B1    01 C2                     add         dx,ax 
06B3    36 A1 83 00               mov         ax,word ptr ss:L$222 
06B7    0F B6 1F                  movzx       bx,byte ptr [bx] 
06BA    36 03 06 87 00            add         ax,word ptr ss:L$224 
06BF    41                        inc         cx 
06C0    0E                        push        cs 
06C1    E8 00 00                  call        put_pixel_ 
06C4    EB D3                     jmp         L$43 
06C6                          L$44:
06C6    31 C9                     xor         cx,cx 
06C8    80 7E 0A 03               cmp         byte ptr 0xa[bp],0x03 
06CC    0F 85 3C FE               jne         L$25 
06D0    36 A1 5E 00               mov         ax,word ptr ss:L$220 
06D4    36 8B 16 60 00            mov         dx,word ptr ss:L$221 
06D9    C6 46 0A 00               mov         byte ptr 0xa[bp],0x00 
06DD    9A 00 00 00 00            call        free_ 
06E2    E9 FD FD                  jmp         L$24 

Routine Size: 592 bytes,    Routine Base: ibmpc_TEXT + 0495

06E5                          clear_screen_:
06E5    53                        push        bx 
06E6                          L$45:
06E6    48                        dec         ax 
06E7    3D FF FF                  cmp         ax,0xffff 
06EA    0F 84 A5 FD               je          L$21 
06EE    36 C5 1E 00 00            lds         bx,dword ptr ss:_VGA 
06F3    01 C3                     add         bx,ax 
06F5    C6 07 00                  mov         byte ptr [bx],0x00 
06F8    EB EC                     jmp         L$45 
06FA                          draw_rectangle_safetycheck_:
06FA    56                        push        si 
06FB    57                        push        di 
06FC    C8 02 00 00               enter       0x0002,0x00 
0700    89 C6                     mov         si,ax 
0702    8E DA                     mov         ds,dx 
0704    89 4E FE                  mov         word ptr -0x2[bp],cx 
0707    8B 4E 0C                  mov         cx,word ptr 0xc[bp] 
070A    8E 46 FE                  mov         es,word ptr -0x2[bp] 
070D    26 8B 07                  mov         ax,word ptr es:[bx] 
0710    85 C0                     test        ax,ax 
0712    7D 25                     jge         L$46 
0714    99                        cwd         
0715    33 C2                     xor         ax,dx 
0717    2B C2                     sub         ax,dx 
0719    8E 46 0E                  mov         es,word ptr 0xe[bp] 
071C    89 CF                     mov         di,cx 
071E    26 3B 05                  cmp         ax,word ptr es:[di] 
0721    0F 83 92 00               jae         L$51 
0725    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0728    26 8B 07                  mov         ax,word ptr es:[bx] 
072B    8E 46 0E                  mov         es,word ptr 0xe[bp] 
072E    26 01 05                  add         word ptr es:[di],ax 
0731    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0734    26 C7 07 00 00            mov         word ptr es:[bx],0x0000 
0739                          L$46:
0739    8B 04                     mov         ax,word ptr [si] 
073B    85 C0                     test        ax,ax 
073D    7D 16                     jge         L$47 
073F    99                        cwd         
0740    33 C2                     xor         ax,dx 
0742    2B C2                     sub         ax,dx 
0744    C4 7E 08                  les         di,dword ptr 0x8[bp] 
0747    26 3B 05                  cmp         ax,word ptr es:[di] 
074A    73 6B                     jae         L$51 
074C    8B 04                     mov         ax,word ptr [si] 
074E    26 01 05                  add         word ptr es:[di],ax 
0751    C7 04 00 00               mov         word ptr [si],0x0000 
0755                          L$47:
0755    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0758    26 8B 07                  mov         ax,word ptr es:[bx] 
075B    36 3B 06 00 00            cmp         ax,word ptr ss:__RES_Y 
0760    77 09                     ja          L$48 
0762    8B 04                     mov         ax,word ptr [si] 
0764    36 3B 06 00 00            cmp         ax,word ptr ss:__RES_X 
0769    76 1E                     jbe         L$49 
076B                          L$48:
076B    8E 46 FE                  mov         es,word ptr -0x2[bp] 
076E    26 C7 07 00 00            mov         word ptr es:[bx],0x0000 
0773    89 CF                     mov         di,cx 
0775    C7 04 00 00               mov         word ptr [si],0x0000 
0779    8E 46 0E                  mov         es,word ptr 0xe[bp] 
077C    26 C7 05 00 00            mov         word ptr es:[di],0x0000 
0781    C4 7E 08                  les         di,dword ptr 0x8[bp] 
0784    26 C7 05 00 00            mov         word ptr es:[di],0x0000 
0789                          L$49:
0789    8E 46 FE                  mov         es,word ptr -0x2[bp] 
078C    89 CF                     mov         di,cx 
078E    26 8B 1F                  mov         bx,word ptr es:[bx] 
0791    8E 46 0E                  mov         es,word ptr 0xe[bp] 
0794    36 A1 00 00               mov         ax,word ptr ss:__RES_Y 
0798    26 03 1D                  add         bx,word ptr es:[di] 
079B    39 C3                     cmp         bx,ax 
079D    76 05                     jbe         L$50 
079F    29 C3                     sub         bx,ax 
07A1    26 29 1D                  sub         word ptr es:[di],bx 
07A4                          L$50:
07A4    8B 1C                     mov         bx,word ptr [si] 
07A6    C5 76 08                  lds         si,dword ptr 0x8[bp] 
07A9    36 A1 00 00               mov         ax,word ptr ss:__RES_X 
07AD    03 1C                     add         bx,word ptr [si] 
07AF    39 C3                     cmp         bx,ax 
07B1    76 04                     jbe         L$51 
07B3    29 C3                     sub         bx,ax 
07B5    29 1C                     sub         word ptr [si],bx 
07B7                          L$51:
07B7    C9                        leave       
07B8    5F                        pop         di 
07B9    5E                        pop         si 
07BA    C2 08 00                  ret         0x0008 
07BD                          cgapointer_:
07BD    53                        push        bx 
07BE    51                        push        cx 
07BF    89 D3                     mov         bx,dx 
07C1    D1 FB                     sar         bx,0x01 
07C3    89 D9                     mov         cx,bx 
07C5    C1 E1 04                  shl         cx,0x04 
07C8    C1 E3 06                  shl         bx,0x06 
07CB    C1 F8 03                  sar         ax,0x03 
07CE    01 CB                     add         bx,cx 
07D0    F6 C2 01                  test        dl,0x01 
07D3    75 0E                     jne         L$52 
07D5    36 8B 0E 00 00            mov         cx,word ptr ss:_VGA 
07DA    01 CB                     add         bx,cx 
07DC    36 8B 16 02 00            mov         dx,word ptr ss:_VGA+0x2 
07E1    EB 11                     jmp         L$53 
07E3                          L$52:
07E3    36 8B 16 00 00            mov         dx,word ptr ss:_VGA 
07E8    80 C6 20                  add         dh,0x20 
07EB    36 8B 0E 02 00            mov         cx,word ptr ss:_VGA+0x2 
07F0    01 D3                     add         bx,dx 
07F2    89 CA                     mov         dx,cx 
07F4                          L$53:
07F4    01 D8                     add         ax,bx 
07F6    59                        pop         cx 
07F7    5B                        pop         bx 
07F8    C3                        ret         

Routine Size: 276 bytes,    Routine Base: ibmpc_TEXT + 06E5

07F9                          draw_rectangle_cga_:
07F9    57                        push        di 
07FA    C8 08 00 00               enter       0x0008,0x00 
07FE    50                        push        ax 
07FF    51                        push        cx 
0800    52                        push        dx 
0801    56                        push        si 
0802    01 C8                     add         ax,cx 
0804    89 D6                     mov         si,dx 
0806    89 C2                     mov         dx,ax 
0808    30 E6                     xor         dh,ah 
080A    80 E2 07                  and         dl,0x07 
080D    29 D0                     sub         ax,dx 
080F    2B 46 F6                  sub         ax,word ptr -0xa[bp] 
0812    C1 E8 03                  shr         ax,0x03 
0815    89 46 FA                  mov         word ptr -0x6[bp],ax 
0818    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
081B    89 46 F8                  mov         word ptr -0x8[bp],ax 
081E    F6 46 F6 07               test        byte ptr -0xa[bp],0x07 
0822    74 4D                     je          L$57 
0824    89 C1                     mov         cx,ax 
0826    B8 FF 00                  mov         ax,0x00ff 
0829    80 E1 07                  and         cl,0x07 
082C    D3 F8                     sar         ax,cl 
082E    89 C1                     mov         cx,ax 
0830    83 7E F0 00               cmp         word ptr -0x10[bp],0x0000 
0834    74 17                     je          L$55 
0836                          L$54:
0836    4E                        dec         si 
0837    83 FE FF                  cmp         si,0xffff 
083A    74 2C                     je          L$56 
083C    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
083F    89 DA                     mov         dx,bx 
0841    E8 00 00                  call        cgapointer_ 
0844    89 C7                     mov         di,ax 
0846    8E DA                     mov         ds,dx 
0848    43                        inc         bx 
0849    08 0D                     or          byte ptr [di],cl 
084B    EB E9                     jmp         L$54 
084D                          L$55:
084D    4E                        dec         si 
084E    83 FE FF                  cmp         si,0xffff 
0851    74 15                     je          L$56 
0853    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
0856    89 DA                     mov         dx,bx 
0858    E8 00 00                  call        cgapointer_ 
085B    89 C7                     mov         di,ax 
085D    88 C8                     mov         al,cl 
085F    8E DA                     mov         ds,dx 
0861    F6 D0                     not         al 
0863    43                        inc         bx 
0864    20 05                     and         byte ptr [di],al 
0866    EB E5                     jmp         L$55 
0868                          L$56:
0868    8B 76 F2                  mov         si,word ptr -0xe[bp] 
086B    83 46 F8 08               add         word ptr -0x8[bp],0x0008 
086F    29 F3                     sub         bx,si 
0871                          L$57:
0871    83 7E F0 00               cmp         word ptr -0x10[bp],0x0000 
0875    74 06                     je          L$58 
0877    C6 46 FC FF               mov         byte ptr -0x4[bp],0xff 
087B    EB 04                     jmp         L$59 
087D                          L$58:
087D    C6 46 FC 00               mov         byte ptr -0x4[bp],0x00 
0881                          L$59:
0881    4E                        dec         si 
0882    83 FE FF                  cmp         si,0xffff 
0885    74 19                     je          L$60 
0887    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
088A    89 DA                     mov         dx,bx 
088C    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
088F    E8 00 00                  call        cgapointer_ 
0892    89 C7                     mov         di,ax 
0894    8E C2                     mov         es,dx 
0896    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0899    43                        inc         bx 
089A    57                        push        di 
089B    F3 AA                     rep stosb   
089D    5F                        pop         di 
089E    EB E1                     jmp         L$59 
08A0                          L$60:
08A0    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
08A3    03 46 F4                  add         ax,word ptr -0xc[bp] 
08A6    A8 07                     test        al,0x07 
08A8    74 4F                     je          L$63 
08AA    89 C1                     mov         cx,ax 
08AC    BA FF 00                  mov         dx,0x00ff 
08AF    80 E1 07                  and         cl,0x07 
08B2    8B 7E F2                  mov         di,word ptr -0xe[bp] 
08B5    D3 FA                     sar         dx,cl 
08B7    4B                        dec         bx 
08B8    F7 D2                     not         dx 
08BA    89 C1                     mov         cx,ax 
08BC    88 56 FE                  mov         byte ptr -0x2[bp],dl 
08BF    83 7E F0 00               cmp         word ptr -0x10[bp],0x0000 
08C3    74 19                     je          L$62 
08C5                          L$61:
08C5    4F                        dec         di 
08C6    83 FF FF                  cmp         di,0xffff 
08C9    74 2E                     je          L$63 
08CB    89 DA                     mov         dx,bx 
08CD    89 C8                     mov         ax,cx 
08CF    E8 00 00                  call        cgapointer_ 
08D2    89 C6                     mov         si,ax 
08D4    8E DA                     mov         ds,dx 
08D6    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
08D9    4B                        dec         bx 
08DA    08 04                     or          byte ptr [si],al 
08DC    EB E7                     jmp         L$61 
08DE                          L$62:
08DE    4F                        dec         di 
08DF    83 FF FF                  cmp         di,0xffff 
08E2    74 15                     je          L$63 
08E4    89 DA                     mov         dx,bx 
08E6    89 C8                     mov         ax,cx 
08E8    E8 00 00                  call        cgapointer_ 
08EB    89 C6                     mov         si,ax 
08ED    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
08F0    8E DA                     mov         ds,dx 
08F2    F6 D0                     not         al 
08F4    4B                        dec         bx 
08F5    20 04                     and         byte ptr [si],al 
08F7    EB E5                     jmp         L$62 
08F9                          L$63:
08F9    C9                        leave       
08FA    5F                        pop         di 
08FB    CB                        retf        

Routine Size: 259 bytes,    Routine Base: ibmpc_TEXT + 07F9

08FC                          draw_rectangle_ega2_:
08FC    57                        push        di 
08FD    C8 02 00 00               enter       0x0002,0x00 
0901    50                        push        ax 
0902    53                        push        bx 
0903    51                        push        cx 
0904    52                        push        dx 
0905    56                        push        si 
0906    89 EE                     mov         si,bp 
0908    F7 DE                     neg         si 
090A    01 C8                     add         ax,cx 
090C    89 C3                     mov         bx,ax 
090E    30 E7                     xor         bh,ah 
0910    80 E3 07                  and         bl,0x07 
0913    29 D8                     sub         ax,bx 
0915    2B 46 FC                  sub         ax,word ptr -0x4[bp] 
0918    C1 E8 03                  shr         ax,0x03 
091B    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
091E    89 46 FE                  mov         word ptr -0x2[bp],ax 
0921    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
0924    C1 E3 04                  shl         bx,0x04 
0927    C1 E0 06                  shl         ax,0x06 
092A    01 D8                     add         ax,bx 
092C    8B 9A 00 00               mov         bx,word ptr _VGA[bp+si] 
0930    01 D8                     add         ax,bx 
0932    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
0935    C1 FB 03                  sar         bx,0x03 
0938    8E 9A 02 00               mov         ds,word ptr _VGA+0x2[bp+si] 
093C    01 C3                     add         bx,ax 
093E    F6 46 FC 07               test        byte ptr -0x4[bp],0x07 
0942    74 5D                     je          L$67 
0944    8B 4E FC                  mov         cx,word ptr -0x4[bp] 
0947    B8 FF 00                  mov         ax,0x00ff 
094A    80 E1 07                  and         cl,0x07 
094D    D3 F8                     sar         ax,cl 
094F    85 F6                     test        si,si 
0951    74 13                     je          L$65 
0953                          L$64:
0953    4A                        dec         dx 
0954    83 FA FF                  cmp         dx,0xffff 
0957    74 24                     je          L$66 
0959    08 07                     or          byte ptr [bx],al 
095B    8B 8A 00 00               mov         cx,word ptr __RES_X[bp+si] 
095F    C1 E9 03                  shr         cx,0x03 
0962    01 CB                     add         bx,cx 
0964    EB ED                     jmp         L$64 
0966                          L$65:
0966    4A                        dec         dx 
0967    83 FA FF                  cmp         dx,0xffff 
096A    74 11                     je          L$66 
096C    88 C4                     mov         ah,al 
096E    F6 D4                     not         ah 
0970    20 27                     and         byte ptr [bx],ah 
0972    8B 8A 00 00               mov         cx,word ptr __RES_X[bp+si] 
0976    C1 E9 03                  shr         cx,0x03 
0979    01 CB                     add         bx,cx 
097B    EB E9                     jmp         L$65 
097D                          L$66:
097D    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
0980    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
0983    C1 E0 06                  shl         ax,0x06 
0986    C1 E2 04                  shl         dx,0x04 
0989    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
098C    01 D0                     add         ax,dx 
098E    8B 92 00 00               mov         dx,word ptr _VGA[bp+si] 
0992    C1 FB 03                  sar         bx,0x03 
0995    01 C2                     add         dx,ax 
0997    8E 9A 02 00               mov         ds,word ptr _VGA+0x2[bp+si] 
099B    01 D3                     add         bx,dx 
099D    8B 56 F6                  mov         dx,word ptr -0xa[bp] 
09A0    43                        inc         bx 
09A1                          L$67:
09A1    85 F6                     test        si,si 
09A3    74 04                     je          L$68 
09A5    B4 FF                     mov         ah,0xff 
09A7    EB 02                     jmp         L$69 
09A9                          L$68:
09A9    30 E4                     xor         ah,ah 
09AB                          L$69:
09AB    88 E0                     mov         al,ah 
09AD    1E                        push        ds 
09AE    07                        pop         es 
09AF                          L$70:
09AF    4A                        dec         dx 
09B0    83 FA FF                  cmp         dx,0xffff 
09B3    74 14                     je          L$71 
09B5    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
09B8    89 DF                     mov         di,bx 
09BA    57                        push        di 
09BB    F3 AA                     rep stosb   
09BD    5F                        pop         di 
09BE    8B 8A 00 00               mov         cx,word ptr __RES_X[bp+si] 
09C2    C1 E9 03                  shr         cx,0x03 
09C5    01 CB                     add         bx,cx 
09C7    EB E6                     jmp         L$70 
09C9                          L$71:
09C9    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
09CC    03 46 F8                  add         ax,word ptr -0x8[bp] 
09CF    A8 07                     test        al,0x07 
09D1    74 5E                     je          L$74 
09D3    BA FF 00                  mov         dx,0x00ff 
09D6    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
09D9    89 C1                     mov         cx,ax 
09DB    89 C7                     mov         di,ax 
09DD    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
09E0    80 E1 07                  and         cl,0x07 
09E3    C1 EF 03                  shr         di,0x03 
09E6    C1 E3 06                  shl         bx,0x06 
09E9    C1 E0 04                  shl         ax,0x04 
09EC    D3 FA                     sar         dx,cl 
09EE    01 C3                     add         bx,ax 
09F0    36 A1 00 00               mov         ax,word ptr ss:_VGA 
09F4    F7 D2                     not         dx 
09F6    01 D8                     add         ax,bx 
09F8    8E 82 02 00               mov         es,word ptr _VGA+0x2[bp+si] 
09FC    01 C7                     add         di,ax 
09FE    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
0A01    85 F6                     test        si,si 
0A03    74 14                     je          L$73 
0A05                          L$72:
0A05    48                        dec         ax 
0A06    3D FF FF                  cmp         ax,0xffff 
0A09    74 26                     je          L$74 
0A0B    26 08 15                  or          byte ptr es:[di],dl 
0A0E    8B 9A 00 00               mov         bx,word ptr __RES_X[bp+si] 
0A12    C1 EB 03                  shr         bx,0x03 
0A15    01 DF                     add         di,bx 
0A17    EB EC                     jmp         L$72 
0A19                          L$73:
0A19    48                        dec         ax 
0A1A    3D FF FF                  cmp         ax,0xffff 
0A1D    74 12                     je          L$74 
0A1F    88 D6                     mov         dh,dl 
0A21    F6 D6                     not         dh 
0A23    26 20 35                  and         byte ptr es:[di],dh 
0A26    8B 9A 00 00               mov         bx,word ptr __RES_X[bp+si] 
0A2A    C1 EB 03                  shr         bx,0x03 
0A2D    01 DF                     add         di,bx 
0A2F    EB E8                     jmp         L$73 
0A31                          L$74:
0A31    5E                        pop         si 
0A32                          L$75:
0A32    C9                        leave       
0A33    5F                        pop         di 
0A34    CB                        retf        

Routine Size: 313 bytes,    Routine Base: ibmpc_TEXT + 08FC

0A35                          draw_rectangle_ega4_:
0A35    57                        push        di 
0A36    C8 04 00 00               enter       0x0004,0x00 
0A3A    50                        push        ax 
0A3B    53                        push        bx 
0A3C    51                        push        cx 
0A3D    52                        push        dx 
0A3E    56                        push        si 
0A3F    01 C8                     add         ax,cx 
0A41    89 C3                     mov         bx,ax 
0A43    25 07 00                  and         ax,0x0007 
0A46    29 C3                     sub         bx,ax 
0A48    89 D8                     mov         ax,bx 
0A4A    2B 46 FA                  sub         ax,word ptr -0x6[bp] 
0A4D    C1 E8 03                  shr         ax,0x03 
0A50    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
0A53    89 46 FC                  mov         word ptr -0x4[bp],ax 
0A56    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0A59    C1 E3 06                  shl         bx,0x06 
0A5C    C1 E0 04                  shl         ax,0x04 
0A5F    01 D8                     add         ax,bx 
0A61    36 8B 1E 00 00            mov         bx,word ptr ss:_VGA 
0A66    89 D6                     mov         si,dx 
0A68    01 D8                     add         ax,bx 
0A6A    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
0A6D    36 8B 0E 02 00            mov         cx,word ptr ss:_VGA+0x2 
0A72    C1 FB 03                  sar         bx,0x03 
0A75    89 4E FE                  mov         word ptr -0x2[bp],cx 
0A78    01 C3                     add         bx,ax 
0A7A    36 83 3E 00 00 00         cmp         word ptr ss:_ega4_lastoperation,0x0000 
0A80    74 1B                     je          L$76 
0A82    B8 05 00                  mov         ax,0x0005 
0A85    BA CE 03                  mov         dx,0x03ce 
0A88    EE                        out         dx,al 
0A89    B8 02 00                  mov         ax,0x0002 
0A8C    BA CF 03                  mov         dx,0x03cf 
0A8F    EE                        out         dx,al 
0A90    B8 08 00                  mov         ax,0x0008 
0A93    BA CE 03                  mov         dx,0x03ce 
0A96    EE                        out         dx,al 
0A97    31 C0                     xor         ax,ax 
0A99    36 A3 00 00               mov         word ptr ss:_ega4_lastoperation,ax 
0A9D                          L$76:
0A9D    F6 46 FA 07               test        byte ptr -0x6[bp],0x07 
0AA1    74 57                     je          L$79 
0AA3    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
0AA6    B8 FF 00                  mov         ax,0x00ff 
0AA9    80 E1 07                  and         cl,0x07 
0AAC    D3 F8                     sar         ax,cl 
0AAE    BA CF 03                  mov         dx,0x03cf 
0AB1    30 E4                     xor         ah,ah 
0AB3    EE                        out         dx,al 
0AB4                          L$77:
0AB4    4E                        dec         si 
0AB5    83 FE FF                  cmp         si,0xffff 
0AB8    74 18                     je          L$78 
0ABA    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0ABD    8A 07                     mov         al,byte ptr [bx] 
0ABF    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0AC2    8A 46 F2                  mov         al,byte ptr -0xe[bp] 
0AC5    88 07                     mov         byte ptr [bx],al 
0AC7    36 A1 00 00               mov         ax,word ptr ss:__RES_X 
0ACB    C1 E8 03                  shr         ax,0x03 
0ACE    01 C3                     add         bx,ax 
0AD0    EB E2                     jmp         L$77 
0AD2                          L$78:
0AD2    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
0AD5    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0AD8    C1 E3 06                  shl         bx,0x06 
0ADB    C1 E0 04                  shl         ax,0x04 
0ADE    36 8B 0E 00 00            mov         cx,word ptr ss:_VGA 
0AE3    01 C3                     add         bx,ax 
0AE5    01 D9                     add         cx,bx 
0AE7    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
0AEA    8B 76 F4                  mov         si,word ptr -0xc[bp] 
0AED    C1 FB 03                  sar         bx,0x03 
0AF0    36 A1 02 00               mov         ax,word ptr ss:_VGA+0x2 
0AF4    01 CB                     add         bx,cx 
0AF6    89 46 FE                  mov         word ptr -0x2[bp],ax 
0AF9    43                        inc         bx 
0AFA                          L$79:
0AFA    B8 FF 00                  mov         ax,0x00ff 
0AFD    BA CF 03                  mov         dx,0x03cf 
0B00    EE                        out         dx,al 
0B01    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0B04                          L$80:
0B04    4E                        dec         si 
0B05    83 FE FF                  cmp         si,0xffff 
0B08    74 17                     je          L$81 
0B0A    8B 4E FC                  mov         cx,word ptr -0x4[bp] 
0B0D    8A 46 F2                  mov         al,byte ptr -0xe[bp] 
0B10    89 DF                     mov         di,bx 
0B12    57                        push        di 
0B13    F3 AA                     rep stosb   
0B15    5F                        pop         di 
0B16    36 A1 00 00               mov         ax,word ptr ss:__RES_X 
0B1A    C1 E8 03                  shr         ax,0x03 
0B1D    01 C3                     add         bx,ax 
0B1F    EB E3                     jmp         L$80 
0B21                          L$81:
0B21    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
0B24    03 5E F6                  add         bx,word ptr -0xa[bp] 
0B27    F6 C3 07                  test        bl,0x07 
0B2A    0F 84 04 FF               je          L$75 
0B2E    89 D9                     mov         cx,bx 
0B30    B8 FF 00                  mov         ax,0x00ff 
0B33    80 E1 07                  and         cl,0x07 
0B36    D3 F8                     sar         ax,cl 
0B38    BA CF 03                  mov         dx,0x03cf 
0B3B    F7 D0                     not         ax 
0B3D    89 D9                     mov         cx,bx 
0B3F    30 E4                     xor         ah,ah 
0B41    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
0B44    EE                        out         dx,al 
0B45    C1 E9 03                  shr         cx,0x03 
0B48    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0B4B    C1 E3 04                  shl         bx,0x04 
0B4E    C1 E0 06                  shl         ax,0x06 
0B51    36 8B 3E 00 00            mov         di,word ptr ss:_VGA 
0B56    01 C3                     add         bx,ax 
0B58    36 A1 02 00               mov         ax,word ptr ss:_VGA+0x2 
0B5C    01 DF                     add         di,bx 
0B5E    89 C3                     mov         bx,ax 
0B60    01 CF                     add         di,cx 
0B62    8B 4E F4                  mov         cx,word ptr -0xc[bp] 
0B65                          L$82:
0B65    49                        dec         cx 
0B66    83 F9 FF                  cmp         cx,0xffff 
0B69    0F 84 C5 FE               je          L$75 
0B6D    8E DB                     mov         ds,bx 
0B6F    8A 05                     mov         al,byte ptr [di] 
0B71    8E DB                     mov         ds,bx 
0B73    8A 46 F2                  mov         al,byte ptr -0xe[bp] 
0B76    88 05                     mov         byte ptr [di],al 
0B78    36 A1 00 00               mov         ax,word ptr ss:__RES_X 
0B7C    C1 E8 03                  shr         ax,0x03 
0B7F    01 C7                     add         di,ax 
0B81    EB E2                     jmp         L$82 

Routine Size: 334 bytes,    Routine Base: ibmpc_TEXT + 0A35

0B83                          draw_rectangle_px_:
0B83    57                        push        di 
0B84    C8 08 00 00               enter       0x0008,0x00 
0B88    50                        push        ax 
0B89    56                        push        si 
0B8A    89 D6                     mov         si,dx 
0B8C    89 4E FE                  mov         word ptr -0x2[bp],cx 
0B8F    01 DE                     add         si,bx 
0B91    83 C3 FF                  add         bx,0xffff 
0B94    89 D7                     mov         di,dx 
0B96    89 5E FC                  mov         word ptr -0x4[bp],bx 
0B99                          L$83:
0B99    4E                        dec         si 
0B9A    4F                        dec         di 
0B9B    3B 76 FC                  cmp         si,word ptr -0x4[bp] 
0B9E    0F 84 90 FE               je          L$75 
0BA2    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
0BA5    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0BA8    89 76 F8                  mov         word ptr -0x8[bp],si 
0BAB    83 C3 FF                  add         bx,0xffff 
0BAE    03 4E F6                  add         cx,word ptr -0xa[bp] 
0BB1    89 5E FA                  mov         word ptr -0x6[bp],bx 
0BB4                          L$84:
0BB4    49                        dec         cx 
0BB5    3B 4E FA                  cmp         cx,word ptr -0x6[bp] 
0BB8    74 DF                     je          L$83 
0BBA    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
0BBD    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
0BC0    89 C8                     mov         ax,cx 
0BC2    0E                        push        cs 
0BC3    E8 00 00                  call        put_pixel_ 
0BC6    EB EC                     jmp         L$84 
0BC8                          draw_rectangle_draw_window_check_:
0BC8    56                        push        si 
0BC9    57                        push        di 
0BCA    C8 02 00 00               enter       0x0002,0x00 
0BCE    89 C6                     mov         si,ax 
0BD0    89 56 FE                  mov         word ptr -0x2[bp],dx 
0BD3    8E D9                     mov         ds,cx 
0BD5    8B 4E 0C                  mov         cx,word ptr 0xc[bp] 
0BD8    36 A1 02 00               mov         ax,word ptr ss:_draw_window_box+0x2 
0BDC    36 8B 3E 00 00            mov         di,word ptr ss:_draw_window_box 
0BE1    85 C0                     test        ax,ax 
0BE3    75 09                     jne         L$85 
0BE5    85 FF                     test        di,di 
0BE7    75 05                     jne         L$85 
0BE9    31 C0                     xor         ax,ax 
0BEB    E9 C9 FB                  jmp         L$51 
0BEE                          L$85:
0BEE    8E C0                     mov         es,ax 
0BF0    26 8B 45 04               mov         ax,word ptr es:0x4[di] 
0BF4    8E C2                     mov         es,dx 
0BF6    48                        dec         ax 
0BF7    26 3B 04                  cmp         ax,word ptr es:[si] 
0BFA    7E 1B                     jle         L$86 
0BFC    8B 7E 08                  mov         di,word ptr 0x8[bp] 
0BFF    26 2B 04                  sub         ax,word ptr es:[si] 
0C02    8E 46 0A                  mov         es,word ptr 0xa[bp] 
0C05    26 29 05                  sub         word ptr es:[di],ax 
0C08    36 C4 3E 00 00            les         di,dword ptr ss:_draw_window_box 
0C0D    26 8B 45 04               mov         ax,word ptr es:0x4[di] 
0C11    8E C2                     mov         es,dx 
0C13    48                        dec         ax 
0C14    26 89 04                  mov         word ptr es:[si],ax 
0C17                          L$86:
0C17    36 C4 3E 00 00            les         di,dword ptr ss:_draw_window_box 
0C1C    26 8B 45 06               mov         ax,word ptr es:0x6[di] 
0C20    48                        dec         ax 
0C21    3B 07                     cmp         ax,word ptr [bx] 
0C23    7E 16                     jle         L$87 
0C25    89 CF                     mov         di,cx 
0C27    2B 07                     sub         ax,word ptr [bx] 
0C29    8E 46 0E                  mov         es,word ptr 0xe[bp] 
0C2C    26 29 05                  sub         word ptr es:[di],ax 
0C2F    36 C4 3E 00 00            les         di,dword ptr ss:_draw_window_box 
0C34    26 8B 45 06               mov         ax,word ptr es:0x6[di] 
0C38    48                        dec         ax 
0C39    89 07                     mov         word ptr [bx],ax 
0C3B                          L$87:
0C3B    36 C4 3E 00 00            les         di,dword ptr ss:_draw_window_box 
0C40    26 8B 55 04               mov         dx,word ptr es:0x4[di] 
0C44    26 03 55 12               add         dx,word ptr es:0x12[di] 
0C48    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0C4B    8B 7E 08                  mov         di,word ptr 0x8[bp] 
0C4E    26 8B 04                  mov         ax,word ptr es:[si] 
0C51    8E 46 0A                  mov         es,word ptr 0xa[bp] 
0C54    42                        inc         dx 
0C55    26 03 05                  add         ax,word ptr es:[di] 
0C58    39 D0                     cmp         ax,dx 
0C5A    7E 10                     jle         L$88 
0C5C    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0C5F    26 8B 04                  mov         ax,word ptr es:[si] 
0C62    8E 46 0A                  mov         es,word ptr 0xa[bp] 
0C65    89 FE                     mov         si,di 
0C67    29 C2                     sub         dx,ax 
0C69    26 89 14                  mov         word ptr es:[si],dx 
0C6C                          L$88:
0C6C    C4 76 08                  les         si,dword ptr 0x8[bp] 
0C6F    26 83 3C 00               cmp         word ptr es:[si],0x0000 
0C73    7F 06                     jg          L$90 
0C75                          L$89:
0C75    B8 FF FF                  mov         ax,0xffff 
0C78    E9 3C FB                  jmp         L$51 
0C7B                          L$90:
0C7B    36 C4 36 00 00            les         si,dword ptr ss:_draw_window_box 
0C80    26 8B 44 06               mov         ax,word ptr es:0x6[si] 
0C84    26 03 44 14               add         ax,word ptr es:0x14[si] 
0C88    36 0F B6 16 00 00         movzx       dx,byte ptr ss:__FONT_HEIGHT 
0C8E    05 03 00                  add         ax,0x0003 
0C91    89 CE                     mov         si,cx 
0C93    01 C2                     add         dx,ax 
0C95    8B 07                     mov         ax,word ptr [bx] 
0C97    8E 46 0E                  mov         es,word ptr 0xe[bp] 
0C9A    26 03 04                  add         ax,word ptr es:[si] 
0C9D    39 D0                     cmp         ax,dx 
0C9F    7E 0A                     jle         L$91 
0CA1    8B 07                     mov         ax,word ptr [bx] 
0CA3    06                        push        es 
0CA4    1F                        pop         ds 
0CA5    89 CB                     mov         bx,cx 
0CA7    29 C2                     sub         dx,ax 
0CA9    89 17                     mov         word ptr [bx],dx 
0CAB                          L$91:
0CAB    8E 5E 0E                  mov         ds,word ptr 0xe[bp] 
0CAE    89 CB                     mov         bx,cx 
0CB0    83 3F 00                  cmp         word ptr [bx],0x0000 
0CB3    7E C0                     jle         L$89 
0CB5    B8 01 00                  mov         ax,0x0001 
0CB8    E9 FC FA                  jmp         L$51 
0CBB                          screen_find_visibility_block_:
0CBB    56                        push        si 
0CBC    57                        push        di 
0CBD    55                        push        bp 
0CBE    89 E5                     mov         bp,sp 
0CC0    50                        push        ax 
0CC1    52                        push        dx 
0CC2    53                        push        bx 
0CC3    51                        push        cx 
0CC4    BF 10 00                  mov         di,0x0010 
0CC7    31 F6                     xor         si,si 
0CC9                          L$92:
0CC9    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
0CCC    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
0CCF    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0CD2    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
0CD5    01 F3                     add         bx,si 
0CD7    9A 00 00 00 00            call        windowpos_visible_ 
0CDC    84 C0                     test        al,al 
0CDE    74 15                     je          L$93 
0CE0    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
0CE3    01 FE                     add         si,di 
0CE5    8B 46 08                  mov         ax,word ptr 0x8[bp] 
0CE8    01 F3                     add         bx,si 
0CEA    39 C3                     cmp         bx,ax 
0CEC    76 DB                     jbe         L$92 
0CEE    89 C6                     mov         si,ax 
0CF0    2B 76 F8                  sub         si,word ptr -0x8[bp] 
0CF3    EB 29                     jmp         L$96 
0CF5                          L$93:
0CF5    D1 EF                     shr         di,0x01 
0CF7    85 FF                     test        di,di 
0CF9    74 23                     je          L$96 
0CFB    85 F6                     test        si,si 
0CFD    74 1F                     je          L$96 
0CFF                          L$94:
0CFF    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
0D02    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
0D05    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0D08    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
0D0B    01 F3                     add         bx,si 
0D0D    9A 00 00 00 00            call        windowpos_visible_ 
0D12    84 C0                     test        al,al 
0D14    75 04                     jne         L$95 
0D16    29 FE                     sub         si,di 
0D18    EB E5                     jmp         L$94 
0D1A                          L$95:
0D1A    D1 EF                     shr         di,0x01 
0D1C    EB AB                     jmp         L$92 
0D1E                          L$96:
0D1E    89 F0                     mov         ax,si 
0D20    C9                        leave       
0D21    5F                        pop         di 
0D22    5E                        pop         si 
0D23    C2 02 00                  ret         0x0002 
0D26                          screen_find_visibility_:
0D26    56                        push        si 
0D27    57                        push        di 
0D28    55                        push        bp 
0D29    89 E5                     mov         bp,sp 
0D2B    50                        push        ax 
0D2C    52                        push        dx 
0D2D    53                        push        bx 
0D2E    51                        push        cx 
0D2F    BF 10 00                  mov         di,0x0010 
0D32    31 F6                     xor         si,si 
0D34                          L$97:
0D34    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
0D37    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
0D3A    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0D3D    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
0D40    01 F3                     add         bx,si 
0D42    9A 00 00 00 00            call        windowpos_visible_ 
0D47    84 C0                     test        al,al 
0D49    75 15                     jne         L$98 
0D4B    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
0D4E    01 FE                     add         si,di 
0D50    8B 46 08                  mov         ax,word ptr 0x8[bp] 
0D53    01 F3                     add         bx,si 
0D55    39 C3                     cmp         bx,ax 
0D57    76 DB                     jbe         L$97 
0D59    89 C6                     mov         si,ax 
0D5B    2B 76 F8                  sub         si,word ptr -0x8[bp] 
0D5E    EB BE                     jmp         L$96 
0D60                          L$98:
0D60    D1 EF                     shr         di,0x01 
0D62    85 FF                     test        di,di 
0D64    74 B8                     je          L$96 
0D66    85 F6                     test        si,si 
0D68    74 B4                     je          L$96 
0D6A                          L$99:
0D6A    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
0D6D    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
0D70    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0D73    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
0D76    01 F3                     add         bx,si 
0D78    9A 00 00 00 00            call        windowpos_visible_ 
0D7D    84 C0                     test        al,al 
0D7F    74 04                     je          L$100 
0D81    29 FE                     sub         si,di 
0D83    EB E5                     jmp         L$99 
0D85                          L$100:
0D85    D1 EF                     shr         di,0x01 
0D87    EB AB                     jmp         L$97 

Routine Size: 518 bytes,    Routine Base: ibmpc_TEXT + 0B83

0D89                          draw_rectangle_:
0D89    56                        push        si 
0D8A    57                        push        di 
0D8B    C8 06 00 00               enter       0x0006,0x00 
0D8F    50                        push        ax 
0D90    52                        push        dx 
0D91    53                        push        bx 
0D92    51                        push        cx 
0D93    36 80 3E 00 00 00         cmp         byte ptr ss:_tty,0x00 
0D99    0F 85 43 F8               jne         L$34 
0D9D    8D 56 F2                  lea         dx,-0xe[bp] 
0DA0    8D 5E F6                  lea         bx,-0xa[bp] 
0DA3    16                        push        ss 
0DA4    8D 46 F8                  lea         ax,-0x8[bp] 
0DA7    52                        push        dx 
0DA8    8D 56 F4                  lea         dx,-0xc[bp] 
0DAB    16                        push        ss 
0DAC    8C D1                     mov         cx,ss 
0DAE    52                        push        dx 
0DAF    8C D2                     mov         dx,ss 
0DB1    E8 00 00                  call        draw_rectangle_safetycheck_ 
0DB4    83 7E F4 08               cmp         word ptr -0xc[bp],0x0008 
0DB8    73 16                     jae         L$102 
0DBA                          L$101:
0DBA    8B 76 0A                  mov         si,word ptr 0xa[bp] 
0DBD    8B 56 F2                  mov         dx,word ptr -0xe[bp] 
0DC0    8B 4E F4                  mov         cx,word ptr -0xc[bp] 
0DC3    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0DC6    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0DC9    0E                        push        cs 
0DCA    E8 00 00                  call        draw_rectangle_px_ 
0DCD    E9 10 F8                  jmp         L$34 
0DD0                          L$102:
0DD0    8D 56 F2                  lea         dx,-0xe[bp] 
0DD3    8D 5E F6                  lea         bx,-0xa[bp] 
0DD6    16                        push        ss 
0DD7    8D 46 F8                  lea         ax,-0x8[bp] 
0DDA    52                        push        dx 
0DDB    8D 56 F4                  lea         dx,-0xc[bp] 
0DDE    16                        push        ss 
0DDF    8C D1                     mov         cx,ss 
0DE1    52                        push        dx 
0DE2    8C D2                     mov         dx,ss 
0DE4    E8 00 00                  call        draw_rectangle_draw_window_check_ 
0DE7    3D FF FF                  cmp         ax,0xffff 
0DEA    0F 84 F2 F7               je          L$34 
0DEE    3D 01 00                  cmp         ax,0x0001 
0DF1    75 09                     jne         L$103 
0DF3    83 7E F4 08               cmp         word ptr -0xc[bp],0x0008 
0DF7    72 C1                     jb          L$101 
0DF9    E9 01 01                  jmp         L$113 
0DFC                          L$103:
0DFC    36 80 3E 00 00 00         cmp         byte ptr ss:_screen_redraw,0x00 
0E02    0F 85 F7 00               jne         L$113 
0E06    36 A1 02 00               mov         ax,word ptr ss:_running_window+0x2 
0E0A    36 8B 1E 00 00            mov         bx,word ptr ss:_running_window 
0E0F    85 C0                     test        ax,ax 
0E11    75 06                     jne         L$104 
0E13    85 DB                     test        bx,bx 
0E15    0F 84 E4 00               je          L$113 
0E19                          L$104:
0E19    36 8B 3E 00 00            mov         di,word ptr ss:_active_window 
0E1E    36 8B 16 00 00            mov         dx,word ptr ss:_windows 
0E23    C1 E7 02                  shl         di,0x02 
0E26    36 8E 1E 02 00            mov         ds,word ptr ss:_windows+0x2 
0E2B    01 D7                     add         di,dx 
0E2D    8B 55 02                  mov         dx,word ptr 0x2[di] 
0E30    8B 0D                     mov         cx,word ptr [di] 
0E32    39 C2                     cmp         dx,ax 
0E34    75 06                     jne         L$105 
0E36    39 D9                     cmp         cx,bx 
0E38    0F 84 C1 00               je          L$113 
0E3C                          L$105:
0E3C    3D FF FF                  cmp         ax,0xffff 
0E3F    75 05                     jne         L$106 
0E41    83 FB FF                  cmp         bx,0xffff 
0E44    74 25                     je          L$107 
0E46                          L$106:
0E46    8E C0                     mov         es,ax 
0E48    26 8A 47 16               mov         al,byte ptr es:0x16[bx] 
0E4C    A8 08                     test        al,0x08 
0E4E    0F 85 8E F7               jne         L$34 
0E52    A8 20                     test        al,0x20 
0E54    0F 85 88 F7               jne         L$34 
0E58    89 CB                     mov         bx,cx 
0E5A    8E DA                     mov         ds,dx 
0E5C    8A 47 16                  mov         al,byte ptr 0x16[bx] 
0E5F    A8 40                     test        al,0x40 
0E61    0F 85 7B F7               jne         L$34 
0E65    A8 04                     test        al,0x04 
0E67    0F 85 75 F7               jne         L$34 
0E6B                          L$107:
0E6B    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0E6E    03 46 F4                  add         ax,word ptr -0xc[bp] 
0E71    89 46 FC                  mov         word ptr -0x4[bp],ax 
0E74                          L$108:
0E74    FF 4E F2                  dec         word ptr -0xe[bp] 
0E77    83 7E F2 FF               cmp         word ptr -0xe[bp],0xffff 
0E7B    0F 84 61 F7               je          L$34 
0E7F    8B 7E F8                  mov         di,word ptr -0x8[bp] 
0E82                          L$109:
0E82    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
0E85    39 C7                     cmp         di,ax 
0E87    73 6E                     jae         L$112 
0E89    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0E8C    36 8B 16 02 00            mov         dx,word ptr ss:_running_window+0x2 
0E91    50                        push        ax 
0E92    89 F9                     mov         cx,di 
0E94    36 A1 00 00               mov         ax,word ptr ss:_running_window 
0E98    E8 00 00                  call        screen_find_visibility_block_ 
0E9B    89 46 FE                  mov         word ptr -0x2[bp],ax 
0E9E    89 46 FA                  mov         word ptr -0x6[bp],ax 
0EA1    3D 08 00                  cmp         ax,0x0008 
0EA4    72 25                     jb          L$110 
0EA6    B9 01 00                  mov         cx,0x0001 
0EA9    8B 56 F6                  mov         dx,word ptr -0xa[bp] 
0EAC    89 C3                     mov         bx,ax 
0EAE    89 F8                     mov         ax,di 
0EB0    8B 76 0A                  mov         si,word ptr 0xa[bp] 
0EB3    0E                        push        cs 
0EB4    E8 00 00                  call        hide_mouse_if_in_box_ 
0EB7    BA 01 00                  mov         dx,0x0001 
0EBA    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
0EBD    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0EC0    16                        push        ss 
0EC1    07                        pop         es 
0EC2    89 F8                     mov         ax,di 
0EC4    26 FF 1E 00 00            call        dword ptr es:_draw_rectangle_screen 
0EC9    EB 11                     jmp         L$111 
0ECB                          L$110:
0ECB    8B 76 0A                  mov         si,word ptr 0xa[bp] 
0ECE    BA 01 00                  mov         dx,0x0001 
0ED1    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0ED4    89 C1                     mov         cx,ax 
0ED6    89 F8                     mov         ax,di 
0ED8    0E                        push        cs 
0ED9    E8 00 00                  call        draw_rectangle_px_ 
0EDC                          L$111:
0EDC    FF 76 FC                  push        word ptr -0x4[bp] 
0EDF    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0EE2    36 A1 00 00               mov         ax,word ptr ss:_running_window 
0EE6    03 7E FA                  add         di,word ptr -0x6[bp] 
0EE9    36 8B 16 02 00            mov         dx,word ptr ss:_running_window+0x2 
0EEE    89 F9                     mov         cx,di 
0EF0    E8 00 00                  call        screen_find_visibility_ 
0EF3    01 C7                     add         di,ax 
0EF5    EB 8B                     jmp         L$109 
0EF7                          L$112:
0EF7    FF 46 F6                  inc         word ptr -0xa[bp] 
0EFA    E9 77 FF                  jmp         L$108 
0EFD                          L$113:
0EFD    8B 4E F2                  mov         cx,word ptr -0xe[bp] 
0F00    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
0F03    8B 56 F6                  mov         dx,word ptr -0xa[bp] 
0F06    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0F09    8B 76 0A                  mov         si,word ptr 0xa[bp] 
0F0C    0E                        push        cs 
0F0D    E8 00 00                  call        hide_mouse_if_in_box_ 
0F10    8B 56 F2                  mov         dx,word ptr -0xe[bp] 
0F13    8B 4E F4                  mov         cx,word ptr -0xc[bp] 
0F16    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0F19    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0F1C    16                        push        ss 
0F1D    07                        pop         es 
0F1E    26 FF 1E 00 00            call        dword ptr es:_draw_rectangle_screen 
0F23    E9 BA F6                  jmp         L$34 

Routine Size: 413 bytes,    Routine Base: ibmpc_TEXT + 0D89

0F26                          fill_screen_ega4_:
0F26    53                        push        bx 
0F27    51                        push        cx 
0F28    52                        push        dx 
0F29    57                        push        di 
0F2A    89 C3                     mov         bx,ax 
0F2C    36 8B 0E 00 00            mov         cx,word ptr ss:__RES_X 
0F31    C1 E9 03                  shr         cx,0x03 
0F34    36 0F AF 0E 00 00         imul        cx,word ptr ss:__RES_Y 
0F3A    B8 05 00                  mov         ax,0x0005 
0F3D    BA CE 03                  mov         dx,0x03ce 
0F40    EE                        out         dx,al 
0F41    B8 02 00                  mov         ax,0x0002 
0F44    BA CF 03                  mov         dx,0x03cf 
0F47    EE                        out         dx,al 
0F48    B8 08 00                  mov         ax,0x0008 
0F4B    BA CE 03                  mov         dx,0x03ce 
0F4E    EE                        out         dx,al 
0F4F    B8 FF 00                  mov         ax,0x00ff 
0F52    BA CF 03                  mov         dx,0x03cf 
0F55    41                        inc         cx 
0F56    EE                        out         dx,al 
0F57    36 8B 3E 00 00            mov         di,word ptr ss:_VGA 
0F5C    88 D8                     mov         al,bl 
0F5E    36 8E 06 02 00            mov         es,word ptr ss:_VGA+0x2 
0F63    57                        push        di 
0F64    F3 AA                     rep stosb   
0F66    5F                        pop         di 
0F67                          L$114:
0F67    5F                        pop         di 
0F68                          L$115:
0F68    5A                        pop         dx 
0F69    59                        pop         cx 
0F6A    5B                        pop         bx 
0F6B    CB                        retf        

Routine Size: 70 bytes,    Routine Base: ibmpc_TEXT + 0F26

0F6C                          fill_screen_ega2_:
0F6C    51                        push        cx 
0F6D    57                        push        di 
0F6E    55                        push        bp 
0F6F    31 ED                     xor         bp,bp 
0F71    8B 8E 00 00               mov         cx,word ptr __RES_X[bp] 
0F75    C1 E9 03                  shr         cx,0x03 
0F78    0F AF 8E 00 00            imul        cx,word ptr __RES_Y[bp] 
0F7D    41                        inc         cx 
0F7E    85 C0                     test        ax,ax 
0F80    74 0C                     je          L$116 
0F82    B0 FF                     mov         al,0xff 
0F84    C4 BE 00 00               les         di,dword ptr _VGA[bp] 
0F88    57                        push        di 
0F89    F3 AA                     rep stosb   
0F8B    5F                        pop         di 
0F8C    EB 0E                     jmp         L$117 
0F8E                          L$116:
0F8E    8B BE 00 00               mov         di,word ptr _VGA[bp] 
0F92    30 C0                     xor         al,al 
0F94    8E 86 02 00               mov         es,word ptr _VGA+0x2[bp] 
0F98    57                        push        di 
0F99    F3 AA                     rep stosb   
0F9B    5F                        pop         di 
0F9C                          L$117:
0F9C    5D                        pop         bp 
0F9D    5F                        pop         di 
0F9E    59                        pop         cx 
0F9F    CB                        retf        

Routine Size: 52 bytes,    Routine Base: ibmpc_TEXT + 0F6C

0FA0                          fill_screen_cga_:
0FA0    51                        push        cx 
0FA1    57                        push        di 
0FA2    36 8B 0E 00 00            mov         cx,word ptr ss:__RES_X 
0FA7    C1 E9 03                  shr         cx,0x03 
0FAA    36 0F AF 0E 00 00         imul        cx,word ptr ss:__RES_Y 
0FB0    36 C4 3E 00 00            les         di,dword ptr ss:_VGA 
0FB5    57                        push        di 
0FB6    F3 AA                     rep stosb   
0FB8    5F                        pop         di 
0FB9    5F                        pop         di 
0FBA    59                        pop         cx 
0FBB    CB                        retf        

Routine Size: 28 bytes,    Routine Base: ibmpc_TEXT + 0FA0

0FBC                          fill_screen_px_:
0FBC    53                        push        bx 
0FBD    51                        push        cx 
0FBE    52                        push        dx 
0FBF    56                        push        si 
0FC0    57                        push        di 
0FC1    89 C7                     mov         di,ax 
0FC3    36 8B 0E 00 00            mov         cx,word ptr ss:__RES_Y 
0FC8                          L$118:
0FC8    49                        dec         cx 
0FC9    83 F9 FF                  cmp         cx,0xffff 
0FCC    74 17                     je          L$120 
0FCE    36 8B 36 00 00            mov         si,word ptr ss:__RES_X 
0FD3                          L$119:
0FD3    4E                        dec         si 
0FD4    83 FE FF                  cmp         si,0xffff 
0FD7    74 EF                     je          L$118 
0FD9    89 FB                     mov         bx,di 
0FDB    89 CA                     mov         dx,cx 
0FDD    89 F0                     mov         ax,si 
0FDF    0E                        push        cs 
0FE0    E8 00 00                  call        put_pixel_ 
0FE3    EB EE                     jmp         L$119 
0FE5                          L$120:
0FE5    5F                        pop         di 
0FE6    5E                        pop         si 
0FE7    E9 7E FF                  jmp         L$115 

Routine Size: 46 bytes,    Routine Base: ibmpc_TEXT + 0FBC

0FEA                          draw_line_:
0FEA    56                        push        si 
0FEB    57                        push        di 
0FEC    C8 10 00 00               enter       0x0010,0x00 
0FF0    89 C6                     mov         si,ax 
0FF2    89 D7                     mov         di,dx 
0FF4    29 C3                     sub         bx,ax 
0FF6    29 D1                     sub         cx,dx 
0FF8    89 5E FC                  mov         word ptr -0x4[bp],bx 
0FFB    89 4E FA                  mov         word ptr -0x6[bp],cx 
0FFE    31 C9                     xor         cx,cx 
1000    36 80 3E 00 00 00         cmp         byte ptr ss:_tty,0x00 
1006    0F 85 D6 F5               jne         L$34 
100A    89 D8                     mov         ax,bx 
100C    99                        cwd         
100D    33 C2                     xor         ax,dx 
100F    2B C2                     sub         ax,dx 
1011    89 46 FE                  mov         word ptr -0x2[bp],ax 
1014    89 46 F2                  mov         word ptr -0xe[bp],ax 
1017    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
101A    0F B6 5E 0A               movzx       bx,byte ptr 0xa[bp] 
101E    99                        cwd         
101F    33 C2                     xor         ax,dx 
1021    2B C2                     sub         ax,dx 
1023    89 46 F8                  mov         word ptr -0x8[bp],ax 
1026    89 46 F0                  mov         word ptr -0x10[bp],ax 
1029    89 FA                     mov         dx,di 
102B    89 F0                     mov         ax,si 
102D    0E                        push        cs 
102E    E8 00 00                  call        put_pixel_ 
1031    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
1034    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
1037    39 C3                     cmp         bx,ax 
1039    76 3B                     jbe         L$127 
103B    89 5E F4                  mov         word ptr -0xc[bp],bx 
103E                          L$121:
103E    FF 4E F4                  dec         word ptr -0xc[bp] 
1041    83 7E F4 FF               cmp         word ptr -0xc[bp],0xffff 
1045    0F 84 97 F5               je          L$34 
1049    3B 4E F2                  cmp         cx,word ptr -0xe[bp] 
104C    72 0D                     jb          L$124 
104E    83 7E FA 00               cmp         word ptr -0x6[bp],0x0000 
1052    7E 03                     jle         L$122 
1054    47                        inc         di 
1055    EB 01                     jmp         L$123 
1057                          L$122:
1057    4F                        dec         di 
1058                          L$123:
1058    2B 4E F2                  sub         cx,word ptr -0xe[bp] 
105B                          L$124:
105B    83 7E FC 00               cmp         word ptr -0x4[bp],0x0000 
105F    7E 03                     jle         L$125 
1061    46                        inc         si 
1062    EB 01                     jmp         L$126 
1064                          L$125:
1064    4E                        dec         si 
1065                          L$126:
1065    0F B6 5E 0A               movzx       bx,byte ptr 0xa[bp] 
1069    89 FA                     mov         dx,di 
106B    89 F0                     mov         ax,si 
106D    0E                        push        cs 
106E    E8 00 00                  call        put_pixel_ 
1071    03 4E F0                  add         cx,word ptr -0x10[bp] 
1074    EB C8                     jmp         L$121 
1076                          L$127:
1076    73 3B                     jae         L$134 
1078    89 46 F6                  mov         word ptr -0xa[bp],ax 
107B                          L$128:
107B    FF 4E F6                  dec         word ptr -0xa[bp] 
107E    83 7E F6 FF               cmp         word ptr -0xa[bp],0xffff 
1082    0F 84 5A F5               je          L$34 
1086    3B 4E F0                  cmp         cx,word ptr -0x10[bp] 
1089    72 0D                     jb          L$131 
108B    83 7E FC 00               cmp         word ptr -0x4[bp],0x0000 
108F    7E 03                     jle         L$129 
1091    46                        inc         si 
1092    EB 01                     jmp         L$130 
1094                          L$129:
1094    4E                        dec         si 
1095                          L$130:
1095    2B 4E F0                  sub         cx,word ptr -0x10[bp] 
1098                          L$131:
1098    83 7E FA 00               cmp         word ptr -0x6[bp],0x0000 
109C    7E 03                     jle         L$132 
109E    47                        inc         di 
109F    EB 01                     jmp         L$133 
10A1                          L$132:
10A1    4F                        dec         di 
10A2                          L$133:
10A2    0F B6 5E 0A               movzx       bx,byte ptr 0xa[bp] 
10A6    89 FA                     mov         dx,di 
10A8    89 F0                     mov         ax,si 
10AA    0E                        push        cs 
10AB    E8 00 00                  call        put_pixel_ 
10AE    03 4E F2                  add         cx,word ptr -0xe[bp] 
10B1    EB C8                     jmp         L$128 
10B3                          L$134:
10B3    89 D9                     mov         cx,bx 
10B5                          L$135:
10B5    49                        dec         cx 
10B6    83 F9 FF                  cmp         cx,0xffff 
10B9    0F 84 23 F5               je          L$34 
10BD    83 7E FC 00               cmp         word ptr -0x4[bp],0x0000 
10C1    7E 03                     jle         L$136 
10C3    46                        inc         si 
10C4    EB 01                     jmp         L$137 
10C6                          L$136:
10C6    4E                        dec         si 
10C7                          L$137:
10C7    83 7E FA 00               cmp         word ptr -0x6[bp],0x0000 
10CB    7E 03                     jle         L$138 
10CD    47                        inc         di 
10CE    EB 01                     jmp         L$139 
10D0                          L$138:
10D0    4F                        dec         di 
10D1                          L$139:
10D1    0F B6 5E 0A               movzx       bx,byte ptr 0xa[bp] 
10D5    89 FA                     mov         dx,di 
10D7    89 F0                     mov         ax,si 
10D9    0E                        push        cs 
10DA    E8 00 00                  call        put_pixel_ 
10DD    EB D6                     jmp         L$135 

Routine Size: 245 bytes,    Routine Base: ibmpc_TEXT + 0FEA

10DF                          video_mode_:
10DF    53                        push        bx 
10E0    52                        push        dx 
10E1    55                        push        bp 
10E2    31 ED                     xor         bp,bp 
10E4    88 C2                     mov         dl,al 
10E6    0F B6 C2                  movzx       ax,dl 
10E9    B4 00                     mov         ah,0x00 
10EB    CD 10                     int         0x10 
10ED    83 BE 00 00 00            cmp         word ptr _videodriver[bp],0x0000 
10F2    7C 50                     jl          L$140 
10F4    36 A1 00 00               mov         ax,word ptr ss:_put_pixel_screen 
10F8    8B 9E 02 00               mov         bx,word ptr _put_pixel_screen+0x2[bp] 
10FC    36 A3 00 00               mov         word ptr ss:_old_put_pixel,ax 
1100    89 9E 02 00               mov         word ptr _old_put_pixel+0x2[bp],bx 
1104    36 A1 00 00               mov         ax,word ptr ss:_get_pixel_screen 
1108    8B 9E 02 00               mov         bx,word ptr _get_pixel_screen+0x2[bp] 
110C    36 A3 00 00               mov         word ptr ss:_old_get_pixel,ax 
1110    89 9E 02 00               mov         word ptr _old_get_pixel+0x2[bp],bx 
1114    36 A1 00 00               mov         ax,word ptr ss:_draw_rectangle_screen 
1118    8B 9E 02 00               mov         bx,word ptr _draw_rectangle_screen+0x2[bp] 
111C    36 A3 00 00               mov         word ptr ss:_old_draw_rectangle,ax 
1120    36 A1 00 00               mov         ax,word ptr ss:_fill_screen_color 
1124    89 9E 02 00               mov         word ptr _old_draw_rectangle+0x2[bp],bx 
1128    36 A3 00 00               mov         word ptr ss:_old_fill_screen,ax 
112C    36 A1 00 00               mov         ax,word ptr ss:__RES_X 
1130    8B 9E 02 00               mov         bx,word ptr _fill_screen_color+0x2[bp] 
1134    36 A3 00 00               mov         word ptr ss:_old_xres,ax 
1138    36 A1 00 00               mov         ax,word ptr ss:__RES_Y 
113C    89 9E 02 00               mov         word ptr _old_fill_screen+0x2[bp],bx 
1140    36 A3 00 00               mov         word ptr ss:_old_yres,ax 
1144                          L$140:
1144    C7 86 00 00 80 02         mov         word ptr __RES_X[bp],0x0280 
114A    C7 86 00 00 C8 00         mov         word ptr __RES_Y[bp],0x00c8 
1150    C6 86 00 00 19            mov         byte ptr _VPUCON_LINES[bp],0x19 
1155    C7 86 02 00 00 A0         mov         word ptr _VGA+0x2[bp],0xa000 
115B    31 C0                     xor         ax,ax 
115D    88 96 00 00               mov         byte ptr __VIDEO_MODE[bp],dl 
1161    36 A3 00 00               mov         word ptr ss:_VGA,ax 
1165    80 FA 0F                  cmp         dl,0x0f 
1168    72 16                     jb          L$141 
116A    80 FA 10                  cmp         dl,0x10 
116D    0F 86 8E 00               jbe         L$144 
1171    80 FA 13                  cmp         dl,0x13 
1174    74 12                     je          L$142 
1176    80 FA 12                  cmp         dl,0x12 
1179    0F 86 8F 00               jbe         L$145 
117D    E9 97 00                  jmp         L$146 
1180                          L$141:
1180    80 FA 06                  cmp         dl,0x06 
1183    74 3C                     je          L$143 
1185    E9 8F 00                  jmp         L$146 
1188                          L$142:
1188    C7 86 00 00 40 01         mov         word ptr __RES_X[bp],0x0140 
118E    C7 86 00 00 00 00         mov         word ptr _put_pixel_screen[bp],offset put_pixel_13h_ 
1194    C7 86 02 00 00 00         mov         word ptr _put_pixel_screen+0x2[bp],seg put_pixel_13h_ 
119A    C7 86 00 00 00 00         mov         word ptr _get_pixel_screen[bp],offset get_pixel_13h_ 
11A0    C7 86 02 00 00 00         mov         word ptr _get_pixel_screen+0x2[bp],seg get_pixel_13h_ 
11A6    C7 86 00 00 00 00         mov         word ptr _draw_rectangle_screen[bp],offset draw_rectangle_px_ 
11AC    C7 86 02 00 00 00         mov         word ptr _draw_rectangle_screen+0x2[bp],seg draw_rectangle_px_ 
11B2    C7 86 00 00 00 00         mov         word ptr _fill_screen_color[bp],offset fill_screen_px_ 
11B8    C7 86 02 00 00 00         mov         word ptr _fill_screen_color+0x2[bp],seg fill_screen_px_ 
11BE    E9 B8 00                  jmp         L$148 
11C1                          L$143:
11C1    C7 86 02 00 00 B8         mov         word ptr _VGA+0x2[bp],0xb800 
11C7    C7 86 00 00 00 00         mov         word ptr _put_pixel_screen[bp],offset put_pixel_cga_ 
11CD    C7 86 02 00 00 00         mov         word ptr _put_pixel_screen+0x2[bp],seg put_pixel_cga_ 
11D3    C7 86 00 00 00 00         mov         word ptr _get_pixel_screen[bp],offset get_pixel_cga_ 
11D9    C7 86 02 00 00 00         mov         word ptr _get_pixel_screen+0x2[bp],seg get_pixel_cga_ 
11DF    C7 86 00 00 00 00         mov         word ptr _draw_rectangle_screen[bp],offset draw_rectangle_cga_ 
11E5    C7 86 02 00 00 00         mov         word ptr _draw_rectangle_screen+0x2[bp],seg draw_rectangle_cga_ 
11EB    C7 86 00 00 00 00         mov         word ptr _fill_screen_color[bp],offset fill_screen_cga_ 
11F1    C7 86 02 00 00 00         mov         word ptr _fill_screen_color+0x2[bp],seg fill_screen_cga_ 
11F7    C6 86 00 00 0F            mov         byte ptr _VPUCON_LINES[bp],0x0f 
11FC    E9 7A 00                  jmp         L$148 
11FF                          L$144:
11FF    C7 86 00 00 5E 01         mov         word ptr __RES_Y[bp],0x015e 
1205    80 FA 0F                  cmp         dl,0x0f 
1208    74 0D                     je          L$146 
120A    EB 3D                     jmp         L$147 
120C                          L$145:
120C    C7 86 00 00 E0 01         mov         word ptr __RES_Y[bp],0x01e0 
1212    80 FA 11                  cmp         dl,0x11 
1215    75 32                     jne         L$147 
1217                          L$146:
1217    C7 86 00 00 00 00         mov         word ptr _put_pixel_screen[bp],offset put_pixel_ega2_ 
121D    C7 86 02 00 00 00         mov         word ptr _put_pixel_screen+0x2[bp],seg put_pixel_ega2_ 
1223    C7 86 00 00 00 00         mov         word ptr _get_pixel_screen[bp],offset get_pixel_ega2_ 
1229    C7 86 02 00 00 00         mov         word ptr _get_pixel_screen+0x2[bp],seg get_pixel_ega2_ 
122F    C7 86 00 00 00 00         mov         word ptr _draw_rectangle_screen[bp],offset draw_rectangle_ega2_ 
1235    C7 86 02 00 00 00         mov         word ptr _draw_rectangle_screen+0x2[bp],seg draw_rectangle_ega2_ 
123B    C7 86 00 00 00 00         mov         word ptr _fill_screen_color[bp],offset fill_screen_ega2_ 
1241    C7 86 02 00 00 00         mov         word ptr _fill_screen_color+0x2[bp],seg fill_screen_ega2_ 
1247    EB 30                     jmp         L$148 
1249                          L$147:
1249    C7 86 00 00 00 00         mov         word ptr _put_pixel_screen[bp],offset put_pixel_ega4_ 
124F    C7 86 02 00 00 00         mov         word ptr _put_pixel_screen+0x2[bp],seg put_pixel_ega4_ 
1255    C7 86 00 00 00 00         mov         word ptr _get_pixel_screen[bp],offset get_pixel_ega4_ 
125B    C7 86 02 00 00 00         mov         word ptr _get_pixel_screen+0x2[bp],seg get_pixel_ega4_ 
1261    C7 86 00 00 00 00         mov         word ptr _draw_rectangle_screen[bp],offset draw_rectangle_ega4_ 
1267    C7 86 02 00 00 00         mov         word ptr _draw_rectangle_screen+0x2[bp],seg draw_rectangle_ega4_ 
126D    C7 86 00 00 00 00         mov         word ptr _fill_screen_color[bp],offset fill_screen_ega4_ 
1273    C7 86 02 00 00 00         mov         word ptr _fill_screen_color+0x2[bp],seg fill_screen_ega4_ 
1279                          L$148:
1279    5D                        pop         bp 
127A    5A                        pop         dx 
127B    5B                        pop         bx 
127C    CB                        retf        

Routine Size: 414 bytes,    Routine Base: ibmpc_TEXT + 10DF

127D                          restore_videomode_:
127D    52                        push        dx 
127E    55                        push        bp 
127F    31 ED                     xor         bp,bp 
1281    80 BE 00 00 00            cmp         byte ptr _tty[bp],0x00 
1286    74 0A                     je          L$149 
1288    B8 03 00                  mov         ax,0x0003 
128B    B4 00                     mov         ah,0x00 
128D    CD 10                     int         0x10 
128F    5D                        pop         bp 
1290    5A                        pop         dx 
1291    CB                        retf        
1292                          L$149:
1292    83 BE 00 00 00            cmp         word ptr _videodriver[bp],0x0000 
1297    0F 8C 79 00               jl          L$153 
129B    36 A1 02 00               mov         ax,word ptr ss:_driver_videomode+0x2 
129F    8B 96 00 00               mov         dx,word ptr _driver_videomode[bp] 
12A3    85 C0                     test        ax,ax 
12A5    75 04                     jne         L$150 
12A7    85 D2                     test        dx,dx 
12A9    74 06                     je          L$151 
12AB                          L$150:
12AB    FF 9E 00 00               call        dword ptr _driver_videomode[bp] 
12AF    EB 09                     jmp         L$152 
12B1                          L$151:
12B1    0F B6 86 00 00            movzx       ax,byte ptr _video[bp] 
12B6    B4 00                     mov         ah,0x00 
12B8    CD 10                     int         0x10 
12BA                          L$152:
12BA    36 A0 00 00               mov         al,byte ptr ss:_video 
12BE    36 A2 00 00               mov         byte ptr ss:__VIDEO_MODE,al 
12C2    36 A1 00 00               mov         ax,word ptr ss:_old_put_pixel 
12C6    8B 96 02 00               mov         dx,word ptr _old_put_pixel+0x2[bp] 
12CA    36 A3 00 00               mov         word ptr ss:_put_pixel_screen,ax 
12CE    89 96 02 00               mov         word ptr _put_pixel_screen+0x2[bp],dx 
12D2    36 A1 00 00               mov         ax,word ptr ss:_old_get_pixel 
12D6    8B 96 02 00               mov         dx,word ptr _old_get_pixel+0x2[bp] 
12DA    36 A3 00 00               mov         word ptr ss:_get_pixel_screen,ax 
12DE    89 96 02 00               mov         word ptr _get_pixel_screen+0x2[bp],dx 
12E2    36 A1 00 00               mov         ax,word ptr ss:_old_draw_rectangle 
12E6    8B 96 02 00               mov         dx,word ptr _old_draw_rectangle+0x2[bp] 
12EA    36 A3 00 00               mov         word ptr ss:_draw_rectangle_screen,ax 
12EE    36 A1 00 00               mov         ax,word ptr ss:_old_xres 
12F2    89 96 02 00               mov         word ptr _draw_rectangle_screen+0x2[bp],dx 
12F6    36 A3 00 00               mov         word ptr ss:__RES_X,ax 
12FA    36 A1 00 00               mov         ax,word ptr ss:_old_yres 
12FE    8B 96 02 00               mov         dx,word ptr _old_fill_screen+0x2[bp] 
1302    36 A3 00 00               mov         word ptr ss:__RES_Y,ax 
1306    36 A1 00 00               mov         ax,word ptr ss:_old_fill_screen 
130A    89 96 02 00               mov         word ptr _fill_screen_color+0x2[bp],dx 
130E    36 A3 00 00               mov         word ptr ss:_fill_screen_color,ax 
1312    EB 09                     jmp         L$154 
1314                          L$153:
1314    0F B6 86 00 00            movzx       ax,byte ptr _video[bp] 
1319    0E                        push        cs 
131A    E8 00 00                  call        video_mode_ 
131D                          L$154:
131D    C7 86 00 00 FF FF         mov         word ptr _ega4_lastoperation[bp],0xffff 
1323    5D                        pop         bp 
1324    5A                        pop         dx 
1325    CB                        retf        

Routine Size: 169 bytes,    Routine Base: ibmpc_TEXT + 127D

1326                          draw_borders_:
1326    56                        push        si 
1327    57                        push        di 
1328    C8 0C 00 00               enter       0x000c,0x00 
132C    89 C7                     mov         di,ax 
132E    89 D6                     mov         si,dx 
1330    89 4E F8                  mov         word ptr -0x8[bp],cx 
1333    8A 66 0A                  mov         ah,byte ptr 0xa[bp] 
1336    36 A0 00 00               mov         al,byte ptr ss:__BORDERCOLOR_SHADOW 
133A    88 46 FE                  mov         byte ptr -0x2[bp],al 
133D    88 46 FA                  mov         byte ptr -0x6[bp],al 
1340    88 46 FC                  mov         byte ptr -0x4[bp],al 
1343    80 FC 02                  cmp         ah,0x02 
1346    72 0C                     jb          L$155 
1348    76 2E                     jbe         L$158 
134A    80 FC 04                  cmp         ah,0x04 
134D    74 38                     je          L$159 
134F    80 FC 03                  cmp         ah,0x03 
1352    EB 40                     jmp         L$160 
1354                          L$155:
1354    80 FC 01                  cmp         ah,0x01 
1357    74 18                     je          L$157 
1359    84 E4                     test        ah,ah 
135B    75 37                     jne         L$160 
135D    36 A0 00 00               mov         al,byte ptr ss:__BORDERCOLOR_LIGHT 
1361    88 46 FA                  mov         byte ptr -0x6[bp],al 
1364    36 8A 26 00 00            mov         ah,byte ptr ss:__BORDERCOLOR_SHADOW 
1369                          L$156:
1369    88 66 FC                  mov         byte ptr -0x4[bp],ah 
136C    88 66 FE                  mov         byte ptr -0x2[bp],ah 
136F    EB 23                     jmp         L$160 
1371                          L$157:
1371    36 8A 26 00 00            mov         ah,byte ptr ss:__BORDERCOLOR_LIGHT 
1376    EB F1                     jmp         L$156 
1378                          L$158:
1378    36 A0 00 00               mov         al,byte ptr ss:__BORDERCOLOR_LIGHT 
137C    88 46 FA                  mov         byte ptr -0x6[bp],al 
137F    88 46 FC                  mov         byte ptr -0x4[bp],al 
1382    88 46 FE                  mov         byte ptr -0x2[bp],al 
1385    EB 0D                     jmp         L$160 
1387                          L$159:
1387    36 A0 00 00               mov         al,byte ptr ss:__DESKTOP_BGCOLOR 
138B    88 46 FA                  mov         byte ptr -0x6[bp],al 
138E    88 46 FC                  mov         byte ptr -0x4[bp],al 
1391    88 46 FE                  mov         byte ptr -0x2[bp],al 
1394                          L$160:
1394    30 E4                     xor         ah,ah 
1396    50                        push        ax 
1397    8D 44 FF                  lea         ax,-0x1[si] 
139A    89 46 F4                  mov         word ptr -0xc[bp],ax 
139D    8B 4E F4                  mov         cx,word ptr -0xc[bp] 
13A0    89 F8                     mov         ax,di 
13A2    4F                        dec         di 
13A3    01 D8                     add         ax,bx 
13A5    89 CA                     mov         dx,cx 
13A7    89 46 F6                  mov         word ptr -0xa[bp],ax 
13AA    89 C3                     mov         bx,ax 
13AC    89 F8                     mov         ax,di 
13AE    03 76 F8                  add         si,word ptr -0x8[bp] 
13B1    0E                        push        cs 
13B2    E8 00 00                  call        draw_line_ 
13B5    0F B6 46 FA               movzx       ax,byte ptr -0x6[bp] 
13B9    8B 56 F4                  mov         dx,word ptr -0xc[bp] 
13BC    89 F1                     mov         cx,si 
13BE    89 FB                     mov         bx,di 
13C0    50                        push        ax 
13C1    89 F8                     mov         ax,di 
13C3    0E                        push        cs 
13C4    E8 00 00                  call        draw_line_ 
13C7    0F B6 46 FC               movzx       ax,byte ptr -0x4[bp] 
13CB    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
13CE    8B 56 F4                  mov         dx,word ptr -0xc[bp] 
13D1    89 F1                     mov         cx,si 
13D3    50                        push        ax 
13D4    89 D8                     mov         ax,bx 
13D6    0E                        push        cs 
13D7    E8 00 00                  call        draw_line_ 
13DA    0F B6 46 FE               movzx       ax,byte ptr -0x2[bp] 
13DE    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
13E1    89 F1                     mov         cx,si 
13E3    89 F2                     mov         dx,si 
13E5    50                        push        ax 
13E6    89 F8                     mov         ax,di 
13E8    0E                        push        cs 
13E9    E8 00 00                  call        draw_line_ 
13EC    E9 F1 F1                  jmp         L$34 

Routine Size: 201 bytes,    Routine Base: ibmpc_TEXT + 1326

13EF                          draw_circle_:
13EF    56                        push        si 
13F0    57                        push        di 
13F1    C8 16 00 00               enter       0x0016,0x00 
13F5    C7 46 F0 00 00            mov         word ptr -0x10[bp],0x0000 
13FA    BF 03 00                  mov         di,0x0003 
13FD    C7 46 EC 00 00            mov         word ptr -0x14[bp],0x0000 
1402    89 5E F4                  mov         word ptr -0xc[bp],bx 
1405    89 DE                     mov         si,bx 
1407    89 5E EA                  mov         word ptr -0x16[bp],bx 
140A    01 DE                     add         si,bx 
140C    F7 5E EA                  neg         word ptr -0x16[bp] 
140F    29 F7                     sub         di,si 
1411    8B 76 EA                  mov         si,word ptr -0x16[bp] 
1414    89 56 FC                  mov         word ptr -0x4[bp],dx 
1417    01 C6                     add         si,ax 
1419    89 46 F2                  mov         word ptr -0xe[bp],ax 
141C    89 76 F8                  mov         word ptr -0x8[bp],si 
141F    89 DE                     mov         si,bx 
1421    89 46 EE                  mov         word ptr -0x12[bp],ax 
1424    01 C6                     add         si,ax 
1426    89 7E FE                  mov         word ptr -0x2[bp],di 
1429    89 76 FA                  mov         word ptr -0x6[bp],si 
142C    8B 76 EA                  mov         si,word ptr -0x16[bp] 
142F    89 D7                     mov         di,dx 
1431    01 D6                     add         si,dx 
1433    01 DA                     add         dx,bx 
1435    89 56 F6                  mov         word ptr -0xa[bp],dx 
1438                          L$161:
1438    8B 56 F6                  mov         dx,word ptr -0xa[bp] 
143B    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
143E    89 CB                     mov         bx,cx 
1440    0E                        push        cs 
1441    E8 00 00                  call        put_pixel_ 
1444    8B 56 F6                  mov         dx,word ptr -0xa[bp] 
1447    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
144A    89 CB                     mov         bx,cx 
144C    0E                        push        cs 
144D    E8 00 00                  call        put_pixel_ 
1450    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
1453    89 CB                     mov         bx,cx 
1455    89 F2                     mov         dx,si 
1457    0E                        push        cs 
1458    E8 00 00                  call        put_pixel_ 
145B    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
145E    89 CB                     mov         bx,cx 
1460    89 F2                     mov         dx,si 
1462    83 46 EC 04               add         word ptr -0x14[bp],0x0004 
1466    0E                        push        cs 
1467    E8 00 00                  call        put_pixel_ 
146A    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
146D    89 CB                     mov         bx,cx 
146F    89 FA                     mov         dx,di 
1471    FF 46 F0                  inc         word ptr -0x10[bp] 
1474    0E                        push        cs 
1475    E8 00 00                  call        put_pixel_ 
1478    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
147B    89 CB                     mov         bx,cx 
147D    89 FA                     mov         dx,di 
147F    FF 46 EE                  inc         word ptr -0x12[bp] 
1482    0E                        push        cs 
1483    E8 00 00                  call        put_pixel_ 
1486    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
1489    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
148C    89 CB                     mov         bx,cx 
148E    FF 4E F2                  dec         word ptr -0xe[bp] 
1491    0E                        push        cs 
1492    E8 00 00                  call        put_pixel_ 
1495    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
1498    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
149B    89 CB                     mov         bx,cx 
149D    47                        inc         di 
149E    0E                        push        cs 
149F    E8 00 00                  call        put_pixel_ 
14A2    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
14A5    FF 4E FC                  dec         word ptr -0x4[bp] 
14A8    85 C0                     test        ax,ax 
14AA    7E 1E                     jle         L$162 
14AC    FF 4E F4                  dec         word ptr -0xc[bp] 
14AF    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
14B2    2B 46 F4                  sub         ax,word ptr -0xc[bp] 
14B5    FF 46 F8                  inc         word ptr -0x8[bp] 
14B8    C1 E0 02                  shl         ax,0x02 
14BB    FF 4E FA                  dec         word ptr -0x6[bp] 
14BE    03 46 FE                  add         ax,word ptr -0x2[bp] 
14C1    FF 4E F6                  dec         word ptr -0xa[bp] 
14C4    05 0A 00                  add         ax,0x000a 
14C7    46                        inc         si 
14C8    EB 06                     jmp         L$163 
14CA                          L$162:
14CA    03 46 EC                  add         ax,word ptr -0x14[bp] 
14CD    05 06 00                  add         ax,0x0006 
14D0                          L$163:
14D0    89 46 FE                  mov         word ptr -0x2[bp],ax 
14D3    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
14D6    3B 46 F4                  cmp         ax,word ptr -0xc[bp] 
14D9    0F 86 5B FF               jbe         L$161 
14DD    E9 7F EE                  jmp         L$16 

Routine Size: 241 bytes,    Routine Base: ibmpc_TEXT + 13EF

14E0                          draw_circle_border_:
14E0    56                        push        si 
14E1    57                        push        di 
14E2    C8 18 00 00               enter       0x0018,0x00 
14E6    89 C7                     mov         di,ax 
14E8    88 C8                     mov         al,cl 
14EA    43                        inc         bx 
14EB    B9 03 00                  mov         cx,0x0003 
14EE    89 5E FE                  mov         word ptr -0x2[bp],bx 
14F1    01 DB                     add         bx,bx 
14F3    29 D9                     sub         cx,bx 
14F5    89 4E FC                  mov         word ptr -0x4[bp],cx 
14F8    36 8A 0E 00 00            mov         cl,byte ptr ss:__BORDERCOLOR_SHADOW 
14FD    31 F6                     xor         si,si 
14FF    88 CD                     mov         ch,cl 
1501    3C 02                     cmp         al,0x02 
1503    72 0A                     jb          L$164 
1505    76 1E                     jbe         L$166 
1507    3C 04                     cmp         al,0x04 
1509    74 23                     je          L$167 
150B    3C 03                     cmp         al,0x03 
150D    EB 26                     jmp         L$168 
150F                          L$164:
150F    3C 01                     cmp         al,0x01 
1511    74 0B                     je          L$165 
1513    84 C0                     test        al,al 
1515    75 1E                     jne         L$168 
1517    36 8A 0E 00 00            mov         cl,byte ptr ss:__BORDERCOLOR_LIGHT 
151C    EB 17                     jmp         L$168 
151E                          L$165:
151E    36 8A 2E 00 00            mov         ch,byte ptr ss:__BORDERCOLOR_LIGHT 
1523    EB 10                     jmp         L$168 
1525                          L$166:
1525    36 8A 0E 00 00            mov         cl,byte ptr ss:__BORDERCOLOR_LIGHT 
152A    88 CD                     mov         ch,cl 
152C    EB 07                     jmp         L$168 
152E                          L$167:
152E    36 8A 0E 00 00            mov         cl,byte ptr ss:__DESKTOP_BGCOLOR 
1533    88 CD                     mov         ch,cl 
1535                          L$168:
1535    89 F3                     mov         bx,si 
1537    F7 DB                     neg         bx 
1539    89 D8                     mov         ax,bx 
153B    01 D0                     add         ax,dx 
153D    89 46 EE                  mov         word ptr -0x12[bp],ax 
1540    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
1543    89 46 E8                  mov         word ptr -0x18[bp],ax 
1546    F7 5E E8                  neg         word ptr -0x18[bp] 
1549    8B 46 E8                  mov         ax,word ptr -0x18[bp] 
154C    01 F8                     add         ax,di 
154E    89 46 F2                  mov         word ptr -0xe[bp],ax 
1551    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
1554    01 F8                     add         ax,di 
1556    01 FB                     add         bx,di 
1558    89 46 FA                  mov         word ptr -0x6[bp],ax 
155B    89 F0                     mov         ax,si 
155D    89 5E F4                  mov         word ptr -0xc[bp],bx 
1560    01 D0                     add         ax,dx 
1562    01 F7                     add         di,si 
1564    89 46 F8                  mov         word ptr -0x8[bp],ax 
1567    8B 46 E8                  mov         ax,word ptr -0x18[bp] 
156A    89 7E EC                  mov         word ptr -0x14[bp],di 
156D    01 D0                     add         ax,dx 
156F    03 56 FE                  add         dx,word ptr -0x2[bp] 
1572    0F B6 FD                  movzx       di,ch 
1575    89 56 F6                  mov         word ptr -0xa[bp],dx 
1578    89 F2                     mov         dx,si 
157A    C1 E2 02                  shl         dx,0x02 
157D    89 46 F0                  mov         word ptr -0x10[bp],ax 
1580    89 56 EA                  mov         word ptr -0x16[bp],dx 
1583                          L$169:
1583    8B 56 F6                  mov         dx,word ptr -0xa[bp] 
1586    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
1589    89 FB                     mov         bx,di 
158B    0E                        push        cs 
158C    E8 00 00                  call        put_pixel_ 
158F    8B 56 F6                  mov         dx,word ptr -0xa[bp] 
1592    8B 46 F4                  mov         ax,word ptr -0xc[bp] 
1595    89 FB                     mov         bx,di 
1597    0E                        push        cs 
1598    E8 00 00                  call        put_pixel_ 
159B    0F B6 C1                  movzx       ax,cl 
159E    8B 56 F0                  mov         dx,word ptr -0x10[bp] 
15A1    89 46 E8                  mov         word ptr -0x18[bp],ax 
15A4    89 C3                     mov         bx,ax 
15A6    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
15A9    0E                        push        cs 
15AA    E8 00 00                  call        put_pixel_ 
15AD    8B 5E E8                  mov         bx,word ptr -0x18[bp] 
15B0    8B 56 F0                  mov         dx,word ptr -0x10[bp] 
15B3    8B 46 F4                  mov         ax,word ptr -0xc[bp] 
15B6    83 46 EA 04               add         word ptr -0x16[bp],0x0004 
15BA    0E                        push        cs 
15BB    E8 00 00                  call        put_pixel_ 
15BE    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
15C1    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
15C4    89 FB                     mov         bx,di 
15C6    46                        inc         si 
15C7    0E                        push        cs 
15C8    E8 00 00                  call        put_pixel_ 
15CB    8B 5E E8                  mov         bx,word ptr -0x18[bp] 
15CE    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
15D1    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
15D4    FF 46 EC                  inc         word ptr -0x14[bp] 
15D7    0E                        push        cs 
15D8    E8 00 00                  call        put_pixel_ 
15DB    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
15DE    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
15E1    89 FB                     mov         bx,di 
15E3    FF 4E F4                  dec         word ptr -0xc[bp] 
15E6    0E                        push        cs 
15E7    E8 00 00                  call        put_pixel_ 
15EA    8B 5E E8                  mov         bx,word ptr -0x18[bp] 
15ED    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
15F0    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
15F3    FF 46 F8                  inc         word ptr -0x8[bp] 
15F6    0E                        push        cs 
15F7    E8 00 00                  call        put_pixel_ 
15FA    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
15FD    FF 4E EE                  dec         word ptr -0x12[bp] 
1600    85 C0                     test        ax,ax 
1602    7E 1E                     jle         L$170 
1604    FF 4E FE                  dec         word ptr -0x2[bp] 
1607    89 F2                     mov         dx,si 
1609    2B 56 FE                  sub         dx,word ptr -0x2[bp] 
160C    FF 46 F2                  inc         word ptr -0xe[bp] 
160F    C1 E2 02                  shl         dx,0x02 
1612    FF 4E FA                  dec         word ptr -0x6[bp] 
1615    01 C2                     add         dx,ax 
1617    FF 46 F0                  inc         word ptr -0x10[bp] 
161A    83 C2 0A                  add         dx,0x000a 
161D    FF 4E F6                  dec         word ptr -0xa[bp] 
1620    EB 08                     jmp         L$171 
1622                          L$170:
1622    89 C2                     mov         dx,ax 
1624    03 56 EA                  add         dx,word ptr -0x16[bp] 
1627    83 C2 06                  add         dx,0x0006 
162A                          L$171:
162A    89 56 FC                  mov         word ptr -0x4[bp],dx 
162D    3B 76 FE                  cmp         si,word ptr -0x2[bp] 
1630    0F 86 4F FF               jbe         L$169 
1634    E9 28 ED                  jmp         L$16 

Routine Size: 343 bytes,    Routine Base: ibmpc_TEXT + 14E0

1637                          draw_filled_circle_:
1637    56                        push        si 
1638    57                        push        di 
1639    C8 16 00 00               enter       0x0016,0x00 
163D    51                        push        cx 
163E    C7 46 F0 00 00            mov         word ptr -0x10[bp],0x0000 
1643    BF 03 00                  mov         di,0x0003 
1646    C7 46 EC 00 00            mov         word ptr -0x14[bp],0x0000 
164B    89 5E F8                  mov         word ptr -0x8[bp],bx 
164E    89 DE                     mov         si,bx 
1650    89 5E EA                  mov         word ptr -0x16[bp],bx 
1653    89 56 FA                  mov         word ptr -0x6[bp],dx 
1656    89 46 EE                  mov         word ptr -0x12[bp],ax 
1659    89 46 F4                  mov         word ptr -0xc[bp],ax 
165C    F7 5E EA                  neg         word ptr -0x16[bp] 
165F    01 DE                     add         si,bx 
1661    8B 4E EA                  mov         cx,word ptr -0x16[bp] 
1664    29 F7                     sub         di,si 
1666    8B 76 EA                  mov         si,word ptr -0x16[bp] 
1669    89 7E FE                  mov         word ptr -0x2[bp],di 
166C    01 D1                     add         cx,dx 
166E    89 D7                     mov         di,dx 
1670    01 C6                     add         si,ax 
1672    89 4E FC                  mov         word ptr -0x4[bp],cx 
1675    89 76 F2                  mov         word ptr -0xe[bp],si 
1678    01 DA                     add         dx,bx 
167A    89 DE                     mov         si,bx 
167C    89 56 F6                  mov         word ptr -0xa[bp],dx 
167F    01 C6                     add         si,ax 
1681                          L$172:
1681    0F B6 46 E8               movzx       ax,byte ptr -0x18[bp] 
1685    8B 4E F6                  mov         cx,word ptr -0xa[bp] 
1688    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
168B    83 46 EC 04               add         word ptr -0x14[bp],0x0004 
168F    89 46 EA                  mov         word ptr -0x16[bp],ax 
1692    50                        push        ax 
1693    89 CA                     mov         dx,cx 
1695    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
1698    FF 46 F0                  inc         word ptr -0x10[bp] 
169B    0E                        push        cs 
169C    E8 00 00                  call        draw_line_ 
169F    FF 76 EA                  push        word ptr -0x16[bp] 
16A2    8B 4E FC                  mov         cx,word ptr -0x4[bp] 
16A5    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
16A8    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
16AB    89 CA                     mov         dx,cx 
16AD    FF 4E EE                  dec         word ptr -0x12[bp] 
16B0    0E                        push        cs 
16B1    E8 00 00                  call        draw_line_ 
16B4    FF 76 EA                  push        word ptr -0x16[bp] 
16B7    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
16BA    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
16BD    89 F3                     mov         bx,si 
16BF    89 CA                     mov         dx,cx 
16C1    FF 46 F4                  inc         word ptr -0xc[bp] 
16C4    0E                        push        cs 
16C5    E8 00 00                  call        draw_line_ 
16C8    FF 76 EA                  push        word ptr -0x16[bp] 
16CB    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
16CE    89 F9                     mov         cx,di 
16D0    89 F3                     mov         bx,si 
16D2    89 FA                     mov         dx,di 
16D4    FF 46 FA                  inc         word ptr -0x6[bp] 
16D7    0E                        push        cs 
16D8    E8 00 00                  call        draw_line_ 
16DB    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
16DE    4F                        dec         di 
16DF    85 C0                     test        ax,ax 
16E1    7E 1E                     jle         L$173 
16E3    FF 4E F8                  dec         word ptr -0x8[bp] 
16E6    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
16E9    2B 46 F8                  sub         ax,word ptr -0x8[bp] 
16EC    FF 46 F2                  inc         word ptr -0xe[bp] 
16EF    C1 E0 02                  shl         ax,0x02 
16F2    FF 46 FC                  inc         word ptr -0x4[bp] 
16F5    03 46 FE                  add         ax,word ptr -0x2[bp] 
16F8    FF 4E F6                  dec         word ptr -0xa[bp] 
16FB    05 0A 00                  add         ax,0x000a 
16FE    4E                        dec         si 
16FF    EB 06                     jmp         L$174 
1701                          L$173:
1701    03 46 EC                  add         ax,word ptr -0x14[bp] 
1704    05 06 00                  add         ax,0x0006 
1707                          L$174:
1707    89 46 FE                  mov         word ptr -0x2[bp],ax 
170A    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
170D    3B 46 F8                  cmp         ax,word ptr -0x8[bp] 
1710    0F 86 6D FF               jbe         L$172 
1714    E9 48 EC                  jmp         L$16 
1717                          end_kbd_int_:
1717    53                        push        bx 
1718    52                        push        dx 
1719    BA 61 00                  mov         dx,0x0061 
171C    EC                        in          al,dx 
171D    88 C3                     mov         bl,al 
171F    0C 80                     or          al,0x80 
1721    BA 61 00                  mov         dx,0x0061 
1724    30 E4                     xor         ah,ah 
1726    EE                        out         dx,al 
1727    BA 61 00                  mov         dx,0x0061 
172A    0F B6 C3                  movzx       ax,bl 
172D    EE                        out         dx,al 
172E    B8 20 00                  mov         ax,0x0020 
1731    89 C2                     mov         dx,ax 
1733    EE                        out         dx,al 
1734    5A                        pop         dx 
1735    5B                        pop         bx 
1736    C3                        ret         
1737                          keyboard_handler_:
1737    60                        pusha       
1738    1E                        push        ds 
1739    06                        push        es 
173A    0F A0                     push        fs 
173C    0F A8                     push        gs 
173E    89 E5                     mov         bp,sp 
1740    FC                        cld         
1741    BA 60 00                  mov         dx,0x0060 
1744    EC                        in          al,dx 
1745    88 C4                     mov         ah,al 
1747    BB 00 00                  mov         bx,DGROUP:CONST 
174A    88 C2                     mov         dl,al 
174C    8E DB                     mov         ds,bx 
174E    80 E2 7F                  and         dl,0x7f 
1751    F6 06 01 00 02            test        byte ptr _keyboard_status+0x1,0x02 
1756    0F 85 E7 00               jne         L$194 
175A    A8 80                     test        al,0x80 
175C    74 31                     je          L$179 
175E    3C E0                     cmp         al,0xe0 
1760    75 07                     jne         L$175 
1762    80 0E 01 00 02            or          byte ptr _keyboard_status+0x1,0x02 
1767    EB 2C                     jmp         L$180 
1769                          L$175:
1769    80 FA 38                  cmp         dl,0x38 
176C    74 0C                     je          L$176 
176E    80 FA 2A                  cmp         dl,0x2a 
1771    74 15                     je          L$178 
1773    80 FA 1D                  cmp         dl,0x1d 
1776    74 09                     je          L$177 
1778    EB 1B                     jmp         L$180 
177A                          L$176:
177A    80 26 00 00 FE            and         byte ptr _keyboard_status,0xfe 
177F    EB 14                     jmp         L$180 
1781                          L$177:
1781    80 26 00 00 FB            and         byte ptr _keyboard_status,0xfb 
1786    EB 0D                     jmp         L$180 
1788                          L$178:
1788    80 26 00 00 FD            and         byte ptr _keyboard_status,0xfd 
178D    EB 06                     jmp         L$180 
178F                          L$179:
178F    3C E1                     cmp         al,0xe1 
1791    0F 84 54 E9               je          L$4 
1795                          L$180:
1795    BA 00 00                  mov         dx,DGROUP:CONST 
1798    8E DA                     mov         ds,dx 
179A    F6 06 00 00 04            test        byte ptr _keyboard_status,0x04 
179F    74 0F                     je          L$181 
17A1    3C 3B                     cmp         al,0x3b 
17A3    72 0B                     jb          L$181 
17A5    3C 45                     cmp         al,0x45 
17A7    73 07                     jae         L$181 
17A9    2C 3B                     sub         al,0x3b 
17AB    A2 00 00                  mov         byte ptr _new_tty,al 
17AE    EB 61                     jmp         L$189 
17B0                          L$181:
17B0    3C 1F                     cmp         al,0x1f 
17B2    72 11                     jb          L$182 
17B4    76 61                     jbe         L$190 
17B6    3C 38                     cmp         al,0x38 
17B8    74 16                     je          L$183 
17BA    3C 2E                     cmp         al,0x2e 
17BC    74 39                     je          L$186 
17BE    3C 2A                     cmp         al,0x2a 
17C0    74 28                     je          L$185 
17C2    E9 AF 00                  jmp         L$197 
17C5                          L$182:
17C5    3C 1D                     cmp         al,0x1d 
17C7    74 14                     je          L$184 
17C9    3C 10                     cmp         al,0x10 
17CB    74 5F                     je          L$192 
17CD    E9 A4 00                  jmp         L$197 
17D0                          L$183:
17D0    B8 00 00                  mov         ax,DGROUP:CONST 
17D3    8E D8                     mov         ds,ax 
17D5    80 0E 00 00 01            or          byte ptr _keyboard_status,0x01 
17DA    E9 97 00                  jmp         L$197 
17DD                          L$184:
17DD    B8 00 00                  mov         ax,DGROUP:CONST 
17E0    8E D8                     mov         ds,ax 
17E2    80 0E 00 00 04            or          byte ptr _keyboard_status,0x04 
17E7    E9 8A 00                  jmp         L$197 
17EA                          L$185:
17EA    B8 00 00                  mov         ax,DGROUP:CONST 
17ED    8E D8                     mov         ds,ax 
17EF    80 0E 00 00 02            or          byte ptr _keyboard_status,0x02 
17F4    E9 7D 00                  jmp         L$197 
17F7                          L$186:
17F7    B8 00 00                  mov         ax,DGROUP:CONST 
17FA    8E D8                     mov         ds,ax 
17FC    A0 00 00                  mov         al,byte ptr _keyboard_status 
17FF    A8 04                     test        al,0x04 
1801    75 06                     jne         L$187 
1803    A8 08                     test        al,0x08 
1805    0F 84 6B 00               je          L$197 
1809                          L$187:
1809    B8 03 00                  mov         ax,0x0003 
180C                          L$188:
180C    9A 00 00 00 00            call        ungetch_ 
1811                          L$189:
1811    E8 00 00                  call        end_kbd_int_ 
1814    E9 D2 E8                  jmp         L$4 
1817                          L$190:
1817    B8 00 00                  mov         ax,DGROUP:CONST 
181A    8E D8                     mov         ds,ax 
181C    A0 00 00                  mov         al,byte ptr _keyboard_status 
181F    A8 04                     test        al,0x04 
1821    75 04                     jne         L$191 
1823    A8 08                     test        al,0x08 
1825    74 05                     je          L$192 
1827                          L$191:
1827    B8 13 00                  mov         ax,0x0013 
182A    EB E0                     jmp         L$188 
182C                          L$192:
182C    B8 00 00                  mov         ax,DGROUP:CONST 
182F    8E D8                     mov         ds,ax 
1831    A0 00 00                  mov         al,byte ptr _keyboard_status 
1834    A8 04                     test        al,0x04 
1836    75 04                     jne         L$193 
1838    A8 08                     test        al,0x08 
183A    74 38                     je          L$197 
183C                          L$193:
183C    B8 11 00                  mov         ax,0x0011 
183F    EB CB                     jmp         L$188 
1841                          L$194:
1841    80 26 01 00 FD            and         byte ptr _keyboard_status+0x1,0xfd 
1846    A8 80                     test        al,0x80 
1848    74 0C                     je          L$195 
184A    80 FA 1D                  cmp         dl,0x1d 
184D    75 25                     jne         L$197 
184F    80 26 00 00 F7            and         byte ptr _keyboard_status,0xf7 
1854    EB 1E                     jmp         L$197 
1856                          L$195:
1856    3C 53                     cmp         al,0x53 
1858    74 0F                     je          L$196 
185A    3C 46                     cmp         al,0x46 
185C    74 AB                     je          L$187 
185E    3C 1D                     cmp         al,0x1d 
1860    75 12                     jne         L$197 
1862    80 0E 00 00 08            or          byte ptr _keyboard_status,0x08 
1867    EB 0B                     jmp         L$197 
1869                          L$196:
1869    A0 00 00                  mov         al,byte ptr _keyboard_status 
186C    A8 04                     test        al,0x04 
186E    74 04                     je          L$197 
1870    A8 01                     test        al,0x01 
1872    75 9D                     jne         L$189 
1874                          L$197:
1874    B8 00 00                  mov         ax,DGROUP:CONST 
1877    8E D8                     mov         ds,ax 
1879    A1 00 00                  mov         ax,word ptr _old_kbd_handler 
187C    8B 16 02 00               mov         dx,word ptr _old_kbd_handler+0x2 
1880    9A 00 00 00 00            call        _chain_intr_ 
1885    E9 61 E8                  jmp         L$4 

Routine Size: 593 bytes,    Routine Base: ibmpc_TEXT + 1637

1888                          set_keyboard_handler_:
1888    53                        push        bx 
1889    51                        push        cx 
188A    52                        push        dx 
188B    57                        push        di 
188C    B8 09 00                  mov         ax,0x0009 
188F    BB 00 00                  mov         bx,offset keyboard_handler_ 
1892    B9 00 00                  mov         cx,seg keyboard_handler_ 
1895    BF 00 00                  mov         di,offset _keyboard_status 
1898    9A 00 00 00 00            call        _dos_getvect_ 
189D    36 A3 00 00               mov         word ptr ss:_old_kbd_handler,ax 
18A1    B8 09 00                  mov         ax,0x0009 
18A4    36 89 16 02 00            mov         word ptr ss:_old_kbd_handler+0x2,dx 
18A9    9A 00 00 00 00            call        _dos_setvect_ 
18AE    B9 02 00                  mov         cx,0x0002 
18B1    16                        push        ss 
18B2    07                        pop         es 
18B3    30 C0                     xor         al,al 
18B5    57                        push        di 
18B6    F3 AA                     rep stosb   
18B8    5F                        pop         di 
18B9    E9 AB F6                  jmp         L$114 

Routine Size: 52 bytes,    Routine Base: ibmpc_TEXT + 1888

18BC                          reset_keyboard_handler_:
18BC    53                        push        bx 
18BD    51                        push        cx 
18BE    B8 09 00                  mov         ax,0x0009 
18C1    36 8B 1E 00 00            mov         bx,word ptr ss:_old_kbd_handler 
18C6    36 8B 0E 02 00            mov         cx,word ptr ss:_old_kbd_handler+0x2 
18CB    E9 41 E7                  jmp         L$1 

Routine Size: 18 bytes,    Routine Base: ibmpc_TEXT + 18BC

No disassembly errors

Segment: CONST WORD USE16 0000010D bytes
0000                          L$198:
0000    72 65 61 64 69 6E 67 00                         reading.
0008                          L$199:
0008    77 72 69 74 69 6E 67 00                         writing.
0010                          L$200:
0010    44 4F 53 20 61 72 65 61 00                      DOS area.
0019                          L$201:
0019    46 41 54 00                                     FAT.
001D                          L$202:
001D    72 6F 6F 74 00                                  root.
0022                          L$203:
0022    66 69 6C 65 00                                  file.
0027                          L$204:
0027    57 72 69 74 65 20 70 72 6F 74 65 63 74 69 6F 6E Write protection
0037    00                                              .
0038                          L$205:
0038    55 6E 6B 6E 6F 77 6E 20 64 72 69 76 65 00       Unknown drive.
0046                          L$206:
0046    44 72 69 76 65 20 6E 6F 74 20 72 65 61 64 79 00 Drive not ready.
0056                          L$207:
0056    49 6E 76 61 6C 69 64 20 63 6F 6D 6D 61 6E 64 00 Invalid command.
0066                          L$208:
0066    44 61 74 61 00                                  Data.
006B                          L$209:
006B    49 6E 63 6F 72 72 65 63 74 20 6C 65 6E 67 74 68 Incorrect length
007B    20 6F 66 20 72 65 71 75 65 73 74 00              of request.
0087                          L$210:
0087    53 65 65 6B 00                                  Seek.
008C                          L$211:
008C    49 6E 76 61 6C 69 64 20 66 6F 72 6D 61 74 00    Invalid format.
009B                          L$212:
009B    53 65 63 74 6F 72 20 6E 6F 74 20 66 6F 75 6E 64 Sector not found
00AB    00                                              .
00AC                          L$213:
00AC    4F 75 74 20 6F 66 20 70 61 70 65 72 00          Out of paper.
00B9                          L$214:
00B9    57 72 69 74 65 00                               Write.
00BF                          L$215:
00BF    52 65 61 64 00                                  Read.
00C4                          L$216:
00C4    47 65 6E 65 72 61 6C 00                         General.
00CC                          L$217:
00CC    49 6E 61 70 70 72 6F 70 72 69 61 74 65 20 64 69 Inappropriate di
00DC    73 6B 20 63 68 61 6E 67 65 00                   sk change.
00E6                          L$218:
00E6    25 73 20 25 73 20 25 73 20 25 73 2E 00          %s %s %s %s..
00F3                          L$219:
00F3    25 73 20 25 73 20 25 73 20 25 73 20 61 74 20 64 %s %s %s %s at d
0103    65 76 69 63 65 20 25 75 2E 00                   evice %u..

Segment: CONST2 WORD USE16 00000000 bytes

Segment: _DATA WORD USE16 00000066 bytes
0000                          _error1:
0000    65 72 72 6F 72 20 77 68 69 6C 65 00             error while.
000C                          _error2:
000C    00 00 00 00                                     DD	DGROUP:L$198
0010    08 00 00 00                                     DD	DGROUP:L$199
0014                          _error3:
0014    10 00 00 00                                     DD	DGROUP:L$200
0018    19 00 00 00                                     DD	DGROUP:L$201
001C    1D 00 00 00                                     DD	DGROUP:L$202
0020    22 00 00 00                                     DD	DGROUP:L$203
0024                          _dierror:
0024    27 00 00 00                                     DD	DGROUP:L$204
0028    38 00 00 00                                     DD	DGROUP:L$205
002C    46 00 00 00                                     DD	DGROUP:L$206
0030    56 00 00 00                                     DD	DGROUP:L$207
0034    66 00 00 00                                     DD	DGROUP:L$208
0038    6B 00 00 00                                     DD	DGROUP:L$209
003C    87 00 00 00                                     DD	DGROUP:L$210
0040    8C 00 00 00                                     DD	DGROUP:L$211
0044    9B 00 00 00                                     DD	DGROUP:L$212
0048    AC 00 00 00                                     DD	DGROUP:L$213
004C    B9 00 00 00                                     DD	DGROUP:L$214
0050    BF 00 00 00                                     DD	DGROUP:L$215
0054    C4 00 00 00                                     DD	DGROUP:L$216
0058    CC 00 00 00                                     DD	DGROUP:L$217
005C                          _ega4_lastoperation:
005C    FF FF                                           ..
005E                          L$220:
005E    00 00                                           ..
0060                          L$221:
0060    00 00                                           ..
0062                          _driver_videomode:
0062    00 00 00 00                                     ....

Segment: _BSS WORD USE16 0000008B bytes
0000                          _old_kbd_handler:
0004                          _get_pixel_screen:
0008                          _put_pixel_screen:
000C                          _fill_screen_color:
0010                          _draw_rectangle_screen:
0014                          _video_memcpy:
0018                          _errormsg:
007C                          _prev_int_24:
0080                          _keyboard_status:
0082                          __VIDEO_MODE:
0083                          L$222:
0085                          L$223:
0087                          L$224:
0089                          L$225:

BSS Size: 139 bytes

