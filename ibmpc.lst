Module: D:\LEETSRC\483\ibmpc.c
GROUP: 'DGROUP' CONST,CONST2,_DATA,_BSS

Segment: ibmpc_TEXT BYTE USE16 00001988 bytes
0000                          reset_int24_:
0000    53                        push        bx 
0001    51                        push        cx 
0002    B8 24 00                  mov         ax,0x0024 
0005    36 8B 1E 00 00            mov         bx,word ptr ss:_prev_int_24 
000A    36 8B 0E 02 00            mov         cx,word ptr ss:_prev_int_24+0x2 
000F                          L$1:
000F    9A 00 00 00 00            call        _dos_setvect_ 
0014    59                        pop         cx 
0015    5B                        pop         bx 
0016    CB                        retf        
0017                          int24handler_:
0017    50                        push        ax 
0018    51                        push        cx 
0019    52                        push        dx 
001A    53                        push        bx 
001B    54                        push        sp 
001C    55                        push        bp 
001D    56                        push        si 
001E    57                        push        di 
001F    1E                        push        ds 
0020    06                        push        es 
0021    50                        push        ax 
0022    50                        push        ax 
0023    89 E5                     mov         bp,sp 
0025    83 EC 06                  sub         sp,0x0006 
0028    FC                        cld         
0029    88 86 FE FF               mov         byte ptr -0x2[bp],al 
002D    88 A6 FC FF               mov         byte ptr -0x4[bp],ah 
0031    89 BE FA FF               mov         word ptr -0x6[bp],di 
0035    B1 08                     mov         cl,0x08 
0037    D3 66 FA                  shl         word ptr -0x6[bp],cl 
003A    D3 6E FA                  shr         word ptr -0x6[bp],cl 
003D    F6 46 FC 80               test        byte ptr -0x4[bp],0x80 
0041    74 57                     je          L$2 
0043    8A 5E FC                  mov         bl,byte ptr -0x4[bp] 
0046    30 FF                     xor         bh,bh 
0048    D1 FB                     sar         bx,0x01 
004A    83 E3 03                  and         bx,0x0003 
004D    B8 00 00                  mov         ax,DGROUP:CONST 
0050    D1 E3                     shl         bx,0x01 
0052    8E D8                     mov         ds,ax 
0054    D1 E3                     shl         bx,0x01 
0056    FF B7 02 00               push        word ptr _error3+0x2[bx] 
005A    FF B7 00 00               push        word ptr _error3[bx] 
005E    8A 5E FC                  mov         bl,byte ptr -0x4[bp] 
0061    80 E3 01                  and         bl,0x01 
0064    30 FF                     xor         bh,bh 
0066    D1 E3                     shl         bx,0x01 
0068    D1 E3                     shl         bx,0x01 
006A    FF B7 02 00               push        word ptr _error2+0x2[bx] 
006E    FF B7 00 00               push        word ptr _error2[bx] 
0072    50                        push        ax 
0073    BB 00 00                  mov         bx,offset _error1 
0076    53                        push        bx 
0077    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
007A    D1 E3                     shl         bx,0x01 
007C    D1 E3                     shl         bx,0x01 
007E    FF B7 02 00               push        word ptr _dierror+0x2[bx] 
0082    FF B7 00 00               push        word ptr _dierror[bx] 
0086    50                        push        ax 
0087    BB E6 00                  mov         bx,offset DGROUP:L$246 
008A    53                        push        bx 
008B    50                        push        ax 
008C    BB 00 00                  mov         bx,offset _errormsg 
008F    53                        push        bx 
0090    9A 00 00 00 00            call        sprintf_ 
0095    83 C4 18                  add         sp,0x0018 
0098    EB 5B                     jmp         L$3 
009A                          L$2:
009A    8A 5E FE                  mov         bl,byte ptr -0x2[bp] 
009D    30 FF                     xor         bh,bh 
009F    53                        push        bx 
00A0    8A 5E FC                  mov         bl,byte ptr -0x4[bp] 
00A3    D1 FB                     sar         bx,0x01 
00A5    30 FF                     xor         bh,bh 
00A7    80 E3 03                  and         bl,0x03 
00AA    B8 00 00                  mov         ax,DGROUP:CONST 
00AD    D1 E3                     shl         bx,0x01 
00AF    8E D8                     mov         ds,ax 
00B1    D1 E3                     shl         bx,0x01 
00B3    FF B7 02 00               push        word ptr _error3+0x2[bx] 
00B7    FF B7 00 00               push        word ptr _error3[bx] 
00BB    8A 5E FC                  mov         bl,byte ptr -0x4[bp] 
00BE    80 E3 01                  and         bl,0x01 
00C1    30 FF                     xor         bh,bh 
00C3    D1 E3                     shl         bx,0x01 
00C5    D1 E3                     shl         bx,0x01 
00C7    FF B7 02 00               push        word ptr _error2+0x2[bx] 
00CB    FF B7 00 00               push        word ptr _error2[bx] 
00CF    50                        push        ax 
00D0    BB 00 00                  mov         bx,offset _error1 
00D3    53                        push        bx 
00D4    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
00D7    D1 E3                     shl         bx,0x01 
00D9    D1 E3                     shl         bx,0x01 
00DB    FF B7 02 00               push        word ptr _dierror+0x2[bx] 
00DF    FF B7 00 00               push        word ptr _dierror[bx] 
00E3    50                        push        ax 
00E4    BB F3 00                  mov         bx,offset DGROUP:L$247 
00E7    53                        push        bx 
00E8    50                        push        ax 
00E9    BB 00 00                  mov         bx,offset _errormsg 
00EC    53                        push        bx 
00ED    9A 00 00 00 00            call        sprintf_ 
00F2    83 C4 1A                  add         sp,0x001a 
00F5                          L$3:
00F5    B8 00 00                  mov         ax,offset _errormsg 
00F8    BA 00 00                  mov         dx,seg _errormsg 
00FB    9A 00 00 00 00            call        log_error_ 
0100    9A 00 00 00 00            call        show_error_console_ 
0105    C6 46 16 03               mov         byte ptr 0x16[bp],0x03 
0109    89 EC                     mov         sp,bp 
010B                          L$4:
010B    58                        pop         ax 
010C    58                        pop         ax 
010D    07                        pop         es 
010E    1F                        pop         ds 
010F    5F                        pop         di 
0110    5E                        pop         si 
0111    5D                        pop         bp 
0112    5B                        pop         bx 
0113    5B                        pop         bx 
0114    5A                        pop         dx 
0115    59                        pop         cx 
0116    58                        pop         ax 
0117    CF                        iret        

Routine Size: 280 bytes,    Routine Base: ibmpc_TEXT + 0000

0118                          set_int24_:
0118    53                        push        bx 
0119    51                        push        cx 
011A    52                        push        dx 
011B    B8 24 00                  mov         ax,0x0024 
011E    BB 00 00                  mov         bx,offset int24handler_ 
0121    B9 00 00                  mov         cx,seg int24handler_ 
0124    9A 00 00 00 00            call        _dos_getvect_ 
0129    36 A3 00 00               mov         word ptr ss:_prev_int_24,ax 
012D    B8 24 00                  mov         ax,0x0024 
0130    36 89 16 02 00            mov         word ptr ss:_prev_int_24+0x2,dx 
0135    9A 00 00 00 00            call        _dos_setvect_ 
013A    E9 B7 0E                  jmp         L$132 

Routine Size: 37 bytes,    Routine Base: ibmpc_TEXT + 0118

013D                          hide_mouse_if_in_box_:
013D    56                        push        si 
013E    57                        push        di 
013F    89 DE                     mov         si,bx 
0141    89 CF                     mov         di,cx 
0143    36 8B 0E 02 00            mov         cx,word ptr ss:_mouse+0x2 
0148    36 8B 1E 00 00            mov         bx,word ptr ss:_mouse 
014D    85 C9                     test        cx,cx 
014F    75 04                     jne         L$5 
0151    85 DB                     test        bx,bx 
0153    74 2D                     je          L$6 
0155                          L$5:
0155    8E D9                     mov         ds,cx 
0157    F6 47 04 04               test        byte ptr 0x4[bx],0x04 
015B    75 25                     jne         L$6 
015D    8B 0F                     mov         cx,word ptr [bx] 
015F    83 C1 08                  add         cx,0x0008 
0162    39 C8                     cmp         ax,cx 
0164    7F 1C                     jg          L$6 
0166    8B 4F 02                  mov         cx,word ptr 0x2[bx] 
0169    83 C1 0C                  add         cx,0x000c 
016C    39 CA                     cmp         dx,cx 
016E    7F 12                     jg          L$6 
0170    01 F0                     add         ax,si 
0172    3B 07                     cmp         ax,word ptr [bx] 
0174    76 0C                     jbe         L$6 
0176    01 FA                     add         dx,di 
0178    3B 57 02                  cmp         dx,word ptr 0x2[bx] 
017B    76 05                     jbe         L$6 
017D    9A 00 00 00 00            call        hide_mouse_cursor_ 
0182                          L$6:
0182    5F                        pop         di 
0183    5E                        pop         si 
0184    CB                        retf        

Routine Size: 72 bytes,    Routine Base: ibmpc_TEXT + 013D

0185                          fill_screen_:
0185    52                        push        dx 
0186    89 C2                     mov         dx,ax 
0188    9A 00 00 00 00            call        hide_mouse_cursor_ 
018D    16                        push        ss 
018E    07                        pop         es 
018F    89 D0                     mov         ax,dx 
0191    26 FF 1E 00 00            call        dword ptr es:_fill_screen_color 
0196    5A                        pop         dx 
0197    CB                        retf        

Routine Size: 19 bytes,    Routine Base: ibmpc_TEXT + 0185

0198                          scrmemcpy_:
0198    56                        push        si 
0199    57                        push        di 
019A    55                        push        bp 
019B    89 E5                     mov         bp,sp 
019D    89 C7                     mov         di,ax 
019F    8B 76 0A                  mov         si,word ptr 0xa[bp] 
01A2    16                        push        ss 
01A3    07                        pop         es 
01A4    26 FF 1E 00 00            call        dword ptr es:_video_memcpy 
01A9    E9 87 04                  jmp         L$39 

Routine Size: 20 bytes,    Routine Base: ibmpc_TEXT + 0198

01AC                          put_pixel_13h_:
01AC    52                        push        dx 
01AD    55                        push        bp 
01AE    89 E5                     mov         bp,sp 
01B0    50                        push        ax 
01B1    89 C2                     mov         dx,ax 
01B3    89 4E FE                  mov         word ptr -0x2[bp],cx 
01B6    88 DC                     mov         ah,bl 
01B8    B1 06                     mov         cl,0x06 
01BA    30 C0                     xor         al,al 
01BC    D3 E3                     shl         bx,cl 
01BE    01 D8                     add         ax,bx 
01C0    36 8B 1E 00 00            mov         bx,word ptr ss:_VGA 
01C5    01 D0                     add         ax,dx 
01C7    36 8E 1E 02 00            mov         ds,word ptr ss:_VGA+0x2 
01CC    01 C3                     add         bx,ax 
01CE    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
01D1    88 07                     mov         byte ptr [bx],al 
01D3    89 EC                     mov         sp,bp 
01D5    5D                        pop         bp 
01D6    5A                        pop         dx 
01D7    CB                        retf        

Routine Size: 44 bytes,    Routine Base: ibmpc_TEXT + 01AC

01D8                          put_pixel_cga_:
01D8    52                        push        dx 
01D9    56                        push        si 
01DA    57                        push        di 
01DB    89 C2                     mov         dx,ax 
01DD    89 CE                     mov         si,cx 
01DF    89 D8                     mov         ax,bx 
01E1    89 D1                     mov         cx,dx 
01E3    BB 80 00                  mov         bx,0x0080 
01E6    80 E1 07                  and         cl,0x07 
01E9    D3 FB                     sar         bx,cl 
01EB    88 DD                     mov         ch,bl 
01ED    89 C3                     mov         bx,ax 
01EF    D1 EB                     shr         bx,0x01 
01F1    B1 06                     mov         cl,0x06 
01F3    89 DF                     mov         di,bx 
01F5    D3 E7                     shl         di,cl 
01F7    B1 04                     mov         cl,0x04 
01F9    D3 E3                     shl         bx,cl 
01FB    B1 03                     mov         cl,0x03 
01FD    01 FB                     add         bx,di 
01FF    D3 EA                     shr         dx,cl 
0201    01 DA                     add         dx,bx 
0203    36 C5 1E 00 00            lds         bx,dword ptr ss:_VGA 
0208    01 D3                     add         bx,dx 
020A    A8 01                     test        al,0x01 
020C    74 03                     je          L$7 
020E    80 C7 20                  add         bh,0x20 
0211                          L$7:
0211    85 F6                     test        si,si 
0213    75 08                     jne         L$8 
0215    88 E8                     mov         al,ch 
0217    F6 D0                     not         al 
0219    20 07                     and         byte ptr [bx],al 
021B    EB 02                     jmp         L$9 
021D                          L$8:
021D    08 2F                     or          byte ptr [bx],ch 
021F                          L$9:
021F    5F                        pop         di 
0220    5E                        pop         si 
0221    5A                        pop         dx 
0222    CB                        retf        

Routine Size: 75 bytes,    Routine Base: ibmpc_TEXT + 01D8

0223                          put_pixel_ega2_:
0223    52                        push        dx 
0224    56                        push        si 
0225    89 CA                     mov         dx,cx 
0227    B1 06                     mov         cl,0x06 
0229    89 DE                     mov         si,bx 
022B    D3 E6                     shl         si,cl 
022D    B1 04                     mov         cl,0x04 
022F    D3 E3                     shl         bx,cl 
0231    B1 03                     mov         cl,0x03 
0233    01 DE                     add         si,bx 
0235    89 C3                     mov         bx,ax 
0237    D3 EB                     shr         bx,cl 
0239    88 C1                     mov         cl,al 
023B    01 F3                     add         bx,si 
023D    B8 80 00                  mov         ax,0x0080 
0240    36 8B 36 00 00            mov         si,word ptr ss:_VGA 
0245    80 E1 07                  and         cl,0x07 
0248    36 8E 1E 02 00            mov         ds,word ptr ss:_VGA+0x2 
024D    01 F3                     add         bx,si 
024F    D3 F8                     sar         ax,cl 
0251    85 D2                     test        dx,dx 
0253    74 05                     je          L$10 
0255    08 07                     or          byte ptr [bx],al 
0257    5E                        pop         si 
0258    5A                        pop         dx 
0259    CB                        retf        
025A                          L$10:
025A    F6 D0                     not         al 
025C    20 07                     and         byte ptr [bx],al 
025E    5E                        pop         si 
025F    5A                        pop         dx 
0260    CB                        retf        

Routine Size: 62 bytes,    Routine Base: ibmpc_TEXT + 0223

0261                          put_pixel_ega4_:
0261    52                        push        dx 
0262    56                        push        si 
0263    55                        push        bp 
0264    89 E5                     mov         bp,sp 
0266    51                        push        cx 
0267    B1 06                     mov         cl,0x06 
0269    89 DA                     mov         dx,bx 
026B    D3 E2                     shl         dx,cl 
026D    B1 04                     mov         cl,0x04 
026F    D3 E3                     shl         bx,cl 
0271    B1 03                     mov         cl,0x03 
0273    01 D3                     add         bx,dx 
0275    89 C2                     mov         dx,ax 
0277    D3 EA                     shr         dx,cl 
0279    36 8B 0E 00 00            mov         cx,word ptr ss:_VGA 
027E    01 D3                     add         bx,dx 
0280    01 CB                     add         bx,cx 
0282    88 C1                     mov         cl,al 
0284    B8 80 00                  mov         ax,0x0080 
0287    80 E1 07                  and         cl,0x07 
028A    D3 F8                     sar         ax,cl 
028C    36 8B 36 02 00            mov         si,word ptr ss:_VGA+0x2 
0291    88 C1                     mov         cl,al 
0293    36 83 3E 00 00 00         cmp         word ptr ss:_ega4_lastoperation,0x0000 
0299    74 1B                     je          L$11 
029B    B8 05 00                  mov         ax,0x0005 
029E    BA CE 03                  mov         dx,0x03ce 
02A1    EE                        out         dx,al 
02A2    B8 02 00                  mov         ax,0x0002 
02A5    BA CF 03                  mov         dx,0x03cf 
02A8    EE                        out         dx,al 
02A9    B8 08 00                  mov         ax,0x0008 
02AC    BA CE 03                  mov         dx,0x03ce 
02AF    EE                        out         dx,al 
02B0    31 C0                     xor         ax,ax 
02B2    36 A3 00 00               mov         word ptr ss:_ega4_lastoperation,ax 
02B6                          L$11:
02B6    88 C8                     mov         al,cl 
02B8    BA CF 03                  mov         dx,0x03cf 
02BB    30 E4                     xor         ah,ah 
02BD    EE                        out         dx,al 
02BE    8E DE                     mov         ds,si 
02C0    8A 07                     mov         al,byte ptr [bx] 
02C2    8E DE                     mov         ds,si 
02C4    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
02C7    88 07                     mov         byte ptr [bx],al 
02C9    89 EC                     mov         sp,bp 
02CB    5D                        pop         bp 
02CC    5E                        pop         si 
02CD    5A                        pop         dx 
02CE    CB                        retf        

Routine Size: 110 bytes,    Routine Base: ibmpc_TEXT + 0261

02CF                          put_pixel_raw_:
02CF    51                        push        cx 
02D0    89 D9                     mov         cx,bx 
02D2    36 3B 06 00 00            cmp         ax,word ptr ss:__RES_X 
02D7    73 10                     jae         L$12 
02D9    36 3B 16 00 00            cmp         dx,word ptr ss:__RES_Y 
02DE    73 09                     jae         L$12 
02E0    16                        push        ss 
02E1    07                        pop         es 
02E2    89 D3                     mov         bx,dx 
02E4    26 FF 1E 00 00            call        dword ptr es:_put_pixel_screen 
02E9                          L$12:
02E9    59                        pop         cx 
02EA    CB                        retf        

Routine Size: 28 bytes,    Routine Base: ibmpc_TEXT + 02CF

02EB                          get_pixel_raw_:
02EB    53                        push        bx 
02EC    51                        push        cx 
02ED    89 C1                     mov         cx,ax 
02EF    16                        push        ss 
02F0    07                        pop         es 
02F1    89 D3                     mov         bx,dx 
02F3    26 FF 1E 00 00            call        dword ptr es:_get_pixel_screen 
02F8    59                        pop         cx 
02F9    5B                        pop         bx 
02FA    CB                        retf        

Routine Size: 16 bytes,    Routine Base: ibmpc_TEXT + 02EB

02FB                          put_pixel_:
02FB    51                        push        cx 
02FC    56                        push        si 
02FD    57                        push        di 
02FE    55                        push        bp 
02FF    89 E5                     mov         bp,sp 
0301    50                        push        ax 
0302    89 C7                     mov         di,ax 
0304    89 D6                     mov         si,dx 
0306    89 5E FE                  mov         word ptr -0x2[bp],bx 
0309    36 80 3E 00 00 00         cmp         byte ptr ss:_tty,0x00 
030F    75 61                     jne         L$15 
0311    36 3B 06 00 00            cmp         ax,word ptr ss:__RES_X 
0316    73 5A                     jae         L$15 
0318    36 3B 16 00 00            cmp         dx,word ptr ss:__RES_Y 
031D    73 53                     jae         L$15 
031F    36 A1 02 00               mov         ax,word ptr ss:_draw_window_box+0x2 
0323    36 8B 16 00 00            mov         dx,word ptr ss:_draw_window_box 
0328    85 C0                     test        ax,ax 
032A    75 15                     jne         L$13 
032C    85 D2                     test        dx,dx 
032E    75 11                     jne         L$13 
0330    36 A1 02 00               mov         ax,word ptr ss:_running_window+0x2 
0334    36 8B 16 00 00            mov         dx,word ptr ss:_running_window 
0339    85 C0                     test        ax,ax 
033B    75 04                     jne         L$13 
033D    85 D2                     test        dx,dx 
033F    74 16                     je          L$14 
0341                          L$13:
0341    36 A1 00 00               mov         ax,word ptr ss:_running_window 
0345    36 8B 16 02 00            mov         dx,word ptr ss:_running_window+0x2 
034A    89 F1                     mov         cx,si 
034C    89 FB                     mov         bx,di 
034E    9A 00 00 00 00            call        windowpos_visible_ 
0353    84 C0                     test        al,al 
0355    74 1B                     je          L$15 
0357                          L$14:
0357    B9 01 00                  mov         cx,0x0001 
035A    89 F2                     mov         dx,si 
035C    89 F8                     mov         ax,di 
035E    89 CB                     mov         bx,cx 
0360    0E                        push        cs 
0361    E8 00 00                  call        hide_mouse_if_in_box_ 
0364    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
0367    16                        push        ss 
0368    07                        pop         es 
0369    89 F3                     mov         bx,si 
036B    89 F8                     mov         ax,di 
036D    26 FF 1E 00 00            call        dword ptr es:_put_pixel_screen 
0372                          L$15:
0372    89 EC                     mov         sp,bp 
0374    5D                        pop         bp 
0375    5F                        pop         di 
0376    5E                        pop         si 
0377    59                        pop         cx 
0378    CB                        retf        

Routine Size: 126 bytes,    Routine Base: ibmpc_TEXT + 02FB

0379                          put_pixel_shadow_:
0379    56                        push        si 
037A    57                        push        di 
037B    55                        push        bp 
037C    89 E5                     mov         bp,sp 
037E    50                        push        ax 
037F    89 C6                     mov         si,ax 
0381    89 D7                     mov         di,dx 
0383    89 5E FE                  mov         word ptr -0x2[bp],bx 
0386    89 CB                     mov         bx,cx 
0388    42                        inc         dx 
0389    40                        inc         ax 
038A    0E                        push        cs 
038B    E8 00 00                  call        put_pixel_ 
038E    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
0391    89 FA                     mov         dx,di 
0393    89 F0                     mov         ax,si 
0395    0E                        push        cs 
0396    E8 00 00                  call        put_pixel_ 
0399                          L$16:
0399    89 EC                     mov         sp,bp 
039B    5D                        pop         bp 
039C    5F                        pop         di 
039D    5E                        pop         si 
039E    CB                        retf        

Routine Size: 38 bytes,    Routine Base: ibmpc_TEXT + 0379

039F                          get_pixel_ega4_:
039F    51                        push        cx 
03A0    52                        push        dx 
03A1    56                        push        si 
03A2    57                        push        di 
03A3    B1 06                     mov         cl,0x06 
03A5    89 DA                     mov         dx,bx 
03A7    D3 E2                     shl         dx,cl 
03A9    B1 04                     mov         cl,0x04 
03AB    36 8B 36 00 00            mov         si,word ptr ss:_VGA 
03B0    D3 E3                     shl         bx,cl 
03B2    B1 03                     mov         cl,0x03 
03B4    01 DA                     add         dx,bx 
03B6    89 C3                     mov         bx,ax 
03B8    36 8B 3E 02 00            mov         di,word ptr ss:_VGA+0x2 
03BD    D3 EB                     shr         bx,cl 
03BF    88 C1                     mov         cl,al 
03C1    B8 80 00                  mov         ax,0x0080 
03C4    80 E1 07                  and         cl,0x07 
03C7    01 DA                     add         dx,bx 
03C9    D3 F8                     sar         ax,cl 
03CB    01 D6                     add         si,dx 
03CD    88 C7                     mov         bh,al 
03CF    B9 04 00                  mov         cx,0x0004 
03D2    30 DB                     xor         bl,bl 
03D4    36 83 3E 00 00 00         cmp         word ptr ss:_ega4_lastoperation,0x0000 
03DA    75 0D                     jne         L$17 
03DC    BA CE 03                  mov         dx,0x03ce 
03DF    89 C8                     mov         ax,cx 
03E1    EE                        out         dx,al 
03E2    36 C7 06 00 00 01 00      mov         word ptr ss:_ega4_lastoperation,0x0001 
03E9                          L$17:
03E9    49                        dec         cx 
03EA    83 F9 FF                  cmp         cx,0xffff 
03ED    74 1D                     je          L$18 
03EF    88 C8                     mov         al,cl 
03F1    BA CF 03                  mov         dx,0x03cf 
03F4    30 E4                     xor         ah,ah 
03F6    D0 E3                     shl         bl,0x01 
03F8    EE                        out         dx,al 
03F9    8E DF                     mov         ds,di 
03FB    88 FA                     mov         dl,bh 
03FD    8A 04                     mov         al,byte ptr [si] 
03FF    30 F6                     xor         dh,dh 
0401    30 E4                     xor         ah,ah 
0403    85 D0                     test        ax,dx 
0405    74 E2                     je          L$17 
0407    80 CB 01                  or          bl,0x01 
040A    EB DD                     jmp         L$17 
040C                          L$18:
040C    88 D8                     mov         al,bl 
040E    30 E4                     xor         ah,ah 
0410    5F                        pop         di 
0411                          L$19:
0411    5E                        pop         si 
0412    5A                        pop         dx 
0413    59                        pop         cx 
0414    CB                        retf        

Routine Size: 118 bytes,    Routine Base: ibmpc_TEXT + 039F

0415                          get_pixel_cga_:
0415    51                        push        cx 
0416    52                        push        dx 
0417    56                        push        si 
0418    89 C1                     mov         cx,ax 
041A    BA 80 00                  mov         dx,0x0080 
041D    80 E1 07                  and         cl,0x07 
0420    D3 FA                     sar         dx,cl 
0422    88 D5                     mov         ch,dl 
0424    89 DA                     mov         dx,bx 
0426    B1 03                     mov         cl,0x03 
0428    D1 EA                     shr         dx,0x01 
042A    D3 E8                     shr         ax,cl 
042C    B1 04                     mov         cl,0x04 
042E    89 D6                     mov         si,dx 
0430    D3 E6                     shl         si,cl 
0432    B1 06                     mov         cl,0x06 
0434    D3 E2                     shl         dx,cl 
0436    01 F2                     add         dx,si 
0438    F6 C3 01                  test        bl,0x01 
043B    74 03                     je          L$20 
043D    80 C6 20                  add         dh,0x20 
0440                          L$20:
0440    36 8B 1E 00 00            mov         bx,word ptr ss:_VGA 
0445    01 D0                     add         ax,dx 
0447    36 8E 1E 02 00            mov         ds,word ptr ss:_VGA+0x2 
044C    01 C3                     add         bx,ax 
044E    8A 1F                     mov         bl,byte ptr [bx] 
0450    88 E8                     mov         al,ch 
0452    30 FF                     xor         bh,bh 
0454    30 E4                     xor         ah,ah 
0456    85 C3                     test        bx,ax 
0458    74 05                     je          L$21 
045A    B8 01 00                  mov         ax,0x0001 
045D    EB B2                     jmp         L$19 
045F                          L$21:
045F    30 E8                     xor         al,ch 
0461    EB AE                     jmp         L$19 

Routine Size: 78 bytes,    Routine Base: ibmpc_TEXT + 0415

0463                          get_pixel_13h_:
0463    51                        push        cx 
0464    52                        push        dx 
0465    89 C2                     mov         dx,ax 
0467    88 DC                     mov         ah,bl 
0469    B1 06                     mov         cl,0x06 
046B    30 C0                     xor         al,al 
046D    D3 E3                     shl         bx,cl 
046F    01 D8                     add         ax,bx 
0471    36 8B 1E 00 00            mov         bx,word ptr ss:_VGA 
0476    01 D0                     add         ax,dx 
0478    36 8E 1E 02 00            mov         ds,word ptr ss:_VGA+0x2 
047D    01 C3                     add         bx,ax 
047F    8A 07                     mov         al,byte ptr [bx] 
0481                          L$22:
0481    30 E4                     xor         ah,ah 
0483    5A                        pop         dx 
0484    59                        pop         cx 
0485    CB                        retf        

Routine Size: 35 bytes,    Routine Base: ibmpc_TEXT + 0463

0486                          get_pixel_ega2_:
0486    51                        push        cx 
0487    52                        push        dx 
0488    B1 06                     mov         cl,0x06 
048A    89 DA                     mov         dx,bx 
048C    D3 E2                     shl         dx,cl 
048E    B1 04                     mov         cl,0x04 
0490    D3 E3                     shl         bx,cl 
0492    B1 03                     mov         cl,0x03 
0494    01 DA                     add         dx,bx 
0496    89 C3                     mov         bx,ax 
0498    D3 EB                     shr         bx,cl 
049A    88 C1                     mov         cl,al 
049C    01 D3                     add         bx,dx 
049E    B8 80 00                  mov         ax,0x0080 
04A1    36 8B 16 00 00            mov         dx,word ptr ss:_VGA 
04A6    80 E1 07                  and         cl,0x07 
04A9    36 8E 1E 02 00            mov         ds,word ptr ss:_VGA+0x2 
04AE    01 D3                     add         bx,dx 
04B0    D3 F8                     sar         ax,cl 
04B2    8A 1F                     mov         bl,byte ptr [bx] 
04B4    30 E4                     xor         ah,ah 
04B6    30 FF                     xor         bh,bh 
04B8    30 D2                     xor         dl,dl 
04BA    85 C3                     test        bx,ax 
04BC    74 02                     je          L$23 
04BE    B2 01                     mov         dl,0x01 
04C0                          L$23:
04C0    88 D0                     mov         al,dl 
04C2    EB BD                     jmp         L$22 

Routine Size: 62 bytes,    Routine Base: ibmpc_TEXT + 0486

04C4                          get_pixel_:
04C4    53                        push        bx 
04C5    51                        push        cx 
04C6    56                        push        si 
04C7    57                        push        di 
04C8    89 C6                     mov         si,ax 
04CA    89 D7                     mov         di,dx 
04CC    B9 01 00                  mov         cx,0x0001 
04CF    89 CB                     mov         bx,cx 
04D1    0E                        push        cs 
04D2    E8 00 00                  call        hide_mouse_if_in_box_ 
04D5    16                        push        ss 
04D6    07                        pop         es 
04D7    89 FB                     mov         bx,di 
04D9    89 F0                     mov         ax,si 
04DB    26 FF 1E 00 00            call        dword ptr es:_get_pixel_screen 
04E0    5F                        pop         di 
04E1    5E                        pop         si 
04E2    59                        pop         cx 
04E3                          L$24:
04E3    5B                        pop         bx 
04E4    CB                        retf        

Routine Size: 33 bytes,    Routine Base: ibmpc_TEXT + 04C4

04E5                          draw_move_borders_:
04E5    56                        push        si 
04E6    57                        push        di 
04E7    55                        push        bp 
04E8    89 E5                     mov         bp,sp 
04EA    83 EC 14                  sub         sp,0x0014 
04ED    50                        push        ax 
04EE    89 D6                     mov         si,dx 
04F0    89 5E FE                  mov         word ptr -0x2[bp],bx 
04F3    89 CF                     mov         di,cx 
04F5    31 C9                     xor         cx,cx 
04F7    36 89 0E 00 00            mov         word ptr ss:_running_window,cx 
04FC    36 89 0E 02 00            mov         word ptr ss:_running_window+0x2,cx 
0501    80 7E 0A 02               cmp         byte ptr 0xa[bp],0x02 
0505    75 23                     jne         L$26 
0507    36 8B 16 60 00            mov         dx,word ptr ss:L$249 
050C    36 A1 5E 00               mov         ax,word ptr ss:L$248 
0510    85 D2                     test        dx,dx 
0512    75 04                     jne         L$25 
0514    85 C0                     test        ax,ax 
0516    74 12                     je          L$26 
0518                          L$25:
0518    9A 00 00 00 00            call        free_ 
051D    36 89 0E 5E 00            mov         word ptr ss:L$248,cx 
0522    36 89 0E 60 00            mov         word ptr ss:L$249,cx 
0527    E9 07 01                  jmp         L$38 
052A                          L$26:
052A    80 7E 0A 00               cmp         byte ptr 0xa[bp],0x00 
052E    75 53                     jne         L$30 
0530                          L$27:
0530    89 F8                     mov         ax,di 
0532    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
0535    D1 E0                     shl         ax,0x01 
0537    D1 E2                     shl         dx,0x01 
0539    05 04 00                  add         ax,0x0004 
053C    83 C2 04                  add         dx,0x0004 
053F    01 D0                     add         ax,dx 
0541    40                        inc         ax 
0542    9A 00 00 00 00            call        malloc_ 
0547    36 A3 5E 00               mov         word ptr ss:L$248,ax 
054B    36 89 16 60 00            mov         word ptr ss:L$249,dx 
0550    85 D2                     test        dx,dx 
0552    75 04                     jne         L$28 
0554    85 C0                     test        ax,ax 
0556    74 2B                     je          L$30 
0558                          L$28:
0558    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
055B    40                        inc         ax 
055C    40                        inc         ax 
055D    89 46 EE                  mov         word ptr -0x12[bp],ax 
0560                          L$29:
0560    FF 4E EE                  dec         word ptr -0x12[bp] 
0563    83 7E EE FF               cmp         word ptr -0x12[bp],0xffff 
0567    74 1D                     je          L$31 
0569    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
056C    48                        dec         ax 
056D    8D 54 FF                  lea         dx,-0x1[si] 
0570    03 46 EE                  add         ax,word ptr -0x12[bp] 
0573    0E                        push        cs 
0574    E8 00 00                  call        get_pixel_ 
0577    36 C5 1E 5E 00            lds         bx,dword ptr ss:L$248 
057C    01 CB                     add         bx,cx 
057E    41                        inc         cx 
057F    88 07                     mov         byte ptr [bx],al 
0581    EB DD                     jmp         L$29 
0583                          L$30:
0583    E9 B3 00                  jmp         L$40 
0586                          L$31:
0586    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0589    40                        inc         ax 
058A    40                        inc         ax 
058B    89 46 FA                  mov         word ptr -0x6[bp],ax 
058E                          L$32:
058E    FF 4E FA                  dec         word ptr -0x6[bp] 
0591    83 7E FA FF               cmp         word ptr -0x6[bp],0xffff 
0595    74 1B                     je          L$33 
0597    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
059A    89 F2                     mov         dx,si 
059C    48                        dec         ax 
059D    01 FA                     add         dx,di 
059F    03 46 FA                  add         ax,word ptr -0x6[bp] 
05A2    0E                        push        cs 
05A3    E8 00 00                  call        get_pixel_ 
05A6    36 C5 1E 5E 00            lds         bx,dword ptr ss:L$248 
05AB    01 CB                     add         bx,cx 
05AD    41                        inc         cx 
05AE    88 07                     mov         byte ptr [bx],al 
05B0    EB DC                     jmp         L$32 
05B2                          L$33:
05B2    8D 45 02                  lea         ax,0x2[di] 
05B5    89 46 FC                  mov         word ptr -0x4[bp],ax 
05B8                          L$34:
05B8    FF 4E FC                  dec         word ptr -0x4[bp] 
05BB    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
05BE    3D FF FF                  cmp         ax,0xffff 
05C1    74 19                     je          L$35 
05C3    8D 54 FF                  lea         dx,-0x1[si] 
05C6    01 C2                     add         dx,ax 
05C8    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
05CB    48                        dec         ax 
05CC    0E                        push        cs 
05CD    E8 00 00                  call        get_pixel_ 
05D0    36 C5 1E 5E 00            lds         bx,dword ptr ss:L$248 
05D5    01 CB                     add         bx,cx 
05D7    41                        inc         cx 
05D8    88 07                     mov         byte ptr [bx],al 
05DA    EB DC                     jmp         L$34 
05DC                          L$35:
05DC    8D 45 03                  lea         ax,0x3[di] 
05DF    89 46 F6                  mov         word ptr -0xa[bp],ax 
05E2                          L$36:
05E2    FF 4E F6                  dec         word ptr -0xa[bp] 
05E5    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
05E8    3D FF FF                  cmp         ax,0xffff 
05EB    74 1B                     je          L$37 
05ED    8D 54 FF                  lea         dx,-0x1[si] 
05F0    01 C2                     add         dx,ax 
05F2    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
05F5    03 46 FE                  add         ax,word ptr -0x2[bp] 
05F8    0E                        push        cs 
05F9    E8 00 00                  call        get_pixel_ 
05FC    36 C5 1E 5E 00            lds         bx,dword ptr ss:L$248 
0601    01 CB                     add         bx,cx 
0603    41                        inc         cx 
0604    88 07                     mov         byte ptr [bx],al 
0606    EB DA                     jmp         L$36 
0608                          L$37:
0608    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
060B    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
060E    36 89 36 85 00            mov         word ptr ss:L$251,si 
0613    36 A3 83 00               mov         word ptr ss:L$250,ax 
0617    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
061A    89 F9                     mov         cx,di 
061C    36 A3 87 00               mov         word ptr ss:L$252,ax 
0620    31 C0                     xor         ax,ax 
0622    89 F2                     mov         dx,si 
0624    50                        push        ax 
0625    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
0628    36 89 3E 89 00            mov         word ptr ss:L$253,di 
062D    0E                        push        cs 
062E    E8 00 00                  call        draw_borders_ 
0631                          L$38:
0631    89 EC                     mov         sp,bp 
0633                          L$39:
0633    5D                        pop         bp 
0634    5F                        pop         di 
0635    5E                        pop         si 
0636    CA 02 00                  retf        0x0002 
0639                          L$40:
0639    36 A1 60 00               mov         ax,word ptr ss:L$249 
063D    36 8B 16 5E 00            mov         dx,word ptr ss:L$248 
0642    85 C0                     test        ax,ax 
0644    75 04                     jne         L$41 
0646    85 D2                     test        dx,dx 
0648    74 E7                     je          L$38 
064A                          L$41:
064A    36 A1 87 00               mov         ax,word ptr ss:L$252 
064E    40                        inc         ax 
064F    40                        inc         ax 
0650    89 46 F8                  mov         word ptr -0x8[bp],ax 
0653                          L$42:
0653    FF 4E F8                  dec         word ptr -0x8[bp] 
0656    83 7E F8 FF               cmp         word ptr -0x8[bp],0xffff 
065A    74 29                     je          L$43 
065C    36 C5 1E 5E 00            lds         bx,dword ptr ss:L$248 
0661    01 CB                     add         bx,cx 
0663    8A 07                     mov         al,byte ptr [bx] 
0665    36 8B 1E 83 00            mov         bx,word ptr ss:L$250 
066A    36 8B 16 85 00            mov         dx,word ptr ss:L$251 
066F    4B                        dec         bx 
0670    4A                        dec         dx 
0671    03 5E F8                  add         bx,word ptr -0x8[bp] 
0674    30 E4                     xor         ah,ah 
0676    89 5E EC                  mov         word ptr -0x14[bp],bx 
0679    89 C3                     mov         bx,ax 
067B    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
067E    41                        inc         cx 
067F    0E                        push        cs 
0680    E8 00 00                  call        put_pixel_ 
0683    EB CE                     jmp         L$42 
0685                          L$43:
0685    36 A1 87 00               mov         ax,word ptr ss:L$252 
0689    40                        inc         ax 
068A    40                        inc         ax 
068B    89 46 F4                  mov         word ptr -0xc[bp],ax 
068E                          L$44:
068E    FF 4E F4                  dec         word ptr -0xc[bp] 
0691    83 7E F4 FF               cmp         word ptr -0xc[bp],0xffff 
0695    74 2D                     je          L$45 
0697    36 C5 1E 5E 00            lds         bx,dword ptr ss:L$248 
069C    01 CB                     add         bx,cx 
069E    8A 07                     mov         al,byte ptr [bx] 
06A0    36 8B 1E 83 00            mov         bx,word ptr ss:L$250 
06A5    36 8B 16 85 00            mov         dx,word ptr ss:L$251 
06AA    4B                        dec         bx 
06AB    36 03 16 89 00            add         dx,word ptr ss:L$253 
06B0    03 5E F4                  add         bx,word ptr -0xc[bp] 
06B3    30 E4                     xor         ah,ah 
06B5    89 5E EC                  mov         word ptr -0x14[bp],bx 
06B8    89 C3                     mov         bx,ax 
06BA    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
06BD    41                        inc         cx 
06BE    0E                        push        cs 
06BF    E8 00 00                  call        put_pixel_ 
06C2    EB CA                     jmp         L$44 
06C4                          L$45:
06C4    36 A1 89 00               mov         ax,word ptr ss:L$253 
06C8    40                        inc         ax 
06C9    40                        inc         ax 
06CA    89 46 F2                  mov         word ptr -0xe[bp],ax 
06CD                          L$46:
06CD    FF 4E F2                  dec         word ptr -0xe[bp] 
06D0    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
06D3    3D FF FF                  cmp         ax,0xffff 
06D6    74 1F                     je          L$47 
06D8    36 C5 1E 5E 00            lds         bx,dword ptr ss:L$248 
06DD    36 8B 16 85 00            mov         dx,word ptr ss:L$251 
06E2    01 CB                     add         bx,cx 
06E4    4A                        dec         dx 
06E5    41                        inc         cx 
06E6    01 C2                     add         dx,ax 
06E8    36 A1 83 00               mov         ax,word ptr ss:L$250 
06EC    8A 1F                     mov         bl,byte ptr [bx] 
06EE    48                        dec         ax 
06EF    30 FF                     xor         bh,bh 
06F1    0E                        push        cs 
06F2    E8 00 00                  call        put_pixel_ 
06F5    EB D6                     jmp         L$46 
06F7                          L$47:
06F7    36 A1 89 00               mov         ax,word ptr ss:L$253 
06FB    05 03 00                  add         ax,0x0003 
06FE    89 46 F0                  mov         word ptr -0x10[bp],ax 
0701                          L$48:
0701    FF 4E F0                  dec         word ptr -0x10[bp] 
0704    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
0707    3D FF FF                  cmp         ax,0xffff 
070A    74 23                     je          L$49 
070C    36 C5 1E 5E 00            lds         bx,dword ptr ss:L$248 
0711    36 8B 16 85 00            mov         dx,word ptr ss:L$251 
0716    01 CB                     add         bx,cx 
0718    4A                        dec         dx 
0719    8A 1F                     mov         bl,byte ptr [bx] 
071B    01 C2                     add         dx,ax 
071D    36 A1 83 00               mov         ax,word ptr ss:L$250 
0721    30 FF                     xor         bh,bh 
0723    36 03 06 87 00            add         ax,word ptr ss:L$252 
0728    41                        inc         cx 
0729    0E                        push        cs 
072A    E8 00 00                  call        put_pixel_ 
072D    EB D2                     jmp         L$48 
072F                          L$49:
072F    31 C9                     xor         cx,cx 
0731    80 7E 0A 03               cmp         byte ptr 0xa[bp],0x03 
0735    74 03                     je          L$50 
0737    E9 1E FE                  jmp         L$28 
073A                          L$50:
073A    36 A1 5E 00               mov         ax,word ptr ss:L$248 
073E    36 8B 16 60 00            mov         dx,word ptr ss:L$249 
0743    C6 46 0A 00               mov         byte ptr 0xa[bp],0x00 
0747    9A 00 00 00 00            call        free_ 
074C    E9 E1 FD                  jmp         L$27 

Routine Size: 618 bytes,    Routine Base: ibmpc_TEXT + 04E5

074F                          clear_screen_:
074F    53                        push        bx 
0750                          L$51:
0750    48                        dec         ax 
0751    3D FF FF                  cmp         ax,0xffff 
0754    75 03                     jne         L$52 
0756    E9 8A FD                  jmp         L$24 
0759                          L$52:
0759    36 C5 1E 00 00            lds         bx,dword ptr ss:_VGA 
075E    01 C3                     add         bx,ax 
0760    C6 07 00                  mov         byte ptr [bx],0x00 
0763    EB EB                     jmp         L$51 
0765                          draw_rectangle_safetycheck_:
0765    56                        push        si 
0766    57                        push        di 
0767    55                        push        bp 
0768    89 E5                     mov         bp,sp 
076A    50                        push        ax 
076B    89 C6                     mov         si,ax 
076D    8E DA                     mov         ds,dx 
076F    89 4E FE                  mov         word ptr -0x2[bp],cx 
0772    8B 4E 0C                  mov         cx,word ptr 0xc[bp] 
0775    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0778    26 8B 07                  mov         ax,word ptr es:[bx] 
077B    85 C0                     test        ax,ax 
077D    7D 26                     jge         L$54 
077F    99                        cwd         
0780    33 C2                     xor         ax,dx 
0782    2B C2                     sub         ax,dx 
0784    8E 46 0E                  mov         es,word ptr 0xe[bp] 
0787    89 CF                     mov         di,cx 
0789    26 3B 05                  cmp         ax,word ptr es:[di] 
078C    72 03                     jb          L$53 
078E    E9 92 00                  jmp         L$59 
0791                          L$53:
0791    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0794    26 8B 07                  mov         ax,word ptr es:[bx] 
0797    8E 46 0E                  mov         es,word ptr 0xe[bp] 
079A    26 01 05                  add         word ptr es:[di],ax 
079D    8E 46 FE                  mov         es,word ptr -0x2[bp] 
07A0    26 C7 07 00 00            mov         word ptr es:[bx],0x0000 
07A5                          L$54:
07A5    8B 04                     mov         ax,word ptr [si] 
07A7    85 C0                     test        ax,ax 
07A9    7D 16                     jge         L$55 
07AB    99                        cwd         
07AC    33 C2                     xor         ax,dx 
07AE    2B C2                     sub         ax,dx 
07B0    C4 7E 08                  les         di,dword ptr 0x8[bp] 
07B3    26 3B 05                  cmp         ax,word ptr es:[di] 
07B6    73 6B                     jae         L$59 
07B8    8B 04                     mov         ax,word ptr [si] 
07BA    26 01 05                  add         word ptr es:[di],ax 
07BD    C7 04 00 00               mov         word ptr [si],0x0000 
07C1                          L$55:
07C1    8E 46 FE                  mov         es,word ptr -0x2[bp] 
07C4    26 8B 07                  mov         ax,word ptr es:[bx] 
07C7    36 3B 06 00 00            cmp         ax,word ptr ss:__RES_Y 
07CC    77 09                     ja          L$56 
07CE    8B 04                     mov         ax,word ptr [si] 
07D0    36 3B 06 00 00            cmp         ax,word ptr ss:__RES_X 
07D5    76 1E                     jbe         L$57 
07D7                          L$56:
07D7    8E 46 FE                  mov         es,word ptr -0x2[bp] 
07DA    26 C7 07 00 00            mov         word ptr es:[bx],0x0000 
07DF    89 CF                     mov         di,cx 
07E1    C7 04 00 00               mov         word ptr [si],0x0000 
07E5    8E 46 0E                  mov         es,word ptr 0xe[bp] 
07E8    26 C7 05 00 00            mov         word ptr es:[di],0x0000 
07ED    C4 7E 08                  les         di,dword ptr 0x8[bp] 
07F0    26 C7 05 00 00            mov         word ptr es:[di],0x0000 
07F5                          L$57:
07F5    8E 46 FE                  mov         es,word ptr -0x2[bp] 
07F8    89 CF                     mov         di,cx 
07FA    26 8B 1F                  mov         bx,word ptr es:[bx] 
07FD    8E 46 0E                  mov         es,word ptr 0xe[bp] 
0800    36 A1 00 00               mov         ax,word ptr ss:__RES_Y 
0804    26 03 1D                  add         bx,word ptr es:[di] 
0807    39 C3                     cmp         bx,ax 
0809    76 05                     jbe         L$58 
080B    29 C3                     sub         bx,ax 
080D    26 29 1D                  sub         word ptr es:[di],bx 
0810                          L$58:
0810    8B 1C                     mov         bx,word ptr [si] 
0812    C5 76 08                  lds         si,dword ptr 0x8[bp] 
0815    36 A1 00 00               mov         ax,word ptr ss:__RES_X 
0819    03 1C                     add         bx,word ptr [si] 
081B    39 C3                     cmp         bx,ax 
081D    76 04                     jbe         L$59 
081F    29 C3                     sub         bx,ax 
0821    29 1C                     sub         word ptr [si],bx 
0823                          L$59:
0823    89 EC                     mov         sp,bp 
0825    5D                        pop         bp 
0826    5F                        pop         di 
0827    5E                        pop         si 
0828    C2 08 00                  ret         0x0008 
082B                          cgapointer_:
082B    53                        push        bx 
082C    51                        push        cx 
082D    56                        push        si 
082E    89 D3                     mov         bx,dx 
0830    B1 03                     mov         cl,0x03 
0832    D1 FB                     sar         bx,0x01 
0834    D3 F8                     sar         ax,cl 
0836    B1 04                     mov         cl,0x04 
0838    89 DE                     mov         si,bx 
083A    D3 E6                     shl         si,cl 
083C    B1 06                     mov         cl,0x06 
083E    D3 E3                     shl         bx,cl 
0840    01 F3                     add         bx,si 
0842    F6 C2 01                  test        dl,0x01 
0845    75 0E                     jne         L$60 
0847    36 8B 0E 00 00            mov         cx,word ptr ss:_VGA 
084C    01 CB                     add         bx,cx 
084E    36 8B 16 02 00            mov         dx,word ptr ss:_VGA+0x2 
0853    EB 11                     jmp         L$61 
0855                          L$60:
0855    36 8B 16 00 00            mov         dx,word ptr ss:_VGA 
085A    80 C6 20                  add         dh,0x20 
085D    36 8B 0E 02 00            mov         cx,word ptr ss:_VGA+0x2 
0862    01 D3                     add         bx,dx 
0864    89 CA                     mov         dx,cx 
0866                          L$61:
0866    01 D8                     add         ax,bx 
0868    5E                        pop         si 
0869    59                        pop         cx 
086A    5B                        pop         bx 
086B    C3                        ret         

Routine Size: 285 bytes,    Routine Base: ibmpc_TEXT + 074F

086C                          draw_rectangle_cga_:
086C    57                        push        di 
086D    55                        push        bp 
086E    89 E5                     mov         bp,sp 
0870    83 EC 08                  sub         sp,0x0008 
0873    50                        push        ax 
0874    51                        push        cx 
0875    52                        push        dx 
0876    56                        push        si 
0877    01 C8                     add         ax,cx 
0879    89 D6                     mov         si,dx 
087B    89 C2                     mov         dx,ax 
087D    30 E6                     xor         dh,ah 
087F    80 E2 07                  and         dl,0x07 
0882    29 D0                     sub         ax,dx 
0884    B1 03                     mov         cl,0x03 
0886    2B 46 F6                  sub         ax,word ptr -0xa[bp] 
0889    D3 E8                     shr         ax,cl 
088B    89 46 FA                  mov         word ptr -0x6[bp],ax 
088E    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
0891    89 46 F8                  mov         word ptr -0x8[bp],ax 
0894    F6 46 F6 07               test        byte ptr -0xa[bp],0x07 
0898    74 4D                     je          L$65 
089A    89 C1                     mov         cx,ax 
089C    B8 FF 00                  mov         ax,0x00ff 
089F    80 E1 07                  and         cl,0x07 
08A2    D3 F8                     sar         ax,cl 
08A4    89 C1                     mov         cx,ax 
08A6    83 7E F0 00               cmp         word ptr -0x10[bp],0x0000 
08AA    74 17                     je          L$63 
08AC                          L$62:
08AC    4E                        dec         si 
08AD    83 FE FF                  cmp         si,0xffff 
08B0    74 2C                     je          L$64 
08B2    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
08B5    89 DA                     mov         dx,bx 
08B7    E8 00 00                  call        cgapointer_ 
08BA    89 C7                     mov         di,ax 
08BC    8E DA                     mov         ds,dx 
08BE    43                        inc         bx 
08BF    08 0D                     or          byte ptr [di],cl 
08C1    EB E9                     jmp         L$62 
08C3                          L$63:
08C3    4E                        dec         si 
08C4    83 FE FF                  cmp         si,0xffff 
08C7    74 15                     je          L$64 
08C9    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
08CC    89 DA                     mov         dx,bx 
08CE    E8 00 00                  call        cgapointer_ 
08D1    89 C7                     mov         di,ax 
08D3    88 C8                     mov         al,cl 
08D5    8E DA                     mov         ds,dx 
08D7    F6 D0                     not         al 
08D9    43                        inc         bx 
08DA    20 05                     and         byte ptr [di],al 
08DC    EB E5                     jmp         L$63 
08DE                          L$64:
08DE    8B 76 F2                  mov         si,word ptr -0xe[bp] 
08E1    83 46 F8 08               add         word ptr -0x8[bp],0x0008 
08E5    29 F3                     sub         bx,si 
08E7                          L$65:
08E7    83 7E F0 00               cmp         word ptr -0x10[bp],0x0000 
08EB    74 06                     je          L$66 
08ED    C6 46 FC FF               mov         byte ptr -0x4[bp],0xff 
08F1    EB 04                     jmp         L$67 
08F3                          L$66:
08F3    C6 46 FC 00               mov         byte ptr -0x4[bp],0x00 
08F7                          L$67:
08F7    4E                        dec         si 
08F8    83 FE FF                  cmp         si,0xffff 
08FB    74 19                     je          L$68 
08FD    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0900    89 DA                     mov         dx,bx 
0902    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
0905    E8 00 00                  call        cgapointer_ 
0908    89 C7                     mov         di,ax 
090A    8E C2                     mov         es,dx 
090C    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
090F    43                        inc         bx 
0910    57                        push        di 
0911    F3 AA                     rep stosb   
0913    5F                        pop         di 
0914    EB E1                     jmp         L$67 
0916                          L$68:
0916    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
0919    03 46 F4                  add         ax,word ptr -0xc[bp] 
091C    A8 07                     test        al,0x07 
091E    74 4F                     je          L$71 
0920    89 C1                     mov         cx,ax 
0922    BA FF 00                  mov         dx,0x00ff 
0925    80 E1 07                  and         cl,0x07 
0928    8B 7E F2                  mov         di,word ptr -0xe[bp] 
092B    D3 FA                     sar         dx,cl 
092D    4B                        dec         bx 
092E    F7 D2                     not         dx 
0930    89 C1                     mov         cx,ax 
0932    88 56 FE                  mov         byte ptr -0x2[bp],dl 
0935    83 7E F0 00               cmp         word ptr -0x10[bp],0x0000 
0939    74 19                     je          L$70 
093B                          L$69:
093B    4F                        dec         di 
093C    83 FF FF                  cmp         di,0xffff 
093F    74 2E                     je          L$71 
0941    89 DA                     mov         dx,bx 
0943    89 C8                     mov         ax,cx 
0945    E8 00 00                  call        cgapointer_ 
0948    89 C6                     mov         si,ax 
094A    8E DA                     mov         ds,dx 
094C    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
094F    4B                        dec         bx 
0950    08 04                     or          byte ptr [si],al 
0952    EB E7                     jmp         L$69 
0954                          L$70:
0954    4F                        dec         di 
0955    83 FF FF                  cmp         di,0xffff 
0958    74 15                     je          L$71 
095A    89 DA                     mov         dx,bx 
095C    89 C8                     mov         ax,cx 
095E    E8 00 00                  call        cgapointer_ 
0961    89 C6                     mov         si,ax 
0963    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0966    8E DA                     mov         ds,dx 
0968    F6 D0                     not         al 
096A    4B                        dec         bx 
096B    20 04                     and         byte ptr [si],al 
096D    EB E5                     jmp         L$70 
096F                          L$71:
096F    89 EC                     mov         sp,bp 
0971    5D                        pop         bp 
0972    5F                        pop         di 
0973    CB                        retf        

Routine Size: 264 bytes,    Routine Base: ibmpc_TEXT + 086C

0974                          draw_rectangle_ega2_:
0974    57                        push        di 
0975    55                        push        bp 
0976    89 E5                     mov         bp,sp 
0978    50                        push        ax 
0979    50                        push        ax 
097A    53                        push        bx 
097B    51                        push        cx 
097C    52                        push        dx 
097D    56                        push        si 
097E    89 EE                     mov         si,bp 
0980    F7 DE                     neg         si 
0982    01 C8                     add         ax,cx 
0984    89 C3                     mov         bx,ax 
0986    30 E7                     xor         bh,ah 
0988    80 E3 07                  and         bl,0x07 
098B    29 D8                     sub         ax,bx 
098D    B1 03                     mov         cl,0x03 
098F    2B 46 FC                  sub         ax,word ptr -0x4[bp] 
0992    D3 E8                     shr         ax,cl 
0994    B1 06                     mov         cl,0x06 
0996    89 46 FE                  mov         word ptr -0x2[bp],ax 
0999    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
099C    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
099F    D3 E0                     shl         ax,cl 
09A1    B1 04                     mov         cl,0x04 
09A3    D3 E3                     shl         bx,cl 
09A5    01 D8                     add         ax,bx 
09A7    8B 9A 00 00               mov         bx,word ptr _VGA[bp+si] 
09AB    B1 03                     mov         cl,0x03 
09AD    01 D8                     add         ax,bx 
09AF    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
09B2    D3 FB                     sar         bx,cl 
09B4    8E 9A 02 00               mov         ds,word ptr _VGA+0x2[bp+si] 
09B8    01 C3                     add         bx,ax 
09BA    F6 46 FC 07               test        byte ptr -0x4[bp],0x07 
09BE    74 62                     je          L$76 
09C0    8B 4E FC                  mov         cx,word ptr -0x4[bp] 
09C3    B8 FF 00                  mov         ax,0x00ff 
09C6    80 E1 07                  and         cl,0x07 
09C9    D3 F8                     sar         ax,cl 
09CB    85 F6                     test        si,si 
09CD    74 14                     je          L$73 
09CF    B1 03                     mov         cl,0x03 
09D1                          L$72:
09D1    4A                        dec         dx 
09D2    83 FA FF                  cmp         dx,0xffff 
09D5    74 24                     je          L$75 
09D7    08 07                     or          byte ptr [bx],al 
09D9    8B BA 00 00               mov         di,word ptr __RES_X[bp+si] 
09DD    D3 EF                     shr         di,cl 
09DF    01 FB                     add         bx,di 
09E1    EB EE                     jmp         L$72 
09E3                          L$73:
09E3    B1 03                     mov         cl,0x03 
09E5                          L$74:
09E5    4A                        dec         dx 
09E6    83 FA FF                  cmp         dx,0xffff 
09E9    74 10                     je          L$75 
09EB    88 C4                     mov         ah,al 
09ED    F6 D4                     not         ah 
09EF    20 27                     and         byte ptr [bx],ah 
09F1    8B BA 00 00               mov         di,word ptr __RES_X[bp+si] 
09F5    D3 EF                     shr         di,cl 
09F7    01 FB                     add         bx,di 
09F9    EB EA                     jmp         L$74 
09FB                          L$75:
09FB    B1 06                     mov         cl,0x06 
09FD    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
0A00    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
0A03    D3 E0                     shl         ax,cl 
0A05    B1 04                     mov         cl,0x04 
0A07    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
0A0A    D3 E2                     shl         dx,cl 
0A0C    B1 03                     mov         cl,0x03 
0A0E    01 D0                     add         ax,dx 
0A10    8B 92 00 00               mov         dx,word ptr _VGA[bp+si] 
0A14    D3 FB                     sar         bx,cl 
0A16    01 C2                     add         dx,ax 
0A18    8E 9A 02 00               mov         ds,word ptr _VGA+0x2[bp+si] 
0A1C    01 D3                     add         bx,dx 
0A1E    8B 56 F6                  mov         dx,word ptr -0xa[bp] 
0A21    43                        inc         bx 
0A22                          L$76:
0A22    85 F6                     test        si,si 
0A24    74 04                     je          L$77 
0A26    B4 FF                     mov         ah,0xff 
0A28    EB 02                     jmp         L$78 
0A2A                          L$77:
0A2A    30 E4                     xor         ah,ah 
0A2C                          L$78:
0A2C    88 E0                     mov         al,ah 
0A2E    1E                        push        ds 
0A2F    07                        pop         es 
0A30                          L$79:
0A30    4A                        dec         dx 
0A31    83 FA FF                  cmp         dx,0xffff 
0A34    74 15                     je          L$80 
0A36    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
0A39    89 DF                     mov         di,bx 
0A3B    57                        push        di 
0A3C    F3 AA                     rep stosb   
0A3E    5F                        pop         di 
0A3F    B1 03                     mov         cl,0x03 
0A41    8B BA 00 00               mov         di,word ptr __RES_X[bp+si] 
0A45    D3 EF                     shr         di,cl 
0A47    01 FB                     add         bx,di 
0A49    EB E5                     jmp         L$79 
0A4B                          L$80:
0A4B    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
0A4E    03 46 F8                  add         ax,word ptr -0x8[bp] 
0A51    A8 07                     test        al,0x07 
0A53    74 63                     je          L$84 
0A55    89 C1                     mov         cx,ax 
0A57    BA FF 00                  mov         dx,0x00ff 
0A5A    80 E1 07                  and         cl,0x07 
0A5D    89 C7                     mov         di,ax 
0A5F    D3 FA                     sar         dx,cl 
0A61    B1 03                     mov         cl,0x03 
0A63    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
0A66    D3 EF                     shr         di,cl 
0A68    B1 06                     mov         cl,0x06 
0A6A    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
0A6D    D3 E3                     shl         bx,cl 
0A6F    B1 04                     mov         cl,0x04 
0A71    D3 E0                     shl         ax,cl 
0A73    01 C3                     add         bx,ax 
0A75    36 A1 00 00               mov         ax,word ptr ss:_VGA 
0A79    F7 D2                     not         dx 
0A7B    01 D8                     add         ax,bx 
0A7D    8E 82 02 00               mov         es,word ptr _VGA+0x2[bp+si] 
0A81    01 C7                     add         di,ax 
0A83    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
0A86    85 F6                     test        si,si 
0A88    74 15                     je          L$82 
0A8A    B1 03                     mov         cl,0x03 
0A8C                          L$81:
0A8C    48                        dec         ax 
0A8D    3D FF FF                  cmp         ax,0xffff 
0A90    74 26                     je          L$84 
0A92    26 08 15                  or          byte ptr es:[di],dl 
0A95    8B 9A 00 00               mov         bx,word ptr __RES_X[bp+si] 
0A99    D3 EB                     shr         bx,cl 
0A9B    01 DF                     add         di,bx 
0A9D    EB ED                     jmp         L$81 
0A9F                          L$82:
0A9F    B1 03                     mov         cl,0x03 
0AA1                          L$83:
0AA1    48                        dec         ax 
0AA2    3D FF FF                  cmp         ax,0xffff 
0AA5    74 11                     je          L$84 
0AA7    88 D6                     mov         dh,dl 
0AA9    F6 D6                     not         dh 
0AAB    26 20 35                  and         byte ptr es:[di],dh 
0AAE    8B 9A 00 00               mov         bx,word ptr __RES_X[bp+si] 
0AB2    D3 EB                     shr         bx,cl 
0AB4    01 DF                     add         di,bx 
0AB6    EB E9                     jmp         L$83 
0AB8                          L$84:
0AB8    5E                        pop         si 
0AB9    E9 B3 FE                  jmp         L$71 

Routine Size: 328 bytes,    Routine Base: ibmpc_TEXT + 0974

0ABC                          draw_rectangle_ega4_:
0ABC    57                        push        di 
0ABD    55                        push        bp 
0ABE    89 E5                     mov         bp,sp 
0AC0    50                        push        ax 
0AC1    50                        push        ax 
0AC2    50                        push        ax 
0AC3    53                        push        bx 
0AC4    51                        push        cx 
0AC5    52                        push        dx 
0AC6    56                        push        si 
0AC7    01 C8                     add         ax,cx 
0AC9    89 C3                     mov         bx,ax 
0ACB    30 E7                     xor         bh,ah 
0ACD    80 E3 07                  and         bl,0x07 
0AD0    29 D8                     sub         ax,bx 
0AD2    B1 03                     mov         cl,0x03 
0AD4    2B 46 FA                  sub         ax,word ptr -0x6[bp] 
0AD7    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
0ADA    D3 E8                     shr         ax,cl 
0ADC    B1 06                     mov         cl,0x06 
0ADE    89 46 FE                  mov         word ptr -0x2[bp],ax 
0AE1    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0AE4    D3 E3                     shl         bx,cl 
0AE6    B1 04                     mov         cl,0x04 
0AE8    D3 E0                     shl         ax,cl 
0AEA    36 8B 3E 02 00            mov         di,word ptr ss:_VGA+0x2 
0AEF    01 D8                     add         ax,bx 
0AF1    36 8B 1E 00 00            mov         bx,word ptr ss:_VGA 
0AF6    B1 03                     mov         cl,0x03 
0AF8    01 D8                     add         ax,bx 
0AFA    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
0AFD    89 D6                     mov         si,dx 
0AFF    D3 FB                     sar         bx,cl 
0B01    89 7E FC                  mov         word ptr -0x4[bp],di 
0B04    01 C3                     add         bx,ax 
0B06    36 83 3E 00 00 00         cmp         word ptr ss:_ega4_lastoperation,0x0000 
0B0C    74 1B                     je          L$85 
0B0E    B8 05 00                  mov         ax,0x0005 
0B11    BA CE 03                  mov         dx,0x03ce 
0B14    EE                        out         dx,al 
0B15    B8 02 00                  mov         ax,0x0002 
0B18    BA CF 03                  mov         dx,0x03cf 
0B1B    EE                        out         dx,al 
0B1C    B8 08 00                  mov         ax,0x0008 
0B1F    BA CE 03                  mov         dx,0x03ce 
0B22    EE                        out         dx,al 
0B23    31 C0                     xor         ax,ax 
0B25    36 A3 00 00               mov         word ptr ss:_ega4_lastoperation,ax 
0B29                          L$85:
0B29    F6 46 FA 07               test        byte ptr -0x6[bp],0x07 
0B2D    74 5E                     je          L$88 
0B2F    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
0B32    B8 FF 00                  mov         ax,0x00ff 
0B35    80 E1 07                  and         cl,0x07 
0B38    D3 F8                     sar         ax,cl 
0B3A    BA CF 03                  mov         dx,0x03cf 
0B3D    30 E4                     xor         ah,ah 
0B3F    B1 03                     mov         cl,0x03 
0B41    EE                        out         dx,al 
0B42                          L$86:
0B42    4E                        dec         si 
0B43    83 FE FF                  cmp         si,0xffff 
0B46    74 17                     je          L$87 
0B48    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
0B4B    8A 07                     mov         al,byte ptr [bx] 
0B4D    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
0B50    8A 46 F2                  mov         al,byte ptr -0xe[bp] 
0B53    88 07                     mov         byte ptr [bx],al 
0B55    36 A1 00 00               mov         ax,word ptr ss:__RES_X 
0B59    D3 E8                     shr         ax,cl 
0B5B    01 C3                     add         bx,ax 
0B5D    EB E3                     jmp         L$86 
0B5F                          L$87:
0B5F    B1 06                     mov         cl,0x06 
0B61    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
0B64    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0B67    D3 E3                     shl         bx,cl 
0B69    B1 04                     mov         cl,0x04 
0B6B    D3 E0                     shl         ax,cl 
0B6D    36 8B 0E 00 00            mov         cx,word ptr ss:_VGA 
0B72    01 D8                     add         ax,bx 
0B74    8B 76 FA                  mov         si,word ptr -0x6[bp] 
0B77    01 C8                     add         ax,cx 
0B79    B1 03                     mov         cl,0x03 
0B7B    D3 FE                     sar         si,cl 
0B7D    36 8B 1E 02 00            mov         bx,word ptr ss:_VGA+0x2 
0B82    01 F0                     add         ax,si 
0B84    89 5E FC                  mov         word ptr -0x4[bp],bx 
0B87    89 C3                     mov         bx,ax 
0B89    8B 76 F4                  mov         si,word ptr -0xc[bp] 
0B8C    43                        inc         bx 
0B8D                          L$88:
0B8D    B8 FF 00                  mov         ax,0x00ff 
0B90    BA CF 03                  mov         dx,0x03cf 
0B93    EE                        out         dx,al 
0B94    8E 46 FC                  mov         es,word ptr -0x4[bp] 
0B97                          L$89:
0B97    4E                        dec         si 
0B98    83 FE FF                  cmp         si,0xffff 
0B9B    74 18                     je          L$90 
0B9D    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
0BA0    8A 46 F2                  mov         al,byte ptr -0xe[bp] 
0BA3    89 DF                     mov         di,bx 
0BA5    57                        push        di 
0BA6    F3 AA                     rep stosb   
0BA8    5F                        pop         di 
0BA9    B1 03                     mov         cl,0x03 
0BAB    36 A1 00 00               mov         ax,word ptr ss:__RES_X 
0BAF    D3 E8                     shr         ax,cl 
0BB1    01 C3                     add         bx,ax 
0BB3    EB E2                     jmp         L$89 
0BB5                          L$90:
0BB5    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
0BB8    03 5E F6                  add         bx,word ptr -0xa[bp] 
0BBB    F6 C3 07                  test        bl,0x07 
0BBE    75 03                     jne         L$92 
0BC0                          L$91:
0BC0    E9 AC FD                  jmp         L$71 
0BC3                          L$92:
0BC3    89 D9                     mov         cx,bx 
0BC5    B8 FF 00                  mov         ax,0x00ff 
0BC8    80 E1 07                  and         cl,0x07 
0BCB    D3 F8                     sar         ax,cl 
0BCD    F7 D0                     not         ax 
0BCF    BA CF 03                  mov         dx,0x03cf 
0BD2    30 E4                     xor         ah,ah 
0BD4    B1 03                     mov         cl,0x03 
0BD6    EE                        out         dx,al 
0BD7    D3 EB                     shr         bx,cl 
0BD9    B1 06                     mov         cl,0x06 
0BDB    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0BDE    8B 76 F8                  mov         si,word ptr -0x8[bp] 
0BE1    D3 E0                     shl         ax,cl 
0BE3    B1 04                     mov         cl,0x04 
0BE5    D3 E6                     shl         si,cl 
0BE7    89 F1                     mov         cx,si 
0BE9    36 8B 3E 00 00            mov         di,word ptr ss:_VGA 
0BEE    01 C1                     add         cx,ax 
0BF0    36 8B 36 02 00            mov         si,word ptr ss:_VGA+0x2 
0BF5    01 CF                     add         di,cx 
0BF7    B1 03                     mov         cl,0x03 
0BF9    01 DF                     add         di,bx 
0BFB    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
0BFE                          L$93:
0BFE    4B                        dec         bx 
0BFF    83 FB FF                  cmp         bx,0xffff 
0C02    74 BC                     je          L$91 
0C04    8E DE                     mov         ds,si 
0C06    8A 05                     mov         al,byte ptr [di] 
0C08    8E DE                     mov         ds,si 
0C0A    8A 46 F2                  mov         al,byte ptr -0xe[bp] 
0C0D    88 05                     mov         byte ptr [di],al 
0C0F    36 A1 00 00               mov         ax,word ptr ss:__RES_X 
0C13    D3 E8                     shr         ax,cl 
0C15    01 C7                     add         di,ax 
0C17    EB E5                     jmp         L$93 

Routine Size: 349 bytes,    Routine Base: ibmpc_TEXT + 0ABC

0C19                          draw_rectangle_px_:
0C19    57                        push        di 
0C1A    55                        push        bp 
0C1B    89 E5                     mov         bp,sp 
0C1D    83 EC 08                  sub         sp,0x0008 
0C20    50                        push        ax 
0C21    56                        push        si 
0C22    89 D6                     mov         si,dx 
0C24    89 4E FE                  mov         word ptr -0x2[bp],cx 
0C27    01 DE                     add         si,bx 
0C29    83 C3 FF                  add         bx,0xffff 
0C2C    89 D7                     mov         di,dx 
0C2E    89 5E FC                  mov         word ptr -0x4[bp],bx 
0C31                          L$94:
0C31    4E                        dec         si 
0C32    4F                        dec         di 
0C33    3B 76 FC                  cmp         si,word ptr -0x4[bp] 
0C36    74 88                     je          L$91 
0C38    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
0C3B    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0C3E    89 76 F8                  mov         word ptr -0x8[bp],si 
0C41    83 C3 FF                  add         bx,0xffff 
0C44    03 4E F6                  add         cx,word ptr -0xa[bp] 
0C47    89 5E FA                  mov         word ptr -0x6[bp],bx 
0C4A                          L$95:
0C4A    49                        dec         cx 
0C4B    3B 4E FA                  cmp         cx,word ptr -0x6[bp] 
0C4E    74 E1                     je          L$94 
0C50    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
0C53    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
0C56    89 C8                     mov         ax,cx 
0C58    0E                        push        cs 
0C59    E8 00 00                  call        put_pixel_ 
0C5C    EB EC                     jmp         L$95 
0C5E                          draw_rectangle_draw_window_check_:
0C5E    56                        push        si 
0C5F    57                        push        di 
0C60    55                        push        bp 
0C61    89 E5                     mov         bp,sp 
0C63    50                        push        ax 
0C64    89 C6                     mov         si,ax 
0C66    8E DA                     mov         ds,dx 
0C68    89 4E FE                  mov         word ptr -0x2[bp],cx 
0C6B    8B 4E 08                  mov         cx,word ptr 0x8[bp] 
0C6E    36 A1 02 00               mov         ax,word ptr ss:_draw_window_box+0x2 
0C72    36 8B 3E 00 00            mov         di,word ptr ss:_draw_window_box 
0C77    85 C0                     test        ax,ax 
0C79    75 09                     jne         L$96 
0C7B    85 FF                     test        di,di 
0C7D    75 05                     jne         L$96 
0C7F    31 C0                     xor         ax,ax 
0C81    E9 9F FB                  jmp         L$59 
0C84                          L$96:
0C84    8E C0                     mov         es,ax 
0C86    26 8B 45 04               mov         ax,word ptr es:0x4[di] 
0C8A    48                        dec         ax 
0C8B    3B 04                     cmp         ax,word ptr [si] 
0C8D    7E 16                     jle         L$97 
0C8F    89 CF                     mov         di,cx 
0C91    2B 04                     sub         ax,word ptr [si] 
0C93    8E 46 0A                  mov         es,word ptr 0xa[bp] 
0C96    26 29 05                  sub         word ptr es:[di],ax 
0C99    36 C4 3E 00 00            les         di,dword ptr ss:_draw_window_box 
0C9E    26 8B 45 04               mov         ax,word ptr es:0x4[di] 
0CA2    48                        dec         ax 
0CA3    89 04                     mov         word ptr [si],ax 
0CA5                          L$97:
0CA5    36 C4 3E 00 00            les         di,dword ptr ss:_draw_window_box 
0CAA    26 8B 45 06               mov         ax,word ptr es:0x6[di] 
0CAE    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0CB1    48                        dec         ax 
0CB2    26 3B 07                  cmp         ax,word ptr es:[bx] 
0CB5    7E 1C                     jle         L$98 
0CB7    8B 7E 0C                  mov         di,word ptr 0xc[bp] 
0CBA    26 2B 07                  sub         ax,word ptr es:[bx] 
0CBD    8E 46 0E                  mov         es,word ptr 0xe[bp] 
0CC0    26 29 05                  sub         word ptr es:[di],ax 
0CC3    36 C4 3E 00 00            les         di,dword ptr ss:_draw_window_box 
0CC8    26 8B 45 06               mov         ax,word ptr es:0x6[di] 
0CCC    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0CCF    48                        dec         ax 
0CD0    26 89 07                  mov         word ptr es:[bx],ax 
0CD3                          L$98:
0CD3    36 C4 3E 00 00            les         di,dword ptr ss:_draw_window_box 
0CD8    26 8B 55 04               mov         dx,word ptr es:0x4[di] 
0CDC    8B 04                     mov         ax,word ptr [si] 
0CDE    26 03 55 12               add         dx,word ptr es:0x12[di] 
0CE2    8E 46 0A                  mov         es,word ptr 0xa[bp] 
0CE5    89 CF                     mov         di,cx 
0CE7    42                        inc         dx 
0CE8    26 03 05                  add         ax,word ptr es:[di] 
0CEB    39 D0                     cmp         ax,dx 
0CED    7E 0A                     jle         L$99 
0CEF    8B 04                     mov         ax,word ptr [si] 
0CF1    06                        push        es 
0CF2    1F                        pop         ds 
0CF3    89 CE                     mov         si,cx 
0CF5    29 C2                     sub         dx,ax 
0CF7    89 14                     mov         word ptr [si],dx 
0CF9                          L$99:
0CF9    8E 5E 0A                  mov         ds,word ptr 0xa[bp] 
0CFC    89 CE                     mov         si,cx 
0CFE    83 3C 00                  cmp         word ptr [si],0x0000 
0D01    7F 06                     jg          L$101 
0D03                          L$100:
0D03    B8 FF FF                  mov         ax,0xffff 
0D06    E9 1A FB                  jmp         L$59 
0D09                          L$101:
0D09    36 C5 36 00 00            lds         si,dword ptr ss:_draw_window_box 
0D0E    36 8A 16 00 00            mov         dl,byte ptr ss:__FONT_HEIGHT 
0D13    8B 44 06                  mov         ax,word ptr 0x6[si] 
0D16    30 F6                     xor         dh,dh 
0D18    03 44 14                  add         ax,word ptr 0x14[si] 
0D1B    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0D1E    05 03 00                  add         ax,0x0003 
0D21    8B 76 0C                  mov         si,word ptr 0xc[bp] 
0D24    01 C2                     add         dx,ax 
0D26    8B 07                     mov         ax,word ptr [bx] 
0D28    8E 5E 0E                  mov         ds,word ptr 0xe[bp] 
0D2B    03 04                     add         ax,word ptr [si] 
0D2D    39 D0                     cmp         ax,dx 
0D2F    7E 0E                     jle         L$102 
0D31    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0D34    8B 07                     mov         ax,word ptr [bx] 
0D36    8E 5E 0E                  mov         ds,word ptr 0xe[bp] 
0D39    89 F3                     mov         bx,si 
0D3B    29 C2                     sub         dx,ax 
0D3D    89 17                     mov         word ptr [bx],dx 
0D3F                          L$102:
0D3F    C5 5E 0C                  lds         bx,dword ptr 0xc[bp] 
0D42    83 3F 00                  cmp         word ptr [bx],0x0000 
0D45    7E BC                     jle         L$100 
0D47    B8 01 00                  mov         ax,0x0001 
0D4A    E9 D6 FA                  jmp         L$59 
0D4D                          screen_find_visibility_block_:
0D4D    56                        push        si 
0D4E    57                        push        di 
0D4F    55                        push        bp 
0D50    89 E5                     mov         bp,sp 
0D52    50                        push        ax 
0D53    52                        push        dx 
0D54    53                        push        bx 
0D55    51                        push        cx 
0D56    BF 10 00                  mov         di,0x0010 
0D59    31 F6                     xor         si,si 
0D5B                          L$103:
0D5B    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
0D5E    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
0D61    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0D64    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
0D67    01 F3                     add         bx,si 
0D69    9A 00 00 00 00            call        windowpos_visible_ 
0D6E    84 C0                     test        al,al 
0D70    74 15                     je          L$104 
0D72    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
0D75    01 FE                     add         si,di 
0D77    8B 46 08                  mov         ax,word ptr 0x8[bp] 
0D7A    01 F3                     add         bx,si 
0D7C    39 C3                     cmp         bx,ax 
0D7E    76 DB                     jbe         L$103 
0D80    89 C6                     mov         si,ax 
0D82    2B 76 F8                  sub         si,word ptr -0x8[bp] 
0D85    EB 29                     jmp         L$107 
0D87                          L$104:
0D87    D1 EF                     shr         di,0x01 
0D89    85 FF                     test        di,di 
0D8B    74 23                     je          L$107 
0D8D    85 F6                     test        si,si 
0D8F    74 1F                     je          L$107 
0D91                          L$105:
0D91    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
0D94    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
0D97    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0D9A    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
0D9D    01 F3                     add         bx,si 
0D9F    9A 00 00 00 00            call        windowpos_visible_ 
0DA4    84 C0                     test        al,al 
0DA6    75 04                     jne         L$106 
0DA8    29 FE                     sub         si,di 
0DAA    EB E5                     jmp         L$105 
0DAC                          L$106:
0DAC    D1 EF                     shr         di,0x01 
0DAE    EB AB                     jmp         L$103 
0DB0                          L$107:
0DB0    89 F0                     mov         ax,si 
0DB2    89 EC                     mov         sp,bp 
0DB4    5D                        pop         bp 
0DB5    5F                        pop         di 
0DB6    5E                        pop         si 
0DB7    C2 02 00                  ret         0x0002 
0DBA                          screen_find_visibility_:
0DBA    56                        push        si 
0DBB    57                        push        di 
0DBC    55                        push        bp 
0DBD    89 E5                     mov         bp,sp 
0DBF    50                        push        ax 
0DC0    52                        push        dx 
0DC1    53                        push        bx 
0DC2    51                        push        cx 
0DC3    BF 10 00                  mov         di,0x0010 
0DC6    31 F6                     xor         si,si 
0DC8                          L$108:
0DC8    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
0DCB    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
0DCE    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0DD1    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
0DD4    01 F3                     add         bx,si 
0DD6    9A 00 00 00 00            call        windowpos_visible_ 
0DDB    84 C0                     test        al,al 
0DDD    75 15                     jne         L$109 
0DDF    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
0DE2    01 FE                     add         si,di 
0DE4    8B 46 08                  mov         ax,word ptr 0x8[bp] 
0DE7    01 F3                     add         bx,si 
0DE9    39 C3                     cmp         bx,ax 
0DEB    76 DB                     jbe         L$108 
0DED    89 C6                     mov         si,ax 
0DEF    2B 76 F8                  sub         si,word ptr -0x8[bp] 
0DF2    EB BC                     jmp         L$107 
0DF4                          L$109:
0DF4    D1 EF                     shr         di,0x01 
0DF6    85 FF                     test        di,di 
0DF8    74 B6                     je          L$107 
0DFA    85 F6                     test        si,si 
0DFC    74 B2                     je          L$107 
0DFE                          L$110:
0DFE    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
0E01    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
0E04    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0E07    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
0E0A    01 F3                     add         bx,si 
0E0C    9A 00 00 00 00            call        windowpos_visible_ 
0E11    84 C0                     test        al,al 
0E13    74 04                     je          L$111 
0E15    29 FE                     sub         si,di 
0E17    EB E5                     jmp         L$110 
0E19                          L$111:
0E19    D1 EF                     shr         di,0x01 
0E1B    EB AB                     jmp         L$108 

Routine Size: 516 bytes,    Routine Base: ibmpc_TEXT + 0C19

0E1D                          draw_rectangle_:
0E1D    56                        push        si 
0E1E    57                        push        di 
0E1F    55                        push        bp 
0E20    89 E5                     mov         bp,sp 
0E22    83 EC 06                  sub         sp,0x0006 
0E25    50                        push        ax 
0E26    52                        push        dx 
0E27    53                        push        bx 
0E28    51                        push        cx 
0E29    36 80 3E 00 00 00         cmp         byte ptr ss:_tty,0x00 
0E2F    74 03                     je          L$113 
0E31                          L$112:
0E31    E9 FD F7                  jmp         L$38 
0E34                          L$113:
0E34    8D 56 F2                  lea         dx,-0xe[bp] 
0E37    8D 5E F6                  lea         bx,-0xa[bp] 
0E3A    16                        push        ss 
0E3B    8D 46 F8                  lea         ax,-0x8[bp] 
0E3E    52                        push        dx 
0E3F    8D 56 F4                  lea         dx,-0xc[bp] 
0E42    16                        push        ss 
0E43    8C D1                     mov         cx,ss 
0E45    52                        push        dx 
0E46    8C D2                     mov         dx,ss 
0E48    E8 00 00                  call        draw_rectangle_safetycheck_ 
0E4B    83 7E F4 08               cmp         word ptr -0xc[bp],0x0008 
0E4F    73 15                     jae         L$115 
0E51                          L$114:
0E51    8B 76 0A                  mov         si,word ptr 0xa[bp] 
0E54    8B 56 F2                  mov         dx,word ptr -0xe[bp] 
0E57    8B 4E F4                  mov         cx,word ptr -0xc[bp] 
0E5A    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0E5D    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0E60    0E                        push        cs 
0E61    E8 00 00                  call        draw_rectangle_px_ 
0E64    EB CB                     jmp         L$112 
0E66                          L$115:
0E66    8D 56 F2                  lea         dx,-0xe[bp] 
0E69    8D 5E F6                  lea         bx,-0xa[bp] 
0E6C    16                        push        ss 
0E6D    8D 46 F8                  lea         ax,-0x8[bp] 
0E70    52                        push        dx 
0E71    8D 56 F4                  lea         dx,-0xc[bp] 
0E74    16                        push        ss 
0E75    8C D1                     mov         cx,ss 
0E77    52                        push        dx 
0E78    8C D2                     mov         dx,ss 
0E7A    E8 00 00                  call        draw_rectangle_draw_window_check_ 
0E7D    3D FF FF                  cmp         ax,0xffff 
0E80    74 AF                     je          L$112 
0E82    3D 01 00                  cmp         ax,0x0001 
0E85    75 09                     jne         L$116 
0E87    83 7E F4 08               cmp         word ptr -0xc[bp],0x0008 
0E8B    72 C4                     jb          L$114 
0E8D    E9 F8 00                  jmp         L$130 
0E90                          L$116:
0E90    36 80 3E 00 00 00         cmp         byte ptr ss:_screen_redraw,0x00 
0E96    74 03                     je          L$118 
0E98                          L$117:
0E98    E9 ED 00                  jmp         L$130 
0E9B                          L$118:
0E9B    36 A1 02 00               mov         ax,word ptr ss:_running_window+0x2 
0E9F    36 8B 1E 00 00            mov         bx,word ptr ss:_running_window 
0EA4    85 C0                     test        ax,ax 
0EA6    75 04                     jne         L$119 
0EA8    85 DB                     test        bx,bx 
0EAA    74 EC                     je          L$117 
0EAC                          L$119:
0EAC    36 8B 3E 00 00            mov         di,word ptr ss:_active_window 
0EB1    D1 E7                     shl         di,0x01 
0EB3    36 8B 16 00 00            mov         dx,word ptr ss:_windows 
0EB8    D1 E7                     shl         di,0x01 
0EBA    36 8E 1E 02 00            mov         ds,word ptr ss:_windows+0x2 
0EBF    01 D7                     add         di,dx 
0EC1    8B 55 02                  mov         dx,word ptr 0x2[di] 
0EC4    8B 0D                     mov         cx,word ptr [di] 
0EC6    39 C2                     cmp         dx,ax 
0EC8    75 04                     jne         L$120 
0ECA    39 D9                     cmp         cx,bx 
0ECC    74 CA                     je          L$117 
0ECE                          L$120:
0ECE    3D FF FF                  cmp         ax,0xffff 
0ED1    75 05                     jne         L$121 
0ED3    83 FB FF                  cmp         bx,0xffff 
0ED6    74 20                     je          L$124 
0ED8                          L$121:
0ED8    8E C0                     mov         es,ax 
0EDA    26 8A 47 16               mov         al,byte ptr es:0x16[bx] 
0EDE    A8 08                     test        al,0x08 
0EE0    74 03                     je          L$123 
0EE2                          L$122:
0EE2    E9 4C F7                  jmp         L$38 
0EE5                          L$123:
0EE5    A8 20                     test        al,0x20 
0EE7    75 F9                     jne         L$122 
0EE9    89 CB                     mov         bx,cx 
0EEB    8E DA                     mov         ds,dx 
0EED    8A 47 16                  mov         al,byte ptr 0x16[bx] 
0EF0    A8 40                     test        al,0x40 
0EF2    75 EE                     jne         L$122 
0EF4    A8 04                     test        al,0x04 
0EF6    75 EA                     jne         L$122 
0EF8                          L$124:
0EF8    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0EFB    03 46 F4                  add         ax,word ptr -0xc[bp] 
0EFE    89 46 FC                  mov         word ptr -0x4[bp],ax 
0F01                          L$125:
0F01    FF 4E F2                  dec         word ptr -0xe[bp] 
0F04    83 7E F2 FF               cmp         word ptr -0xe[bp],0xffff 
0F08    74 D8                     je          L$122 
0F0A    8B 7E F8                  mov         di,word ptr -0x8[bp] 
0F0D                          L$126:
0F0D    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
0F10    39 C7                     cmp         di,ax 
0F12    73 6E                     jae         L$129 
0F14    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0F17    36 8B 16 02 00            mov         dx,word ptr ss:_running_window+0x2 
0F1C    50                        push        ax 
0F1D    89 F9                     mov         cx,di 
0F1F    36 A1 00 00               mov         ax,word ptr ss:_running_window 
0F23    E8 00 00                  call        screen_find_visibility_block_ 
0F26    89 46 FE                  mov         word ptr -0x2[bp],ax 
0F29    89 46 FA                  mov         word ptr -0x6[bp],ax 
0F2C    3D 08 00                  cmp         ax,0x0008 
0F2F    72 25                     jb          L$127 
0F31    B9 01 00                  mov         cx,0x0001 
0F34    8B 56 F6                  mov         dx,word ptr -0xa[bp] 
0F37    89 C3                     mov         bx,ax 
0F39    89 F8                     mov         ax,di 
0F3B    8B 76 0A                  mov         si,word ptr 0xa[bp] 
0F3E    0E                        push        cs 
0F3F    E8 00 00                  call        hide_mouse_if_in_box_ 
0F42    BA 01 00                  mov         dx,0x0001 
0F45    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
0F48    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0F4B    16                        push        ss 
0F4C    07                        pop         es 
0F4D    89 F8                     mov         ax,di 
0F4F    26 FF 1E 00 00            call        dword ptr es:_draw_rectangle_screen 
0F54    EB 11                     jmp         L$128 
0F56                          L$127:
0F56    8B 76 0A                  mov         si,word ptr 0xa[bp] 
0F59    BA 01 00                  mov         dx,0x0001 
0F5C    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0F5F    89 C1                     mov         cx,ax 
0F61    89 F8                     mov         ax,di 
0F63    0E                        push        cs 
0F64    E8 00 00                  call        draw_rectangle_px_ 
0F67                          L$128:
0F67    FF 76 FC                  push        word ptr -0x4[bp] 
0F6A    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0F6D    36 A1 00 00               mov         ax,word ptr ss:_running_window 
0F71    03 7E FA                  add         di,word ptr -0x6[bp] 
0F74    36 8B 16 02 00            mov         dx,word ptr ss:_running_window+0x2 
0F79    89 F9                     mov         cx,di 
0F7B    E8 00 00                  call        screen_find_visibility_ 
0F7E    01 C7                     add         di,ax 
0F80    EB 8B                     jmp         L$126 
0F82                          L$129:
0F82    FF 46 F6                  inc         word ptr -0xa[bp] 
0F85    E9 79 FF                  jmp         L$125 
0F88                          L$130:
0F88    8B 4E F2                  mov         cx,word ptr -0xe[bp] 
0F8B    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
0F8E    8B 56 F6                  mov         dx,word ptr -0xa[bp] 
0F91    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0F94    8B 76 0A                  mov         si,word ptr 0xa[bp] 
0F97    0E                        push        cs 
0F98    E8 00 00                  call        hide_mouse_if_in_box_ 
0F9B    8B 56 F2                  mov         dx,word ptr -0xe[bp] 
0F9E    8B 4E F4                  mov         cx,word ptr -0xc[bp] 
0FA1    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0FA4    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0FA7    16                        push        ss 
0FA8    07                        pop         es 
0FA9    26 FF 1E 00 00            call        dword ptr es:_draw_rectangle_screen 
0FAE    E9 80 F6                  jmp         L$38 

Routine Size: 404 bytes,    Routine Base: ibmpc_TEXT + 0E1D

0FB1                          fill_screen_ega4_:
0FB1    53                        push        bx 
0FB2    51                        push        cx 
0FB3    52                        push        dx 
0FB4    57                        push        di 
0FB5    89 C3                     mov         bx,ax 
0FB7    B1 03                     mov         cl,0x03 
0FB9    36 A1 00 00               mov         ax,word ptr ss:__RES_X 
0FBD    D3 E8                     shr         ax,cl 
0FBF    36 F7 26 00 00            mul         word ptr ss:__RES_Y 
0FC4    BA CE 03                  mov         dx,0x03ce 
0FC7    89 C1                     mov         cx,ax 
0FC9    B8 05 00                  mov         ax,0x0005 
0FCC    EE                        out         dx,al 
0FCD    B8 02 00                  mov         ax,0x0002 
0FD0    BA CF 03                  mov         dx,0x03cf 
0FD3    EE                        out         dx,al 
0FD4    B8 08 00                  mov         ax,0x0008 
0FD7    BA CE 03                  mov         dx,0x03ce 
0FDA    EE                        out         dx,al 
0FDB    B8 FF 00                  mov         ax,0x00ff 
0FDE    BA CF 03                  mov         dx,0x03cf 
0FE1    41                        inc         cx 
0FE2    EE                        out         dx,al 
0FE3    36 8B 3E 00 00            mov         di,word ptr ss:_VGA 
0FE8    88 D8                     mov         al,bl 
0FEA    36 8E 06 02 00            mov         es,word ptr ss:_VGA+0x2 
0FEF    57                        push        di 
0FF0    F3 AA                     rep stosb   
0FF2    5F                        pop         di 
0FF3                          L$131:
0FF3    5F                        pop         di 
0FF4                          L$132:
0FF4    5A                        pop         dx 
0FF5    59                        pop         cx 
0FF6    5B                        pop         bx 
0FF7    CB                        retf        

Routine Size: 71 bytes,    Routine Base: ibmpc_TEXT + 0FB1

0FF8                          fill_screen_ega2_:
0FF8    51                        push        cx 
0FF9    52                        push        dx 
0FFA    57                        push        di 
0FFB    55                        push        bp 
0FFC    31 ED                     xor         bp,bp 
0FFE    89 C7                     mov         di,ax 
1000    B1 03                     mov         cl,0x03 
1002    36 A1 00 00               mov         ax,word ptr ss:__RES_X 
1006    D3 E8                     shr         ax,cl 
1008    F7 A6 00 00               mul         word ptr __RES_Y[bp] 
100C    89 C1                     mov         cx,ax 
100E    41                        inc         cx 
100F    85 FF                     test        di,di 
1011    74 0C                     je          L$133 
1013    B0 FF                     mov         al,0xff 
1015    C4 BE 00 00               les         di,dword ptr _VGA[bp] 
1019    57                        push        di 
101A    F3 AA                     rep stosb   
101C    5F                        pop         di 
101D    EB 0E                     jmp         L$134 
101F                          L$133:
101F    8B BE 00 00               mov         di,word ptr _VGA[bp] 
1023    30 C0                     xor         al,al 
1025    8E 86 02 00               mov         es,word ptr _VGA+0x2[bp] 
1029    57                        push        di 
102A    F3 AA                     rep stosb   
102C    5F                        pop         di 
102D                          L$134:
102D    5D                        pop         bp 
102E    5F                        pop         di 
102F    5A                        pop         dx 
1030    59                        pop         cx 
1031    CB                        retf        

Routine Size: 58 bytes,    Routine Base: ibmpc_TEXT + 0FF8

1032                          fill_screen_cga_:
1032    53                        push        bx 
1033    51                        push        cx 
1034    52                        push        dx 
1035    57                        push        di 
1036    89 C3                     mov         bx,ax 
1038    B1 03                     mov         cl,0x03 
103A    36 A1 00 00               mov         ax,word ptr ss:__RES_X 
103E    D3 E8                     shr         ax,cl 
1040    36 F7 26 00 00            mul         word ptr ss:__RES_Y 
1045    36 C4 3E 00 00            les         di,dword ptr ss:_VGA 
104A    89 C1                     mov         cx,ax 
104C    88 D8                     mov         al,bl 
104E    57                        push        di 
104F    F3 AA                     rep stosb   
1051    5F                        pop         di 
1052    EB 9F                     jmp         L$131 

Routine Size: 34 bytes,    Routine Base: ibmpc_TEXT + 1032

1054                          fill_screen_px_:
1054    53                        push        bx 
1055    51                        push        cx 
1056    52                        push        dx 
1057    56                        push        si 
1058    57                        push        di 
1059    89 C7                     mov         di,ax 
105B    36 8B 0E 00 00            mov         cx,word ptr ss:__RES_Y 
1060                          L$135:
1060    49                        dec         cx 
1061    83 F9 FF                  cmp         cx,0xffff 
1064    74 17                     je          L$137 
1066    36 8B 36 00 00            mov         si,word ptr ss:__RES_X 
106B                          L$136:
106B    4E                        dec         si 
106C    83 FE FF                  cmp         si,0xffff 
106F    74 EF                     je          L$135 
1071    89 FB                     mov         bx,di 
1073    89 CA                     mov         dx,cx 
1075    89 F0                     mov         ax,si 
1077    0E                        push        cs 
1078    E8 00 00                  call        put_pixel_ 
107B    EB EE                     jmp         L$136 
107D                          L$137:
107D    5F                        pop         di 
107E    5E                        pop         si 
107F    E9 72 FF                  jmp         L$132 

Routine Size: 46 bytes,    Routine Base: ibmpc_TEXT + 1054

1082                          draw_line_:
1082    56                        push        si 
1083    57                        push        di 
1084    55                        push        bp 
1085    89 E5                     mov         bp,sp 
1087    83 EC 10                  sub         sp,0x0010 
108A    89 C6                     mov         si,ax 
108C    89 D7                     mov         di,dx 
108E    29 C3                     sub         bx,ax 
1090    29 D1                     sub         cx,dx 
1092    89 5E FC                  mov         word ptr -0x4[bp],bx 
1095    89 4E FA                  mov         word ptr -0x6[bp],cx 
1098    31 C9                     xor         cx,cx 
109A    36 80 3E 00 00 00         cmp         byte ptr ss:_tty,0x00 
10A0    74 03                     je          L$139 
10A2                          L$138:
10A2    E9 8C F5                  jmp         L$38 
10A5                          L$139:
10A5    89 D8                     mov         ax,bx 
10A7    99                        cwd         
10A8    33 C2                     xor         ax,dx 
10AA    2B C2                     sub         ax,dx 
10AC    89 46 FE                  mov         word ptr -0x2[bp],ax 
10AF    89 46 F2                  mov         word ptr -0xe[bp],ax 
10B2    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
10B5    99                        cwd         
10B6    33 C2                     xor         ax,dx 
10B8    2B C2                     sub         ax,dx 
10BA    89 46 F8                  mov         word ptr -0x8[bp],ax 
10BD    89 C3                     mov         bx,ax 
10BF    89 46 F0                  mov         word ptr -0x10[bp],ax 
10C2    8A 5E 0A                  mov         bl,byte ptr 0xa[bp] 
10C5    89 FA                     mov         dx,di 
10C7    30 E7                     xor         bh,ah 
10C9    89 F0                     mov         ax,si 
10CB    0E                        push        cs 
10CC    E8 00 00                  call        put_pixel_ 
10CF    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
10D2    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
10D5    39 C3                     cmp         bx,ax 
10D7    76 3A                     jbe         L$146 
10D9    89 5E F4                  mov         word ptr -0xc[bp],bx 
10DC                          L$140:
10DC    FF 4E F4                  dec         word ptr -0xc[bp] 
10DF    83 7E F4 FF               cmp         word ptr -0xc[bp],0xffff 
10E3    74 BD                     je          L$138 
10E5    3B 4E F2                  cmp         cx,word ptr -0xe[bp] 
10E8    72 0D                     jb          L$143 
10EA    83 7E FA 00               cmp         word ptr -0x6[bp],0x0000 
10EE    7E 03                     jle         L$141 
10F0    47                        inc         di 
10F1    EB 01                     jmp         L$142 
10F3                          L$141:
10F3    4F                        dec         di 
10F4                          L$142:
10F4    2B 4E F2                  sub         cx,word ptr -0xe[bp] 
10F7                          L$143:
10F7    83 7E FC 00               cmp         word ptr -0x4[bp],0x0000 
10FB    7E 03                     jle         L$144 
10FD    46                        inc         si 
10FE    EB 01                     jmp         L$145 
1100                          L$144:
1100    4E                        dec         si 
1101                          L$145:
1101    8A 5E 0A                  mov         bl,byte ptr 0xa[bp] 
1104    89 FA                     mov         dx,di 
1106    89 F0                     mov         ax,si 
1108    30 FF                     xor         bh,bh 
110A    03 4E F0                  add         cx,word ptr -0x10[bp] 
110D    0E                        push        cs 
110E    E8 00 00                  call        put_pixel_ 
1111    EB C9                     jmp         L$140 
1113                          L$146:
1113    73 3A                     jae         L$153 
1115    89 46 F6                  mov         word ptr -0xa[bp],ax 
1118                          L$147:
1118    FF 4E F6                  dec         word ptr -0xa[bp] 
111B    83 7E F6 FF               cmp         word ptr -0xa[bp],0xffff 
111F    74 81                     je          L$138 
1121    3B 4E F0                  cmp         cx,word ptr -0x10[bp] 
1124    72 0D                     jb          L$150 
1126    83 7E FC 00               cmp         word ptr -0x4[bp],0x0000 
112A    7E 03                     jle         L$148 
112C    46                        inc         si 
112D    EB 01                     jmp         L$149 
112F                          L$148:
112F    4E                        dec         si 
1130                          L$149:
1130    2B 4E F0                  sub         cx,word ptr -0x10[bp] 
1133                          L$150:
1133    83 7E FA 00               cmp         word ptr -0x6[bp],0x0000 
1137    7E 03                     jle         L$151 
1139    47                        inc         di 
113A    EB 01                     jmp         L$152 
113C                          L$151:
113C    4F                        dec         di 
113D                          L$152:
113D    8A 5E 0A                  mov         bl,byte ptr 0xa[bp] 
1140    89 FA                     mov         dx,di 
1142    89 F0                     mov         ax,si 
1144    30 FF                     xor         bh,bh 
1146    03 4E F2                  add         cx,word ptr -0xe[bp] 
1149    0E                        push        cs 
114A    E8 00 00                  call        put_pixel_ 
114D    EB C9                     jmp         L$147 
114F                          L$153:
114F    89 D9                     mov         cx,bx 
1151                          L$154:
1151    49                        dec         cx 
1152    83 F9 FF                  cmp         cx,0xffff 
1155    75 03                     jne         L$155 
1157    E9 D7 F4                  jmp         L$38 
115A                          L$155:
115A    83 7E FC 00               cmp         word ptr -0x4[bp],0x0000 
115E    7E 03                     jle         L$156 
1160    46                        inc         si 
1161    EB 01                     jmp         L$157 
1163                          L$156:
1163    4E                        dec         si 
1164                          L$157:
1164    83 7E FA 00               cmp         word ptr -0x6[bp],0x0000 
1168    7E 03                     jle         L$158 
116A    47                        inc         di 
116B    EB 01                     jmp         L$159 
116D                          L$158:
116D    4F                        dec         di 
116E                          L$159:
116E    8A 5E 0A                  mov         bl,byte ptr 0xa[bp] 
1171    89 FA                     mov         dx,di 
1173    89 F0                     mov         ax,si 
1175    30 FF                     xor         bh,bh 
1177    0E                        push        cs 
1178    E8 00 00                  call        put_pixel_ 
117B    EB D4                     jmp         L$154 

Routine Size: 251 bytes,    Routine Base: ibmpc_TEXT + 1082

117D                          video_mode_:
117D    53                        push        bx 
117E    52                        push        dx 
117F    55                        push        bp 
1180    31 ED                     xor         bp,bp 
1182    88 C2                     mov         dl,al 
1184    30 E4                     xor         ah,ah 
1186    B4 00                     mov         ah,0x00 
1188    CD 10                     int         0x10 
118A    83 BE 00 00 00            cmp         word ptr _videodriver[bp],0x0000 
118F    7C 50                     jl          L$160 
1191    36 A1 00 00               mov         ax,word ptr ss:_put_pixel_screen 
1195    8B 9E 02 00               mov         bx,word ptr _put_pixel_screen+0x2[bp] 
1199    36 A3 00 00               mov         word ptr ss:_old_put_pixel,ax 
119D    89 9E 02 00               mov         word ptr _old_put_pixel+0x2[bp],bx 
11A1    36 A1 00 00               mov         ax,word ptr ss:_get_pixel_screen 
11A5    8B 9E 02 00               mov         bx,word ptr _get_pixel_screen+0x2[bp] 
11A9    36 A3 00 00               mov         word ptr ss:_old_get_pixel,ax 
11AD    89 9E 02 00               mov         word ptr _old_get_pixel+0x2[bp],bx 
11B1    36 A1 00 00               mov         ax,word ptr ss:_draw_rectangle_screen 
11B5    8B 9E 02 00               mov         bx,word ptr _draw_rectangle_screen+0x2[bp] 
11B9    36 A3 00 00               mov         word ptr ss:_old_draw_rectangle,ax 
11BD    36 A1 00 00               mov         ax,word ptr ss:_fill_screen_color 
11C1    89 9E 02 00               mov         word ptr _old_draw_rectangle+0x2[bp],bx 
11C5    36 A3 00 00               mov         word ptr ss:_old_fill_screen,ax 
11C9    36 A1 00 00               mov         ax,word ptr ss:__RES_X 
11CD    8B 9E 02 00               mov         bx,word ptr _fill_screen_color+0x2[bp] 
11D1    36 A3 00 00               mov         word ptr ss:_old_xres,ax 
11D5    36 A1 00 00               mov         ax,word ptr ss:__RES_Y 
11D9    89 9E 02 00               mov         word ptr _old_fill_screen+0x2[bp],bx 
11DD    36 A3 00 00               mov         word ptr ss:_old_yres,ax 
11E1                          L$160:
11E1    C7 86 00 00 80 02         mov         word ptr __RES_X[bp],0x0280 
11E7    C7 86 00 00 C8 00         mov         word ptr __RES_Y[bp],0x00c8 
11ED    C6 86 00 00 19            mov         byte ptr _VPUCON_LINES[bp],0x19 
11F2    C7 86 02 00 00 A0         mov         word ptr _VGA+0x2[bp],0xa000 
11F8    31 C0                     xor         ax,ax 
11FA    88 96 00 00               mov         byte ptr __VIDEO_MODE[bp],dl 
11FE    36 A3 00 00               mov         word ptr ss:_VGA,ax 
1202    80 FA 0F                  cmp         dl,0x0f 
1205    72 12                     jb          L$161 
1207    80 FA 10                  cmp         dl,0x10 
120A    76 4E                     jbe         L$163 
120C    80 FA 13                  cmp         dl,0x13 
120F    74 10                     je          L$162 
1211    80 FA 12                  cmp         dl,0x12 
1214    76 46                     jbe         L$164 
1216    E9 9B 00                  jmp         L$168 
1219                          L$161:
1219    80 FA 06                  cmp         dl,0x06 
121C    74 40                     je          L$165 
121E    E9 93 00                  jmp         L$168 
1221                          L$162:
1221    C7 86 00 00 40 01         mov         word ptr __RES_X[bp],0x0140 
1227    C7 86 00 00 00 00         mov         word ptr _put_pixel_screen[bp],offset put_pixel_13h_ 
122D    C7 86 02 00 00 00         mov         word ptr _put_pixel_screen+0x2[bp],seg put_pixel_13h_ 
1233    C7 86 00 00 00 00         mov         word ptr _get_pixel_screen[bp],offset get_pixel_13h_ 
1239    C7 86 02 00 00 00         mov         word ptr _get_pixel_screen+0x2[bp],seg get_pixel_13h_ 
123F    C7 86 00 00 00 00         mov         word ptr _draw_rectangle_screen[bp],offset draw_rectangle_px_ 
1245    C7 86 02 00 00 00         mov         word ptr _draw_rectangle_screen+0x2[bp],seg draw_rectangle_px_ 
124B    C7 86 00 00 00 00         mov         word ptr _fill_screen_color[bp],offset fill_screen_px_ 
1251    C7 86 02 00 00 00         mov         word ptr _fill_screen_color+0x2[bp],seg fill_screen_px_ 
1257    E9 BC 00                  jmp         L$170 
125A                          L$163:
125A    EB 40                     jmp         L$166 
125C                          L$164:
125C    EB 4B                     jmp         L$167 
125E                          L$165:
125E    C7 86 02 00 00 B8         mov         word ptr _VGA+0x2[bp],0xb800 
1264    C7 86 00 00 00 00         mov         word ptr _put_pixel_screen[bp],offset put_pixel_cga_ 
126A    C7 86 02 00 00 00         mov         word ptr _put_pixel_screen+0x2[bp],seg put_pixel_cga_ 
1270    C7 86 00 00 00 00         mov         word ptr _get_pixel_screen[bp],offset get_pixel_cga_ 
1276    C7 86 02 00 00 00         mov         word ptr _get_pixel_screen+0x2[bp],seg get_pixel_cga_ 
127C    C7 86 00 00 00 00         mov         word ptr _draw_rectangle_screen[bp],offset draw_rectangle_cga_ 
1282    C7 86 02 00 00 00         mov         word ptr _draw_rectangle_screen+0x2[bp],seg draw_rectangle_cga_ 
1288    C7 86 00 00 00 00         mov         word ptr _fill_screen_color[bp],offset fill_screen_cga_ 
128E    C7 86 02 00 00 00         mov         word ptr _fill_screen_color+0x2[bp],seg fill_screen_cga_ 
1294    C6 86 00 00 0F            mov         byte ptr _VPUCON_LINES[bp],0x0f 
1299    E9 7A 00                  jmp         L$170 
129C                          L$166:
129C    C7 86 00 00 5E 01         mov         word ptr __RES_Y[bp],0x015e 
12A2    80 FA 0F                  cmp         dl,0x0f 
12A5    74 0D                     je          L$168 
12A7    EB 3D                     jmp         L$169 
12A9                          L$167:
12A9    C7 86 00 00 E0 01         mov         word ptr __RES_Y[bp],0x01e0 
12AF    80 FA 11                  cmp         dl,0x11 
12B2    75 32                     jne         L$169 
12B4                          L$168:
12B4    C7 86 00 00 00 00         mov         word ptr _put_pixel_screen[bp],offset put_pixel_ega2_ 
12BA    C7 86 02 00 00 00         mov         word ptr _put_pixel_screen+0x2[bp],seg put_pixel_ega2_ 
12C0    C7 86 00 00 00 00         mov         word ptr _get_pixel_screen[bp],offset get_pixel_ega2_ 
12C6    C7 86 02 00 00 00         mov         word ptr _get_pixel_screen+0x2[bp],seg get_pixel_ega2_ 
12CC    C7 86 00 00 00 00         mov         word ptr _draw_rectangle_screen[bp],offset draw_rectangle_ega2_ 
12D2    C7 86 02 00 00 00         mov         word ptr _draw_rectangle_screen+0x2[bp],seg draw_rectangle_ega2_ 
12D8    C7 86 00 00 00 00         mov         word ptr _fill_screen_color[bp],offset fill_screen_ega2_ 
12DE    C7 86 02 00 00 00         mov         word ptr _fill_screen_color+0x2[bp],seg fill_screen_ega2_ 
12E4    EB 30                     jmp         L$170 
12E6                          L$169:
12E6    C7 86 00 00 00 00         mov         word ptr _put_pixel_screen[bp],offset put_pixel_ega4_ 
12EC    C7 86 02 00 00 00         mov         word ptr _put_pixel_screen+0x2[bp],seg put_pixel_ega4_ 
12F2    C7 86 00 00 00 00         mov         word ptr _get_pixel_screen[bp],offset get_pixel_ega4_ 
12F8    C7 86 02 00 00 00         mov         word ptr _get_pixel_screen+0x2[bp],seg get_pixel_ega4_ 
12FE    C7 86 00 00 00 00         mov         word ptr _draw_rectangle_screen[bp],offset draw_rectangle_ega4_ 
1304    C7 86 02 00 00 00         mov         word ptr _draw_rectangle_screen+0x2[bp],seg draw_rectangle_ega4_ 
130A    C7 86 00 00 00 00         mov         word ptr _fill_screen_color[bp],offset fill_screen_ega4_ 
1310    C7 86 02 00 00 00         mov         word ptr _fill_screen_color+0x2[bp],seg fill_screen_ega4_ 
1316                          L$170:
1316    5D                        pop         bp 
1317    5A                        pop         dx 
1318    5B                        pop         bx 
1319    CB                        retf        

Routine Size: 413 bytes,    Routine Base: ibmpc_TEXT + 117D

131A                          restore_videomode_:
131A    52                        push        dx 
131B    55                        push        bp 
131C    31 ED                     xor         bp,bp 
131E    80 BE 00 00 00            cmp         byte ptr _tty[bp],0x00 
1323    75 1D                     jne         L$172 
1325    83 BE 00 00 00            cmp         word ptr _videodriver[bp],0x0000 
132A    7C 19                     jl          L$173 
132C    36 A1 02 00               mov         ax,word ptr ss:_driver_videomode+0x2 
1330    8B 96 00 00               mov         dx,word ptr _driver_videomode[bp] 
1334    85 C0                     test        ax,ax 
1336    75 04                     jne         L$171 
1338    85 D2                     test        dx,dx 
133A    74 0B                     je          L$174 
133C                          L$171:
133C    FF 9E 00 00               call        dword ptr _driver_videomode[bp] 
1340    EB 0F                     jmp         L$175 
1342                          L$172:
1342    5D                        pop         bp 
1343    5A                        pop         dx 
1344    CB                        retf        
1345                          L$173:
1345    EB 64                     jmp         L$176 
1347                          L$174:
1347    36 A0 00 00               mov         al,byte ptr ss:_video 
134B    30 E4                     xor         ah,ah 
134D    B4 00                     mov         ah,0x00 
134F    CD 10                     int         0x10 
1351                          L$175:
1351    36 A0 00 00               mov         al,byte ptr ss:_video 
1355    36 A2 00 00               mov         byte ptr ss:__VIDEO_MODE,al 
1359    36 A1 00 00               mov         ax,word ptr ss:_old_put_pixel 
135D    8B 96 02 00               mov         dx,word ptr _old_put_pixel+0x2[bp] 
1361    36 A3 00 00               mov         word ptr ss:_put_pixel_screen,ax 
1365    89 96 02 00               mov         word ptr _put_pixel_screen+0x2[bp],dx 
1369    36 A1 00 00               mov         ax,word ptr ss:_old_get_pixel 
136D    8B 96 02 00               mov         dx,word ptr _old_get_pixel+0x2[bp] 
1371    36 A3 00 00               mov         word ptr ss:_get_pixel_screen,ax 
1375    89 96 02 00               mov         word ptr _get_pixel_screen+0x2[bp],dx 
1379    36 A1 00 00               mov         ax,word ptr ss:_old_draw_rectangle 
137D    8B 96 02 00               mov         dx,word ptr _old_draw_rectangle+0x2[bp] 
1381    36 A3 00 00               mov         word ptr ss:_draw_rectangle_screen,ax 
1385    36 A1 00 00               mov         ax,word ptr ss:_old_xres 
1389    89 96 02 00               mov         word ptr _draw_rectangle_screen+0x2[bp],dx 
138D    36 A3 00 00               mov         word ptr ss:__RES_X,ax 
1391    36 A1 00 00               mov         ax,word ptr ss:_old_yres 
1395    8B 96 02 00               mov         dx,word ptr _old_fill_screen+0x2[bp] 
1399    36 A3 00 00               mov         word ptr ss:__RES_Y,ax 
139D    36 A1 00 00               mov         ax,word ptr ss:_old_fill_screen 
13A1    89 96 02 00               mov         word ptr _fill_screen_color+0x2[bp],dx 
13A5    36 A3 00 00               mov         word ptr ss:_fill_screen_color,ax 
13A9    EB 0A                     jmp         L$177 
13AB                          L$176:
13AB    36 A0 00 00               mov         al,byte ptr ss:_video 
13AF    30 E4                     xor         ah,ah 
13B1    0E                        push        cs 
13B2    E8 00 00                  call        video_mode_ 
13B5                          L$177:
13B5    C7 86 00 00 FF FF         mov         word ptr _ega4_lastoperation[bp],0xffff 
13BB    5D                        pop         bp 
13BC    5A                        pop         dx 
13BD    CB                        retf        

Routine Size: 164 bytes,    Routine Base: ibmpc_TEXT + 131A

13BE                          draw_borders_:
13BE    56                        push        si 
13BF    57                        push        di 
13C0    55                        push        bp 
13C1    89 E5                     mov         bp,sp 
13C3    83 EC 0E                  sub         sp,0x000e 
13C6    89 C6                     mov         si,ax 
13C8    89 56 F8                  mov         word ptr -0x8[bp],dx 
13CB    89 4E F6                  mov         word ptr -0xa[bp],cx 
13CE    8A 66 0A                  mov         ah,byte ptr 0xa[bp] 
13D1    36 A0 00 00               mov         al,byte ptr ss:__BORDERCOLOR_SHADOW 
13D5    88 46 FE                  mov         byte ptr -0x2[bp],al 
13D8    88 46 FA                  mov         byte ptr -0x6[bp],al 
13DB    88 46 FC                  mov         byte ptr -0x4[bp],al 
13DE    80 FC 02                  cmp         ah,0x02 
13E1    72 0C                     jb          L$178 
13E3    76 2E                     jbe         L$181 
13E5    80 FC 04                  cmp         ah,0x04 
13E8    74 38                     je          L$182 
13EA    80 FC 03                  cmp         ah,0x03 
13ED    EB 40                     jmp         L$183 
13EF                          L$178:
13EF    80 FC 01                  cmp         ah,0x01 
13F2    74 18                     je          L$180 
13F4    84 E4                     test        ah,ah 
13F6    75 37                     jne         L$183 
13F8    36 A0 00 00               mov         al,byte ptr ss:__BORDERCOLOR_LIGHT 
13FC    88 46 FA                  mov         byte ptr -0x6[bp],al 
13FF    36 8A 26 00 00            mov         ah,byte ptr ss:__BORDERCOLOR_SHADOW 
1404                          L$179:
1404    88 66 FC                  mov         byte ptr -0x4[bp],ah 
1407    88 66 FE                  mov         byte ptr -0x2[bp],ah 
140A    EB 23                     jmp         L$183 
140C                          L$180:
140C    36 8A 26 00 00            mov         ah,byte ptr ss:__BORDERCOLOR_LIGHT 
1411    EB F1                     jmp         L$179 
1413                          L$181:
1413    36 A0 00 00               mov         al,byte ptr ss:__BORDERCOLOR_LIGHT 
1417    88 46 FA                  mov         byte ptr -0x6[bp],al 
141A    88 46 FC                  mov         byte ptr -0x4[bp],al 
141D    88 46 FE                  mov         byte ptr -0x2[bp],al 
1420    EB 0D                     jmp         L$183 
1422                          L$182:
1422    36 A0 00 00               mov         al,byte ptr ss:__DESKTOP_BGCOLOR 
1426    88 46 FA                  mov         byte ptr -0x6[bp],al 
1429    88 46 FC                  mov         byte ptr -0x4[bp],al 
142C    88 46 FE                  mov         byte ptr -0x2[bp],al 
142F                          L$183:
142F    30 E4                     xor         ah,ah 
1431    89 F7                     mov         di,si 
1433    50                        push        ax 
1434    4E                        dec         si 
1435    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
1438    01 DF                     add         di,bx 
143A    48                        dec         ax 
143B    89 FB                     mov         bx,di 
143D    89 46 F2                  mov         word ptr -0xe[bp],ax 
1440    89 C1                     mov         cx,ax 
1442    89 C2                     mov         dx,ax 
1444    89 F0                     mov         ax,si 
1446    0E                        push        cs 
1447    E8 00 00                  call        draw_line_ 
144A    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
144D    30 E4                     xor         ah,ah 
144F    50                        push        ax 
1450    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
1453    8B 56 F2                  mov         dx,word ptr -0xe[bp] 
1456    03 46 F6                  add         ax,word ptr -0xa[bp] 
1459    89 F3                     mov         bx,si 
145B    89 46 F4                  mov         word ptr -0xc[bp],ax 
145E    89 C1                     mov         cx,ax 
1460    89 F0                     mov         ax,si 
1462    0E                        push        cs 
1463    E8 00 00                  call        draw_line_ 
1466    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
1469    8B 4E F4                  mov         cx,word ptr -0xc[bp] 
146C    8B 56 F2                  mov         dx,word ptr -0xe[bp] 
146F    30 E4                     xor         ah,ah 
1471    89 FB                     mov         bx,di 
1473    50                        push        ax 
1474    89 F8                     mov         ax,di 
1476    0E                        push        cs 
1477    E8 00 00                  call        draw_line_ 
147A    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
147D    8B 4E F4                  mov         cx,word ptr -0xc[bp] 
1480    89 FB                     mov         bx,di 
1482    30 E4                     xor         ah,ah 
1484    89 CA                     mov         dx,cx 
1486    50                        push        ax 
1487    89 F0                     mov         ax,si 
1489    0E                        push        cs 
148A    E8 00 00                  call        draw_line_ 
148D    E9 A1 F1                  jmp         L$38 

Routine Size: 210 bytes,    Routine Base: ibmpc_TEXT + 13BE

1490                          draw_circle_:
1490    56                        push        si 
1491    57                        push        di 
1492    55                        push        bp 
1493    89 E5                     mov         bp,sp 
1495    83 EC 16                  sub         sp,0x0016 
1498    C7 46 F0 00 00            mov         word ptr -0x10[bp],0x0000 
149D    BF 03 00                  mov         di,0x0003 
14A0    C7 46 EC 00 00            mov         word ptr -0x14[bp],0x0000 
14A5    89 5E F4                  mov         word ptr -0xc[bp],bx 
14A8    89 DE                     mov         si,bx 
14AA    89 5E EA                  mov         word ptr -0x16[bp],bx 
14AD    D1 E6                     shl         si,0x01 
14AF    F7 5E EA                  neg         word ptr -0x16[bp] 
14B2    29 F7                     sub         di,si 
14B4    8B 76 EA                  mov         si,word ptr -0x16[bp] 
14B7    89 56 FC                  mov         word ptr -0x4[bp],dx 
14BA    01 C6                     add         si,ax 
14BC    89 46 F2                  mov         word ptr -0xe[bp],ax 
14BF    89 76 F8                  mov         word ptr -0x8[bp],si 
14C2    89 DE                     mov         si,bx 
14C4    89 46 EE                  mov         word ptr -0x12[bp],ax 
14C7    01 C6                     add         si,ax 
14C9    89 7E FE                  mov         word ptr -0x2[bp],di 
14CC    89 76 FA                  mov         word ptr -0x6[bp],si 
14CF    8B 76 EA                  mov         si,word ptr -0x16[bp] 
14D2    89 D7                     mov         di,dx 
14D4    01 D6                     add         si,dx 
14D6    01 DA                     add         dx,bx 
14D8    89 56 F6                  mov         word ptr -0xa[bp],dx 
14DB                          L$184:
14DB    8B 56 F6                  mov         dx,word ptr -0xa[bp] 
14DE    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
14E1    89 CB                     mov         bx,cx 
14E3    0E                        push        cs 
14E4    E8 00 00                  call        put_pixel_ 
14E7    8B 56 F6                  mov         dx,word ptr -0xa[bp] 
14EA    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
14ED    89 CB                     mov         bx,cx 
14EF    0E                        push        cs 
14F0    E8 00 00                  call        put_pixel_ 
14F3    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
14F6    89 CB                     mov         bx,cx 
14F8    89 F2                     mov         dx,si 
14FA    0E                        push        cs 
14FB    E8 00 00                  call        put_pixel_ 
14FE    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
1501    89 CB                     mov         bx,cx 
1503    89 F2                     mov         dx,si 
1505    83 46 EC 04               add         word ptr -0x14[bp],0x0004 
1509    0E                        push        cs 
150A    E8 00 00                  call        put_pixel_ 
150D    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
1510    89 CB                     mov         bx,cx 
1512    89 FA                     mov         dx,di 
1514    FF 46 F0                  inc         word ptr -0x10[bp] 
1517    0E                        push        cs 
1518    E8 00 00                  call        put_pixel_ 
151B    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
151E    89 CB                     mov         bx,cx 
1520    89 FA                     mov         dx,di 
1522    FF 46 EE                  inc         word ptr -0x12[bp] 
1525    0E                        push        cs 
1526    E8 00 00                  call        put_pixel_ 
1529    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
152C    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
152F    89 CB                     mov         bx,cx 
1531    FF 4E F2                  dec         word ptr -0xe[bp] 
1534    0E                        push        cs 
1535    E8 00 00                  call        put_pixel_ 
1538    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
153B    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
153E    89 CB                     mov         bx,cx 
1540    47                        inc         di 
1541    0E                        push        cs 
1542    E8 00 00                  call        put_pixel_ 
1545    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
1548    FF 4E FC                  dec         word ptr -0x4[bp] 
154B    85 C0                     test        ax,ax 
154D    7E 1F                     jle         L$185 
154F    FF 4E F4                  dec         word ptr -0xc[bp] 
1552    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
1555    2B 46 F4                  sub         ax,word ptr -0xc[bp] 
1558    D1 E0                     shl         ax,0x01 
155A    FF 46 F8                  inc         word ptr -0x8[bp] 
155D    D1 E0                     shl         ax,0x01 
155F    FF 4E FA                  dec         word ptr -0x6[bp] 
1562    03 46 FE                  add         ax,word ptr -0x2[bp] 
1565    FF 4E F6                  dec         word ptr -0xa[bp] 
1568    05 0A 00                  add         ax,0x000a 
156B    46                        inc         si 
156C    EB 06                     jmp         L$186 
156E                          L$185:
156E    03 46 EC                  add         ax,word ptr -0x14[bp] 
1571    05 06 00                  add         ax,0x0006 
1574                          L$186:
1574    89 46 FE                  mov         word ptr -0x2[bp],ax 
1577    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
157A    3B 46 F4                  cmp         ax,word ptr -0xc[bp] 
157D    77 03                     ja          L$187 
157F    E9 59 FF                  jmp         L$184 
1582                          L$187:
1582    E9 14 EE                  jmp         L$16 

Routine Size: 245 bytes,    Routine Base: ibmpc_TEXT + 1490

1585                          draw_circle_border_:
1585    56                        push        si 
1586    57                        push        di 
1587    55                        push        bp 
1588    89 E5                     mov         bp,sp 
158A    83 EC 18                  sub         sp,0x0018 
158D    89 C6                     mov         si,ax 
158F    88 C8                     mov         al,cl 
1591    43                        inc         bx 
1592    B9 03 00                  mov         cx,0x0003 
1595    89 5E FC                  mov         word ptr -0x4[bp],bx 
1598    D1 E3                     shl         bx,0x01 
159A    29 D9                     sub         cx,bx 
159C    89 4E FA                  mov         word ptr -0x6[bp],cx 
159F    36 8A 0E 00 00            mov         cl,byte ptr ss:__BORDERCOLOR_SHADOW 
15A4    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
15A9    88 CD                     mov         ch,cl 
15AB    3C 02                     cmp         al,0x02 
15AD    72 0A                     jb          L$188 
15AF    76 1E                     jbe         L$190 
15B1    3C 04                     cmp         al,0x04 
15B3    74 23                     je          L$191 
15B5    3C 03                     cmp         al,0x03 
15B7    EB 26                     jmp         L$192 
15B9                          L$188:
15B9    3C 01                     cmp         al,0x01 
15BB    74 0B                     je          L$189 
15BD    84 C0                     test        al,al 
15BF    75 1E                     jne         L$192 
15C1    36 8A 0E 00 00            mov         cl,byte ptr ss:__BORDERCOLOR_LIGHT 
15C6    EB 17                     jmp         L$192 
15C8                          L$189:
15C8    36 8A 2E 00 00            mov         ch,byte ptr ss:__BORDERCOLOR_LIGHT 
15CD    EB 10                     jmp         L$192 
15CF                          L$190:
15CF    36 8A 0E 00 00            mov         cl,byte ptr ss:__BORDERCOLOR_LIGHT 
15D4    88 CD                     mov         ch,cl 
15D6    EB 07                     jmp         L$192 
15D8                          L$191:
15D8    36 8A 0E 00 00            mov         cl,byte ptr ss:__DESKTOP_BGCOLOR 
15DD    88 CD                     mov         ch,cl 
15DF                          L$192:
15DF    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
15E2    F7 DB                     neg         bx 
15E4    89 DF                     mov         di,bx 
15E6    01 D7                     add         di,dx 
15E8    89 7E EC                  mov         word ptr -0x14[bp],di 
15EB    8B 7E FC                  mov         di,word ptr -0x4[bp] 
15EE    F7 DF                     neg         di 
15F0    89 F8                     mov         ax,di 
15F2    01 F0                     add         ax,si 
15F4    01 F3                     add         bx,si 
15F6    89 46 F0                  mov         word ptr -0x10[bp],ax 
15F9    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
15FC    89 5E F2                  mov         word ptr -0xe[bp],bx 
15FF    01 F0                     add         ax,si 
1601    01 D7                     add         di,dx 
1603    89 46 F8                  mov         word ptr -0x8[bp],ax 
1606    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
1609    89 7E EE                  mov         word ptr -0x12[bp],di 
160C    01 D0                     add         ax,dx 
160E    03 56 FC                  add         dx,word ptr -0x4[bp] 
1611    03 76 FE                  add         si,word ptr -0x2[bp] 
1614    89 56 F4                  mov         word ptr -0xc[bp],dx 
1617    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
161A    89 76 EA                  mov         word ptr -0x16[bp],si 
161D    D1 E2                     shl         dx,0x01 
161F    D1 E2                     shl         dx,0x01 
1621    89 46 F6                  mov         word ptr -0xa[bp],ax 
1624    89 56 E8                  mov         word ptr -0x18[bp],dx 
1627                          L$193:
1627    88 EA                     mov         dl,ch 
1629    30 F6                     xor         dh,dh 
162B    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
162E    89 D6                     mov         si,dx 
1630    89 D3                     mov         bx,dx 
1632    8B 56 F4                  mov         dx,word ptr -0xc[bp] 
1635    0E                        push        cs 
1636    E8 00 00                  call        put_pixel_ 
1639    8B 56 F4                  mov         dx,word ptr -0xc[bp] 
163C    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
163F    89 F3                     mov         bx,si 
1641    0E                        push        cs 
1642    E8 00 00                  call        put_pixel_ 
1645    88 CA                     mov         dl,cl 
1647    30 F6                     xor         dh,dh 
1649    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
164C    89 D7                     mov         di,dx 
164E    89 D3                     mov         bx,dx 
1650    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
1653    0E                        push        cs 
1654    E8 00 00                  call        put_pixel_ 
1657    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
165A    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
165D    89 FB                     mov         bx,di 
165F    83 46 E8 04               add         word ptr -0x18[bp],0x0004 
1663    0E                        push        cs 
1664    E8 00 00                  call        put_pixel_ 
1667    8B 56 F6                  mov         dx,word ptr -0xa[bp] 
166A    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
166D    89 F3                     mov         bx,si 
166F    FF 46 FE                  inc         word ptr -0x2[bp] 
1672    0E                        push        cs 
1673    E8 00 00                  call        put_pixel_ 
1676    8B 56 F6                  mov         dx,word ptr -0xa[bp] 
1679    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
167C    89 FB                     mov         bx,di 
167E    FF 46 EA                  inc         word ptr -0x16[bp] 
1681    0E                        push        cs 
1682    E8 00 00                  call        put_pixel_ 
1685    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
1688    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
168B    89 F3                     mov         bx,si 
168D    FF 4E F2                  dec         word ptr -0xe[bp] 
1690    0E                        push        cs 
1691    E8 00 00                  call        put_pixel_ 
1694    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
1697    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
169A    89 FB                     mov         bx,di 
169C    FF 46 F6                  inc         word ptr -0xa[bp] 
169F    0E                        push        cs 
16A0    E8 00 00                  call        put_pixel_ 
16A3    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
16A6    FF 4E EC                  dec         word ptr -0x14[bp] 
16A9    85 C0                     test        ax,ax 
16AB    7E 20                     jle         L$194 
16AD    FF 4E FC                  dec         word ptr -0x4[bp] 
16B0    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
16B3    2B 56 FC                  sub         dx,word ptr -0x4[bp] 
16B6    D1 E2                     shl         dx,0x01 
16B8    FF 46 F0                  inc         word ptr -0x10[bp] 
16BB    D1 E2                     shl         dx,0x01 
16BD    FF 4E F8                  dec         word ptr -0x8[bp] 
16C0    01 C2                     add         dx,ax 
16C2    FF 46 EE                  inc         word ptr -0x12[bp] 
16C5    83 C2 0A                  add         dx,0x000a 
16C8    FF 4E F4                  dec         word ptr -0xc[bp] 
16CB    EB 08                     jmp         L$195 
16CD                          L$194:
16CD    89 C2                     mov         dx,ax 
16CF    03 56 E8                  add         dx,word ptr -0x18[bp] 
16D2    83 C2 06                  add         dx,0x0006 
16D5                          L$195:
16D5    89 56 FA                  mov         word ptr -0x6[bp],dx 
16D8    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
16DB    3B 46 FC                  cmp         ax,word ptr -0x4[bp] 
16DE    77 03                     ja          L$196 
16E0    E9 44 FF                  jmp         L$193 
16E3                          L$196:
16E3    E9 B3 EC                  jmp         L$16 

Routine Size: 353 bytes,    Routine Base: ibmpc_TEXT + 1585

16E6                          draw_filled_circle_:
16E6    56                        push        si 
16E7    57                        push        di 
16E8    55                        push        bp 
16E9    89 E5                     mov         bp,sp 
16EB    83 EC 16                  sub         sp,0x0016 
16EE    51                        push        cx 
16EF    C7 46 F0 00 00            mov         word ptr -0x10[bp],0x0000 
16F4    BF 03 00                  mov         di,0x0003 
16F7    C7 46 EC 00 00            mov         word ptr -0x14[bp],0x0000 
16FC    89 5E F8                  mov         word ptr -0x8[bp],bx 
16FF    89 DE                     mov         si,bx 
1701    89 5E EA                  mov         word ptr -0x16[bp],bx 
1704    89 56 FA                  mov         word ptr -0x6[bp],dx 
1707    89 46 EE                  mov         word ptr -0x12[bp],ax 
170A    89 46 F4                  mov         word ptr -0xc[bp],ax 
170D    F7 5E EA                  neg         word ptr -0x16[bp] 
1710    D1 E6                     shl         si,0x01 
1712    8B 4E EA                  mov         cx,word ptr -0x16[bp] 
1715    29 F7                     sub         di,si 
1717    8B 76 EA                  mov         si,word ptr -0x16[bp] 
171A    89 7E FE                  mov         word ptr -0x2[bp],di 
171D    01 D1                     add         cx,dx 
171F    89 D7                     mov         di,dx 
1721    01 C6                     add         si,ax 
1723    89 4E FC                  mov         word ptr -0x4[bp],cx 
1726    89 76 F2                  mov         word ptr -0xe[bp],si 
1729    01 DA                     add         dx,bx 
172B    89 DE                     mov         si,bx 
172D    89 56 F6                  mov         word ptr -0xa[bp],dx 
1730    01 C6                     add         si,ax 
1732                          L$197:
1732    8A 46 E8                  mov         al,byte ptr -0x18[bp] 
1735    8B 4E F6                  mov         cx,word ptr -0xa[bp] 
1738    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
173B    83 46 EC 04               add         word ptr -0x14[bp],0x0004 
173F    30 E4                     xor         ah,ah 
1741    89 CA                     mov         dx,cx 
1743    89 46 EA                  mov         word ptr -0x16[bp],ax 
1746    50                        push        ax 
1747    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
174A    FF 46 F0                  inc         word ptr -0x10[bp] 
174D    0E                        push        cs 
174E    E8 00 00                  call        draw_line_ 
1751    FF 76 EA                  push        word ptr -0x16[bp] 
1754    8B 4E FC                  mov         cx,word ptr -0x4[bp] 
1757    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
175A    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
175D    89 CA                     mov         dx,cx 
175F    FF 4E EE                  dec         word ptr -0x12[bp] 
1762    0E                        push        cs 
1763    E8 00 00                  call        draw_line_ 
1766    FF 76 EA                  push        word ptr -0x16[bp] 
1769    8B 4E FA                  mov         cx,word ptr -0x6[bp] 
176C    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
176F    89 F3                     mov         bx,si 
1771    89 CA                     mov         dx,cx 
1773    FF 46 F4                  inc         word ptr -0xc[bp] 
1776    0E                        push        cs 
1777    E8 00 00                  call        draw_line_ 
177A    FF 76 EA                  push        word ptr -0x16[bp] 
177D    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
1780    89 F9                     mov         cx,di 
1782    89 F3                     mov         bx,si 
1784    89 FA                     mov         dx,di 
1786    FF 46 FA                  inc         word ptr -0x6[bp] 
1789    0E                        push        cs 
178A    E8 00 00                  call        draw_line_ 
178D    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
1790    4F                        dec         di 
1791    85 C0                     test        ax,ax 
1793    7E 1F                     jle         L$198 
1795    FF 4E F8                  dec         word ptr -0x8[bp] 
1798    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
179B    2B 46 F8                  sub         ax,word ptr -0x8[bp] 
179E    D1 E0                     shl         ax,0x01 
17A0    FF 46 F2                  inc         word ptr -0xe[bp] 
17A3    D1 E0                     shl         ax,0x01 
17A5    FF 46 FC                  inc         word ptr -0x4[bp] 
17A8    03 46 FE                  add         ax,word ptr -0x2[bp] 
17AB    FF 4E F6                  dec         word ptr -0xa[bp] 
17AE    05 0A 00                  add         ax,0x000a 
17B1    4E                        dec         si 
17B2    EB 06                     jmp         L$199 
17B4                          L$198:
17B4    03 46 EC                  add         ax,word ptr -0x14[bp] 
17B7    05 06 00                  add         ax,0x0006 
17BA                          L$199:
17BA    89 46 FE                  mov         word ptr -0x2[bp],ax 
17BD    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
17C0    3B 46 F8                  cmp         ax,word ptr -0x8[bp] 
17C3    77 03                     ja          L$200 
17C5    E9 6A FF                  jmp         L$197 
17C8                          L$200:
17C8    E9 CE EB                  jmp         L$16 
17CB                          end_kbd_int_:
17CB    53                        push        bx 
17CC    52                        push        dx 
17CD    BA 61 00                  mov         dx,0x0061 
17D0    EC                        in          al,dx 
17D1    88 C3                     mov         bl,al 
17D3    0C 80                     or          al,0x80 
17D5    BA 61 00                  mov         dx,0x0061 
17D8    30 E4                     xor         ah,ah 
17DA    EE                        out         dx,al 
17DB    88 D8                     mov         al,bl 
17DD    BA 61 00                  mov         dx,0x0061 
17E0    30 E4                     xor         ah,ah 
17E2    EE                        out         dx,al 
17E3    B8 20 00                  mov         ax,0x0020 
17E6    89 C2                     mov         dx,ax 
17E8    EE                        out         dx,al 
17E9    5A                        pop         dx 
17EA    5B                        pop         bx 
17EB    C3                        ret         
17EC                          keyboard_handler_:
17EC    50                        push        ax 
17ED    51                        push        cx 
17EE    52                        push        dx 
17EF    53                        push        bx 
17F0    54                        push        sp 
17F1    55                        push        bp 
17F2    56                        push        si 
17F3    57                        push        di 
17F4    1E                        push        ds 
17F5    06                        push        es 
17F6    50                        push        ax 
17F7    50                        push        ax 
17F8    89 E5                     mov         bp,sp 
17FA    FC                        cld         
17FB    BA 60 00                  mov         dx,0x0060 
17FE    EC                        in          al,dx 
17FF    88 C4                     mov         ah,al 
1801    BB 00 00                  mov         bx,DGROUP:CONST 
1804    88 C2                     mov         dl,al 
1806    8E DB                     mov         ds,bx 
1808    80 E2 7F                  and         dl,0x7f 
180B    F6 06 01 00 02            test        byte ptr _keyboard_status+0x1,0x02 
1810    75 57                     jne         L$207 
1812    A8 80                     test        al,0x80 
1814    74 31                     je          L$205 
1816    3C E0                     cmp         al,0xe0 
1818    75 07                     jne         L$201 
181A    80 0E 01 00 02            or          byte ptr _keyboard_status+0x1,0x02 
181F    EB 2D                     jmp         L$206 
1821                          L$201:
1821    80 FA 38                  cmp         dl,0x38 
1824    74 0C                     je          L$202 
1826    80 FA 2A                  cmp         dl,0x2a 
1829    74 15                     je          L$204 
182B    80 FA 1D                  cmp         dl,0x1d 
182E    74 09                     je          L$203 
1830    EB 1C                     jmp         L$206 
1832                          L$202:
1832    80 26 00 00 FE            and         byte ptr _keyboard_status,0xfe 
1837    EB 15                     jmp         L$206 
1839                          L$203:
1839    80 26 00 00 FB            and         byte ptr _keyboard_status,0xfb 
183E    EB 0E                     jmp         L$206 
1840                          L$204:
1840    80 26 00 00 FD            and         byte ptr _keyboard_status,0xfd 
1845    EB 07                     jmp         L$206 
1847                          L$205:
1847    3C E1                     cmp         al,0xe1 
1849    75 03                     jne         L$206 
184B    E9 BD E8                  jmp         L$4 
184E                          L$206:
184E    BA 00 00                  mov         dx,DGROUP:CONST 
1851    8E DA                     mov         ds,dx 
1853    F6 06 00 00 04            test        byte ptr _keyboard_status,0x04 
1858    74 12                     je          L$208 
185A    3C 3B                     cmp         al,0x3b 
185C    72 0E                     jb          L$208 
185E    3C 45                     cmp         al,0x45 
1860    73 0A                     jae         L$208 
1862    2C 3B                     sub         al,0x3b 
1864    A2 00 00                  mov         byte ptr _new_tty,al 
1867    EB 62                     jmp         L$216 
1869                          L$207:
1869    E9 8F 00                  jmp         L$221 
186C                          L$208:
186C    3C 1F                     cmp         al,0x1f 
186E    72 11                     jb          L$209 
1870    76 5F                     jbe         L$217 
1872    3C 38                     cmp         al,0x38 
1874    74 16                     je          L$210 
1876    3C 2E                     cmp         al,0x2e 
1878    74 39                     je          L$213 
187A    3C 2A                     cmp         al,0x2a 
187C    74 28                     je          L$212 
187E    E9 AD 00                  jmp         L$225 
1881                          L$209:
1881    3C 1D                     cmp         al,0x1d 
1883    74 14                     je          L$211 
1885    3C 10                     cmp         al,0x10 
1887    74 5D                     je          L$219 
1889    E9 A2 00                  jmp         L$225 
188C                          L$210:
188C    B8 00 00                  mov         ax,DGROUP:CONST 
188F    8E D8                     mov         ds,ax 
1891    80 0E 00 00 01            or          byte ptr _keyboard_status,0x01 
1896    E9 95 00                  jmp         L$225 
1899                          L$211:
1899    B8 00 00                  mov         ax,DGROUP:CONST 
189C    8E D8                     mov         ds,ax 
189E    80 0E 00 00 04            or          byte ptr _keyboard_status,0x04 
18A3    E9 88 00                  jmp         L$225 
18A6                          L$212:
18A6    B8 00 00                  mov         ax,DGROUP:CONST 
18A9    8E D8                     mov         ds,ax 
18AB    80 0E 00 00 02            or          byte ptr _keyboard_status,0x02 
18B0    E9 7B 00                  jmp         L$225 
18B3                          L$213:
18B3    B8 00 00                  mov         ax,DGROUP:CONST 
18B6    8E D8                     mov         ds,ax 
18B8    A0 00 00                  mov         al,byte ptr _keyboard_status 
18BB    A8 04                     test        al,0x04 
18BD    75 04                     jne         L$214 
18BF    A8 08                     test        al,0x08 
18C1    74 4B                     je          L$222 
18C3                          L$214:
18C3    B8 03 00                  mov         ax,0x0003 
18C6                          L$215:
18C6    9A 00 00 00 00            call        ungetch_ 
18CB                          L$216:
18CB    E8 00 00                  call        end_kbd_int_ 
18CE    E9 3A E8                  jmp         L$4 
18D1                          L$217:
18D1    B8 00 00                  mov         ax,DGROUP:CONST 
18D4    8E D8                     mov         ds,ax 
18D6    A0 00 00                  mov         al,byte ptr _keyboard_status 
18D9    A8 04                     test        al,0x04 
18DB    75 04                     jne         L$218 
18DD    A8 08                     test        al,0x08 
18DF    74 05                     je          L$219 
18E1                          L$218:
18E1    B8 13 00                  mov         ax,0x0013 
18E4    EB E0                     jmp         L$215 
18E6                          L$219:
18E6    B8 00 00                  mov         ax,DGROUP:CONST 
18E9    8E D8                     mov         ds,ax 
18EB    A0 00 00                  mov         al,byte ptr _keyboard_status 
18EE    A8 04                     test        al,0x04 
18F0    75 04                     jne         L$220 
18F2    A8 08                     test        al,0x08 
18F4    74 38                     je          L$225 
18F6                          L$220:
18F6    B8 11 00                  mov         ax,0x0011 
18F9    EB CB                     jmp         L$215 
18FB                          L$221:
18FB    80 26 01 00 FD            and         byte ptr _keyboard_status+0x1,0xfd 
1900    A8 80                     test        al,0x80 
1902    74 0C                     je          L$223 
1904    80 FA 1D                  cmp         dl,0x1d 
1907    75 25                     jne         L$225 
1909    80 26 00 00 F7            and         byte ptr _keyboard_status,0xf7 
190E                          L$222:
190E    EB 1E                     jmp         L$225 
1910                          L$223:
1910    3C 53                     cmp         al,0x53 
1912    74 0F                     je          L$224 
1914    3C 46                     cmp         al,0x46 
1916    74 AB                     je          L$214 
1918    3C 1D                     cmp         al,0x1d 
191A    75 12                     jne         L$225 
191C    80 0E 00 00 08            or          byte ptr _keyboard_status,0x08 
1921    EB 0B                     jmp         L$225 
1923                          L$224:
1923    A0 00 00                  mov         al,byte ptr _keyboard_status 
1926    A8 04                     test        al,0x04 
1928    74 04                     je          L$225 
192A    A8 01                     test        al,0x01 
192C    75 9D                     jne         L$216 
192E                          L$225:
192E    B8 00 00                  mov         ax,DGROUP:CONST 
1931    8E D8                     mov         ds,ax 
1933    A1 00 00                  mov         ax,word ptr _old_kbd_handler 
1936    8B 16 02 00               mov         dx,word ptr _old_kbd_handler+0x2 
193A    9A 00 00 00 00            call        _chain_intr_ 
193F    E9 C9 E7                  jmp         L$4 

Routine Size: 604 bytes,    Routine Base: ibmpc_TEXT + 16E6

1942                          set_keyboard_handler_:
1942    53                        push        bx 
1943    51                        push        cx 
1944    52                        push        dx 
1945    57                        push        di 
1946    B8 09 00                  mov         ax,0x0009 
1949    BB 00 00                  mov         bx,offset keyboard_handler_ 
194C    B9 00 00                  mov         cx,seg keyboard_handler_ 
194F    BF 00 00                  mov         di,offset _keyboard_status 
1952    9A 00 00 00 00            call        _dos_getvect_ 
1957    36 A3 00 00               mov         word ptr ss:_old_kbd_handler,ax 
195B    B8 09 00                  mov         ax,0x0009 
195E    36 89 16 02 00            mov         word ptr ss:_old_kbd_handler+0x2,dx 
1963    9A 00 00 00 00            call        _dos_setvect_ 
1968    B9 02 00                  mov         cx,0x0002 
196B    16                        push        ss 
196C    07                        pop         es 
196D    30 C0                     xor         al,al 
196F    57                        push        di 
1970    F3 AA                     rep stosb   
1972    5F                        pop         di 
1973    E9 7D F6                  jmp         L$131 

Routine Size: 52 bytes,    Routine Base: ibmpc_TEXT + 1942

1976                          reset_keyboard_handler_:
1976    53                        push        bx 
1977    51                        push        cx 
1978    B8 09 00                  mov         ax,0x0009 
197B    36 8B 1E 00 00            mov         bx,word ptr ss:_old_kbd_handler 
1980    36 8B 0E 02 00            mov         cx,word ptr ss:_old_kbd_handler+0x2 
1985    E9 87 E6                  jmp         L$1 

Routine Size: 18 bytes,    Routine Base: ibmpc_TEXT + 1976

No disassembly errors

Segment: CONST WORD USE16 0000010D bytes
0000                          L$226:
0000    72 65 61 64 69 6E 67 00                         reading.
0008                          L$227:
0008    77 72 69 74 69 6E 67 00                         writing.
0010                          L$228:
0010    44 4F 53 20 61 72 65 61 00                      DOS area.
0019                          L$229:
0019    46 41 54 00                                     FAT.
001D                          L$230:
001D    72 6F 6F 74 00                                  root.
0022                          L$231:
0022    66 69 6C 65 00                                  file.
0027                          L$232:
0027    57 72 69 74 65 20 70 72 6F 74 65 63 74 69 6F 6E Write protection
0037    00                                              .
0038                          L$233:
0038    55 6E 6B 6E 6F 77 6E 20 64 72 69 76 65 00       Unknown drive.
0046                          L$234:
0046    44 72 69 76 65 20 6E 6F 74 20 72 65 61 64 79 00 Drive not ready.
0056                          L$235:
0056    49 6E 76 61 6C 69 64 20 63 6F 6D 6D 61 6E 64 00 Invalid command.
0066                          L$236:
0066    44 61 74 61 00                                  Data.
006B                          L$237:
006B    49 6E 63 6F 72 72 65 63 74 20 6C 65 6E 67 74 68 Incorrect length
007B    20 6F 66 20 72 65 71 75 65 73 74 00              of request.
0087                          L$238:
0087    53 65 65 6B 00                                  Seek.
008C                          L$239:
008C    49 6E 76 61 6C 69 64 20 66 6F 72 6D 61 74 00    Invalid format.
009B                          L$240:
009B    53 65 63 74 6F 72 20 6E 6F 74 20 66 6F 75 6E 64 Sector not found
00AB    00                                              .
00AC                          L$241:
00AC    4F 75 74 20 6F 66 20 70 61 70 65 72 00          Out of paper.
00B9                          L$242:
00B9    57 72 69 74 65 00                               Write.
00BF                          L$243:
00BF    52 65 61 64 00                                  Read.
00C4                          L$244:
00C4    47 65 6E 65 72 61 6C 00                         General.
00CC                          L$245:
00CC    49 6E 61 70 70 72 6F 70 72 69 61 74 65 20 64 69 Inappropriate di
00DC    73 6B 20 63 68 61 6E 67 65 00                   sk change.
00E6                          L$246:
00E6    25 73 20 25 73 20 25 73 20 25 73 2E 00          %s %s %s %s..
00F3                          L$247:
00F3    25 73 20 25 73 20 25 73 20 25 73 20 61 74 20 64 %s %s %s %s at d
0103    65 76 69 63 65 20 25 75 2E 00                   evice %u..

Segment: CONST2 WORD USE16 00000000 bytes

Segment: _DATA WORD USE16 00000066 bytes
0000                          _error1:
0000    65 72 72 6F 72 20 77 68 69 6C 65 00             error while.
000C                          _error2:
000C    00 00 00 00                                     DD	DGROUP:L$226
0010    08 00 00 00                                     DD	DGROUP:L$227
0014                          _error3:
0014    10 00 00 00                                     DD	DGROUP:L$228
0018    19 00 00 00                                     DD	DGROUP:L$229
001C    1D 00 00 00                                     DD	DGROUP:L$230
0020    22 00 00 00                                     DD	DGROUP:L$231
0024                          _dierror:
0024    27 00 00 00                                     DD	DGROUP:L$232
0028    38 00 00 00                                     DD	DGROUP:L$233
002C    46 00 00 00                                     DD	DGROUP:L$234
0030    56 00 00 00                                     DD	DGROUP:L$235
0034    66 00 00 00                                     DD	DGROUP:L$236
0038    6B 00 00 00                                     DD	DGROUP:L$237
003C    87 00 00 00                                     DD	DGROUP:L$238
0040    8C 00 00 00                                     DD	DGROUP:L$239
0044    9B 00 00 00                                     DD	DGROUP:L$240
0048    AC 00 00 00                                     DD	DGROUP:L$241
004C    B9 00 00 00                                     DD	DGROUP:L$242
0050    BF 00 00 00                                     DD	DGROUP:L$243
0054    C4 00 00 00                                     DD	DGROUP:L$244
0058    CC 00 00 00                                     DD	DGROUP:L$245
005C                          _ega4_lastoperation:
005C    FF FF                                           ..
005E                          L$248:
005E    00 00                                           ..
0060                          L$249:
0060    00 00                                           ..
0062                          _driver_videomode:
0062    00 00 00 00                                     ....

Segment: _BSS WORD USE16 0000008B bytes
0000                          _old_kbd_handler:
0004                          _get_pixel_screen:
0008                          _put_pixel_screen:
000C                          _fill_screen_color:
0010                          _draw_rectangle_screen:
0014                          _video_memcpy:
0018                          _errormsg:
007C                          _prev_int_24:
0080                          _keyboard_status:
0082                          __VIDEO_MODE:
0083                          L$250:
0085                          L$251:
0087                          L$252:
0089                          L$253:

BSS Size: 139 bytes

